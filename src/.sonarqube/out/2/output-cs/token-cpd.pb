∞è
NE:\_Workspace\Github\Swastika-Heart\src\Swastika\Common\Helper\CommonHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{ 
public 

class 
CommonHelper 
{ 
private 
static 
readonly 
char  $
[$ %
]% &
_base62chars' 3
=4 5
$str L
. 
ToCharArray 
( 
) 
; 
private"" 
static"" 
readonly"" 
Random""  &
_random""' .
=""/ 0
new""1 4
Random""5 ;
(""; <
)""< =
;""= >
public(( 
static(( 
RSAParameters(( #
GenerateKey(($ /
(((/ 0
)((0 1
{)) 	
using** 
(** 
var** 
key** 
=** 
new**  $
RSACryptoServiceProvider**! 9
(**9 :
$num**: >
)**> ?
)**? @
{++ 
return,, 
key,, 
.,, 
ExportParameters,, +
(,,+ ,
true,,, 0
),,0 1
;,,1 2
}-- 
}.. 	
public55 
static55 
string55 
	GetBase6255 &
(55& '
int55' *
length55+ 1
)551 2
{66 	
var77 
sb77 
=77 
new77 
StringBuilder77 &
(77& '
length77' -
)77- .
;77. /
for99 
(99 
int99 
i99 
=99 
$num99 
;99 
i99 
<99 
length99  &
;99& '
i99( )
++99) +
)99+ ,
sb:: 
.:: 
Append:: 
(:: 
_base62chars:: &
[::& '
_random::' .
.::. /
Next::/ 3
(::3 4
$num::4 6
)::6 7
]::7 8
)::8 9
;::9 :
return<< 
sb<< 
.<< 
ToString<< 
(<< 
)<<  
;<<  !
}== 	
publicDD 
staticDD 
stringDD 
GetFullPathDD (
(DD( )
stringDD) /
[DD/ 0
]DD0 1
subPathsDD2 :
)DD: ;
{EE 	
stringFF 
resultFF 
=FF 
stringFF "
.FF" #
EmptyFF# (
;FF( )
stringGG 
	strFormatGG 
=GG 
stringGG %
.GG% &
EmptyGG& +
;GG+ ,
forHH 
(HH 
intHH 
iHH 
=HH 
$numHH 
;HH 
iHH 
<HH 
subPathsHH  (
.HH( )
LengthHH) /
;HH/ 0
iHH1 2
++HH2 4
)HH4 5
{II 
	strFormatKK 
+=KK 
$strKK !
+KK" #
iKK$ %
+KK& '
$strKK( +
+KK, -
(KK. /
iKK/ 0
<KK1 2
subPathsKK3 ;
.KK; <
LengthKK< B
-KKC D
$numKKE F
?KKG H
$strKKI L
:KKM N
stringKKO U
.KKU V
EmptyKKV [
)KK[ \
;KK\ ]
}LL 
returnMM 
stringMM 
.MM 
FormatMM  
(MM  !
	strFormatMM! *
,MM* +
subPathsMM, 4
)MM4 5
.MM5 6
ReplaceMM6 =
(MM= >
$strMM> B
,MMB C
$strMMD G
)MMG H
;MMH I
}NN 	
publicUU 
staticUU 
stringUU 
GetRandomNameUU *
(UU* +
stringUU+ 1
filenameUU2 :
)UU: ;
{VV 	
stringWW 
extWW 
=WW 
filenameWW !
.WW! "
SplitWW" '
(WW' (
$charWW( +
)WW+ ,
[WW, -
$numWW- .
]WW. /
;WW/ 0
returnXX 
stringXX 
.XX 
FormatXX  
(XX  !
$strXX! *
,XX* +
GuidXX, 0
.XX0 1
NewGuidXX1 8
(XX8 9
)XX9 :
.XX: ;
ToStringXX; C
(XXC D
$strXXD G
)XXG H
,XXH I
extXXJ M
)XXM N
;XXN O
}YY 	
public`` 
static`` 
async`` 
System`` "
.``" #
	Threading``# ,
.``, -
Tasks``- 2
.``2 3
Task``3 7
<``7 8
string``8 >
>``> ?
GetWebResponseAsync``@ S
(``S T
string``T Z
url``[ ^
)``^ _
{aa 	
HttpWebRequestbb 

webRequestbb %
=bb& '
(bb( )
HttpWebRequestbb) 7
)bb7 8

WebRequestbb8 B
.bbB C
CreatebbC I
(bbI J
urlbbJ M
)bbM N
;bbN O
usingcc 
(cc 
WebResponsecc 
responsecc '
=cc( )
awaitcc* /

webRequestcc0 :
.cc: ;
GetResponseAsynccc; K
(ccK L
)ccL M
.ccM N
ConfigureAwaitccN \
(cc\ ]
falsecc] b
)ccb c
)ccc d
{dd 
usingee 
(ee 
Streamee 
	resStreamee '
=ee( )
responseee* 2
.ee2 3
GetResponseStreamee3 D
(eeD E
)eeE F
)eeF G
{ff 
StreamReadergg  
readergg! '
=gg( )
newgg* -
StreamReadergg. :
(gg: ;
	resStreamgg; D
,ggD E
EncodingggF N
.ggN O
UTF8ggO S
)ggS T
;ggT U
returnhh 
readerhh !
.hh! "
	ReadToEndhh" +
(hh+ ,
)hh, -
;hh- .
}ii 
}jj 
}kk 	
publicrr 
staticrr 
Streamrr 
	LoadImagerr &
(rr& '
stringrr' -

strImage64rr. 8
)rr8 9
{ss 	
tryvv 
{ww 
stringxx 
imgDataxx 
=xx  

strImage64xx! +
.xx+ ,
	Substringxx, 5
(xx5 6

strImage64xx6 @
.xx@ A
IndexOfxxA H
(xxH I
$charxxI L
)xxL M
+xxN O
$numxxP Q
)xxQ R
;xxR S
byteyy 
[yy 
]yy 

imageBytesyy !
=yy" #
Convertyy$ +
.yy+ ,
FromBase64Stringyy, <
(yy< =
imgDatayy= D
)yyD E
;yyE F
returnzz 
newzz 
MemoryStreamzz '
(zz' (

imageByteszz( 2
,zz2 3
$numzz4 5
,zz5 6

imageByteszz7 A
.zzA B
LengthzzB H
)zzH I
;zzI J
}{{ 
catch|| 
{}} 
return~~ 
null~~ 
;~~ 
} 
}
ÄÄ 	
public
áá 
static
áá 
string
áá #
ParseJsonPropertyName
áá 2
(
áá2 3
string
áá3 9
input
áá: ?
)
áá? @
{
àà 	
if
ââ 
(
ââ 
!
ââ 
string
ââ 
.
ââ 
IsNullOrEmpty
ââ %
(
ââ% &
input
ââ& +
)
ââ+ ,
)
ââ, -
{
ää 
return
ãã 
Char
ãã 
.
ãã 
ToLower
ãã #
(
ãã# $
input
ãã$ )
[
ãã) *
$num
ãã* +
]
ãã+ ,
)
ãã, -
+
ãã. /
input
ãã0 5
.
ãã5 6
	Substring
ãã6 ?
(
ãã? @
$num
ãã@ A
)
ããA B
;
ããB C
}
åå 
else
çç 
{
éé 
return
èè 
string
èè 
.
èè 
Empty
èè #
;
èè# $
}
êê 
}
ëë 	
public
òò 
static
òò 
string
òò 
ReadFromFile
òò )
(
òò) *
string
òò* 0
filename
òò1 9
)
òò9 :
{
ôô 	
string
öö 
s
öö 
=
öö 
$str
öö 
;
öö 
try
õõ 
{
úú 

FileStream
ùù 
file
ùù 
=
ùù  !
new
ùù" %

FileStream
ùù& 0
(
ùù0 1
filename
ùù1 9
,
ùù9 :
FileMode
ùù; C
.
ùùC D
Open
ùùD H
,
ùùH I

FileAccess
ùùJ T
.
ùùT U
Read
ùùU Y
)
ùùY Z
;
ùùZ [
StreamReader
ûû 
sr
ûû 
=
ûû  !
new
ûû" %
StreamReader
ûû& 2
(
ûû2 3
file
ûû3 7
)
ûû7 8
;
ûû8 9
s
üü 
=
üü 
sr
üü 
.
üü 
	ReadToEnd
üü  
(
üü  !
)
üü! "
;
üü" #
sr
†† 
.
†† 
Dispose
†† 
(
†† 
)
†† 
;
†† 
file
°° 
.
°° 
Dispose
°° 
(
°° 
)
°° 
;
°° 
}
¢¢ 
catch
££ 
{
§§ 
s
•• 
=
•• 
$str
•• 
;
•• 
}
¶¶ 
return
ßß 
s
ßß 
;
ßß 
}
®® 	
public
ØØ 
static
ØØ 
bool
ØØ 

RemoveFile
ØØ %
(
ØØ% &
string
ØØ& ,
filePath
ØØ- 5
)
ØØ5 6
{
∞∞ 	
bool
±± 
result
±± 
=
±± 
false
±± 
;
±±  
try
≤≤ 
{
≥≥ 
if
¥¥ 
(
¥¥ 
File
¥¥ 
.
¥¥ 
Exists
¥¥ 
(
¥¥  
filePath
¥¥  (
)
¥¥( )
)
¥¥) *
{
µµ 
File
∂∂ 
.
∂∂ 
Delete
∂∂ 
(
∂∂  
filePath
∂∂  (
)
∂∂( )
;
∂∂) *
result
∑∑ 
=
∑∑ 
true
∑∑ !
;
∑∑! "
}
∏∏ 
}
ππ 
catch
∫∫ 
{
ªª 
}
ºº 
return
ΩΩ 
result
ΩΩ 
;
ΩΩ 
}
ææ 	
public
«« 
static
«« 
bool
«« 
SaveFileBase64
«« )
(
««) *
string
««* 0
folder
««1 7
,
««7 8
string
««9 ?
filename
««@ H
,
««H I
string
««J P
	strBase64
««Q Z
)
««Z [
{
»» 	
try
ÀÀ 
{
ÃÃ 
string
ÕÕ 
fullPath
ÕÕ 
=
ÕÕ  !
GetFullPath
ÕÕ" -
(
ÕÕ- .
new
ÕÕ. 1
string
ÕÕ2 8
[
ÕÕ8 9
]
ÕÕ9 :
{
ŒŒ 
folder
œœ 
,
œœ 
filename
–– 
}
—— 
)
—— 
;
—— 
string
““ 
fileData
““ 
=
““  !
	strBase64
““" +
.
““+ ,
	Substring
““, 5
(
““5 6
	strBase64
““6 ?
.
““? @
IndexOf
““@ G
(
““G H
$char
““H K
)
““K L
+
““M N
$num
““O P
)
““P Q
;
““Q R
byte
”” 
[
”” 
]
”” 
bytes
”” 
=
”” 
Convert
”” &
.
””& '
FromBase64String
””' 7
(
””7 8
fileData
””8 @
)
””@ A
;
””A B
if
’’ 
(
’’ 
!
’’ 
	Directory
’’ 
.
’’ 
Exists
’’ %
(
’’% &
folder
’’& ,
)
’’, -
)
’’- .
{
÷÷ 
	Directory
◊◊ 
.
◊◊ 
CreateDirectory
◊◊ -
(
◊◊- .
folder
◊◊. 4
)
◊◊4 5
;
◊◊5 6
}
ÿÿ 
if
⁄⁄ 
(
⁄⁄ 
File
⁄⁄ 
.
⁄⁄ 
Exists
⁄⁄ 
(
⁄⁄  
fullPath
⁄⁄  (
)
⁄⁄( )
)
⁄⁄) *
{
€€ 
File
‹‹ 
.
‹‹ 
Delete
‹‹ 
(
‹‹  
fullPath
‹‹  (
)
‹‹( )
;
‹‹) *
}
›› 

FileStream
ﬂﬂ 
fs
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ  #

FileStream
ﬂﬂ$ .
(
ﬂﬂ. /
fullPath
ﬂﬂ/ 7
,
ﬂﬂ7 8
FileMode
ﬂﬂ9 A
.
ﬂﬂA B
Create
ﬂﬂB H
)
ﬂﬂH I
;
ﬂﬂI J
BinaryWriter
‡‡ 
w
‡‡ 
=
‡‡  
new
‡‡! $
BinaryWriter
‡‡% 1
(
‡‡1 2
fs
‡‡2 4
)
‡‡4 5
;
‡‡5 6
try
·· 
{
‚‚ 
w
„„ 
.
„„ 
Write
„„ 
(
„„ 
bytes
„„ !
)
„„! "
;
„„" #
}
‰‰ 
finally
ÂÂ 
{
ÊÊ 
fs
ÁÁ 
.
ÁÁ 
Close
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
w
ËË 
.
ËË 
Close
ËË 
(
ËË 
)
ËË 
;
ËË 
}
ÈÈ 
return
ÍÍ 
true
ÍÍ 
;
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
{
ÌÌ 
return
ÓÓ 
false
ÓÓ 
;
ÓÓ 
}
ÔÔ 
}
 	
public
¯¯ 
static
¯¯ 
async
¯¯ 
System
¯¯ "
.
¯¯" #
	Threading
¯¯# ,
.
¯¯, -
Tasks
¯¯- 2
.
¯¯2 3
Task
¯¯3 7
<
¯¯7 8
string
¯¯8 >
>
¯¯> ?
UploadFileAsync
¯¯@ O
(
¯¯O P
string
¯¯P V
fullPath
¯¯W _
,
¯¯_ `
	IFormFile
¯¯a j
file
¯¯k o
)
¯¯o p
{
˘˘ 	
try
˙˙ 
{
˚˚ 
if
¸¸ 
(
¸¸ 
!
¸¸ 
	Directory
¸¸ 
.
¸¸ 
Exists
¸¸ %
(
¸¸% &
fullPath
¸¸& .
)
¸¸. /
)
¸¸/ 0
{
˝˝ 
	Directory
˛˛ 
.
˛˛ 
CreateDirectory
˛˛ -
(
˛˛- .
fullPath
˛˛. 6
)
˛˛6 7
;
˛˛7 8
}
ˇˇ 
if
ÅÅ 
(
ÅÅ 
file
ÅÅ 
!=
ÅÅ 
null
ÅÅ  
)
ÅÅ  !
{
ÇÇ 
string
ÖÖ 
fileName
ÖÖ #
=
ÖÖ$ %
string
ÖÖ& ,
.
ÖÖ, -
Format
ÖÖ- 3
(
ÖÖ3 4
$str
ÖÖ4 =
,
ÖÖ= >
Guid
ÜÜ 
.
ÜÜ 
NewGuid
ÜÜ $
(
ÜÜ$ %
)
ÜÜ% &
.
ÜÜ& '
ToString
ÜÜ' /
(
ÜÜ/ 0
$str
ÜÜ0 3
)
ÜÜ3 4
,
ÜÜ4 5
file
áá 
.
áá 
FileName
áá %
.
áá% &
Split
áá& +
(
áá+ ,
$char
áá, /
)
áá/ 0
.
áá0 1
Last
áá1 5
(
áá5 6
)
áá6 7
)
áá7 8
;
áá8 9
using
àà 
(
àà 
var
àà 

fileStream
àà )
=
àà* +
new
àà, /

FileStream
àà0 :
(
àà: ;
Path
àà; ?
.
àà? @
Combine
àà@ G
(
ààG H
fullPath
ààH P
,
ààP Q
fileName
ààR Z
)
ààZ [
,
àà[ \
FileMode
àà] e
.
ààe f
Create
ààf l
,
ààl m

FileAccess
ààn x
.
ààx y
	ReadWriteàày Ç
)ààÇ É
)ààÉ Ñ
{
ââ 
await
ää 
file
ää "
.
ää" #
CopyToAsync
ää# .
(
ää. /

fileStream
ää/ 9
)
ää9 :
.
ää: ;
ConfigureAwait
ää; I
(
ääI J
false
ääJ O
)
ääO P
;
ääP Q
return
ãã 
fileName
ãã '
;
ãã' (
}
åå 
}
çç 
else
éé 
{
èè 
return
êê 
string
êê !
.
êê! "
Empty
êê" '
;
êê' (
}
ëë 
}
íí 
catch
ìì 
{
îî 
return
ïï 
string
ïï 
.
ïï 
Empty
ïï #
;
ïï# $
}
ññ 
}
óó 	
public
ûû 
static
ûû 
void
ûû 
WriteBytesToFile
ûû +
(
ûû+ ,
string
ûû, 2
fullPath
ûû3 ;
,
ûû; <
string
ûû= C
	strBase64
ûûD M
)
ûûM N
{
üü 	
string
†† 
fileData
†† 
=
†† 
	strBase64
†† '
.
††' (
	Substring
††( 1
(
††1 2
	strBase64
††2 ;
.
††; <
IndexOf
††< C
(
††C D
$char
††D G
)
††G H
+
††I J
$num
††K L
)
††L M
;
††M N
byte
°° 
[
°° 
]
°° 
bytes
°° 
=
°° 
Convert
°° "
.
°°" #
FromBase64String
°°# 3
(
°°3 4
fileData
°°4 <
)
°°< =
;
°°= >
if
¢¢ 
(
¢¢ 
File
¢¢ 
.
¢¢ 
Exists
¢¢ 
(
¢¢ 
fullPath
¢¢ $
)
¢¢$ %
)
¢¢% &
{
££ 
File
§§ 
.
§§ 
Delete
§§ 
(
§§ 
fullPath
§§ $
)
§§$ %
;
§§% &
}
•• 

FileStream
ßß 
fs
ßß 
=
ßß 
new
ßß 

FileStream
ßß  *
(
ßß* +
fullPath
ßß+ 3
,
ßß3 4
FileMode
ßß5 =
.
ßß= >
Create
ßß> D
)
ßßD E
;
ßßE F
BinaryWriter
®® 
w
®® 
=
®® 
new
®®  
BinaryWriter
®®! -
(
®®- .
fs
®®. 0
)
®®0 1
;
®®1 2
try
©© 
{
™™ 
w
´´ 
.
´´ 
Write
´´ 
(
´´ 
bytes
´´ 
)
´´ 
;
´´ 
}
¨¨ 
finally
≠≠ 
{
ÆÆ 
fs
ØØ 
.
ØØ 
Close
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
w
∞∞ 
.
∞∞ 
Close
∞∞ 
(
∞∞ 
)
∞∞ 
;
∞∞ 
}
±± 
}
≤≤ 	
}
ŒŒ 
}œœ —;
KE:\_Workspace\Github\Swastika-Heart\src\Swastika\Common\Helper\SEOHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{		 
public 

class 
	SEOHelper 
{ 
public 
static 
string "
DeleteSpecialCharaters 3
(3 4
string4 :
str; >
)> ?
{ 	
const 
string 
replaceChar $
=% &
$str' )
;) *
string 
[ 
] 
pattern 
= 
{  
$str! $
,$ %
$str& )
,) *
$str+ /
,/ 0
$str1 4
,4 5
$str6 9
,9 :
$str; >
}? @
;@ A
foreach 
( 
string 
item  
in! #
pattern$ +
)+ ,
{ 
str 
= 
str 
. 
Replace !
(! "
item" &
,& '
replaceChar( 3
)3 4
;4 5
} 
return 
str 
; 
} 	
public&& 
static&& 
string&& 
GetSEOString&& )
(&&) *
string&&* 0
s&&1 2
)&&2 3
{'' 	
return(( 
WhiteSpaceToHyphen(( %
(((% &
ConvertToUnSign((& 5
(((5 6"
DeleteSpecialCharaters((6 L
(((L M
s((M N
)((N O
)((O P
)((P Q
;((Q R
})) 	
public44 
static44 
string44 
ConvertToUnSign44 ,
(44, -
string44- 3
text444 8
)448 9
{55 	
if66 
(66 
text66 
!=66 
null66 
)66 
{77 
for88 
(88 
int88 
i88 
=88 
$num88 
;88  
i88! "
<88# $
$num88% '
;88' (
i88) *
++88* ,
)88, -
{99 
text:: 
=:: 
text:: 
.::  
Replace::  '
(::' (
(::( )
(::) *
char::* .
)::. /
i::/ 0
)::0 1
.::1 2
ToString::2 :
(::: ;
)::; <
,::< =
$str::> @
)::@ A
;::A B
};; 
for== 
(== 
int== 
i== 
=== 
$num== 
;==  
i==! "
<==# $
$num==% '
;==' (
i==) *
++==* ,
)==, -
{>> 
text?? 
=?? 
text?? 
.??  
Replace??  '
(??' (
(??( )
(??) *
char??* .
)??. /
i??/ 0
)??0 1
.??1 2
ToString??2 :
(??: ;
)??; <
,??< =
$str??> @
)??@ A
;??A B
}@@ 
forBB 
(BB 
intBB 
iBB 
=BB 
$numBB 
;BB  
iBB! "
<BB# $
$numBB% '
;BB' (
iBB) *
++BB* ,
)BB, -
{CC 
textDD 
=DD 
textDD 
.DD  
ReplaceDD  '
(DD' (
(DD( )
(DD) *
charDD* .
)DD. /
iDD/ 0
)DD0 1
.DD1 2
ToStringDD2 :
(DD: ;
)DD; <
,DD< =
$strDD> @
)DD@ A
;DDA B
}EE 
forGG 
(GG 
intGG 
iGG 
=GG 
$numGG  
;GG  !
iGG" #
<GG$ %
$numGG& )
;GG) *
iGG+ ,
++GG, .
)GG. /
{HH 
textII 
=II 
textII 
.II  
ReplaceII  '
(II' (
(II( )
(II) *
charII* .
)II. /
iII/ 0
)II0 1
.II1 2
ToStringII2 :
(II: ;
)II; <
,II< =
$strII> @
)II@ A
;IIA B
}JJ 
}KK 
elseLL 
{MM 
textNN 
=NN 
$strNN 
;NN 
}OO 
SystemRR 
.RR 
TextRR 
.RR 
RegularExpressionsRR *
.RR* +
RegexRR+ 0
regexRR1 6
=RR7 8
newRR9 <
SystemRR= C
.RRC D
TextRRD H
.RRH I
RegularExpressionsRRI [
.RR[ \
RegexRR\ a
(RRa b
$str	RRb Ö
)
RRÖ Ü
;
RRÜ á
stringTT 
strFormDTT 
=TT 
textTT "
.TT" #
	NormalizeTT# ,
(TT, -
SystemTT- 3
.TT3 4
TextTT4 8
.TT8 9
NormalizationFormTT9 J
.TTJ K
FormDTTK P
)TTP Q
;TTQ R
returnVV 
regexVV 
.VV 
ReplaceVV  
(VV  !
strFormDVV! )
,VV) *
StringVV+ 1
.VV1 2
EmptyVV2 7
)VV7 8
.VV8 9
ReplaceVV9 @
(VV@ A
$charVVA I
,VVI J
$charVVK N
)VVN O
.VVO P
ReplaceVVP W
(VVW X
$charVVX `
,VV` a
$charVVb e
)VVe f
;VVf g
}WW 	
publicaa 
staticaa 
stringaa 
WhiteSpaceToHyphenaa /
(aa/ 0
stringaa0 6
straa7 :
)aa: ;
{bb 	
charcc 
replaceCharcc 
=cc 
$charcc "
;cc" #
stringdd 
patterndd 
=dd 
$strdd "
;dd" #
MatchCollectionee 
matchsee "
=ee# $
Regexee% *
.ee* +
Matchesee+ 2
(ee2 3
stree3 6
,ee6 7
patternee8 ?
,ee? @
RegexOptionseeA M
.eeM N

IgnoreCaseeeN X
)eeX Y
;eeY Z
foreachff 
(ff 
Matchff 
mff 
inff 
matchsff  &
)ff& '
{gg 
strhh 
=hh 
strhh 
.hh 
Replacehh !
(hh! "
mhh" #
.hh# $
Valuehh$ )
[hh) *
$numhh* +
]hh+ ,
,hh, -
replaceCharhh. 9
)hh9 :
;hh: ;
}ii 
replaceCharjj 
=jj 
$charjj 
;jj 
patternkk 
=kk 
$strkk 
;kk 
matchsll 
=ll 
Regexll 
.ll 
Matchesll "
(ll" #
strll# &
,ll& '
patternll( /
,ll/ 0
RegexOptionsll1 =
.ll= >

IgnoreCasell> H
)llH I
;llI J
foreachmm 
(mm 
Matchmm 
mmm 
inmm 
matchsmm  &
)mm& '
{nn 
stroo 
=oo 
stroo 
.oo 
Replaceoo !
(oo! "
moo" #
.oo# $
Valueoo$ )
[oo) *
$numoo* +
]oo+ ,
,oo, -
replaceCharoo. 9
)oo9 :
;oo: ;
}pp 
returnqq 
strqq 
.qq 
ToLowerqq 
(qq 
)qq  
;qq  !
}rr 	
}ss 
}tt “
GE:\_Workspace\Github\Swastika-Heart\src\Swastika\Common\Utility\Enum.cs
	namespace 	
Swastika
 
. 
Common 
. 
Utility !
{ 
public 

class 
Enums 
{ 
public		 
enum		 
SWStatus		 
{

 	
Deleted 
= 
$num 
, 
Preview 
= 
$num 
, 
	Published 
= 
$num 
, 
Draft 
= 
$num 
, 
Schedule 
= 
$num 
} 	
} 
} ÿ
TE:\_Workspace\Github\Swastika-Heart\src\Swastika\Domain\Core\Models\SignalRModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

class 
SignalRClient 
{ 
public 
string 
UserId 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
NickName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public$$ 
string$$ 
ConnectionId$$ "
{$$# $
get$$% (
;$$( )
set$$* -
;$$- .
}$$/ 0
public,, 
DateTime,, 

JoinedDate,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
}-- 
}.. æ
WE:\_Workspace\Github\Swastika-Heart\src\Swastika\Domain\Core\Models\SupportedCulture.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public

 

class

 
SupportedCulture

 !
{ 
public 
int 
Id 
{ 
get 
; 
set  
;  !
}" #
public 
string 
Specificulture $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public"" 
string"" 
Lcid"" 
{"" 
get""  
;""  !
set""" %
;""% &
}""' (
public** 
string** 
Alias** 
{** 
get** !
;**! "
set**# &
;**& '
}**( )
public22 
string22 
FullName22 
{22  
get22! $
;22$ %
set22& )
;22) *
}22+ ,
public:: 
string:: 
Description:: !
{::" #
get::$ '
;::' (
set::) ,
;::, -
}::. /
publicBB 
stringBB 
IconBB 
{BB 
getBB  
;BB  !
setBB" %
;BB% &
}BB' (
publicJJ 
boolJJ 
IsSupportedJJ 
{JJ  !
getJJ" %
;JJ% &
setJJ' *
;JJ* +
}JJ, -
}KK 
}LL ˇ
^E:\_Workspace\Github\Swastika-Heart\src\Swastika\Domain\Core\Repository\DefaultRepositories.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{		 
public 

class 
DefaultRepository "
<" #

TDbContext# -
,- .
TModel/ 5
,5 6
TView7 <
>< =
:> ?
Swastika 
. 
Domain 
. 
Data 
. 

Repository '
.' (
ViewRepositoryBase( :
<: ;

TDbContext; E
,E F
TModelG M
,M N
TViewO T
>T U
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
Swastika 
. 
Domain %
.% &
Data& *
.* +

ViewModels+ 5
.5 6
ViewModelBase6 C
<C D

TDbContextD N
,N O
TModelP V
,V W
TViewX ]
>] ^
{ 
private 
static 
volatile 
DefaultRepository  1
<1 2

TDbContext2 <
,< =
TModel> D
,D E
TViewF K
>K L
instanceM U
;U V
private   
static   
readonly   
object    &
syncRoot  ' /
=  0 1
new  2 5
Object  6 <
(  < =
)  = >
;  > ?
private%% 
DefaultRepository%% !
(%%! "
)%%" #
{&& 	
}'' 	
public// 
static// 
DefaultRepository// '
<//' (

TDbContext//( 2
,//2 3
TModel//4 :
,//: ;
TView//< A
>//A B
Instance//C K
{//L M
get00 
{00 
if11 
(11 
instance11 
==11 
null11  $
)11$ %
{22 
lock33 
(33 
syncRoot33 "
)33" #
{44 
if55 
(55 
instance55 $
==55% '
null55( ,
)55, -
instance66 $
=66% &
new66' *
DefaultRepository66+ <
<66< =

TDbContext66= G
,66G H
TModel66I O
,66O P
TView66Q V
>66V W
(66W X
)66X Y
;66Y Z
}77 
}88 
return:: 
instance:: 
;::  
};; 
}<< 	
}== 
}>> ö¯
]E:\_Workspace\Github\Swastika-Heart\src\Swastika\Domain\Core\Repository\ViewRepositoryBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{ 
public 

abstract 
class 
ViewRepositoryBase ,
<, -

TDbContext- 7
,7 8
TModel9 ?
,? @
TViewA F
>F G
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 

ViewModels  
.  !
ViewModelBase! .
<. /

TDbContext/ 9
,9 :
TModel; A
,A B
TViewC H
>H I
{ 
	protected!! 
ViewRepositoryBase!! $
(!!$ %
)!!% &
{"" 	
}$$ 	
public-- 
virtual-- 
bool-- 
CheckIsExists-- )
(--) *
TModel--* 0
entity--1 7
,--7 8

TDbContext--9 C
_context--D L
=--M N
null--O S
,--S T!
IDbContextTransaction--U j
_transaction--k w
=--x y
null--z ~
)--~ 
{.. 	

TDbContext// 
context// 
=//  
_context//! )
??//* ,
InitContext//- 8
(//8 9
)//9 :
;//: ;
var00 
transaction00 
=00 
_transaction00 *
??00+ -
context00. 5
.005 6
Database006 >
.00> ?
BeginTransaction00? O
(00O P
)00P Q
;00Q R
try11 
{22 
return44 
context44 
.44 
Set44 "
<44" #
TModel44# )
>44) *
(44* +
)44+ ,
.44, -
Any44- 0
(440 1
e441 2
=>443 5
e446 7
==448 :
entity44; A
)44A B
;44B C
}88 
catch99 
(99 
	Exception99 
ex99 
)99  
{:: 
LogErrorMessage;; 
(;;  
ex;;  "
);;" #
;;;# $
if<< 
(<< 
_transaction<<  
==<<! #
null<<$ (
)<<( )
{== 
transaction>> 
.>>  
Rollback>>  (
(>>( )
)>>) *
;>>* +
}?? 
return@@ 
false@@ 
;@@ 
}AA 
finallyBB 
{CC 
ifDD 
(DD 
_contextDD 
==DD 
nullDD  $
)DD$ %
{EE 
transactionGG 
.GG  
DisposeGG  '
(GG' (
)GG( )
;GG) *
contextHH 
.HH 
DisposeHH #
(HH# $
)HH$ %
;HH% &
}II 
}JJ 
}KK 	
publicTT 
boolTT 
CheckIsExistsTT !
(TT! "
SystemTT" (
.TT( )
FuncTT) -
<TT- .
TModelTT. 4
,TT4 5
boolTT6 :
>TT: ;
	predicateTT< E
,TTE F

TDbContextTTG Q
_contextTTR Z
=TT[ \
nullTT] a
,TTa b!
IDbContextTransactionTTc x
_transaction	TTy Ö
=
TTÜ á
null
TTà å
)
TTå ç
{UU 	

TDbContextVV 
contextVV 
=VV  
_contextVV! )
??VV* ,
InitContextVV- 8
(VV8 9
)VV9 :
;VV: ;
varWW 
transactionWW 
=WW 
_transactionWW *
??WW+ -
contextWW. 5
.WW5 6
DatabaseWW6 >
.WW> ?
BeginTransactionWW? O
(WWO P
)WWP Q
;WWQ R
tryXX 
{YY 
return[[ 
context[[ 
.[[ 
Set[[ "
<[[" #
TModel[[# )
>[[) *
([[* +
)[[+ ,
.[[, -
Any[[- 0
([[0 1
	predicate[[1 :
)[[: ;
;[[; <
}__ 
catch`` 
(`` 
	Exception`` 
ex`` 
)``  
{aa 
LogErrorMessagebb 
(bb  
exbb  "
)bb" #
;bb# $
ifcc 
(cc 
_transactioncc  
==cc! #
nullcc$ (
)cc( )
{dd 
transactionee 
.ee  
Rollbackee  (
(ee( )
)ee) *
;ee* +
}ff 
returngg 
falsegg 
;gg 
}hh 
finallyii 
{jj 
ifkk 
(kk 
_contextkk 
==kk 
nullkk  $
)kk$ %
{ll 
transactionnn 
.nn  
Disposenn  '
(nn' (
)nn( )
;nn) *
contextoo 
.oo 
Disposeoo #
(oo# $
)oo$ %
;oo% &
}pp 
}qq 
}rr 	
public{{ 
virtual{{ 
RepositoryResponse{{ )
<{{) *
TView{{* /
>{{/ 0
CreateModel{{1 <
({{< =
TView{{= B
view{{C G
,|| 	

TDbContext||
 
_context|| 
=|| 
null||  $
,||$ %!
IDbContextTransaction||& ;
_transaction||< H
=||I J
null||K O
)||O P
{}} 	

TDbContext~~ 
context~~ 
=~~  
_context~~! )
??~~* ,
InitContext~~- 8
(~~8 9
)~~9 :
;~~: ;
var 
transaction 
= 
_transaction *
??+ -
context. 5
.5 6
Database6 >
.> ?
BeginTransaction? O
(O P
)P Q
;Q R 
RepositoryResponse
ÄÄ 
<
ÄÄ 
TView
ÄÄ $
>
ÄÄ$ %
result
ÄÄ& ,
=
ÄÄ- .
new
ÄÄ/ 2 
RepositoryResponse
ÄÄ3 E
<
ÄÄE F
TView
ÄÄF K
>
ÄÄK L
(
ÄÄL M
)
ÄÄM N
{
ÄÄO P
	IsSucceed
ÄÄQ Z
=
ÄÄ[ \
true
ÄÄ] a
}
ÄÄb c
;
ÄÄc d
try
ÅÅ 
{
ÇÇ 
context
ÉÉ 
.
ÉÉ 
Entry
ÉÉ 
(
ÉÉ 
view
ÉÉ "
.
ÉÉ" #
Model
ÉÉ# (
)
ÉÉ( )
.
ÉÉ) *
State
ÉÉ* /
=
ÉÉ0 1
EntityState
ÉÉ2 =
.
ÉÉ= >
Added
ÉÉ> C
;
ÉÉC D
context
ÑÑ 
.
ÑÑ 
SaveChanges
ÑÑ #
(
ÑÑ# $
)
ÑÑ$ %
;
ÑÑ% &
if
ÖÖ 
(
ÖÖ 
result
ÖÖ 
.
ÖÖ 
	IsSucceed
ÖÖ $
)
ÖÖ$ %
{
ÜÜ 
result
áá 
.
áá 
Data
áá 
=
áá  !
view
áá" &
;
áá& '
if
àà 
(
àà 
_transaction
àà $
==
àà% '
null
àà( ,
)
àà, -
{
ââ 
transaction
ää #
.
ää# $
Commit
ää$ *
(
ää* +
)
ää+ ,
;
ää, -
}
ãã 
return
çç 
result
çç !
;
çç! "
}
éé 
else
èè 
{
êê 
if
ëë 
(
ëë 
_transaction
ëë $
==
ëë% '
null
ëë( ,
)
ëë, -
{
íí 
transaction
ìì #
.
ìì# $
Rollback
ìì$ ,
(
ìì, -
)
ìì- .
;
ìì. /
}
îî 
return
ññ 
result
ññ !
;
ññ! "
}
óó 
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô 
ex
ôô 
)
ôô  
{
öö 
LogErrorMessage
õõ 
(
õõ  
ex
õõ  "
)
õõ" #
;
õõ# $
result
úú 
.
úú 
	IsSucceed
úú  
=
úú! "
false
úú# (
;
úú( )
result
ùù 
.
ùù 
	Exception
ùù  
=
ùù! "
ex
ùù# %
;
ùù% &
if
ûû 
(
ûû 
_transaction
ûû  
==
ûû! #
null
ûû$ (
)
ûû( )
{
üü 
transaction
†† 
.
††  
Rollback
††  (
(
††( )
)
††) *
;
††* +
}
°° 
return
¢¢ 
result
¢¢ 
;
¢¢ 
}
££ 
finally
§§ 
{
•• 
if
¶¶ 
(
¶¶ 
_context
¶¶ 
==
¶¶ 
null
¶¶  $
)
¶¶$ %
{
ßß 
transaction
©© 
.
©©  
Dispose
©©  '
(
©©' (
)
©©( )
;
©©) *
context
™™ 
.
™™ 
Dispose
™™ #
(
™™# $
)
™™$ %
;
™™% &
}
´´ 
}
¨¨ 
}
≠≠ 	
public
∂∂ 
virtual
∂∂ 
async
∂∂ 
Task
∂∂ !
<
∂∂! " 
RepositoryResponse
∂∂" 4
<
∂∂4 5
TView
∂∂5 :
>
∂∂: ;
>
∂∂; <
CreateModelAsync
∂∂= M
(
∂∂M N
TView
∂∂N S
view
∂∂T X
,
∑∑ 	

TDbContext
∑∑
 
_context
∑∑ 
=
∑∑ 
null
∑∑  $
,
∑∑$ %#
IDbContextTransaction
∑∑& ;
_transaction
∑∑< H
=
∑∑I J
null
∑∑K O
)
∑∑O P
{
∏∏ 	

TDbContext
ππ 
context
ππ 
=
ππ  
_context
ππ! )
??
ππ* ,
InitContext
ππ- 8
(
ππ8 9
)
ππ9 :
;
ππ: ;
var
∫∫ 
transaction
∫∫ 
=
∫∫ 
_transaction
∫∫ *
??
∫∫+ -
context
∫∫. 5
.
∫∫5 6
Database
∫∫6 >
.
∫∫> ?
BeginTransaction
∫∫? O
(
∫∫O P
)
∫∫P Q
;
∫∫Q R 
RepositoryResponse
ªª 
<
ªª 
TView
ªª $
>
ªª$ %
result
ªª& ,
=
ªª- .
new
ªª/ 2 
RepositoryResponse
ªª3 E
<
ªªE F
TView
ªªF K
>
ªªK L
(
ªªL M
)
ªªM N
{
ªªO P
	IsSucceed
ªªQ Z
=
ªª[ \
true
ªª] a
}
ªªb c
;
ªªc d
try
ºº 
{
ΩΩ 
context
ææ 
.
ææ 
Entry
ææ 
(
ææ 
view
ææ "
.
ææ" #
Model
ææ# (
)
ææ( )
.
ææ) *
State
ææ* /
=
ææ0 1
EntityState
ææ2 =
.
ææ= >
Added
ææ> C
;
ææC D
await
øø 
context
øø 
.
øø 
SaveChangesAsync
øø .
(
øø. /
)
øø/ 0
.
øø0 1
ConfigureAwait
øø1 ?
(
øø? @
false
øø@ E
)
øøE F
;
øøF G
if
…… 
(
…… 
result
…… 
.
…… 
	IsSucceed
…… $
)
……$ %
{
   
result
ÃÃ 
.
ÃÃ 
Data
ÃÃ 
=
ÃÃ  !
view
ÃÃ" &
;
ÃÃ& '
if
ÕÕ 
(
ÕÕ 
_transaction
ÕÕ $
==
ÕÕ% '
null
ÕÕ( ,
)
ÕÕ, -
{
ŒŒ 
transaction
–– #
.
––# $
Commit
––$ *
(
––* +
)
––+ ,
;
––, -
}
—— 
return
”” 
result
”” !
;
””! "
}
‘‘ 
else
’’ 
{
÷÷ 
if
◊◊ 
(
◊◊ 
_transaction
◊◊ $
==
◊◊% '
null
◊◊( ,
)
◊◊, -
{
ÿÿ 
transaction
⁄⁄ #
.
⁄⁄# $
Rollback
⁄⁄$ ,
(
⁄⁄, -
)
⁄⁄- .
;
⁄⁄. /
}
€€ 
return
‹‹ 
result
‹‹ !
;
‹‹! "
}
›› 
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
LogErrorMessage
·· 
(
··  
ex
··  "
)
··" #
;
··# $
result
‚‚ 
.
‚‚ 
	IsSucceed
‚‚  
=
‚‚! "
false
‚‚# (
;
‚‚( )
result
„„ 
.
„„ 
	Exception
„„  
=
„„! "
ex
„„# %
;
„„% &
if
‰‰ 
(
‰‰ 
_transaction
‰‰  
==
‰‰! #
null
‰‰$ (
)
‰‰( )
{
ÂÂ 
transaction
ÁÁ 
.
ÁÁ  
Rollback
ÁÁ  (
(
ÁÁ( )
)
ÁÁ) *
;
ÁÁ* +
}
ËË 
return
ÍÍ 
result
ÍÍ 
;
ÍÍ 
}
ÎÎ 
finally
ÏÏ 
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 
_context
ÓÓ 
==
ÓÓ 
null
ÓÓ  $
)
ÓÓ$ %
{
ÔÔ 
transaction
ÒÒ 
.
ÒÒ  
Dispose
ÒÒ  '
(
ÒÒ' (
)
ÒÒ( )
;
ÒÒ) *
context
ÚÚ 
.
ÚÚ 
Dispose
ÚÚ #
(
ÚÚ# $
)
ÚÚ$ %
;
ÚÚ% &
}
ÛÛ 
}
ÙÙ 
}
ıı 	
public
˛˛ 
virtual
˛˛  
RepositoryResponse
˛˛ )
<
˛˛) *
TView
˛˛* /
>
˛˛/ 0
	EditModel
˛˛1 :
(
˛˛: ;
TView
˛˛; @
view
˛˛A E
,
ˇˇ 	

TDbContext
ˇˇ
 
_context
ˇˇ 
=
ˇˇ 
null
ˇˇ  $
,
ˇˇ$ %#
IDbContextTransaction
ˇˇ& ;
_transaction
ˇˇ< H
=
ˇˇI J
null
ˇˇK O
)
ˇˇO P
{
ÄÄ 	

TDbContext
ÅÅ 
context
ÅÅ 
=
ÅÅ  
_context
ÅÅ! )
??
ÅÅ* ,
InitContext
ÅÅ- 8
(
ÅÅ8 9
)
ÅÅ9 :
;
ÅÅ: ;
var
ÇÇ 
transaction
ÇÇ 
=
ÇÇ 
_transaction
ÇÇ *
??
ÇÇ+ -
context
ÇÇ. 5
.
ÇÇ5 6
Database
ÇÇ6 >
.
ÇÇ> ?
BeginTransaction
ÇÇ? O
(
ÇÇO P
)
ÇÇP Q
;
ÇÇQ R 
RepositoryResponse
ÉÉ 
<
ÉÉ 
TView
ÉÉ $
>
ÉÉ$ %
result
ÉÉ& ,
=
ÉÉ- .
new
ÉÉ/ 2 
RepositoryResponse
ÉÉ3 E
<
ÉÉE F
TView
ÉÉF K
>
ÉÉK L
(
ÉÉL M
)
ÉÉM N
{
ÉÉO P
	IsSucceed
ÉÉQ Z
=
ÉÉ[ \
true
ÉÉ] a
}
ÉÉb c
;
ÉÉc d
try
ÑÑ 
{
ÖÖ 
context
áá 
.
áá 
Set
áá 
<
áá 
TModel
áá "
>
áá" #
(
áá# $
)
áá$ %
.
áá% &
Update
áá& ,
(
áá, -
view
áá- 1
.
áá1 2
Model
áá2 7
)
áá7 8
;
áá8 9
context
àà 
.
àà 
SaveChanges
àà #
(
àà# $
)
àà$ %
;
àà% &
if
íí 
(
íí 
result
íí 
.
íí 
	IsSucceed
íí $
)
íí$ %
{
ìì 
result
îî 
.
îî 
Data
îî 
=
îî  !
view
îî" &
;
îî& '
if
ïï 
(
ïï 
_transaction
ïï $
==
ïï% '
null
ïï( ,
)
ïï, -
{
ññ 
transaction
òò #
.
òò# $
Commit
òò$ *
(
òò* +
)
òò+ ,
;
òò, -
}
ôô 
return
öö 
result
öö !
;
öö! "
}
õõ 
else
úú 
{
ùù 
if
ûû 
(
ûû 
_transaction
ûû $
==
ûû% '
null
ûû( ,
)
ûû, -
{
üü 
transaction
°° #
.
°°# $
Rollback
°°$ ,
(
°°, -
)
°°- .
;
°°. /
}
¢¢ 
return
££ 
result
££ !
;
££! "
}
§§ 
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß 
LogErrorMessage
®® 
(
®®  
ex
®®  "
)
®®" #
;
®®# $
result
©© 
.
©© 
	IsSucceed
©©  
=
©©! "
false
©©# (
;
©©( )
result
™™ 
.
™™ 
	Exception
™™  
=
™™! "
ex
™™# %
;
™™% &
if
´´ 
(
´´ 
_transaction
´´  
==
´´! #
null
´´$ (
)
´´( )
{
¨¨ 
transaction
ÆÆ 
.
ÆÆ  
Rollback
ÆÆ  (
(
ÆÆ( )
)
ÆÆ) *
;
ÆÆ* +
}
ØØ 
return
∞∞ 
result
∞∞ 
;
∞∞ 
}
±± 
finally
≤≤ 
{
≥≥ 
if
¥¥ 
(
¥¥ 
_context
¥¥ 
==
¥¥ 
null
¥¥  $
)
¥¥$ %
{
µµ 
transaction
∑∑ 
.
∑∑  
Dispose
∑∑  '
(
∑∑' (
)
∑∑( )
;
∑∑) *
context
∏∏ 
.
∏∏ 
Dispose
∏∏ #
(
∏∏# $
)
∏∏$ %
;
∏∏% &
}
ππ 
}
∫∫ 
}
ªª 	
public
ƒƒ 
virtual
ƒƒ 
async
ƒƒ 
Task
ƒƒ !
<
ƒƒ! " 
RepositoryResponse
ƒƒ" 4
<
ƒƒ4 5
TView
ƒƒ5 :
>
ƒƒ: ;
>
ƒƒ; <
EditModelAsync
ƒƒ= K
(
ƒƒK L
TView
ƒƒL Q
view
ƒƒR V
,
ƒƒV W

TDbContext
ƒƒX b
_context
ƒƒc k
=
ƒƒl m
null
ƒƒn r
,
ƒƒr s$
IDbContextTransactionƒƒt â
_transactionƒƒä ñ
=ƒƒó ò
nullƒƒô ù
)ƒƒù û
{
≈≈ 	
var
∆∆ 
context
∆∆ 
=
∆∆ 
_context
∆∆ "
??
∆∆# %
InitContext
∆∆& 1
(
∆∆1 2
)
∆∆2 3
;
∆∆3 4
var
«« 
transaction
«« 
=
«« 
_transaction
«« *
??
««+ -
context
««. 5
.
««5 6
Database
««6 >
.
««> ?
BeginTransaction
««? O
(
««O P
)
««P Q
;
««Q R 
RepositoryResponse
»» 
<
»» 
TView
»» $
>
»»$ %
result
»»& ,
=
»»- .
new
»»/ 2 
RepositoryResponse
»»3 E
<
»»E F
TView
»»F K
>
»»K L
(
»»L M
)
»»M N
{
»»O P
	IsSucceed
»»Q Z
=
»»[ \
true
»»] a
}
»»b c
;
»»c d
try
…… 
{
   
context
ÃÃ 
.
ÃÃ 
Set
ÃÃ 
<
ÃÃ 
TModel
ÃÃ "
>
ÃÃ" #
(
ÃÃ# $
)
ÃÃ$ %
.
ÃÃ% &
Update
ÃÃ& ,
(
ÃÃ, -
view
ÃÃ- 1
.
ÃÃ1 2
Model
ÃÃ2 7
)
ÃÃ7 8
;
ÃÃ8 9
await
ÕÕ 
context
ÕÕ 
.
ÕÕ 
SaveChangesAsync
ÕÕ .
(
ÕÕ. /
)
ÕÕ/ 0
.
ÕÕ0 1
ConfigureAwait
ÕÕ1 ?
(
ÕÕ? @
false
ÕÕ@ E
)
ÕÕE F
;
ÕÕF G
if
◊◊ 
(
◊◊ 
result
◊◊ 
.
◊◊ 
	IsSucceed
◊◊ $
)
◊◊$ %
{
ÿÿ 
result
ŸŸ 
.
ŸŸ 
Data
ŸŸ 
=
ŸŸ  !
view
ŸŸ" &
;
ŸŸ& '
if
⁄⁄ 
(
⁄⁄ 
_transaction
⁄⁄ $
==
⁄⁄% '
null
⁄⁄( ,
)
⁄⁄, -
{
€€ 
transaction
›› #
.
››# $
Commit
››$ *
(
››* +
)
››+ ,
;
››, -
}
ﬁﬁ 
return
ﬂﬂ 
result
ﬂﬂ !
;
ﬂﬂ! "
}
‡‡ 
else
·· 
{
‚‚ 
if
„„ 
(
„„ 
_transaction
„„ $
==
„„% '
null
„„( ,
)
„„, -
{
‰‰ 
transaction
ÊÊ #
.
ÊÊ# $
Rollback
ÊÊ$ ,
(
ÊÊ, -
)
ÊÊ- .
;
ÊÊ. /
}
ÁÁ 
return
ËË 
result
ËË !
;
ËË! "
}
ÈÈ 
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ 
ex
ÎÎ 
)
ÎÎ  
{
ÏÏ 
LogErrorMessage
ÌÌ 
(
ÌÌ  
ex
ÌÌ  "
)
ÌÌ" #
;
ÌÌ# $
result
ÓÓ 
.
ÓÓ 
	IsSucceed
ÓÓ  
=
ÓÓ! "
false
ÓÓ# (
;
ÓÓ( )
result
ÔÔ 
.
ÔÔ 
	Exception
ÔÔ  
=
ÔÔ! "
ex
ÔÔ# %
;
ÔÔ% &
if
 
(
 
_transaction
  
==
! #
null
$ (
)
( )
{
ÒÒ 
transaction
ÛÛ 
.
ÛÛ  
Rollback
ÛÛ  (
(
ÛÛ( )
)
ÛÛ) *
;
ÛÛ* +
}
ÙÙ 
return
ˆˆ 
result
ˆˆ 
;
ˆˆ 
}
˜˜ 
finally
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ 
_context
˙˙ 
==
˙˙ 
null
˙˙  $
)
˙˙$ %
{
˚˚ 
context
˝˝ 
.
˝˝ 
Dispose
˝˝ #
(
˝˝# $
)
˝˝$ %
;
˝˝% &
}
˛˛ 
}
ˇˇ 
}
ÄÄ 	
public
ââ 
virtual
ââ  
RepositoryResponse
ââ )
<
ââ) *
TView
ââ* /
>
ââ/ 0
GetSingleModel
ââ1 ?
(
ââ? @

Expression
ää 
<
ää 
Func
ää 
<
ää 
TModel
ää 
,
ää 
bool
ää  $
>
ää$ %
>
ää% &
	predicate
ää' 0
,
ãã 	

TDbContext
ãã
 
_context
ãã 
=
ãã 
null
ãã  $
,
ãã$ %#
IDbContextTransaction
ãã& ;
_transaction
ãã< H
=
ããI J
null
ããK O
)
ããO P
{
åå 	
var
çç 
context
çç 
=
çç 
_context
çç "
??
çç# %
InitContext
çç& 1
(
çç1 2
)
çç2 3
;
çç3 4
var
éé 
transaction
éé 
=
éé 
_transaction
éé *
??
éé+ -
context
éé. 5
.
éé5 6
Database
éé6 >
.
éé> ?
BeginTransaction
éé? O
(
ééO P
)
ééP Q
;
ééQ R
try
èè 
{
êê 
TModel
ëë 
model
ëë 
=
ëë 
context
ëë &
.
ëë& '
Set
ëë' *
<
ëë* +
TModel
ëë+ 1
>
ëë1 2
(
ëë2 3
)
ëë3 4
.
ëë4 5
FirstOrDefault
ëë5 C
(
ëëC D
	predicate
ëëD M
)
ëëM N
;
ëëN O
if
íí 
(
íí 
model
íí 
!=
íí 
null
íí !
)
íí! "
{
ìì 
context
îî 
.
îî 
Entry
îî !
(
îî! "
model
îî" '
)
îî' (
.
îî( )
State
îî) .
=
îî/ 0
EntityState
îî1 <
.
îî< =
Detached
îî= E
;
îîE F
var
ïï 

viewResult
ïï "
=
ïï# $
	ParseView
ïï% .
(
ïï. /
model
ïï/ 4
,
ïï4 5
context
ïï6 =
,
ïï= >
transaction
ïï? J
)
ïïJ K
;
ïïK L
return
ññ 
new
ññ  
RepositoryResponse
ññ 1
<
ññ1 2
TView
ññ2 7
>
ññ7 8
(
ññ8 9
)
ññ9 :
{
óó 
	IsSucceed
òò !
=
òò" #
true
òò$ (
,
òò( )
Data
ôô 
=
ôô 

viewResult
ôô )
}
öö 
;
öö 
}
õõ 
else
úú 
{
ùù 
return
ûû 
new
ûû  
RepositoryResponse
ûû 1
<
ûû1 2
TView
ûû2 7
>
ûû7 8
(
ûû8 9
)
ûû9 :
{
üü 
	IsSucceed
†† !
=
††" #
false
††$ )
,
††) *
Data
°° 
=
°° 
default
°° &
(
°°& '
TView
°°' ,
)
°°, -
}
¢¢ 
;
¢¢ 
}
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
LogErrorMessage
ßß 
(
ßß  
ex
ßß  "
)
ßß" #
;
ßß# $
if
®® 
(
®® 
_transaction
®®  
==
®®! #
null
®®$ (
)
®®( )
{
©© 
transaction
´´ 
.
´´  
Rollback
´´  (
(
´´( )
)
´´) *
;
´´* +
}
¨¨ 
return
ÆÆ 
new
ÆÆ  
RepositoryResponse
ÆÆ -
<
ÆÆ- .
TView
ÆÆ. 3
>
ÆÆ3 4
(
ÆÆ4 5
)
ÆÆ5 6
{
ØØ 
	IsSucceed
∞∞ 
=
∞∞ 
false
∞∞  %
,
∞∞% &
Data
±± 
=
±± 
default
±± "
(
±±" #
TView
±±# (
)
±±( )
}
≤≤ 
;
≤≤ 
}
≥≥ 
finally
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 
_context
∂∂ 
==
∂∂ 
null
∂∂  $
)
∂∂$ %
{
∑∑ 
context
ππ 
.
ππ 
Dispose
ππ #
(
ππ# $
)
ππ$ %
;
ππ% &
}
∫∫ 
}
ªª 
}
ºº 	
public
≈≈ 
virtual
≈≈ 
async
≈≈ 
Task
≈≈ !
<
≈≈! " 
RepositoryResponse
≈≈" 4
<
≈≈4 5
TView
≈≈5 :
>
≈≈: ;
>
≈≈; <!
GetSingleModelAsync
≈≈= P
(
≈≈P Q

Expression
∆∆ 
<
∆∆ 
Func
∆∆ 
<
∆∆ 
TModel
∆∆ 
,
∆∆ 
bool
∆∆  $
>
∆∆$ %
>
∆∆% &
	predicate
∆∆' 0
,
«« 	

TDbContext
««
 
_context
«« 
=
«« 
null
««  $
,
««$ %#
IDbContextTransaction
««& ;
_transaction
««< H
=
««I J
null
««K O
)
««O P
{
»» 	
var
…… 
context
…… 
=
…… 
_context
…… "
??
……# %
InitContext
……& 1
(
……1 2
)
……2 3
;
……3 4
var
   
transaction
   
=
   
_transaction
   *
??
  + -
context
  . 5
.
  5 6
Database
  6 >
.
  > ?
BeginTransaction
  ? O
(
  O P
)
  P Q
;
  Q R
try
ÃÃ 
{
ÕÕ 
TModel
ŒŒ 
model
ŒŒ 
=
ŒŒ 
await
ŒŒ $
context
ŒŒ% ,
.
ŒŒ, -
Set
ŒŒ- 0
<
ŒŒ0 1
TModel
ŒŒ1 7
>
ŒŒ7 8
(
ŒŒ8 9
)
ŒŒ9 :
.
ŒŒ: ;!
FirstOrDefaultAsync
ŒŒ; N
(
ŒŒN O
	predicate
ŒŒO X
)
ŒŒX Y
.
ŒŒY Z
ConfigureAwait
ŒŒZ h
(
ŒŒh i
false
ŒŒi n
)
ŒŒn o
;
ŒŒo p
if
œœ 
(
œœ 
model
œœ 
!=
œœ 
null
œœ !
)
œœ! "
{
–– 
context
—— 
.
—— 
Entry
—— !
(
——! "
model
——" '
)
——' (
.
——( )
State
——) .
=
——/ 0
EntityState
——1 <
.
——< =
Detached
——= E
;
——E F
var
”” 

viewResult
”” "
=
””# $
	ParseView
””% .
(
””. /
model
””/ 4
,
””4 5
context
””6 =
,
””= >
transaction
””? J
)
””J K
;
””K L
return
‘‘ 
new
‘‘  
RepositoryResponse
‘‘ 1
<
‘‘1 2
TView
‘‘2 7
>
‘‘7 8
(
‘‘8 9
)
‘‘9 :
{
’’ 
	IsSucceed
÷÷ !
=
÷÷" #
true
÷÷$ (
,
÷÷( )
Data
◊◊ 
=
◊◊ 

viewResult
◊◊ )
}
ÿÿ 
;
ÿÿ 
}
ŸŸ 
else
⁄⁄ 
{
€€ 
return
‹‹ 
new
‹‹  
RepositoryResponse
‹‹ 1
<
‹‹1 2
TView
‹‹2 7
>
‹‹7 8
(
‹‹8 9
)
‹‹9 :
{
›› 
	IsSucceed
ﬁﬁ !
=
ﬁﬁ" #
false
ﬁﬁ$ )
,
ﬁﬁ) *
Data
ﬂﬂ 
=
ﬂﬂ 
default
ﬂﬂ &
(
ﬂﬂ& '
TView
ﬂﬂ' ,
)
ﬂﬂ, -
}
‡‡ 
;
‡‡ 
}
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
LogErrorMessage
ÂÂ 
(
ÂÂ  
ex
ÂÂ  "
)
ÂÂ" #
;
ÂÂ# $
if
ÊÊ 
(
ÊÊ 
_transaction
ÊÊ  
==
ÊÊ! #
null
ÊÊ$ (
)
ÊÊ( )
{
ÁÁ 
transaction
ÈÈ 
.
ÈÈ  
Rollback
ÈÈ  (
(
ÈÈ( )
)
ÈÈ) *
;
ÈÈ* +
}
ÍÍ 
return
ÏÏ 
new
ÏÏ  
RepositoryResponse
ÏÏ -
<
ÏÏ- .
TView
ÏÏ. 3
>
ÏÏ3 4
(
ÏÏ4 5
)
ÏÏ5 6
{
ÌÌ 
	IsSucceed
ÓÓ 
=
ÓÓ 
false
ÓÓ  %
,
ÓÓ% &
Data
ÔÔ 
=
ÔÔ 
default
ÔÔ "
(
ÔÔ" #
TView
ÔÔ# (
)
ÔÔ( )
}
 
;
 
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
_context
ÙÙ 
==
ÙÙ 
null
ÙÙ  $
)
ÙÙ$ %
{
ıı 
context
˜˜ 
.
˜˜ 
Dispose
˜˜ #
(
˜˜# $
)
˜˜$ %
;
˜˜% &
}
¯¯ 
}
˘˘ 
}
˙˙ 	
public
ÄÄ 
virtual
ÄÄ 

TDbContext
ÄÄ !
InitContext
ÄÄ" -
(
ÄÄ- .
)
ÄÄ. /
{
ÅÅ 	
Type
ÇÇ 
	classType
ÇÇ 
=
ÇÇ 
typeof
ÇÇ #
(
ÇÇ# $

TDbContext
ÇÇ$ .
)
ÇÇ. /
;
ÇÇ/ 0
ConstructorInfo
ÉÉ 
classConstructor
ÉÉ ,
=
ÉÉ- .
	classType
ÉÉ/ 8
.
ÉÉ8 9
GetConstructor
ÉÉ9 G
(
ÉÉG H
new
ÉÉH K
Type
ÉÉL P
[
ÉÉP Q
]
ÉÉQ R
{
ÉÉS T
}
ÉÉU V
)
ÉÉV W
;
ÉÉW X

TDbContext
ÑÑ 
context
ÑÑ 
=
ÑÑ  
(
ÑÑ! "

TDbContext
ÑÑ" ,
)
ÑÑ, -
classConstructor
ÑÑ- =
.
ÑÑ= >
Invoke
ÑÑ> D
(
ÑÑD E
new
ÑÑE H
object
ÑÑI O
[
ÑÑO P
]
ÑÑP Q
{
ÑÑR S
}
ÑÑT U
)
ÑÑU V
;
ÑÑV W
return
ÜÜ 
context
ÜÜ 
;
ÜÜ 
}
áá 	
public
çç 
virtual
çç 
void
çç 
LogErrorMessage
çç +
(
çç+ ,
	Exception
çç, 5
ex
çç6 8
)
çç8 9
{
éé 	
}
èè 	
public
úú 
virtual
úú 
PaginationModel
úú &
<
úú& '
TView
úú' ,
>
úú, -
ParsePagingQuery
úú. >
(
úú> ?

IQueryable
úú? I
<
úúI J
TModel
úúJ P
>
úúP Q
query
úúR W
,
ùù 	
string
ùù
 !
orderByPropertyName
ùù $
,
ùù$ %
OrderByDirection
ùù& 6
	direction
ùù7 @
,
ûû 	
int
ûû
 
?
ûû 
pageSize
ûû 
,
ûû 
int
ûû 
?
ûû 
	pageIndex
ûû '
,
üü 	

TDbContext
üü
 
context
üü 
,
üü #
IDbContextTransaction
üü 3
transaction
üü4 ?
)
üü? @
{
†† 	
List
°° 
<
°° 
TModel
°° 
>
°° 
lstModel
°° !
=
°°" #
new
°°$ '
List
°°( ,
<
°°, -
TModel
°°- 3
>
°°3 4
(
°°4 5
)
°°5 6
;
°°6 7
PaginationModel
££ 
<
££ 
TView
££ !
>
££! "
result
££# )
=
££* +
new
££, /
PaginationModel
££0 ?
<
££? @
TView
££@ E
>
££E F
(
££F G
)
££G H
{
§§ 

TotalItems
•• 
=
•• 
query
•• "
.
••" #
Count
••# (
(
••( )
)
••) *
,
••* +
	PageIndex
¶¶ 
=
¶¶ 
	pageIndex
¶¶ %
??
¶¶& (
$num
¶¶) *
}
ßß 
;
ßß 
dynamic
®® 
orderBy
®® 
=
®® 
	GetLambda
®® '
(
®®' (!
orderByPropertyName
®®( ;
)
®®; <
;
®®< =

IQueryable
©© 
<
©© 
TModel
©© 
>
©© 
sorted
©© %
=
©©& '
null
©©( ,
;
©©, -
try
™™ 
{
´´ 
result
¨¨ 
.
¨¨ 
PageSize
¨¨ 
=
¨¨  !
pageSize
¨¨" *
??
¨¨+ -
result
¨¨. 4
.
¨¨4 5

TotalItems
¨¨5 ?
;
¨¨? @
if
ÆÆ 
(
ÆÆ 
pageSize
ÆÆ 
.
ÆÆ 
HasValue
ÆÆ %
)
ÆÆ% &
{
ØØ 
result
∞∞ 
.
∞∞ 
	TotalPage
∞∞ $
=
∞∞% &
(
∞∞' (
result
∞∞( .
.
∞∞. /

TotalItems
∞∞/ 9
/
∞∞: ;
pageSize
∞∞< D
.
∞∞D E
Value
∞∞E J
)
∞∞J K
+
∞∞L M
(
∞∞N O
result
∞∞O U
.
∞∞U V

TotalItems
∞∞V `
%
∞∞a b
pageSize
∞∞c k
.
∞∞k l
Value
∞∞l q
>
∞∞r s
$num
∞∞t u
?
∞∞v w
$num
∞∞x y
:
∞∞z {
$num
∞∞| }
)
∞∞} ~
;
∞∞~ 
}
±± 
switch
≥≥ 
(
≥≥ 
	direction
≥≥ !
)
≥≥! "
{
¥¥ 
case
µµ 
OrderByDirection
µµ )
.
µµ) *

Descending
µµ* 4
:
µµ4 5
sorted
∂∂ 
=
∂∂  
	Queryable
∂∂! *
.
∂∂* +
OrderByDescending
∂∂+ <
(
∂∂< =
query
∂∂= B
,
∂∂B C
orderBy
∂∂D K
)
∂∂K L
;
∂∂L M
if
∑∑ 
(
∑∑ 
pageSize
∑∑ $
.
∑∑$ %
HasValue
∑∑% -
)
∑∑- .
{
∏∏ 
lstModel
ππ $
=
ππ% &
sorted
ππ' -
.
ππ- .
Skip
ππ. 2
(
ππ2 3
	pageIndex
ππ3 <
.
ππ< =
Value
ππ= B
*
ππC D
pageSize
ππE M
.
ππM N
Value
ππN S
)
ππS T
.
∫∫ 
Take
∫∫ !
(
∫∫! "
pageSize
∫∫" *
.
∫∫* +
Value
∫∫+ 0
)
∫∫0 1
.
ªª 
ToList
ªª #
(
ªª# $
)
ªª$ %
;
ªª% &
}
ºº 
else
ΩΩ 
{
ææ 
lstModel
øø $
=
øø% &
sorted
øø' -
.
øø- .
ToList
øø. 4
(
øø4 5
)
øø5 6
;
øø6 7
}
¿¿ 
break
¡¡ 
;
¡¡ 
default
√√ 
:
√√ 
sorted
ƒƒ 
=
ƒƒ  
	Queryable
ƒƒ! *
.
ƒƒ* +
OrderBy
ƒƒ+ 2
(
ƒƒ2 3
query
ƒƒ3 8
,
ƒƒ8 9
orderBy
ƒƒ: A
)
ƒƒA B
;
ƒƒB C
if
≈≈ 
(
≈≈ 
pageSize
≈≈ $
.
≈≈$ %
HasValue
≈≈% -
)
≈≈- .
{
∆∆ 
lstModel
«« $
=
««% &
sorted
««' -
.
»» 
Skip
»» !
(
»»! "
	pageIndex
»»" +
.
»»+ ,
Value
»», 1
*
»»2 3
pageSize
»»4 <
.
»»< =
Value
»»= B
)
»»B C
.
…… 
Take
…… !
(
……! "
pageSize
……" *
.
……* +
Value
……+ 0
)
……0 1
.
   
ToList
   #
(
  # $
)
  $ %
;
  % &
}
ÀÀ 
else
ÃÃ 
{
ÕÕ 
lstModel
ŒŒ $
=
ŒŒ% &
sorted
ŒŒ' -
.
ŒŒ- .
ToList
ŒŒ. 4
(
ŒŒ4 5
)
ŒŒ5 6
;
ŒŒ6 7
}
œœ 
break
–– 
;
–– 
}
—— 
lstModel
““ 
.
““ 
ForEach
““  
(
““  !
model
““! &
=>
““' )
context
““* 1
.
““1 2
Entry
““2 7
(
““7 8
model
““8 =
)
““= >
.
““> ?
State
““? D
=
““E F
EntityState
““G R
.
““R S
Detached
““S [
)
““[ \
;
““\ ]
var
”” 
lstView
”” 
=
”” 
	ParseView
”” '
(
””' (
lstModel
””( 0
,
””0 1
context
””2 9
,
””9 :
transaction
””; F
)
””F G
;
””G H
result
‘‘ 
.
‘‘ 
Items
‘‘ 
=
‘‘ 
lstView
‘‘ &
;
‘‘& '
return
’’ 
result
’’ 
;
’’ 
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊ 
ex
◊◊ 
)
◊◊  
{
ÿÿ 
LogErrorMessage
ŸŸ 
(
ŸŸ  
ex
ŸŸ  "
)
ŸŸ" #
;
ŸŸ# $
return
⁄⁄ 
null
⁄⁄ 
;
⁄⁄ 
}
€€ 
}
‹‹ 	
public
ÈÈ 
virtual
ÈÈ 
async
ÈÈ 
Task
ÈÈ !
<
ÈÈ! "
PaginationModel
ÈÈ" 1
<
ÈÈ1 2
TView
ÈÈ2 7
>
ÈÈ7 8
>
ÈÈ8 9#
ParsePagingQueryAsync
ÈÈ: O
(
ÈÈO P

IQueryable
ÈÈP Z
<
ÈÈZ [
TModel
ÈÈ[ a
>
ÈÈa b
query
ÈÈc h
,
ÍÍ 	
string
ÍÍ
 !
orderByPropertyName
ÍÍ $
,
ÍÍ$ %
OrderByDirection
ÍÍ& 6
	direction
ÍÍ7 @
,
ÎÎ 	
int
ÎÎ
 
?
ÎÎ 
pageSize
ÎÎ 
,
ÎÎ 
int
ÎÎ 
?
ÎÎ 
	pageIndex
ÎÎ '
,
ÏÏ 	

TDbContext
ÏÏ
 
context
ÏÏ 
,
ÏÏ #
IDbContextTransaction
ÏÏ 3
transaction
ÏÏ4 ?
)
ÏÏ? @
{
ÌÌ 	
List
ÓÓ 
<
ÓÓ 
TModel
ÓÓ 
>
ÓÓ 
lstModel
ÓÓ !
=
ÓÓ" #
new
ÓÓ$ '
List
ÓÓ( ,
<
ÓÓ, -
TModel
ÓÓ- 3
>
ÓÓ3 4
(
ÓÓ4 5
)
ÓÓ5 6
;
ÓÓ6 7
PaginationModel
 
<
 
TView
 !
>
! "
result
# )
=
* +
new
, /
PaginationModel
0 ?
<
? @
TView
@ E
>
E F
(
F G
)
G H
{
ÒÒ 

TotalItems
ÚÚ 
=
ÚÚ 
query
ÚÚ "
.
ÚÚ" #
Count
ÚÚ# (
(
ÚÚ( )
)
ÚÚ) *
,
ÚÚ* +
	PageIndex
ÛÛ 
=
ÛÛ 
	pageIndex
ÛÛ %
??
ÛÛ& (
$num
ÛÛ) *
}
ÙÙ 
;
ÙÙ 
dynamic
ıı 
orderBy
ıı 
=
ıı 
	GetLambda
ıı '
(
ıı' (!
orderByPropertyName
ıı( ;
)
ıı; <
;
ıı< =

IQueryable
ˆˆ 
<
ˆˆ 
TModel
ˆˆ 
>
ˆˆ 
sorted
ˆˆ %
=
ˆˆ& '
null
ˆˆ( ,
;
ˆˆ, -
try
˜˜ 
{
¯¯ 
result
˘˘ 
.
˘˘ 
PageSize
˘˘ 
=
˘˘  !
pageSize
˘˘" *
??
˘˘+ -
result
˘˘. 4
.
˘˘4 5

TotalItems
˘˘5 ?
;
˘˘? @
if
˚˚ 
(
˚˚ 
pageSize
˚˚ 
.
˚˚ 
HasValue
˚˚ %
)
˚˚% &
{
¸¸ 
result
˝˝ 
.
˝˝ 
	TotalPage
˝˝ $
=
˝˝% &
(
˝˝' (
result
˝˝( .
.
˝˝. /

TotalItems
˝˝/ 9
/
˝˝: ;
pageSize
˝˝< D
.
˝˝D E
Value
˝˝E J
)
˝˝J K
+
˝˝L M
(
˝˝N O
result
˝˝O U
.
˝˝U V

TotalItems
˝˝V `
%
˝˝a b
pageSize
˝˝c k
.
˝˝k l
Value
˝˝l q
>
˝˝r s
$num
˝˝t u
?
˝˝v w
$num
˝˝x y
:
˝˝z {
$num
˝˝| }
)
˝˝} ~
;
˝˝~ 
}
˛˛ 
switch
ÄÄ 
(
ÄÄ 
	direction
ÄÄ !
)
ÄÄ! "
{
ÅÅ 
case
ÇÇ 
OrderByDirection
ÇÇ )
.
ÇÇ) *

Descending
ÇÇ* 4
:
ÇÇ4 5
sorted
ÉÉ 
=
ÉÉ  
	Queryable
ÉÉ! *
.
ÉÉ* +
OrderByDescending
ÉÉ+ <
(
ÉÉ< =
query
ÉÉ= B
,
ÉÉB C
orderBy
ÉÉD K
)
ÉÉK L
;
ÉÉL M
if
ÑÑ 
(
ÑÑ 
pageSize
ÑÑ $
.
ÑÑ$ %
HasValue
ÑÑ% -
)
ÑÑ- .
{
ÖÖ 
lstModel
ÜÜ $
=
ÜÜ% &
await
ÜÜ' ,
sorted
ÜÜ- 3
.
ÜÜ3 4
Skip
ÜÜ4 8
(
ÜÜ8 9
	pageIndex
ÜÜ9 B
.
ÜÜB C
Value
ÜÜC H
*
ÜÜI J
pageSize
ÜÜK S
.
ÜÜS T
Value
ÜÜT Y
)
ÜÜY Z
.
áá 
Take
áá !
(
áá! "
pageSize
áá" *
.
áá* +
Value
áá+ 0
)
áá0 1
.
àà 
ToListAsync
àà (
(
àà( )
)
àà) *
.
àà* +
ConfigureAwait
àà+ 9
(
àà9 :
false
àà: ?
)
àà? @
;
àà@ A
}
ââ 
else
ää 
{
ãã 
lstModel
åå $
=
åå% &
sorted
åå' -
.
åå- .
ToList
åå. 4
(
åå4 5
)
åå5 6
;
åå6 7
}
çç 
break
éé 
;
éé 
default
êê 
:
êê 
sorted
ëë 
=
ëë  
	Queryable
ëë! *
.
ëë* +
OrderBy
ëë+ 2
(
ëë2 3
query
ëë3 8
,
ëë8 9
orderBy
ëë: A
)
ëëA B
;
ëëB C
if
íí 
(
íí 
pageSize
íí $
.
íí$ %
HasValue
íí% -
)
íí- .
{
ìì 
lstModel
îî $
=
îî% &
await
îî' ,
sorted
îî- 3
.
ïï 
Skip
ïï !
(
ïï! "
	pageIndex
ïï" +
.
ïï+ ,
Value
ïï, 1
*
ïï2 3
pageSize
ïï4 <
.
ïï< =
Value
ïï= B
)
ïïB C
.
ññ 
Take
ññ !
(
ññ! "
pageSize
ññ" *
.
ññ* +
Value
ññ+ 0
)
ññ0 1
.
óó 
ToListAsync
óó (
(
óó( )
)
óó) *
.
óó* +
ConfigureAwait
óó+ 9
(
óó9 :
false
óó: ?
)
óó? @
;
óó@ A
}
òò 
else
ôô 
{
öö 
lstModel
õõ $
=
õõ% &
await
õõ' ,
sorted
õõ- 3
.
õõ3 4
ToListAsync
õõ4 ?
(
õõ? @
)
õõ@ A
.
õõA B
ConfigureAwait
õõB P
(
õõP Q
false
õõQ V
)
õõV W
;
õõW X
}
úú 
break
ùù 
;
ùù 
}
ûû 
lstModel
üü 
.
üü 
ForEach
üü  
(
üü  !
model
üü! &
=>
üü' )
context
üü* 1
.
üü1 2
Entry
üü2 7
(
üü7 8
model
üü8 =
)
üü= >
.
üü> ?
State
üü? D
=
üüE F
EntityState
üüG R
.
üüR S
Detached
üüS [
)
üü[ \
;
üü\ ]
var
†† 
lstView
†† 
=
†† 
	ParseView
†† '
(
††' (
lstModel
††( 0
,
††0 1
context
††2 9
,
††9 :
transaction
††; F
)
††F G
;
††G H
result
°° 
.
°° 
Items
°° 
=
°° 
lstView
°° &
;
°°& '
return
¢¢ 
result
¢¢ 
;
¢¢ 
}
££ 
catch
§§ 
(
§§ 
	Exception
§§ 
ex
§§ 
)
§§  
{
•• 
LogErrorMessage
¶¶ 
(
¶¶  
ex
¶¶  "
)
¶¶" #
;
¶¶# $
return
ßß 
null
ßß 
;
ßß 
}
®® 
}
©© 	
public
≤≤ 
virtual
≤≤ 
List
≤≤ 
<
≤≤ 
TView
≤≤ !
>
≤≤! "
	ParseView
≤≤# ,
(
≤≤, -
List
≤≤- 1
<
≤≤1 2
TModel
≤≤2 8
>
≤≤8 9
	lstModels
≤≤: C
,
≤≤C D

TDbContext
≤≤E O
_context
≤≤P X
=
≤≤Y Z
null
≤≤[ _
,
≤≤_ `#
IDbContextTransaction
≤≤a v
_transaction≤≤w É
=≤≤Ñ Ö
null≤≤Ü ä
)≤≤ä ã
{
≥≥ 	
List
¥¥ 
<
¥¥ 
TView
¥¥ 
>
¥¥ 
lstView
¥¥ 
=
¥¥  !
new
¥¥" %
List
¥¥& *
<
¥¥* +
TView
¥¥+ 0
>
¥¥0 1
(
¥¥1 2
)
¥¥2 3
;
¥¥3 4
foreach
µµ 
(
µµ 
var
µµ 
model
µµ 
in
µµ !
	lstModels
µµ" +
)
µµ+ ,
{
∂∂ 
lstView
∑∑ 
.
∑∑ 
Add
∑∑ 
(
∑∑ 
	ParseView
∑∑ %
(
∑∑% &
model
∑∑& +
,
∑∑+ ,
_context
∑∑- 5
,
∑∑5 6
_transaction
∑∑7 C
)
∑∑C D
)
∑∑D E
;
∑∑E F
}
∏∏ 
return
∫∫ 
lstView
∫∫ 
;
∫∫ 
}
ªª 	
public
ƒƒ 
virtual
ƒƒ 
TView
ƒƒ 
	ParseView
ƒƒ &
(
ƒƒ& '
TModel
ƒƒ' -
model
ƒƒ. 3
,
ƒƒ3 4

TDbContext
ƒƒ5 ?
_context
ƒƒ@ H
=
ƒƒI J
null
ƒƒK O
,
ƒƒO P#
IDbContextTransaction
ƒƒQ f
_transaction
ƒƒg s
=
ƒƒt u
null
ƒƒv z
)
ƒƒz {
{
≈≈ 	
Type
∆∆ 
	classType
∆∆ 
=
∆∆ 
typeof
∆∆ #
(
∆∆# $
TView
∆∆$ )
)
∆∆) *
;
∆∆* +
ConstructorInfo
«« 
classConstructor
«« ,
=
««- .
	classType
««/ 8
.
««8 9
GetConstructor
««9 G
(
««G H
new
««H K
Type
««L P
[
««P Q
]
««Q R
{
««S T
model
««U Z
.
««Z [
GetType
««[ b
(
««b c
)
««c d
,
««d e
typeof
««f l
(
««l m

TDbContext
««m w
)
««w x
,
««x y
typeof««z Ä
(««Ä Å%
IDbContextTransaction««Å ñ
)««ñ ó
}««ò ô
)««ô ö
;««ö õ
if
»» 
(
»» 
classConstructor
»»  
!=
»»! #
null
»»$ (
)
»»( )
{
…… 
return
   
(
   
TView
   
)
   
classConstructor
   .
.
  . /
Invoke
  / 5
(
  5 6
new
  6 9
object
  : @
[
  @ A
]
  A B
{
  C D
model
  E J
,
  J K
_context
  L T
,
  T U
_transaction
  V b
}
  c d
)
  d e
;
  e f
}
ÀÀ 
else
ÃÃ 
{
ÕÕ 
classConstructor
ŒŒ  
=
ŒŒ! "
	classType
ŒŒ# ,
.
ŒŒ, -
GetConstructor
ŒŒ- ;
(
ŒŒ; <
new
ŒŒ< ?
Type
ŒŒ@ D
[
ŒŒD E
]
ŒŒE F
{
ŒŒG H
model
ŒŒI N
.
ŒŒN O
GetType
ŒŒO V
(
ŒŒV W
)
ŒŒW X
}
ŒŒY Z
)
ŒŒZ [
;
ŒŒ[ \
return
œœ 
(
œœ 
TView
œœ 
)
œœ 
classConstructor
œœ .
.
œœ. /
Invoke
œœ/ 5
(
œœ5 6
new
œœ6 9
object
œœ: @
[
œœ@ A
]
œœA B
{
œœC D
model
œœE J
}
œœK L
)
œœL M
;
œœM N
}
–– 
}
—— 	
public
÷÷ 
virtual
÷÷ 
void
÷÷  
RegisterAutoMapper
÷÷ .
(
÷÷. /
)
÷÷/ 0
{
◊◊ 	
Mapper
ÿÿ 
.
ÿÿ 

Initialize
ÿÿ 
(
ÿÿ 
cfg
ÿÿ !
=>
ÿÿ" $
{
ŸŸ 
cfg
⁄⁄ 
.
⁄⁄ 
	CreateMap
⁄⁄ 
<
⁄⁄ 
TModel
⁄⁄ $
,
⁄⁄$ %
TView
⁄⁄& +
>
⁄⁄+ ,
(
⁄⁄, -
)
⁄⁄- .
;
⁄⁄. /
cfg
€€ 
.
€€ 
	CreateMap
€€ 
<
€€ 
TView
€€ #
,
€€# $
TModel
€€% +
>
€€+ ,
(
€€, -
)
€€- .
;
€€. /
}
‹‹ 
)
‹‹ 
;
‹‹ 
}
›› 	
public
ÁÁ 
virtual
ÁÁ  
RepositoryResponse
ÁÁ )
<
ÁÁ) *
List
ÁÁ* .
<
ÁÁ. /
TView
ÁÁ/ 4
>
ÁÁ4 5
>
ÁÁ5 6
GetModelList
ÁÁ7 C
(
ÁÁC D

TDbContext
ÁÁD N
_context
ÁÁO W
=
ÁÁX Y
null
ÁÁZ ^
,
ÁÁ^ _#
IDbContextTransaction
ÁÁ` u
_transactionÁÁv Ç
=ÁÁÉ Ñ
nullÁÁÖ â
)ÁÁâ ä
{
ËË 	
var
ÈÈ 
context
ÈÈ 
=
ÈÈ 
_context
ÈÈ "
??
ÈÈ# %
InitContext
ÈÈ& 1
(
ÈÈ1 2
)
ÈÈ2 3
;
ÈÈ3 4
var
ÍÍ 
transaction
ÍÍ 
=
ÍÍ 
_transaction
ÍÍ *
??
ÍÍ+ -
context
ÍÍ. 5
.
ÍÍ5 6
Database
ÍÍ6 >
.
ÍÍ> ?
BeginTransaction
ÍÍ? O
(
ÍÍO P
)
ÍÍP Q
;
ÍÍQ R
List
ÎÎ 
<
ÎÎ 
TView
ÎÎ 
>
ÎÎ 
result
ÎÎ 
=
ÎÎ  
new
ÎÎ! $
List
ÎÎ% )
<
ÎÎ) *
TView
ÎÎ* /
>
ÎÎ/ 0
(
ÎÎ0 1
)
ÎÎ1 2
;
ÎÎ2 3
try
ÏÏ 
{
ÌÌ 
var
ÓÓ 
lstModel
ÓÓ 
=
ÓÓ 
context
ÓÓ &
.
ÓÓ& '
Set
ÓÓ' *
<
ÓÓ* +
TModel
ÓÓ+ 1
>
ÓÓ1 2
(
ÓÓ2 3
)
ÓÓ3 4
.
ÓÓ4 5
ToList
ÓÓ5 ;
(
ÓÓ; <
)
ÓÓ< =
;
ÓÓ= >
lstModel
 
.
 
ForEach
  
(
  !
model
! &
=>
' )
context
* 1
.
1 2
Entry
2 7
(
7 8
model
8 =
)
= >
.
> ?
State
? D
=
E F
EntityState
G R
.
R S
Detached
S [
)
[ \
;
\ ]
result
ÒÒ 
=
ÒÒ 
	ParseView
ÒÒ "
(
ÒÒ" #
lstModel
ÒÒ# +
,
ÒÒ+ ,
context
ÒÒ- 4
,
ÒÒ4 5
transaction
ÒÒ6 A
)
ÒÒA B
;
ÒÒB C
return
ÚÚ 
new
ÚÚ  
RepositoryResponse
ÚÚ -
<
ÚÚ- .
List
ÚÚ. 2
<
ÚÚ2 3
TView
ÚÚ3 8
>
ÚÚ8 9
>
ÚÚ9 :
(
ÚÚ: ;
)
ÚÚ; <
{
ÛÛ 
	IsSucceed
ÙÙ 
=
ÙÙ 
true
ÙÙ  $
,
ÙÙ$ %
Data
ıı 
=
ıı 
result
ıı !
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯ 
ex
¯¯ 
)
¯¯  
{
˘˘ 
LogErrorMessage
˙˙ 
(
˙˙  
ex
˙˙  "
)
˙˙" #
;
˙˙# $
if
˚˚ 
(
˚˚ 
_transaction
˚˚  
==
˚˚! #
null
˚˚$ (
)
˚˚( )
{
¸¸ 
transaction
˛˛ 
.
˛˛  
Rollback
˛˛  (
(
˛˛( )
)
˛˛) *
;
˛˛* +
}
ˇˇ 
return
ÅÅ 
new
ÅÅ  
RepositoryResponse
ÅÅ -
<
ÅÅ- .
List
ÅÅ. 2
<
ÅÅ2 3
TView
ÅÅ3 8
>
ÅÅ8 9
>
ÅÅ9 :
(
ÅÅ: ;
)
ÅÅ; <
{
ÇÇ 
	IsSucceed
ÉÉ 
=
ÉÉ 
false
ÉÉ  %
,
ÉÉ% &
Data
ÑÑ 
=
ÑÑ 
null
ÑÑ 
,
ÑÑ  
	Exception
ÖÖ 
=
ÖÖ 
ex
ÖÖ  "
}
ÜÜ 
;
ÜÜ 
}
áá 
finally
àà 
{
ââ 
if
ää 
(
ää 
_context
ää 
==
ää 
null
ää  $
)
ää$ %
{
ãã 
context
çç 
.
çç 
Dispose
çç #
(
çç# $
)
çç$ %
;
çç% &
}
éé 
}
èè 
}
êê 	
public
úú 
virtual
úú  
RepositoryResponse
úú )
<
úú) *
PaginationModel
úú* 9
<
úú9 :
TView
úú: ?
>
úú? @
>
úú@ A
GetModelList
úúB N
(
úúN O
string
ùù !
orderByPropertyName
ùù "
,
ùù" #
OrderByDirection
ùù$ 4
	direction
ùù5 >
,
ùù> ?
int
ùù@ C
?
ùùC D
pageSize
ùùE M
,
ùùM N
int
ùùO R
?
ùùR S
	pageIndex
ùùT ]
,
ûû 	

TDbContext
ûû
 
_context
ûû 
=
ûû 
null
ûû  $
,
ûû$ %#
IDbContextTransaction
ûû& ;
_transaction
ûû< H
=
ûûI J
null
ûûK O
)
ûûO P
{
üü 	
var
†† 
context
†† 
=
†† 
_context
†† "
??
††# %
InitContext
††& 1
(
††1 2
)
††2 3
;
††3 4
var
°° 
transaction
°° 
=
°° 
_transaction
°° *
??
°°+ -
context
°°. 5
.
°°5 6
Database
°°6 >
.
°°> ?
BeginTransaction
°°? O
(
°°O P
)
°°P Q
;
°°Q R
try
££ 
{
§§ 
var
•• 
query
•• 
=
•• 
context
•• #
.
••# $
Set
••$ '
<
••' (
TModel
••( .
>
••. /
(
••/ 0
)
••0 1
;
••1 2
var
ßß 
result
ßß 
=
ßß 
ParsePagingQuery
ßß -
(
ßß- .
query
ßß. 3
,
ßß3 4!
orderByPropertyName
ßß5 H
,
ßßH I
	direction
ßßJ S
,
ßßS T
pageSize
ßßU ]
,
ßß] ^
	pageIndex
ßß_ h
,
®® 
context
®® 
,
®® 
transaction
®® &
)
®®& '
;
®®' (
return
™™ 
new
™™  
RepositoryResponse
™™ -
<
™™- .
PaginationModel
™™. =
<
™™= >
TView
™™> C
>
™™C D
>
™™D E
(
™™E F
)
™™F G
{
´´ 
	IsSucceed
¨¨ 
=
¨¨ 
true
¨¨  $
,
¨¨$ %
Data
≠≠ 
=
≠≠ 
result
≠≠ !
}
ÆÆ 
;
ÆÆ 
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± 
LogErrorMessage
≤≤ 
(
≤≤  
ex
≤≤  "
)
≤≤" #
;
≤≤# $
if
≥≥ 
(
≥≥ 
_transaction
≥≥  
==
≥≥! #
null
≥≥$ (
)
≥≥( )
{
¥¥ 
transaction
∂∂ 
.
∂∂  
Rollback
∂∂  (
(
∂∂( )
)
∂∂) *
;
∂∂* +
}
∑∑ 
return
ππ 
new
ππ  
RepositoryResponse
ππ -
<
ππ- .
PaginationModel
ππ. =
<
ππ= >
TView
ππ> C
>
ππC D
>
ππD E
(
ππE F
)
ππF G
{
∫∫ 
	IsSucceed
ªª 
=
ªª 
false
ªª  %
,
ªª% &
Data
ºº 
=
ºº 
null
ºº 
,
ºº  
	Exception
ΩΩ 
=
ΩΩ 
ex
ΩΩ  "
}
ææ 
;
ææ 
}
øø 
finally
¿¿ 
{
¡¡ 
if
¬¬ 
(
¬¬ 
_context
¬¬ 
==
¬¬ 
null
¬¬  $
)
¬¬$ %
{
√√ 
context
≈≈ 
.
≈≈ 
Dispose
≈≈ #
(
≈≈# $
)
≈≈$ %
;
≈≈% &
}
∆∆ 
}
«« 
}
»» 	
public
–– 
virtual
–– 
async
–– 
Task
–– !
<
––! " 
RepositoryResponse
––" 4
<
––4 5
List
––5 9
<
––9 :
TView
––: ?
>
––? @
>
––@ A
>
––A B
GetModelListAsync
––C T
(
––T U

TDbContext
––U _
_context
––` h
=
––i j
null
––k o
,
––o p$
IDbContextTransaction––q Ü
_transaction––á ì
=––î ï
null––ñ ö
)––ö õ
{
—— 	
var
““ 
context
““ 
=
““ 
_context
““ "
??
““# %
InitContext
““& 1
(
““1 2
)
““2 3
;
““3 4
var
”” 
transaction
”” 
=
”” 
_transaction
”” *
??
””+ -
context
””. 5
.
””5 6
Database
””6 >
.
””> ?
BeginTransaction
””? O
(
””O P
)
””P Q
;
””Q R
List
‘‘ 
<
‘‘ 
TView
‘‘ 
>
‘‘ 
result
‘‘ 
=
‘‘  
new
‘‘! $
List
‘‘% )
<
‘‘) *
TView
‘‘* /
>
‘‘/ 0
(
‘‘0 1
)
‘‘1 2
;
‘‘2 3
try
’’ 
{
÷÷ 
var
◊◊ 
lstModel
◊◊ 
=
◊◊ 
await
◊◊ $
context
◊◊% ,
.
◊◊, -
Set
◊◊- 0
<
◊◊0 1
TModel
◊◊1 7
>
◊◊7 8
(
◊◊8 9
)
◊◊9 :
.
◊◊: ;
ToListAsync
◊◊; F
(
◊◊F G
)
◊◊G H
.
◊◊H I
ConfigureAwait
◊◊I W
(
◊◊W X
false
◊◊X ]
)
◊◊] ^
;
◊◊^ _
lstModel
ŸŸ 
.
ŸŸ 
ForEach
ŸŸ  
(
ŸŸ  !
model
ŸŸ! &
=>
ŸŸ' )
context
ŸŸ* 1
.
ŸŸ1 2
Entry
ŸŸ2 7
(
ŸŸ7 8
model
ŸŸ8 =
)
ŸŸ= >
.
ŸŸ> ?
State
ŸŸ? D
=
ŸŸE F
EntityState
ŸŸG R
.
ŸŸR S
Detached
ŸŸS [
)
ŸŸ[ \
;
ŸŸ\ ]
result
⁄⁄ 
=
⁄⁄ 
	ParseView
⁄⁄ "
(
⁄⁄" #
lstModel
⁄⁄# +
,
⁄⁄+ ,
_context
⁄⁄- 5
,
⁄⁄5 6
_transaction
⁄⁄7 C
)
⁄⁄C D
;
⁄⁄D E
return
€€ 
new
€€  
RepositoryResponse
€€ -
<
€€- .
List
€€. 2
<
€€2 3
TView
€€3 8
>
€€8 9
>
€€9 :
(
€€: ;
)
€€; <
{
‹‹ 
	IsSucceed
›› 
=
›› 
true
››  $
,
››$ %
Data
ﬁﬁ 
=
ﬁﬁ 
result
ﬁﬁ !
}
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
··  
{
‚‚ 
LogErrorMessage
„„ 
(
„„  
ex
„„  "
)
„„" #
;
„„# $
if
‰‰ 
(
‰‰ 
_transaction
‰‰  
==
‰‰! #
null
‰‰$ (
)
‰‰( )
{
ÂÂ 
transaction
ÁÁ 
.
ÁÁ  
Rollback
ÁÁ  (
(
ÁÁ( )
)
ÁÁ) *
;
ÁÁ* +
}
ËË 
return
ÍÍ 
new
ÍÍ  
RepositoryResponse
ÍÍ -
<
ÍÍ- .
List
ÍÍ. 2
<
ÍÍ2 3
TView
ÍÍ3 8
>
ÍÍ8 9
>
ÍÍ9 :
(
ÍÍ: ;
)
ÍÍ; <
{
ÎÎ 
	IsSucceed
ÏÏ 
=
ÏÏ 
false
ÏÏ  %
,
ÏÏ% &
Data
ÌÌ 
=
ÌÌ 
null
ÌÌ 
,
ÌÌ  
	Exception
ÓÓ 
=
ÓÓ 
ex
ÓÓ  "
}
ÔÔ 
;
ÔÔ 
}
 
finally
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
_context
ÛÛ 
==
ÛÛ 
null
ÛÛ  $
)
ÛÛ$ %
{
ÙÙ 
context
ˆˆ 
.
ˆˆ 
Dispose
ˆˆ #
(
ˆˆ# $
)
ˆˆ$ %
;
ˆˆ% &
}
˜˜ 
}
¯¯ 
}
˘˘ 	
public
ÖÖ 
virtual
ÖÖ 
async
ÖÖ 
Task
ÖÖ !
<
ÖÖ! " 
RepositoryResponse
ÖÖ" 4
<
ÖÖ4 5
PaginationModel
ÖÖ5 D
<
ÖÖD E
TView
ÖÖE J
>
ÖÖJ K
>
ÖÖK L
>
ÖÖL M
GetModelListAsync
ÖÖN _
(
ÖÖ_ `
string
ÜÜ !
orderByPropertyName
ÜÜ "
,
ÜÜ" #
OrderByDirection
ÜÜ$ 4
	direction
ÜÜ5 >
,
ÜÜ> ?
int
ÜÜ@ C
?
ÜÜC D
pageSize
ÜÜE M
,
ÜÜM N
int
ÜÜO R
?
ÜÜR S
	pageIndex
ÜÜT ]
,
áá 	

TDbContext
áá
 
_context
áá 
=
áá 
null
áá  $
,
áá$ %#
IDbContextTransaction
áá& ;
_transaction
áá< H
=
ááI J
null
ááK O
)
ááO P
{
àà 	
var
ââ 
context
ââ 
=
ââ 
_context
ââ "
??
ââ# %
InitContext
ââ& 1
(
ââ1 2
)
ââ2 3
;
ââ3 4
var
ää 
transaction
ää 
=
ää 
_transaction
ää *
??
ää+ -
context
ää. 5
.
ää5 6
Database
ää6 >
.
ää> ?
BeginTransaction
ää? O
(
ääO P
)
ääP Q
;
ääQ R
try
åå 
{
çç 
var
éé 
query
éé 
=
éé 
context
éé #
.
éé# $
Set
éé$ '
<
éé' (
TModel
éé( .
>
éé. /
(
éé/ 0
)
éé0 1
;
éé1 2
var
êê 
result
êê 
=
êê 
await
êê "#
ParsePagingQueryAsync
êê# 8
(
êê8 9
query
êê9 >
,
êê> ?!
orderByPropertyName
êê@ S
,
êêS T
	direction
êêU ^
,
êê^ _
pageSize
êê` h
,
êêh i
	pageIndex
êêj s
,
êês t
context
êêu |
,
êê| }
transactionêê~ â
)êêâ ä
.êêä ã
ConfigureAwaitêêã ô
(êêô ö
falseêêö ü
)êêü †
;êê† °
return
ëë 
new
ëë  
RepositoryResponse
ëë -
<
ëë- .
PaginationModel
ëë. =
<
ëë= >
TView
ëë> C
>
ëëC D
>
ëëD E
(
ëëE F
)
ëëF G
{
íí 
	IsSucceed
ìì 
=
ìì 
true
ìì  $
,
ìì$ %
Data
îî 
=
îî 
result
îî !
}
ïï 
;
ïï 
}
ññ 
catch
óó 
(
óó 
	Exception
óó 
ex
óó 
)
óó  
{
òò 
LogErrorMessage
ôô 
(
ôô  
ex
ôô  "
)
ôô" #
;
ôô# $
if
öö 
(
öö 
_transaction
öö  
==
öö! #
null
öö$ (
)
öö( )
{
õõ 
transaction
ùù 
.
ùù  
Rollback
ùù  (
(
ùù( )
)
ùù) *
;
ùù* +
}
ûû 
return
†† 
new
††  
RepositoryResponse
†† -
<
††- .
PaginationModel
††. =
<
††= >
TView
††> C
>
††C D
>
††D E
(
††E F
)
††F G
{
°° 
	IsSucceed
¢¢ 
=
¢¢ 
false
¢¢  %
,
¢¢% &
Data
££ 
=
££ 
null
££ 
,
££  
	Exception
§§ 
=
§§ 
ex
§§  "
}
•• 
;
•• 
}
¶¶ 
finally
ßß 
{
®® 
if
©© 
(
©© 
_context
©© 
==
©© 
null
©©  $
)
©©$ %
{
™™ 
context
¨¨ 
.
¨¨ 
Dispose
¨¨ #
(
¨¨# $
)
¨¨$ %
;
¨¨% &
}
≠≠ 
}
ÆÆ 
}
ØØ 	
public
ºº 
virtual
ºº  
RepositoryResponse
ºº )
<
ºº) *
List
ºº* .
<
ºº. /
TView
ºº/ 4
>
ºº4 5
>
ºº5 6
GetModelListBy
ºº7 E
(
ººE F

Expression
ººF P
<
ººP Q
Func
ººQ U
<
ººU V
TModel
ººV \
,
ºº\ ]
bool
ºº^ b
>
ººb c
>
ººc d
	predicate
ººe n
,
ΩΩ 	

TDbContext
ΩΩ
 
_context
ΩΩ 
=
ΩΩ 
null
ΩΩ  $
,
ΩΩ$ %#
IDbContextTransaction
ΩΩ& ;
_transaction
ΩΩ< H
=
ΩΩI J
null
ΩΩK O
)
ΩΩO P
{
ææ 	
var
øø 
context
øø 
=
øø 
_context
øø "
??
øø# %
InitContext
øø& 1
(
øø1 2
)
øø2 3
;
øø3 4
var
¿¿ 
transaction
¿¿ 
=
¿¿ 
_transaction
¿¿ *
??
¿¿+ -
context
¿¿. 5
.
¿¿5 6
Database
¿¿6 >
.
¿¿> ?
BeginTransaction
¿¿? O
(
¿¿O P
)
¿¿P Q
;
¿¿Q R
try
¬¬ 
{
√√ 
var
ƒƒ 
lstModel
ƒƒ 
=
ƒƒ 
context
ƒƒ &
.
ƒƒ& '
Set
ƒƒ' *
<
ƒƒ* +
TModel
ƒƒ+ 1
>
ƒƒ1 2
(
ƒƒ2 3
)
ƒƒ3 4
.
ƒƒ4 5
Where
ƒƒ5 :
(
ƒƒ: ;
	predicate
ƒƒ; D
)
ƒƒD E
.
ƒƒE F
ToList
ƒƒF L
(
ƒƒL M
)
ƒƒM N
;
ƒƒN O
lstModel
≈≈ 
.
≈≈ 
ForEach
≈≈  
(
≈≈  !
model
≈≈! &
=>
≈≈' )
context
≈≈* 1
.
≈≈1 2
Entry
≈≈2 7
(
≈≈7 8
model
≈≈8 =
)
≈≈= >
.
≈≈> ?
State
≈≈? D
=
≈≈E F
EntityState
≈≈G R
.
≈≈R S
Detached
≈≈S [
)
≈≈[ \
;
≈≈\ ]
var
∆∆ 
lstViewResult
∆∆ !
=
∆∆" #
	ParseView
∆∆$ -
(
∆∆- .
lstModel
∆∆. 6
,
∆∆6 7
_context
∆∆8 @
,
∆∆@ A
_transaction
∆∆B N
)
∆∆N O
;
∆∆O P
return
«« 
new
««  
RepositoryResponse
«« -
<
««- .
List
««. 2
<
««2 3
TView
««3 8
>
««8 9
>
««9 :
(
««: ;
)
««; <
{
»» 
	IsSucceed
…… 
=
…… 
true
……  $
,
……$ %
Data
   
=
   
lstViewResult
   (
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ 
LogErrorMessage
œœ 
(
œœ  
ex
œœ  "
)
œœ" #
;
œœ# $
if
–– 
(
–– 
_transaction
––  
==
––! #
null
––$ (
)
––( )
{
—— 
transaction
”” 
.
””  
Rollback
””  (
(
””( )
)
””) *
;
””* +
}
‘‘ 
return
÷÷ 
new
÷÷  
RepositoryResponse
÷÷ -
<
÷÷- .
List
÷÷. 2
<
÷÷2 3
TView
÷÷3 8
>
÷÷8 9
>
÷÷9 :
(
÷÷: ;
)
÷÷; <
{
◊◊ 
	IsSucceed
ÿÿ 
=
ÿÿ 
false
ÿÿ  %
,
ÿÿ% &
Data
ŸŸ 
=
ŸŸ 
null
ŸŸ 
,
ŸŸ  
	Exception
⁄⁄ 
=
⁄⁄ 
ex
⁄⁄  "
}
€€ 
;
€€ 
}
‹‹ 
finally
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
_context
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ  $
)
ﬂﬂ$ %
{
‡‡ 
context
‚‚ 
.
‚‚ 
Dispose
‚‚ #
(
‚‚# $
)
‚‚$ %
;
‚‚% &
}
„„ 
}
‰‰ 
}
ÂÂ 	
public
ÚÚ 
virtual
ÚÚ  
RepositoryResponse
ÚÚ )
<
ÚÚ) *
PaginationModel
ÚÚ* 9
<
ÚÚ9 :
TView
ÚÚ: ?
>
ÚÚ? @
>
ÚÚ@ A
GetModelListBy
ÚÚB P
(
ÚÚP Q

Expression
ÛÛ 
<
ÛÛ 
Func
ÛÛ 
<
ÛÛ 
TModel
ÛÛ 
,
ÛÛ 
bool
ÛÛ  $
>
ÛÛ$ %
>
ÛÛ% &
	predicate
ÛÛ' 0
,
ÛÛ0 1
string
ÛÛ2 8!
orderByPropertyName
ÛÛ9 L
,
ÛÛL M
OrderByDirection
ÛÛN ^
	direction
ÛÛ_ h
,
ÛÛh i
int
ÛÛj m
?
ÛÛm n
pageSize
ÛÛo w
,
ÛÛw x
int
ÛÛy |
?
ÛÛ| }
	pageIndexÛÛ~ á
,
ÙÙ 	

TDbContext
ÙÙ
 
_context
ÙÙ 
=
ÙÙ 
null
ÙÙ  $
,
ÙÙ$ %#
IDbContextTransaction
ÙÙ& ;
_transaction
ÙÙ< H
=
ÙÙI J
null
ÙÙK O
)
ÙÙO P
{
ıı 	
var
ˆˆ 
context
ˆˆ 
=
ˆˆ 
_context
ˆˆ "
??
ˆˆ# %
InitContext
ˆˆ& 1
(
ˆˆ1 2
)
ˆˆ2 3
;
ˆˆ3 4
var
˜˜ 
transaction
˜˜ 
=
˜˜ 
_transaction
˜˜ *
??
˜˜+ -
context
˜˜. 5
.
˜˜5 6
Database
˜˜6 >
.
˜˜> ?
BeginTransaction
˜˜? O
(
˜˜O P
)
˜˜P Q
;
˜˜Q R
try
˘˘ 
{
˙˙ 
var
˚˚ 
query
˚˚ 
=
˚˚ 
context
˚˚ #
.
˚˚# $
Set
˚˚$ '
<
˚˚' (
TModel
˚˚( .
>
˚˚. /
(
˚˚/ 0
)
˚˚0 1
.
˚˚1 2
Where
˚˚2 7
(
˚˚7 8
	predicate
˚˚8 A
)
˚˚A B
;
˚˚B C
var
¸¸ 
result
¸¸ 
=
¸¸ 
ParsePagingQuery
¸¸ -
(
¸¸- .
query
¸¸. 3
,
˝˝ !
orderByPropertyName
˝˝ %
,
˝˝% &
	direction
˝˝' 0
,
˛˛ 
pageSize
˛˛ 
,
˛˛ 
	pageIndex
˛˛ %
,
ˇˇ 
context
ˇˇ 
,
ˇˇ 
transaction
ˇˇ &
)
ˇˇ& '
;
ˇˇ' (
return
ÄÄ 
new
ÄÄ  
RepositoryResponse
ÄÄ -
<
ÄÄ- .
PaginationModel
ÄÄ. =
<
ÄÄ= >
TView
ÄÄ> C
>
ÄÄC D
>
ÄÄD E
(
ÄÄE F
)
ÄÄF G
{
ÅÅ 
	IsSucceed
ÇÇ 
=
ÇÇ 
true
ÇÇ  $
,
ÇÇ$ %
Data
ÉÉ 
=
ÉÉ 
result
ÉÉ !
}
ÑÑ 
;
ÑÑ 
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
LogErrorMessage
àà 
(
àà  
ex
àà  "
)
àà" #
;
àà# $
if
ââ 
(
ââ 
_transaction
ââ  
==
ââ! #
null
ââ$ (
)
ââ( )
{
ää 
transaction
åå 
.
åå  
Rollback
åå  (
(
åå( )
)
åå) *
;
åå* +
}
çç 
return
èè 
new
èè  
RepositoryResponse
èè -
<
èè- .
PaginationModel
èè. =
<
èè= >
TView
èè> C
>
èèC D
>
èèD E
(
èèE F
)
èèF G
{
êê 
	IsSucceed
ëë 
=
ëë 
false
ëë  %
,
ëë% &
Data
íí 
=
íí 
null
íí 
,
íí  
	Exception
ìì 
=
ìì 
ex
ìì  "
}
îî 
;
îî 
}
ïï 
finally
ññ 
{
óó 
if
òò 
(
òò 
_context
òò 
==
òò 
null
òò  $
)
òò$ %
{
ôô 
context
õõ 
.
õõ 
Dispose
õõ #
(
õõ# $
)
õõ$ %
;
õõ% &
}
úú 
}
ùù 
}
ûû 	
public
ßß 
virtual
ßß 
async
ßß 
Task
ßß !
<
ßß! " 
RepositoryResponse
ßß" 4
<
ßß4 5
List
ßß5 9
<
ßß9 :
TView
ßß: ?
>
ßß? @
>
ßß@ A
>
ßßA B!
GetModelListByAsync
ßßC V
(
ßßV W

Expression
ßßW a
<
ßßa b
Func
ßßb f
<
ßßf g
TModel
ßßg m
,
ßßm n
bool
ßßo s
>
ßßs t
>
ßßt u
	predicate
ßßv 
,
®® 	

TDbContext
®®
 
_context
®® 
=
®® 
null
®®  $
,
®®$ %#
IDbContextTransaction
®®& ;
_transaction
®®< H
=
®®I J
null
®®K O
)
®®O P
{
©© 	
var
™™ 
context
™™ 
=
™™ 
_context
™™ "
??
™™# %
InitContext
™™& 1
(
™™1 2
)
™™2 3
;
™™3 4
var
´´ 
transaction
´´ 
=
´´ 
_transaction
´´ *
??
´´+ -
context
´´. 5
.
´´5 6
Database
´´6 >
.
´´> ?
BeginTransaction
´´? O
(
´´O P
)
´´P Q
;
´´Q R
try
≠≠ 
{
ÆÆ 
var
ØØ 
query
ØØ 
=
ØØ 
context
ØØ #
.
ØØ# $
Set
ØØ$ '
<
ØØ' (
TModel
ØØ( .
>
ØØ. /
(
ØØ/ 0
)
ØØ0 1
.
ØØ1 2
Where
ØØ2 7
(
ØØ7 8
	predicate
ØØ8 A
)
ØØA B
;
ØØB C
var
∞∞ 
lstModel
∞∞ 
=
∞∞ 
await
∞∞ $
query
∞∞% *
.
∞∞* +
ToListAsync
∞∞+ 6
(
∞∞6 7
)
∞∞7 8
.
∞∞8 9
ConfigureAwait
∞∞9 G
(
∞∞G H
false
∞∞H M
)
∞∞M N
;
∞∞N O
lstModel
±± 
.
±± 
ForEach
±±  
(
±±  !
model
±±! &
=>
±±' )
context
±±* 1
.
±±1 2
Entry
±±2 7
(
±±7 8
model
±±8 =
)
±±= >
.
±±> ?
State
±±? D
=
±±E F
EntityState
±±G R
.
±±R S
Detached
±±S [
)
±±[ \
;
±±\ ]
var
≤≤ 
result
≤≤ 
=
≤≤ 
	ParseView
≤≤ &
(
≤≤& '
lstModel
≤≤' /
,
≤≤/ 0
_context
≤≤1 9
,
≤≤9 :
_transaction
≤≤; G
)
≤≤G H
;
≤≤H I
return
≥≥ 
new
≥≥  
RepositoryResponse
≥≥ -
<
≥≥- .
List
≥≥. 2
<
≥≥2 3
TView
≥≥3 8
>
≥≥8 9
>
≥≥9 :
(
≥≥: ;
)
≥≥; <
{
¥¥ 
	IsSucceed
µµ 
=
µµ 
true
µµ  $
,
µµ$ %
Data
∂∂ 
=
∂∂ 
result
∂∂ !
}
∑∑ 
;
∑∑ 
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ 
ex
ππ 
)
ππ  
{
∫∫ 
LogErrorMessage
ªª 
(
ªª  
ex
ªª  "
)
ªª" #
;
ªª# $
if
ºº 
(
ºº 
_transaction
ºº  
==
ºº! #
null
ºº$ (
)
ºº( )
{
ΩΩ 
transaction
øø 
.
øø  
Rollback
øø  (
(
øø( )
)
øø) *
;
øø* +
}
¿¿ 
return
¬¬ 
new
¬¬  
RepositoryResponse
¬¬ -
<
¬¬- .
List
¬¬. 2
<
¬¬2 3
TView
¬¬3 8
>
¬¬8 9
>
¬¬9 :
(
¬¬: ;
)
¬¬; <
{
√√ 
	IsSucceed
ƒƒ 
=
ƒƒ 
false
ƒƒ  %
,
ƒƒ% &
Data
≈≈ 
=
≈≈ 
null
≈≈ 
,
≈≈  
	Exception
∆∆ 
=
∆∆ 
ex
∆∆  "
}
«« 
;
«« 
}
»» 
finally
…… 
{
   
if
ÀÀ 
(
ÀÀ 
_context
ÀÀ 
==
ÀÀ 
null
ÀÀ  $
)
ÀÀ$ %
{
ÃÃ 
context
ŒŒ 
.
ŒŒ 
Dispose
ŒŒ #
(
ŒŒ# $
)
ŒŒ$ %
;
ŒŒ% &
}
œœ 
}
–– 
}
—— 	
public
ﬁﬁ 
virtual
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ !
<
ﬁﬁ! " 
RepositoryResponse
ﬁﬁ" 4
<
ﬁﬁ4 5
PaginationModel
ﬁﬁ5 D
<
ﬁﬁD E
TView
ﬁﬁE J
>
ﬁﬁJ K
>
ﬁﬁK L
>
ﬁﬁL M!
GetModelListByAsync
ﬁﬁN a
(
ﬁﬁa b

Expression
ﬂﬂ 
<
ﬂﬂ 
Func
ﬂﬂ 
<
ﬂﬂ 
TModel
ﬂﬂ 
,
ﬂﬂ 
bool
ﬂﬂ  $
>
ﬂﬂ$ %
>
ﬂﬂ% &
	predicate
ﬂﬂ' 0
,
ﬂﬂ0 1
string
ﬂﬂ2 8!
orderByPropertyName
ﬂﬂ9 L
,
‡‡ 	
OrderByDirection
‡‡
 
	direction
‡‡ $
,
‡‡$ %
int
‡‡& )
?
‡‡) *
pageSize
‡‡+ 3
,
‡‡3 4
int
‡‡5 8
?
‡‡8 9
	pageIndex
‡‡: C
,
·· 	

TDbContext
··
 
_context
·· 
=
·· 
null
··  $
,
··$ %#
IDbContextTransaction
··& ;
_transaction
··< H
=
··I J
null
··K O
)
··O P
{
‚‚ 	
var
„„ 
context
„„ 
=
„„ 
_context
„„ "
??
„„# %
InitContext
„„& 1
(
„„1 2
)
„„2 3
;
„„3 4
var
‰‰ 
transaction
‰‰ 
=
‰‰ 
_transaction
‰‰ *
??
‰‰+ -
context
‰‰. 5
.
‰‰5 6
Database
‰‰6 >
.
‰‰> ?
BeginTransaction
‰‰? O
(
‰‰O P
)
‰‰P Q
;
‰‰Q R
try
ÊÊ 
{
ÁÁ 
var
ËË 
query
ËË 
=
ËË 
context
ËË #
.
ËË# $
Set
ËË$ '
<
ËË' (
TModel
ËË( .
>
ËË. /
(
ËË/ 0
)
ËË0 1
.
ËË1 2
Where
ËË2 7
(
ËË7 8
	predicate
ËË8 A
)
ËËA B
;
ËËB C
var
ÍÍ 
result
ÍÍ 
=
ÍÍ 
await
ÍÍ "#
ParsePagingQueryAsync
ÍÍ# 8
(
ÍÍ8 9
query
ÍÍ9 >
,
ÎÎ !
orderByPropertyName
ÎÎ %
,
ÎÎ% &
	direction
ÎÎ' 0
,
ÏÏ 
pageSize
ÏÏ 
,
ÏÏ 
	pageIndex
ÏÏ %
,
ÌÌ 
context
ÌÌ 
,
ÌÌ 
transaction
ÌÌ &
)
ÌÌ& '
.
ÌÌ' (
ConfigureAwait
ÌÌ( 6
(
ÌÌ6 7
false
ÌÌ7 <
)
ÌÌ< =
;
ÌÌ= >
return
ÓÓ 
new
ÓÓ  
RepositoryResponse
ÓÓ -
<
ÓÓ- .
PaginationModel
ÓÓ. =
<
ÓÓ= >
TView
ÓÓ> C
>
ÓÓC D
>
ÓÓD E
(
ÓÓE F
)
ÓÓF G
{
ÔÔ 
	IsSucceed
 
=
 
true
  $
,
$ %
Data
ÒÒ 
=
ÒÒ 
result
ÒÒ !
}
ÚÚ 
;
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
LogErrorMessage
ˆˆ 
(
ˆˆ  
ex
ˆˆ  "
)
ˆˆ" #
;
ˆˆ# $
if
˜˜ 
(
˜˜ 
_transaction
˜˜  
==
˜˜! #
null
˜˜$ (
)
˜˜( )
{
¯¯ 
transaction
˙˙ 
.
˙˙  
Rollback
˙˙  (
(
˙˙( )
)
˙˙) *
;
˙˙* +
}
˚˚ 
return
˝˝ 
new
˝˝  
RepositoryResponse
˝˝ -
<
˝˝- .
PaginationModel
˝˝. =
<
˝˝= >
TView
˝˝> C
>
˝˝C D
>
˝˝D E
(
˝˝E F
)
˝˝F G
{
˛˛ 
	IsSucceed
ˇˇ 
=
ˇˇ 
false
ˇˇ  %
,
ˇˇ% &
Data
Ä	Ä	 
=
Ä	Ä	 
null
Ä	Ä	 
,
Ä	Ä	  
	Exception
Å	Å	 
=
Å	Å	 
ex
Å	Å	  "
}
Ç	Ç	 
;
Ç	Ç	 
}
É	É	 
finally
Ñ	Ñ	 
{
Ö	Ö	 
if
Ü	Ü	 
(
Ü	Ü	 
_context
Ü	Ü	 
==
Ü	Ü	 
null
Ü	Ü	  $
)
Ü	Ü	$ %
{
á	á	 
context
â	â	 
.
â	â	 
Dispose
â	â	 #
(
â	â	# $
)
â	â	$ %
;
â	â	% &
}
ä	ä	 
}
ã	ã	 
}
å	å	 	
public
ò	ò	 
virtual
ò	ò	  
RepositoryResponse
ò	ò	 )
<
ò	ò	) *
bool
ò	ò	* .
>
ò	ò	. /
RemoveListModel
ò	ò	0 ?
(
ò	ò	? @

Expression
ò	ò	@ J
<
ò	ò	J K
Func
ò	ò	K O
<
ò	ò	O P
TModel
ò	ò	P V
,
ò	ò	V W
bool
ò	ò	X \
>
ò	ò	\ ]
>
ò	ò	] ^
	predicate
ò	ò	_ h
,
ô	ô	 	

TDbContext
ô	ô	
 
_context
ô	ô	 
=
ô	ô	 
null
ô	ô	  $
,
ô	ô	$ %#
IDbContextTransaction
ô	ô	& ;
_transaction
ô	ô	< H
=
ô	ô	I J
null
ô	ô	K O
)
ô	ô	O P
{
ö	ö	 	
bool
õ	õ	 
isRoot
õ	õ	 
=
õ	õ	 
_context
õ	õ	 "
==
õ	õ	# %
null
õ	õ	& *
;
õ	õ	* +

TDbContext
ú	ú	 
context
ú	ú	 
=
ú	ú	  
_context
ú	ú	! )
??
ú	ú	* ,
InitContext
ú	ú	- 8
(
ú	ú	8 9
)
ú	ú	9 :
;
ú	ú	: ;
var
ù	ù	 
transaction
ù	ù	 
=
ù	ù	 
_transaction
ù	ù	 *
??
ù	ù	+ -
context
ù	ù	. 5
.
ù	ù	5 6
Database
ù	ù	6 >
.
ù	ù	> ?
BeginTransaction
ù	ù	? O
(
ù	ù	O P
)
ù	ù	P Q
;
ù	ù	Q R
try
û	û	 
{
ü	ü	 
var
†	†	 
Items
†	†	 
=
†	†	 
context
†	†	 #
.
†	†	# $
Set
†	†	$ '
<
†	†	' (
TModel
†	†	( .
>
†	†	. /
(
†	†	/ 0
)
†	†	0 1
.
†	†	1 2
Where
†	†	2 7
(
†	†	7 8
	predicate
†	†	8 A
)
†	†	A B
.
†	†	B C
ToList
†	†	C I
(
†	†	I J
)
†	†	J K
;
†	†	K L
bool
°	°	 
result
°	°	 
=
°	°	 
true
°	°	 "
;
°	°	" #
if
¢	¢	 
(
¢	¢	 
Items
¢	¢	 
!=
¢	¢	 
null
¢	¢	 !
)
¢	¢	! "
{
£	£	 
foreach
§	§	 
(
§	§	 
var
§	§	  
model
§	§	! &
in
§	§	' )
Items
§	§	* /
)
§	§	/ 0
{
•	•	 
if
¶	¶	 
(
¶	¶	 
result
¶	¶	 "
)
¶	¶	" #
{
ß	ß	 
var
®	®	 
r
®	®	  !
=
®	®	" #
RemoveModel
®	®	$ /
(
®	®	/ 0
model
®	®	0 5
,
®	®	5 6
context
®	®	7 >
,
®	®	> ?
transaction
®	®	@ K
)
®	®	K L
;
®	®	L M
result
©	©	 "
=
©	©	# $
result
©	©	% +
&&
©	©	, .
r
©	©	/ 0
.
©	©	0 1
	IsSucceed
©	©	1 :
;
©	©	: ;
}
™	™	 
else
´	´	 
{
¨	¨	 
break
≠	≠	 !
;
≠	≠	! "
}
Æ	Æ	 
}
Ø	Ø	 
HandleTransaction
±	±	 %
(
±	±	% &
result
±	±	& ,
,
±	±	, -
isRoot
±	±	. 4
,
±	±	4 5
transaction
±	±	6 A
)
±	±	A B
;
±	±	B C
return
≥	≥	 
new
≥	≥	  
RepositoryResponse
≥	≥	 1
<
≥	≥	1 2
bool
≥	≥	2 6
>
≥	≥	6 7
(
≥	≥	7 8
)
≥	≥	8 9
{
¥	¥	 
	IsSucceed
µ	µ	 !
=
µ	µ	" #
result
µ	µ	$ *
,
µ	µ	* +
Data
∂	∂	 
=
∂	∂	 
result
∂	∂	 %
}
∑	∑	 
;
∑	∑	 
}
∏	∏	 
else
π	π	 
{
∫	∫	 
return
ª	ª	 
new
ª	ª	  
RepositoryResponse
ª	ª	 1
<
ª	ª	1 2
bool
ª	ª	2 6
>
ª	ª	6 7
(
ª	ª	7 8
)
ª	ª	8 9
{
º	º	 
	IsSucceed
Ω	Ω	 !
=
Ω	Ω	" #
true
Ω	Ω	$ (
,
Ω	Ω	( )
Data
æ	æ	 
=
æ	æ	 
true
æ	æ	 #
}
ø	ø	 
;
ø	ø	 
}
¿	¿	 
}
¡	¡	 
catch
¬	¬	 
(
¬	¬	 
	Exception
¬	¬	 
ex
¬	¬	 
)
¬	¬	  
{
√	√	 
LogErrorMessage
ƒ	ƒ	 
(
ƒ	ƒ	  
ex
ƒ	ƒ	  "
)
ƒ	ƒ	" #
;
ƒ	ƒ	# $
if
≈	≈	 
(
≈	≈	 
_transaction
≈	≈	  
==
≈	≈	! #
null
≈	≈	$ (
)
≈	≈	( )
{
∆	∆	 
transaction
»	»	 
.
»	»	  
Rollback
»	»	  (
(
»	»	( )
)
»	»	) *
;
»	»	* +
}
…	…	 
return
À	À	 
new
À	À	  
RepositoryResponse
À	À	 -
<
À	À	- .
bool
À	À	. 2
>
À	À	2 3
(
À	À	3 4
)
À	À	4 5
{
Ã	Ã	 
	IsSucceed
Õ	Õ	 
=
Õ	Õ	 
false
Õ	Õ	  %
,
Õ	Õ	% &
Data
Œ	Œ	 
=
Œ	Œ	 
false
Œ	Œ	  
,
Œ	Œ	  !
	Exception
œ	œ	 
=
œ	œ	 
ex
œ	œ	  "
}
–	–	 
;
–	–	 
}
—	—	 
finally
“	“	 
{
”	”	 
if
‘	‘	 
(
‘	‘	 
_context
‘	‘	 
==
‘	‘	 
null
‘	‘	  $
)
‘	‘	$ %
{
’	’	 
context
◊	◊	 
.
◊	◊	 
Dispose
◊	◊	 #
(
◊	◊	# $
)
◊	◊	$ %
;
◊	◊	% &
}
ÿ	ÿ	 
}
Ÿ	Ÿ	 
}
⁄	⁄	 	
public
‰	‰	 
virtual
‰	‰	 
async
‰	‰	 
Task
‰	‰	 !
<
‰	‰	! " 
RepositoryResponse
‰	‰	" 4
<
‰	‰	4 5
bool
‰	‰	5 9
>
‰	‰	9 :
>
‰	‰	: ;"
RemoveListModelAsync
‰	‰	< P
(
‰	‰	P Q

Expression
‰	‰	Q [
<
‰	‰	[ \
Func
‰	‰	\ `
<
‰	‰	` a
TModel
‰	‰	a g
,
‰	‰	g h
bool
‰	‰	i m
>
‰	‰	m n
>
‰	‰	n o
	predicate
‰	‰	p y
,
Â	Â	 	

TDbContext
Â	Â	
 
_context
Â	Â	 
=
Â	Â	 
null
Â	Â	  $
,
Â	Â	$ %#
IDbContextTransaction
Â	Â	& ;
_transaction
Â	Â	< H
=
Â	Â	I J
null
Â	Â	K O
)
Â	Â	O P
{
Ê	Ê	 	
bool
Á	Á	 
isRoot
Á	Á	 
=
Á	Á	 
_context
Á	Á	 "
==
Á	Á	# %
null
Á	Á	& *
;
Á	Á	* +

TDbContext
Ë	Ë	 
context
Ë	Ë	 
=
Ë	Ë	  
_context
Ë	Ë	! )
??
Ë	Ë	* ,
InitContext
Ë	Ë	- 8
(
Ë	Ë	8 9
)
Ë	Ë	9 :
;
Ë	Ë	: ;
var
È	È	 
transaction
È	È	 
=
È	È	 
_transaction
È	È	 *
??
È	È	+ -
context
È	È	. 5
.
È	È	5 6
Database
È	È	6 >
.
È	È	> ?
BeginTransaction
È	È	? O
(
È	È	O P
)
È	È	P Q
;
È	È	Q R
try
Í	Í	 
{
Î	Î	 
var
Ï	Ï	 
Items
Ï	Ï	 
=
Ï	Ï	 
await
Ï	Ï	 !
context
Ï	Ï	" )
.
Ï	Ï	) *
Set
Ï	Ï	* -
<
Ï	Ï	- .
TModel
Ï	Ï	. 4
>
Ï	Ï	4 5
(
Ï	Ï	5 6
)
Ï	Ï	6 7
.
Ï	Ï	7 8
Where
Ï	Ï	8 =
(
Ï	Ï	= >
	predicate
Ï	Ï	> G
)
Ï	Ï	G H
.
Ï	Ï	H I
ToListAsync
Ï	Ï	I T
(
Ï	Ï	T U
)
Ï	Ï	U V
.
Ï	Ï	V W
ConfigureAwait
Ï	Ï	W e
(
Ï	Ï	e f
false
Ï	Ï	f k
)
Ï	Ï	k l
;
Ï	Ï	l m
bool
Ì	Ì	 
result
Ì	Ì	 
=
Ì	Ì	 
true
Ì	Ì	 "
;
Ì	Ì	" #
if
Ó	Ó	 
(
Ó	Ó	 
Items
Ó	Ó	 
!=
Ó	Ó	 
null
Ó	Ó	 !
)
Ó	Ó	! "
{
Ô	Ô	 
foreach
		 
(
		 
var
		  
model
		! &
in
		' )
Items
		* /
)
		/ 0
{
Ò	Ò	 
if
Ú	Ú	 
(
Ú	Ú	 
result
Ú	Ú	 "
)
Ú	Ú	" #
{
Û	Û	 
var
Ù	Ù	 
r
Ù	Ù	  !
=
Ù	Ù	" #
await
Ù	Ù	$ )
RemoveModelAsync
Ù	Ù	* :
(
Ù	Ù	: ;
model
Ù	Ù	; @
,
Ù	Ù	@ A
context
Ù	Ù	B I
,
Ù	Ù	I J
transaction
Ù	Ù	K V
)
Ù	Ù	V W
.
Ù	Ù	W X
ConfigureAwait
Ù	Ù	X f
(
Ù	Ù	f g
false
Ù	Ù	g l
)
Ù	Ù	l m
;
Ù	Ù	m n
result
ı	ı	 "
=
ı	ı	# $
result
ı	ı	% +
&&
ı	ı	, .
r
ı	ı	/ 0
.
ı	ı	0 1
	IsSucceed
ı	ı	1 :
;
ı	ı	: ;
}
ˆ	ˆ	 
else
˜	˜	 
{
¯	¯	 
break
˘	˘	 !
;
˘	˘	! "
}
˙	˙	 
}
˚	˚	 
HandleTransaction
˝	˝	 %
(
˝	˝	% &
result
˝	˝	& ,
,
˝	˝	, -
isRoot
˝	˝	. 4
,
˝	˝	4 5
transaction
˝	˝	6 A
)
˝	˝	A B
;
˝	˝	B C
return
ˇ	ˇ	 
new
ˇ	ˇ	  
RepositoryResponse
ˇ	ˇ	 1
<
ˇ	ˇ	1 2
bool
ˇ	ˇ	2 6
>
ˇ	ˇ	6 7
(
ˇ	ˇ	7 8
)
ˇ	ˇ	8 9
{
Ä
Ä
 
	IsSucceed
Å
Å
 !
=
Å
Å
" #
result
Å
Å
$ *
,
Å
Å
* +
Data
Ç
Ç
 
=
Ç
Ç
 
result
Ç
Ç
 %
}
É
É
 
;
É
É
 
}
Ñ
Ñ
 
else
Ö
Ö
 
{
Ü
Ü
 
return
á
á
 
new
á
á
  
RepositoryResponse
á
á
 1
<
á
á
1 2
bool
á
á
2 6
>
á
á
6 7
(
á
á
7 8
)
á
á
8 9
{
à
à
 
	IsSucceed
â
â
 !
=
â
â
" #
true
â
â
$ (
,
â
â
( )
Data
ä
ä
 
=
ä
ä
 
true
ä
ä
 #
}
ã
ã
 
;
ã
ã
 
}
å
å
 
}
ç
ç
 
catch
é
é
 
(
é
é
 
	Exception
é
é
 
ex
é
é
 
)
é
é
  
{
è
è
 
LogErrorMessage
ê
ê
 
(
ê
ê
  
ex
ê
ê
  "
)
ê
ê
" #
;
ê
ê
# $
if
ë
ë
 
(
ë
ë
 
_transaction
ë
ë
  
==
ë
ë
! #
null
ë
ë
$ (
)
ë
ë
( )
{
í
í
 
transaction
î
î
 
.
î
î
  
Rollback
î
î
  (
(
î
î
( )
)
î
î
) *
;
î
î
* +
}
ï
ï
 
return
ó
ó
 
new
ó
ó
  
RepositoryResponse
ó
ó
 -
<
ó
ó
- .
bool
ó
ó
. 2
>
ó
ó
2 3
(
ó
ó
3 4
)
ó
ó
4 5
{
ò
ò
 
	IsSucceed
ô
ô
 
=
ô
ô
 
false
ô
ô
  %
,
ô
ô
% &
Data
ö
ö
 
=
ö
ö
 
false
ö
ö
  
,
ö
ö
  !
	Exception
õ
õ
 
=
õ
õ
 
ex
õ
õ
  "
}
ú
ú
 
;
ú
ú
 
}
ù
ù
 
finally
û
û
 
{
ü
ü
 
if
†
†
 
(
†
†
 
_context
†
†
 
==
†
†
 
null
†
†
  $
)
†
†
$ %
{
°
°
 
context
£
£
 
.
£
£
 
Dispose
£
£
 #
(
£
£
# $
)
£
£
$ %
;
£
£
% &
}
§
§
 
}
•
•
 
}
¶
¶
 	
public
∞
∞
 
virtual
∞
∞
  
RepositoryResponse
∞
∞
 )
<
∞
∞
) *
bool
∞
∞
* .
>
∞
∞
. /
RemoveModel
∞
∞
0 ;
(
∞
∞
; <

Expression
∞
∞
< F
<
∞
∞
F G
Func
∞
∞
G K
<
∞
∞
K L
TModel
∞
∞
L R
,
∞
∞
R S
bool
∞
∞
T X
>
∞
∞
X Y
>
∞
∞
Y Z
	predicate
∞
∞
[ d
,
∞
∞
d e

TDbContext
∞
∞
f p
_context
∞
∞
q y
=
∞
∞
z {
null∞
∞
| Ä
,∞
∞
Ä Å%
IDbContextTransaction∞
∞
Ç ó
_transaction∞
∞
ò §
=∞
∞
• ¶
null∞
∞
ß ´
)∞
∞
´ ¨
{
±
±
 	
bool
≤
≤
 
isRoot
≤
≤
 
=
≤
≤
 
_context
≤
≤
 "
==
≤
≤
# %
null
≤
≤
& *
;
≤
≤
* +

TDbContext
≥
≥
 
context
≥
≥
 
=
≥
≥
  
_context
≥
≥
! )
??
≥
≥
* ,
InitContext
≥
≥
- 8
(
≥
≥
8 9
)
≥
≥
9 :
;
≥
≥
: ;
var
¥
¥
 
transaction
¥
¥
 
=
¥
¥
 
_transaction
¥
¥
 *
??
¥
¥
+ -
context
¥
¥
. 5
.
¥
¥
5 6
Database
¥
¥
6 >
.
¥
¥
> ?
BeginTransaction
¥
¥
? O
(
¥
¥
O P
)
¥
¥
P Q
;
¥
¥
Q R
try
µ
µ
 
{
∂
∂
 
TModel
∑
∑
 
model
∑
∑
 
=
∑
∑
 
context
∑
∑
 &
.
∑
∑
& '
Set
∑
∑
' *
<
∑
∑
* +
TModel
∑
∑
+ 1
>
∑
∑
1 2
(
∑
∑
2 3
)
∑
∑
3 4
.
∑
∑
4 5
FirstOrDefault
∑
∑
5 C
(
∑
∑
C D
	predicate
∑
∑
D M
)
∑
∑
M N
;
∑
∑
N O
bool
∏
∏
 
result
∏
∏
 
=
∏
∏
 
true
∏
∏
 "
;
∏
∏
" #
if
π
π
 
(
π
π
 
model
π
π
 
!=
π
π
 
null
π
π
 !
&&
π
π
" $
CheckIsExists
π
π
% 2
(
π
π
2 3
model
π
π
3 8
,
π
π
8 9
context
π
π
: A
,
π
π
A B
transaction
π
π
C N
)
π
π
N O
)
π
π
O P
{
∫
∫
 
context
ª
ª
 
.
ª
ª
 
Entry
ª
ª
 !
(
ª
ª
! "
model
ª
ª
" '
)
ª
ª
' (
.
ª
ª
( )
State
ª
ª
) .
=
ª
ª
/ 0
EntityState
ª
ª
1 <
.
ª
ª
< =
Deleted
ª
ª
= D
;
ª
ª
D E
result
º
º
 
=
º
º
 
context
º
º
 $
.
º
º
$ %
SaveChanges
º
º
% 0
(
º
º
0 1
)
º
º
1 2
>
º
º
3 4
$num
º
º
5 6
;
º
º
6 7
}
Ω
Ω
 
HandleTransaction
ø
ø
 !
(
ø
ø
! "
result
ø
ø
" (
,
ø
ø
( )
isRoot
ø
ø
* 0
,
ø
ø
0 1
transaction
ø
ø
2 =
)
ø
ø
= >
;
ø
ø
> ?
return
¡
¡
 
new
¡
¡
  
RepositoryResponse
¡
¡
 -
<
¡
¡
- .
bool
¡
¡
. 2
>
¡
¡
2 3
(
¡
¡
3 4
)
¡
¡
4 5
{
¬
¬
 
	IsSucceed
√
√
 
=
√
√
 
result
√
√
  &
,
√
√
& '
Data
ƒ
ƒ
 
=
ƒ
ƒ
 
result
ƒ
ƒ
 !
}
≈
≈
 
;
≈
≈
 
}
∆
∆
 
catch
«
«
 
(
«
«
 
	Exception
«
«
 
ex
«
«
 
)
«
«
  
{
»
»
 
LogErrorMessage
…
…
 
(
…
…
  
ex
…
…
  "
)
…
…
" #
;
…
…
# $
if
 
 
 
(
 
 
 
_transaction
 
 
  
==
 
 
! #
null
 
 
$ (
)
 
 
( )
{
À
À
 
transaction
Õ
Õ
 
.
Õ
Õ
  
Rollback
Õ
Õ
  (
(
Õ
Õ
( )
)
Õ
Õ
) *
;
Õ
Õ
* +
}
Œ
Œ
 
return
–
–
 
new
–
–
  
RepositoryResponse
–
–
 -
<
–
–
- .
bool
–
–
. 2
>
–
–
2 3
(
–
–
3 4
)
–
–
4 5
{
—
—
 
	IsSucceed
“
“
 
=
“
“
 
false
“
“
  %
,
“
“
% &
Data
”
”
 
=
”
”
 
false
”
”
  
,
”
”
  !
	Exception
‘
‘
 
=
‘
‘
 
ex
‘
‘
  "
}
’
’
 
;
’
’
 
}
÷
÷
 
finally
◊
◊
 
{
ÿ
ÿ
 
if
Ÿ
Ÿ
 
(
Ÿ
Ÿ
 
_context
Ÿ
Ÿ
 
==
Ÿ
Ÿ
 
null
Ÿ
Ÿ
  $
)
Ÿ
Ÿ
$ %
{
⁄
⁄
 
context
‹
‹
 
.
‹
‹
 
Dispose
‹
‹
 #
(
‹
‹
# $
)
‹
‹
$ %
;
‹
‹
% &
}
›
›
 
}
ﬁ
ﬁ
 
}
ﬂ
ﬂ
 	
public
È
È
 
virtual
È
È
  
RepositoryResponse
È
È
 )
<
È
È
) *
bool
È
È
* .
>
È
È
. /
RemoveModel
È
È
0 ;
(
È
È
; <
TModel
È
È
< B
model
È
È
C H
,
È
È
H I

TDbContext
È
È
J T
_context
È
È
U ]
=
È
È
^ _
null
È
È
` d
,
È
È
d e#
IDbContextTransaction
È
È
f {
_transactionÈ
È
| à
=È
È
â ä
nullÈ
È
ã è
)È
È
è ê
{
Í
Í
 	
bool
Î
Î
 
isRoot
Î
Î
 
=
Î
Î
 
_context
Î
Î
 "
==
Î
Î
# %
null
Î
Î
& *
;
Î
Î
* +

TDbContext
Ï
Ï
 
context
Ï
Ï
 
=
Ï
Ï
  
_context
Ï
Ï
! )
??
Ï
Ï
* ,
InitContext
Ï
Ï
- 8
(
Ï
Ï
8 9
)
Ï
Ï
9 :
;
Ï
Ï
: ;
var
Ì
Ì
 
transaction
Ì
Ì
 
=
Ì
Ì
 
_transaction
Ì
Ì
 *
??
Ì
Ì
+ -
context
Ì
Ì
. 5
.
Ì
Ì
5 6
Database
Ì
Ì
6 >
.
Ì
Ì
> ?
BeginTransaction
Ì
Ì
? O
(
Ì
Ì
O P
)
Ì
Ì
P Q
;
Ì
Ì
Q R
try
Ó
Ó
 
{
Ô
Ô
 
bool


 
result


 
=


 
true


 "
;


" #
if
Ò
Ò
 
(
Ò
Ò
 
model
Ò
Ò
 
!=
Ò
Ò
 
null
Ò
Ò
 !
&&
Ò
Ò
" $
CheckIsExists
Ò
Ò
% 2
(
Ò
Ò
2 3
model
Ò
Ò
3 8
,
Ò
Ò
8 9
context
Ò
Ò
: A
,
Ò
Ò
A B
transaction
Ò
Ò
C N
)
Ò
Ò
N O
)
Ò
Ò
O P
{
Ú
Ú
 
context
Û
Û
 
.
Û
Û
 
Entry
Û
Û
 !
(
Û
Û
! "
model
Û
Û
" '
)
Û
Û
' (
.
Û
Û
( )
State
Û
Û
) .
=
Û
Û
/ 0
EntityState
Û
Û
1 <
.
Û
Û
< =
Deleted
Û
Û
= D
;
Û
Û
D E
result
Ù
Ù
 
=
Ù
Ù
 
context
Ù
Ù
 $
.
Ù
Ù
$ %
SaveChanges
Ù
Ù
% 0
(
Ù
Ù
0 1
)
Ù
Ù
1 2
>
Ù
Ù
3 4
$num
Ù
Ù
5 6
;
Ù
Ù
6 7
}
ı
ı
 
HandleTransaction
˜
˜
 !
(
˜
˜
! "
result
˜
˜
" (
,
˜
˜
( )
isRoot
˜
˜
* 0
,
˜
˜
0 1
transaction
˜
˜
2 =
)
˜
˜
= >
;
˜
˜
> ?
return
˘
˘
 
new
˘
˘
  
RepositoryResponse
˘
˘
 -
<
˘
˘
- .
bool
˘
˘
. 2
>
˘
˘
2 3
(
˘
˘
3 4
)
˘
˘
4 5
{
˙
˙
 
	IsSucceed
˚
˚
 
=
˚
˚
 
result
˚
˚
  &
,
˚
˚
& '
Data
¸
¸
 
=
¸
¸
 
result
¸
¸
 !
}
˝
˝
 
;
˝
˝
 
}
˛
˛
 
catch
ˇ
ˇ
 
(
ˇ
ˇ
 
	Exception
ˇ
ˇ
 
ex
ˇ
ˇ
 
)
ˇ
ˇ
  
{
ÄÄ 
LogErrorMessage
ÅÅ 
(
ÅÅ  
ex
ÅÅ  "
)
ÅÅ" #
;
ÅÅ# $
if
ÇÇ 
(
ÇÇ 
_transaction
ÇÇ  
==
ÇÇ! #
null
ÇÇ$ (
)
ÇÇ( )
{
ÉÉ 
transaction
ÖÖ 
.
ÖÖ  
Rollback
ÖÖ  (
(
ÖÖ( )
)
ÖÖ) *
;
ÖÖ* +
}
ÜÜ 
return
àà 
new
àà  
RepositoryResponse
àà -
<
àà- .
bool
àà. 2
>
àà2 3
(
àà3 4
)
àà4 5
{
ââ 
	IsSucceed
ää 
=
ää 
false
ää  %
,
ää% &
Data
ãã 
=
ãã 
false
ãã  
,
ãã  !
	Exception
åå 
=
åå 
ex
åå  "
}
çç 
;
çç 
}
éé 
finally
èè 
{
êê 
if
ëë 
(
ëë 
_context
ëë 
==
ëë 
null
ëë  $
)
ëë$ %
{
íí 
context
îî 
.
îî 
Dispose
îî #
(
îî# $
)
îî$ %
;
îî% &
}
ïï 
}
ññ 
}
óó 	
public
°° 
virtual
°° 
async
°° 
Task
°° !
<
°°! " 
RepositoryResponse
°°" 4
<
°°4 5
bool
°°5 9
>
°°9 :
>
°°: ;
RemoveModelAsync
°°< L
(
°°L M

Expression
°°M W
<
°°W X
Func
°°X \
<
°°\ ]
TModel
°°] c
,
°°c d
bool
°°e i
>
°°i j
>
°°j k
	predicate
°°l u
,
°°u v

TDbContext°°w Å
_context°°Ç ä
=°°ã å
null°°ç ë
,°°ë í%
IDbContextTransaction°°ì ®
_transaction°°© µ
=°°∂ ∑
null°°∏ º
)°°º Ω
{
¢¢ 	
bool
££ 
isRoot
££ 
=
££ 
_context
££ "
==
££# %
null
££& *
;
££* +

TDbContext
§§ 
context
§§ 
=
§§  
_context
§§! )
??
§§* ,
InitContext
§§- 8
(
§§8 9
)
§§9 :
;
§§: ;
var
•• 
transaction
•• 
=
•• 
_transaction
•• *
??
••+ -
context
••. 5
.
••5 6
Database
••6 >
.
••> ?
BeginTransaction
••? O
(
••O P
)
••P Q
;
••Q R
try
¶¶ 
{
ßß 
TModel
®® 
model
®® 
=
®® 
await
®® $
context
®®% ,
.
®®, -
Set
®®- 0
<
®®0 1
TModel
®®1 7
>
®®7 8
(
®®8 9
)
®®9 :
.
®®: ;!
FirstOrDefaultAsync
®®; N
(
®®N O
	predicate
®®O X
)
®®X Y
.
®®Y Z
ConfigureAwait
®®Z h
(
®®h i
false
®®i n
)
®®n o
;
®®o p
bool
©© 
result
©© 
=
©© 
true
©© "
;
©©" #
if
™™ 
(
™™ 
model
™™ 
!=
™™ 
null
™™ !
&&
™™" $
CheckIsExists
™™% 2
(
™™2 3
model
™™3 8
,
™™8 9
context
™™: A
,
™™A B
transaction
™™C N
)
™™N O
)
™™O P
{
´´ 
context
¨¨ 
.
¨¨ 
Entry
¨¨ !
(
¨¨! "
model
¨¨" '
)
¨¨' (
.
¨¨( )
State
¨¨) .
=
¨¨/ 0
EntityState
¨¨1 <
.
¨¨< =
Deleted
¨¨= D
;
¨¨D E
result
≠≠ 
=
≠≠ 
await
≠≠ "
context
≠≠# *
.
≠≠* +
SaveChangesAsync
≠≠+ ;
(
≠≠; <
)
≠≠< =
.
≠≠= >
ConfigureAwait
≠≠> L
(
≠≠L M
false
≠≠M R
)
≠≠R S
>
≠≠T U
$num
≠≠V W
;
≠≠W X
}
ÆÆ 
HandleTransaction
∞∞ !
(
∞∞! "
result
∞∞" (
,
∞∞( )
isRoot
∞∞* 0
,
∞∞0 1
transaction
∞∞2 =
)
∞∞= >
;
∞∞> ?
return
≤≤ 
new
≤≤  
RepositoryResponse
≤≤ -
<
≤≤- .
bool
≤≤. 2
>
≤≤2 3
(
≤≤3 4
)
≤≤4 5
{
≥≥ 
	IsSucceed
¥¥ 
=
¥¥ 
result
¥¥  &
,
¥¥& '
Data
µµ 
=
µµ 
result
µµ !
}
∂∂ 
;
∂∂ 
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏ 
ex
∏∏ 
)
∏∏  
{
ππ 
LogErrorMessage
∫∫ 
(
∫∫  
ex
∫∫  "
)
∫∫" #
;
∫∫# $
if
ªª 
(
ªª 
_transaction
ªª  
==
ªª! #
null
ªª$ (
)
ªª( )
{
ºº 
transaction
ææ 
.
ææ  
Rollback
ææ  (
(
ææ( )
)
ææ) *
;
ææ* +
}
øø 
return
¡¡ 
new
¡¡  
RepositoryResponse
¡¡ -
<
¡¡- .
bool
¡¡. 2
>
¡¡2 3
(
¡¡3 4
)
¡¡4 5
{
¬¬ 
	IsSucceed
√√ 
=
√√ 
false
√√  %
,
√√% &
Data
ƒƒ 
=
ƒƒ 
false
ƒƒ  
,
ƒƒ  !
	Exception
≈≈ 
=
≈≈ 
ex
≈≈  "
}
∆∆ 
;
∆∆ 
}
«« 
finally
»» 
{
…… 
if
   
(
   
_context
   
==
   
null
    $
)
  $ %
{
ÀÀ 
context
ÕÕ 
.
ÕÕ 
Dispose
ÕÕ #
(
ÕÕ# $
)
ÕÕ$ %
;
ÕÕ% &
}
ŒŒ 
}
œœ 
}
–– 	
public
⁄⁄ 
virtual
⁄⁄ 
async
⁄⁄ 
Task
⁄⁄ !
<
⁄⁄! " 
RepositoryResponse
⁄⁄" 4
<
⁄⁄4 5
bool
⁄⁄5 9
>
⁄⁄9 :
>
⁄⁄: ;
RemoveModelAsync
⁄⁄< L
(
⁄⁄L M
TModel
⁄⁄M S
model
⁄⁄T Y
,
⁄⁄Y Z

TDbContext
⁄⁄[ e
_context
⁄⁄f n
=
⁄⁄o p
null
⁄⁄q u
,
⁄⁄u v$
IDbContextTransaction⁄⁄w å
_transaction⁄⁄ç ô
=⁄⁄ö õ
null⁄⁄ú †
)⁄⁄† °
{
€€ 	
bool
‹‹ 
isRoot
‹‹ 
=
‹‹ 
_context
‹‹ "
==
‹‹# %
null
‹‹& *
;
‹‹* +

TDbContext
›› 
context
›› 
=
››  
_context
››! )
??
››* ,
InitContext
››- 8
(
››8 9
)
››9 :
;
››: ;
var
ﬁﬁ 
transaction
ﬁﬁ 
=
ﬁﬁ 
_transaction
ﬁﬁ *
??
ﬁﬁ+ -
context
ﬁﬁ. 5
.
ﬁﬁ5 6
Database
ﬁﬁ6 >
.
ﬁﬁ> ?
BeginTransaction
ﬁﬁ? O
(
ﬁﬁO P
)
ﬁﬁP Q
;
ﬁﬁQ R
try
ﬂﬂ 
{
‡‡ 
bool
·· 
result
·· 
=
·· 
true
·· "
;
··" #
if
‚‚ 
(
‚‚ 
model
‚‚ 
!=
‚‚ 
null
‚‚ !
&&
‚‚" $
CheckIsExists
‚‚% 2
(
‚‚2 3
model
‚‚3 8
,
‚‚8 9
context
‚‚: A
,
‚‚A B
transaction
‚‚C N
)
‚‚N O
)
‚‚O P
{
„„ 
context
‰‰ 
.
‰‰ 
Entry
‰‰ !
(
‰‰! "
model
‰‰" '
)
‰‰' (
.
‰‰( )
State
‰‰) .
=
‰‰/ 0
EntityState
‰‰1 <
.
‰‰< =
Deleted
‰‰= D
;
‰‰D E
result
ÂÂ 
=
ÂÂ 
await
ÂÂ "
context
ÂÂ# *
.
ÂÂ* +
SaveChangesAsync
ÂÂ+ ;
(
ÂÂ; <
)
ÂÂ< =
.
ÂÂ= >
ConfigureAwait
ÂÂ> L
(
ÂÂL M
false
ÂÂM R
)
ÂÂR S
>
ÂÂT U
$num
ÂÂV W
;
ÂÂW X
}
ÊÊ 
HandleTransaction
ËË !
(
ËË! "
result
ËË" (
,
ËË( )
isRoot
ËË* 0
,
ËË0 1
transaction
ËË2 =
)
ËË= >
;
ËË> ?
return
ÍÍ 
new
ÍÍ  
RepositoryResponse
ÍÍ -
<
ÍÍ- .
bool
ÍÍ. 2
>
ÍÍ2 3
(
ÍÍ3 4
)
ÍÍ4 5
{
ÎÎ 
	IsSucceed
ÏÏ 
=
ÏÏ 
result
ÏÏ  &
,
ÏÏ& '
Data
ÌÌ 
=
ÌÌ 
result
ÌÌ !
}
ÓÓ 
;
ÓÓ 
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
LogErrorMessage
ÚÚ 
(
ÚÚ  
ex
ÚÚ  "
)
ÚÚ" #
;
ÚÚ# $
if
ÛÛ 
(
ÛÛ 
_transaction
ÛÛ  
==
ÛÛ! #
null
ÛÛ$ (
)
ÛÛ( )
{
ÙÙ 
transaction
ˆˆ 
.
ˆˆ  
Rollback
ˆˆ  (
(
ˆˆ( )
)
ˆˆ) *
;
ˆˆ* +
}
˜˜ 
return
˘˘ 
new
˘˘  
RepositoryResponse
˘˘ -
<
˘˘- .
bool
˘˘. 2
>
˘˘2 3
(
˘˘3 4
)
˘˘4 5
{
˙˙ 
	IsSucceed
˚˚ 
=
˚˚ 
false
˚˚  %
,
˚˚% &
Data
¸¸ 
=
¸¸ 
false
¸¸  
,
¸¸  !
	Exception
˝˝ 
=
˝˝ 
ex
˝˝  "
}
˛˛ 
;
˛˛ 
}
ˇˇ 
finally
ÄÄ 
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
_context
ÇÇ 
==
ÇÇ 
null
ÇÇ  $
)
ÇÇ$ %
{
ÉÉ 
context
ÖÖ 
.
ÖÖ 
Dispose
ÖÖ #
(
ÖÖ# $
)
ÖÖ$ %
;
ÖÖ% &
}
ÜÜ 
}
áá 
}
àà 	
public
íí 
virtual
íí  
RepositoryResponse
íí )
<
íí) *
TView
íí* /
>
íí/ 0
	SaveModel
íí1 :
(
íí: ;
TView
íí; @
view
ííA E
,
ííE F
bool
ííG K
isSaveSubModels
ííL [
=
íí\ ]
false
íí^ c
,
ìì 	

TDbContext
ìì
 
_context
ìì 
=
ìì 
null
ìì  $
,
ìì$ %#
IDbContextTransaction
ìì& ;
_transaction
ìì< H
=
ììI J
null
ììK O
)
ììO P
{
îî 	
if
ïï 
(
ïï 
CheckIsExists
ïï 
(
ïï 
view
ïï "
.
ïï" #
Model
ïï# (
,
ïï( )
_context
ïï* 2
,
ïï2 3
_transaction
ïï4 @
)
ïï@ A
)
ïïA B
{
ññ 
return
óó 
	EditModel
óó  
(
óó  !
view
óó! %
,
óó% &
_context
óó' /
,
óó/ 0
_transaction
óó1 =
)
óó= >
;
óó> ?
}
òò 
else
ôô 
{
öö 
return
õõ 
CreateModel
õõ "
(
õõ" #
view
õõ# '
,
õõ' (
_context
õõ) 1
,
õõ1 2
_transaction
õõ3 ?
)
õõ? @
;
õõ@ A
}
úú 
}
ùù 	
public
ßß 
virtual
ßß 
Task
ßß 
<
ßß  
RepositoryResponse
ßß .
<
ßß. /
TView
ßß/ 4
>
ßß4 5
>
ßß5 6
SaveModelAsync
ßß7 E
(
ßßE F
TView
ßßF K
view
ßßL P
,
ßßP Q
bool
ßßR V
isSaveSubModels
ßßW f
=
ßßg h
false
ßßi n
,
®® 	

TDbContext
®®
 
_context
®® 
=
®® 
null
®®  $
,
®®$ %#
IDbContextTransaction
®®& ;
_transaction
®®< H
=
®®I J
null
®®K O
)
®®O P
{
©© 	
if
™™ 
(
™™ 
CheckIsExists
™™ 
(
™™ 
view
™™ "
.
™™" #
Model
™™# (
,
™™( )
_context
™™* 2
,
™™2 3
_transaction
™™4 @
)
™™@ A
)
™™A B
{
´´ 
return
¨¨ 
EditModelAsync
¨¨ %
(
¨¨% &
view
¨¨& *
,
¨¨* +
_context
¨¨, 4
,
¨¨4 5
_transaction
¨¨6 B
)
¨¨B C
;
¨¨C D
}
≠≠ 
else
ÆÆ 
{
ØØ 
return
∞∞ 
CreateModelAsync
∞∞ '
(
∞∞' (
view
∞∞( ,
,
∞∞, -
_context
∞∞. 6
,
∞∞6 7
_transaction
∞∞8 D
)
∞∞D E
;
∞∞E F
}
±± 
}
≤≤ 	
public
ºº 
virtual
ºº 
Task
ºº 
<
ºº 
bool
ºº  
>
ºº  !
SaveSubModelAsync
ºº" 3
(
ºº3 4
TModel
ºº4 :
model
ºº; @
,
ºº@ A

TDbContext
ººB L
context
ººM T
,
ººT U#
IDbContextTransaction
ººV k
_transaction
ººl x
)
ººx y
{
ΩΩ 	
throw
ææ 
new
ææ %
NotImplementedException
ææ -
(
ææ- .
)
ææ. /
;
ææ/ 0
}
øø 	
public
   
virtual
    
RepositoryResponse
   )
<
  ) *
int
  * -
>
  - .
Max
  / 2
(
  2 3

Expression
  3 =
<
  = >
Func
  > B
<
  B C
TModel
  C I
,
  I J
int
  K N
>
  N O
>
  O P
	predicate
  Q Z
,
ÀÀ 	

TDbContext
ÀÀ
 
_context
ÀÀ 
=
ÀÀ 
null
ÀÀ  $
,
ÀÀ$ %#
IDbContextTransaction
ÀÀ& ;
_transaction
ÀÀ< H
=
ÀÀI J
null
ÀÀK O
)
ÀÀO P
{
ÃÃ 	
var
ÕÕ 
context
ÕÕ 
=
ÕÕ 
_context
ÕÕ "
??
ÕÕ# %
InitContext
ÕÕ& 1
(
ÕÕ1 2
)
ÕÕ2 3
;
ÕÕ3 4
var
ŒŒ 
transaction
ŒŒ 
=
ŒŒ 
_transaction
ŒŒ *
??
ŒŒ+ -
context
ŒŒ. 5
.
ŒŒ5 6
Database
ŒŒ6 >
.
ŒŒ> ?
BeginTransaction
ŒŒ? O
(
ŒŒO P
)
ŒŒP Q
;
ŒŒQ R
int
œœ 
total
œœ 
=
œœ 
$num
œœ 
;
œœ 
try
–– 
{
—— 
total
““ 
=
““ 
context
““ 
.
““  
Set
““  #
<
““# $
TModel
““$ *
>
““* +
(
““+ ,
)
““, -
.
““- .
Max
““. 1
(
““1 2
	predicate
““2 ;
)
““; <
;
““< =
return
”” 
new
””  
RepositoryResponse
”” -
<
””- .
int
””. 1
>
””1 2
(
””2 3
)
””3 4
{
‘‘ 
	IsSucceed
’’ 
=
’’ 
true
’’  $
,
’’$ %
Data
÷÷ 
=
÷÷ 
total
÷÷  
}
◊◊ 
;
◊◊ 
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ 
LogErrorMessage
€€ 
(
€€  
ex
€€  "
)
€€" #
;
€€# $
if
‹‹ 
(
‹‹ 
_transaction
‹‹  
==
‹‹! #
null
‹‹$ (
)
‹‹( )
{
›› 
transaction
ﬂﬂ 
.
ﬂﬂ  
Rollback
ﬂﬂ  (
(
ﬂﬂ( )
)
ﬂﬂ) *
;
ﬂﬂ* +
}
‡‡ 
return
‚‚ 
new
‚‚  
RepositoryResponse
‚‚ -
<
‚‚- .
int
‚‚. 1
>
‚‚1 2
(
‚‚2 3
)
‚‚3 4
{
„„ 
	IsSucceed
‰‰ 
=
‰‰ 
false
‰‰  %
,
‰‰% &
Data
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
,
ÂÂ 
	Exception
ÊÊ 
=
ÊÊ 
ex
ÊÊ  "
}
ÁÁ 
;
ÁÁ 
}
ËË 
finally
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
_context
ÎÎ 
==
ÎÎ 
null
ÎÎ  $
)
ÎÎ$ %
{
ÏÏ 
context
ÓÓ 
.
ÓÓ 
Dispose
ÓÓ #
(
ÓÓ# $
)
ÓÓ$ %
;
ÓÓ% &
}
ÔÔ 
}
 
}
ÒÒ 	
public
˙˙ 
virtual
˙˙ 
async
˙˙ 
Task
˙˙ !
<
˙˙! " 
RepositoryResponse
˙˙" 4
<
˙˙4 5
int
˙˙5 8
>
˙˙8 9
>
˙˙9 :
MaxAsync
˙˙; C
(
˙˙C D

Expression
˙˙D N
<
˙˙N O
Func
˙˙O S
<
˙˙S T
TModel
˙˙T Z
,
˙˙Z [
int
˙˙\ _
>
˙˙_ `
>
˙˙` a
	predicate
˙˙b k
,
˚˚ 	

TDbContext
˚˚
 
_context
˚˚ 
=
˚˚ 
null
˚˚  $
,
˚˚$ %#
IDbContextTransaction
˚˚& ;
_transaction
˚˚< H
=
˚˚I J
null
˚˚K O
)
˚˚O P
{
¸¸ 	
var
˝˝ 
context
˝˝ 
=
˝˝ 
_context
˝˝ "
??
˝˝# %
InitContext
˝˝& 1
(
˝˝1 2
)
˝˝2 3
;
˝˝3 4
var
˛˛ 
transaction
˛˛ 
=
˛˛ 
_transaction
˛˛ *
??
˛˛+ -
context
˛˛. 5
.
˛˛5 6
Database
˛˛6 >
.
˛˛> ?
BeginTransaction
˛˛? O
(
˛˛O P
)
˛˛P Q
;
˛˛Q R
int
ˇˇ 
total
ˇˇ 
=
ˇˇ 
$num
ˇˇ 
;
ˇˇ 
try
ÄÄ 
{
ÅÅ 
total
ÇÇ 
=
ÇÇ 
await
ÇÇ 
context
ÇÇ %
.
ÇÇ% &
Set
ÇÇ& )
<
ÇÇ) *
TModel
ÇÇ* 0
>
ÇÇ0 1
(
ÇÇ1 2
)
ÇÇ2 3
.
ÇÇ3 4
MaxAsync
ÇÇ4 <
(
ÇÇ< =
	predicate
ÇÇ= F
)
ÇÇF G
.
ÇÇG H
ConfigureAwait
ÇÇH V
(
ÇÇV W
false
ÇÇW \
)
ÇÇ\ ]
;
ÇÇ] ^
return
ÉÉ 
new
ÉÉ  
RepositoryResponse
ÉÉ -
<
ÉÉ- .
int
ÉÉ. 1
>
ÉÉ1 2
(
ÉÉ2 3
)
ÉÉ3 4
{
ÑÑ 
	IsSucceed
ÖÖ 
=
ÖÖ 
true
ÖÖ  $
,
ÖÖ$ %
Data
ÜÜ 
=
ÜÜ 
total
ÜÜ  
}
áá 
;
áá 
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ 
ex
ââ 
)
ââ  
{
ää 
LogErrorMessage
ãã 
(
ãã  
ex
ãã  "
)
ãã" #
;
ãã# $
if
åå 
(
åå 
_transaction
åå  
==
åå! #
null
åå$ (
)
åå( )
{
çç 
transaction
èè 
.
èè  
Rollback
èè  (
(
èè( )
)
èè) *
;
èè* +
}
êê 
return
íí 
new
íí  
RepositoryResponse
íí -
<
íí- .
int
íí. 1
>
íí1 2
(
íí2 3
)
íí3 4
{
ìì 
	IsSucceed
îî 
=
îî 
false
îî  %
,
îî% &
Data
ïï 
=
ïï 
$num
ïï 
,
ïï 
	Exception
ññ 
=
ññ 
ex
ññ  "
}
óó 
;
óó 
}
òò 
finally
ôô 
{
öö 
if
õõ 
(
õõ 
_context
õõ 
==
õõ 
null
õõ  $
)
õõ$ %
{
úú 
context
ûû 
.
ûû 
Dispose
ûû #
(
ûû# $
)
ûû$ %
;
ûû% &
}
üü 
}
†† 
}
°° 	
public
ÆÆ 
virtual
ÆÆ  
RepositoryResponse
ÆÆ )
<
ÆÆ) *
int
ÆÆ* -
>
ÆÆ- .
Count
ÆÆ/ 4
(
ÆÆ4 5

Expression
ÆÆ5 ?
<
ÆÆ? @
Func
ÆÆ@ D
<
ÆÆD E
TModel
ÆÆE K
,
ÆÆK L
bool
ÆÆM Q
>
ÆÆQ R
>
ÆÆR S
	predicate
ÆÆT ]
,
ØØ 	

TDbContext
ØØ
 
_context
ØØ 
=
ØØ 
null
ØØ  $
,
ØØ$ %#
IDbContextTransaction
ØØ& ;
_transaction
ØØ< H
=
ØØI J
null
ØØK O
)
ØØO P
{
∞∞ 	
var
±± 
context
±± 
=
±± 
_context
±± "
??
±±# %
InitContext
±±& 1
(
±±1 2
)
±±2 3
;
±±3 4
var
≤≤ 
transaction
≤≤ 
=
≤≤ 
_transaction
≤≤ *
??
≤≤+ -
context
≤≤. 5
.
≤≤5 6
Database
≤≤6 >
.
≤≤> ?
BeginTransaction
≤≤? O
(
≤≤O P
)
≤≤P Q
;
≤≤Q R
int
≥≥ 
total
≥≥ 
=
≥≥ 
$num
≥≥ 
;
≥≥ 
try
¥¥ 
{
µµ 
total
∂∂ 
=
∂∂ 
context
∂∂ 
.
∂∂  
Set
∂∂  #
<
∂∂# $
TModel
∂∂$ *
>
∂∂* +
(
∂∂+ ,
)
∂∂, -
.
∂∂- .
Count
∂∂. 3
(
∂∂3 4
	predicate
∂∂4 =
)
∂∂= >
;
∂∂> ?
return
∑∑ 
new
∑∑  
RepositoryResponse
∑∑ -
<
∑∑- .
int
∑∑. 1
>
∑∑1 2
(
∑∑2 3
)
∑∑3 4
{
∏∏ 
	IsSucceed
ππ 
=
ππ 
true
ππ  $
,
ππ$ %
Data
∫∫ 
=
∫∫ 
total
∫∫  
}
ªª 
;
ªª 
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
ex
ΩΩ 
)
ΩΩ  
{
ææ 
LogErrorMessage
øø 
(
øø  
ex
øø  "
)
øø" #
;
øø# $
if
¿¿ 
(
¿¿ 
_transaction
¿¿  
==
¿¿! #
null
¿¿$ (
)
¿¿( )
{
¡¡ 
transaction
√√ 
.
√√  
Rollback
√√  (
(
√√( )
)
√√) *
;
√√* +
}
ƒƒ 
return
∆∆ 
new
∆∆  
RepositoryResponse
∆∆ -
<
∆∆- .
int
∆∆. 1
>
∆∆1 2
(
∆∆2 3
)
∆∆3 4
{
«« 
	IsSucceed
»» 
=
»» 
false
»»  %
,
»»% &
Data
…… 
=
…… 
$num
…… 
,
…… 
	Exception
   
=
   
ex
    "
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
if
œœ 
(
œœ 
_context
œœ 
==
œœ 
null
œœ  $
)
œœ$ %
{
–– 
context
““ 
.
““ 
Dispose
““ #
(
““# $
)
““$ %
;
““% &
}
”” 
}
‘‘ 
}
’’ 	
public
ﬁﬁ 
virtual
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ !
<
ﬁﬁ! " 
RepositoryResponse
ﬁﬁ" 4
<
ﬁﬁ4 5
int
ﬁﬁ5 8
>
ﬁﬁ8 9
>
ﬁﬁ9 :

CountAsync
ﬁﬁ; E
(
ﬁﬁE F

Expression
ﬁﬁF P
<
ﬁﬁP Q
Func
ﬁﬁQ U
<
ﬁﬁU V
TModel
ﬁﬁV \
,
ﬁﬁ\ ]
bool
ﬁﬁ^ b
>
ﬁﬁb c
>
ﬁﬁc d
	predicate
ﬁﬁe n
,
ﬂﬂ 	

TDbContext
ﬂﬂ
 
_context
ﬂﬂ 
=
ﬂﬂ 
null
ﬂﬂ  $
,
ﬂﬂ$ %#
IDbContextTransaction
ﬂﬂ& ;
_transaction
ﬂﬂ< H
=
ﬂﬂI J
null
ﬂﬂK O
)
ﬂﬂO P
{
‡‡ 	
var
·· 
context
·· 
=
·· 
_context
·· "
??
··# %
InitContext
··& 1
(
··1 2
)
··2 3
;
··3 4
var
‚‚ 
transaction
‚‚ 
=
‚‚ 
_transaction
‚‚ *
??
‚‚+ -
context
‚‚. 5
.
‚‚5 6
Database
‚‚6 >
.
‚‚> ?
BeginTransaction
‚‚? O
(
‚‚O P
)
‚‚P Q
;
‚‚Q R
int
„„ 
total
„„ 
=
„„ 
$num
„„ 
;
„„ 
try
‰‰ 
{
ÂÂ 
total
ÊÊ 
=
ÊÊ 
await
ÊÊ 
context
ÊÊ %
.
ÊÊ% &
Set
ÊÊ& )
<
ÊÊ) *
TModel
ÊÊ* 0
>
ÊÊ0 1
(
ÊÊ1 2
)
ÊÊ2 3
.
ÊÊ3 4

CountAsync
ÊÊ4 >
(
ÊÊ> ?
	predicate
ÊÊ? H
)
ÊÊH I
.
ÊÊI J
ConfigureAwait
ÊÊJ X
(
ÊÊX Y
false
ÊÊY ^
)
ÊÊ^ _
;
ÊÊ_ `
return
ÁÁ 
new
ÁÁ  
RepositoryResponse
ÁÁ -
<
ÁÁ- .
int
ÁÁ. 1
>
ÁÁ1 2
(
ÁÁ2 3
)
ÁÁ3 4
{
ËË 
	IsSucceed
ÈÈ 
=
ÈÈ 
true
ÈÈ  $
,
ÈÈ$ %
Data
ÍÍ 
=
ÍÍ 
total
ÍÍ  
}
ÎÎ 
;
ÎÎ 
}
ÏÏ 
catch
ÌÌ 
(
ÌÌ 
	Exception
ÌÌ 
ex
ÌÌ 
)
ÌÌ  
{
ÓÓ 
LogErrorMessage
ÔÔ 
(
ÔÔ  
ex
ÔÔ  "
)
ÔÔ" #
;
ÔÔ# $
if
 
(
 
_transaction
  
==
! #
null
$ (
)
( )
{
ÒÒ 
transaction
ÛÛ 
.
ÛÛ  
Rollback
ÛÛ  (
(
ÛÛ( )
)
ÛÛ) *
;
ÛÛ* +
}
ÙÙ 
return
ˆˆ 
new
ˆˆ  
RepositoryResponse
ˆˆ -
<
ˆˆ- .
int
ˆˆ. 1
>
ˆˆ1 2
(
ˆˆ2 3
)
ˆˆ3 4
{
˜˜ 
	IsSucceed
¯¯ 
=
¯¯ 
false
¯¯  %
,
¯¯% &
Data
˘˘ 
=
˘˘ 
$num
˘˘ 
,
˘˘ 
	Exception
˙˙ 
=
˙˙ 
ex
˙˙  "
}
˚˚ 
;
˚˚ 
}
¸¸ 
finally
˝˝ 
{
˛˛ 
if
ˇˇ 
(
ˇˇ 
_context
ˇˇ 
==
ˇˇ 
null
ˇˇ  $
)
ˇˇ$ %
{
ÄÄ 
context
ÇÇ 
.
ÇÇ 
Dispose
ÇÇ #
(
ÇÇ# $
)
ÇÇ$ %
;
ÇÇ% &
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
ëë 
virtual
ëë  
RepositoryResponse
ëë )
<
ëë) *
int
ëë* -
>
ëë- .
Count
ëë/ 4
(
ëë4 5

TDbContext
ëë5 ?
_context
ëë@ H
=
ëëI J
null
ëëK O
,
ëëO P#
IDbContextTransaction
ëëQ f
_transaction
ëëg s
=
ëët u
null
ëëv z
)
ëëz {
{
íí 	
var
ìì 
context
ìì 
=
ìì 
_context
ìì "
??
ìì# %
InitContext
ìì& 1
(
ìì1 2
)
ìì2 3
;
ìì3 4
var
îî 
transaction
îî 
=
îî 
_transaction
îî *
??
îî+ -
context
îî. 5
.
îî5 6
Database
îî6 >
.
îî> ?
BeginTransaction
îî? O
(
îîO P
)
îîP Q
;
îîQ R
int
ïï 
total
ïï 
=
ïï 
$num
ïï 
;
ïï 
try
ññ 
{
óó 
total
òò 
=
òò 
context
òò 
.
òò  
Set
òò  #
<
òò# $
TModel
òò$ *
>
òò* +
(
òò+ ,
)
òò, -
.
òò- .
Count
òò. 3
(
òò3 4
)
òò4 5
;
òò5 6
return
ôô 
new
ôô  
RepositoryResponse
ôô -
<
ôô- .
int
ôô. 1
>
ôô1 2
(
ôô2 3
)
ôô3 4
{
öö 
	IsSucceed
õõ 
=
õõ 
true
õõ  $
,
õõ$ %
Data
úú 
=
úú 
total
úú  
}
ùù 
;
ùù 
}
ûû 
catch
üü 
(
üü 
	Exception
üü 
ex
üü 
)
üü  
{
†† 
LogErrorMessage
°° 
(
°°  
ex
°°  "
)
°°" #
;
°°# $
if
¢¢ 
(
¢¢ 
_transaction
¢¢  
==
¢¢! #
null
¢¢$ (
)
¢¢( )
{
££ 
transaction
•• 
.
••  
Rollback
••  (
(
••( )
)
••) *
;
••* +
}
¶¶ 
return
®® 
new
®®  
RepositoryResponse
®® -
<
®®- .
int
®®. 1
>
®®1 2
(
®®2 3
)
®®3 4
{
©© 
	IsSucceed
™™ 
=
™™ 
false
™™  %
,
™™% &
Data
´´ 
=
´´ 
$num
´´ 
,
´´ 
	Exception
¨¨ 
=
¨¨ 
ex
¨¨  "
}
≠≠ 
;
≠≠ 
}
ÆÆ 
finally
ØØ 
{
∞∞ 
if
±± 
(
±± 
_context
±± 
==
±± 
null
±±  $
)
±±$ %
{
≤≤ 
context
¥¥ 
.
¥¥ 
Dispose
¥¥ #
(
¥¥# $
)
¥¥$ %
;
¥¥% &
}
µµ 
}
∂∂ 
}
∑∑ 	
public
øø 
virtual
øø 
async
øø 
Task
øø !
<
øø! " 
RepositoryResponse
øø" 4
<
øø4 5
int
øø5 8
>
øø8 9
>
øø9 :

CountAsync
øø; E
(
øøE F

TDbContext
øøF P
_context
øøQ Y
=
øøZ [
null
øø\ `
,
øø` a#
IDbContextTransaction
øøb w
_transactionøøx Ñ
=øøÖ Ü
nulløøá ã
)øøã å
{
¿¿ 	
var
¡¡ 
context
¡¡ 
=
¡¡ 
_context
¡¡ "
??
¡¡# %
InitContext
¡¡& 1
(
¡¡1 2
)
¡¡2 3
;
¡¡3 4
var
¬¬ 
transaction
¬¬ 
=
¬¬ 
_transaction
¬¬ *
??
¬¬+ -
context
¬¬. 5
.
¬¬5 6
Database
¬¬6 >
.
¬¬> ?
BeginTransaction
¬¬? O
(
¬¬O P
)
¬¬P Q
;
¬¬Q R
int
√√ 
total
√√ 
=
√√ 
$num
√√ 
;
√√ 
try
ƒƒ 
{
≈≈ 
total
∆∆ 
=
∆∆ 
await
∆∆ 
context
∆∆ %
.
∆∆% &
Set
∆∆& )
<
∆∆) *
TModel
∆∆* 0
>
∆∆0 1
(
∆∆1 2
)
∆∆2 3
.
∆∆3 4

CountAsync
∆∆4 >
(
∆∆> ?
)
∆∆? @
.
∆∆@ A
ConfigureAwait
∆∆A O
(
∆∆O P
false
∆∆P U
)
∆∆U V
;
∆∆V W
return
«« 
new
««  
RepositoryResponse
«« -
<
««- .
int
««. 1
>
««1 2
(
««2 3
)
««3 4
{
»» 
	IsSucceed
…… 
=
…… 
true
……  $
,
……$ %
Data
   
=
   
total
    
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ 
LogErrorMessage
œœ 
(
œœ  
ex
œœ  "
)
œœ" #
;
œœ# $
if
–– 
(
–– 
_transaction
––  
==
––! #
null
––$ (
)
––( )
{
—— 
transaction
”” 
.
””  
Rollback
””  (
(
””( )
)
””) *
;
””* +
}
‘‘ 
return
÷÷ 
new
÷÷  
RepositoryResponse
÷÷ -
<
÷÷- .
int
÷÷. 1
>
÷÷1 2
(
÷÷2 3
)
÷÷3 4
{
◊◊ 
	IsSucceed
ÿÿ 
=
ÿÿ 
false
ÿÿ  %
,
ÿÿ% &
Data
ŸŸ 
=
ŸŸ 
$num
ŸŸ 
,
ŸŸ 
	Exception
⁄⁄ 
=
⁄⁄ 
ex
⁄⁄  "
}
€€ 
;
€€ 
}
‹‹ 
finally
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
_context
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ  $
)
ﬂﬂ$ %
{
‡‡ 
context
‚‚ 
.
‚‚ 
Dispose
‚‚ #
(
‚‚# $
)
‚‚$ %
;
‚‚% &
}
„„ 
}
‰‰ 
}
ÂÂ 	
public
ÛÛ  
RepositoryResponse
ÛÛ !
<
ÛÛ! "
bool
ÛÛ" &
>
ÛÛ& '
UpdateFields
ÛÛ( 4
(
ÛÛ4 5

Expression
ÛÛ5 ?
<
ÛÛ? @
Func
ÛÛ@ D
<
ÛÛD E
TModel
ÛÛE K
,
ÛÛK L
bool
ÛÛM Q
>
ÛÛQ R
>
ÛÛR S
	predicate
ÛÛT ]
,
ÙÙ 	
List
ÙÙ
 
<
ÙÙ 
EntityField
ÙÙ 
>
ÙÙ 
fields
ÙÙ "
,
ıı 	

TDbContext
ıı
 
_context
ıı 
=
ıı 
null
ıı  $
,
ıı$ %#
IDbContextTransaction
ıı& ;
_transaction
ıı< H
=
ııI J
null
ııK O
)
ııO P
{
ˆˆ 	
bool
˜˜ 
isRoot
˜˜ 
=
˜˜ 
_context
˜˜ "
==
˜˜# %
null
˜˜& *
;
˜˜* +

TDbContext
¯¯ 
context
¯¯ 
=
¯¯  
_context
¯¯! )
??
¯¯* ,
InitContext
¯¯- 8
(
¯¯8 9
)
¯¯9 :
;
¯¯: ;
var
˘˘ 
transaction
˘˘ 
=
˘˘ 
_transaction
˘˘ *
??
˘˘+ -
context
˘˘. 5
.
˘˘5 6
Database
˘˘6 >
.
˘˘> ?
BeginTransaction
˘˘? O
(
˘˘O P
)
˘˘P Q
;
˘˘Q R
try
˙˙ 
{
˚˚ 
bool
¸¸ 
result
¸¸ 
=
¸¸ 
false
¸¸ #
;
¸¸# $
TModel
˝˝ 
model
˝˝ 
=
˝˝ 
context
˝˝ &
.
˝˝& '
Set
˝˝' *
<
˝˝* +
TModel
˝˝+ 1
>
˝˝1 2
(
˝˝2 3
)
˝˝3 4
.
˝˝4 5
FirstOrDefault
˝˝5 C
(
˝˝C D
	predicate
˝˝D M
)
˝˝M N
;
˝˝N O
if
˛˛ 
(
˛˛ 
model
˛˛ 
!=
˛˛ 
null
˛˛ !
)
˛˛! "
{
ˇˇ 
foreach
ÄÄ 
(
ÄÄ 
var
ÄÄ  
field
ÄÄ! &
in
ÄÄ' )
fields
ÄÄ* 0
)
ÄÄ0 1
{
ÅÅ 
var
ÇÇ 
lamda
ÇÇ !
=
ÇÇ" #
	GetLambda
ÇÇ$ -
(
ÇÇ- .
field
ÇÇ. 3
.
ÇÇ3 4
PropertyName
ÇÇ4 @
,
ÇÇ@ A
false
ÇÇB G
)
ÇÇG H
;
ÇÇH I
if
ÉÉ 
(
ÉÉ 
lamda
ÉÉ !
!=
ÉÉ" $
null
ÉÉ% )
)
ÉÉ) *
{
ÑÑ 
var
ÖÖ 
prop
ÖÖ  $
=
ÖÖ% &
context
ÖÖ' .
.
ÖÖ. /
Entry
ÖÖ/ 4
(
ÖÖ4 5
model
ÖÖ5 :
)
ÖÖ: ;
.
ÖÖ; <
Property
ÖÖ< D
(
ÖÖD E
field
ÖÖE J
.
ÖÖJ K
PropertyName
ÖÖK W
)
ÖÖW X
;
ÖÖX Y
if
ÜÜ 
(
ÜÜ  
DateTime
ÜÜ  (
.
ÜÜ( )
TryParse
ÜÜ) 1
(
ÜÜ1 2
field
ÜÜ2 7
.
ÜÜ7 8
PropertyValue
ÜÜ8 E
,
ÜÜE F
out
ÜÜG J
DateTime
ÜÜK S
	dateValue
ÜÜT ]
)
ÜÜ] ^
)
ÜÜ^ _
{
áá 
prop
àà  $
.
àà$ %
CurrentValue
àà% 1
=
àà2 3
	dateValue
àà4 =
;
àà= >
}
ââ 
else
ää  
if
ää! #
(
ää$ %
int
ää% (
.
ää( )
TryParse
ää) 1
(
ää1 2
field
ää2 7
.
ää7 8
PropertyValue
ää8 E
,
ääE F
out
ääG J
int
ääK N
integerValue
ääO [
)
ää[ \
)
ää\ ]
{
ãã 
prop
åå  $
.
åå$ %
CurrentValue
åå% 1
=
åå2 3
integerValue
åå4 @
;
åå@ A
}
çç 
else
éé  
{
èè 
prop
êê  $
.
êê$ %
CurrentValue
êê% 1
=
êê2 3
field
êê4 9
.
êê9 :
PropertyValue
êê: G
;
êêG H
}
ëë 
context
ìì #
.
ìì# $
SaveChanges
ìì$ /
(
ìì/ 0
)
ìì0 1
;
ìì1 2
result
îî "
=
îî# $
true
îî% )
;
îî) *
}
ïï 
else
ññ 
{
óó 
result
òò "
=
òò# $
false
òò% *
;
òò* +
break
ôô !
;
ôô! "
}
öö 
}
õõ 
}
úú 
HandleTransaction
ûû !
(
ûû! "
result
ûû" (
,
ûû( )
isRoot
ûû* 0
,
ûû0 1
transaction
ûû2 =
)
ûû= >
;
ûû> ?
return
†† 
new
††  
RepositoryResponse
†† -
<
††- .
bool
††. 2
>
††2 3
(
††3 4
)
††4 5
{
°° 
	IsSucceed
¢¢ 
=
¢¢ 
result
¢¢  &
,
¢¢& '
Data
££ 
=
££ 
result
££ !
}
§§ 
;
§§ 
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß 
LogErrorMessage
®® 
(
®®  
ex
®®  "
)
®®" #
;
®®# $
if
©© 
(
©© 
_transaction
©©  
==
©©! #
null
©©$ (
)
©©( )
{
™™ 
transaction
¨¨ 
.
¨¨  
Rollback
¨¨  (
(
¨¨( )
)
¨¨) *
;
¨¨* +
}
≠≠ 
return
ØØ 
new
ØØ  
RepositoryResponse
ØØ -
<
ØØ- .
bool
ØØ. 2
>
ØØ2 3
(
ØØ3 4
)
ØØ4 5
{
∞∞ 
	IsSucceed
±± 
=
±± 
false
±±  %
,
±±% &
Data
≤≤ 
=
≤≤ 
false
≤≤  
,
≤≤  !
	Exception
≥≥ 
=
≥≥ 
ex
≥≥  "
}
¥¥ 
;
¥¥ 
}
µµ 
finally
∂∂ 
{
∑∑ 
if
∏∏ 
(
∏∏ 
_context
∏∏ 
==
∏∏ 
null
∏∏  $
)
∏∏$ %
{
ππ 
context
ªª 
.
ªª 
Dispose
ªª #
(
ªª# $
)
ªª$ %
;
ªª% &
}
ºº 
}
ΩΩ 
}
ææ 	
public
»» 
async
»» 
Task
»» 
<
»»  
RepositoryResponse
»» ,
<
»», -
bool
»»- 1
>
»»1 2
>
»»2 3
UpdateFieldsAsync
»»4 E
(
»»E F

Expression
»»F P
<
»»P Q
Func
»»Q U
<
»»U V
TModel
»»V \
,
»»\ ]
bool
»»^ b
>
»»b c
>
»»c d
	predicate
»»e n
,
…… 	
List
……
 
<
…… 
EntityField
…… 
>
…… 
fields
…… "
,
   	

TDbContext
  
 
_context
   
=
   
null
    $
,
  $ %#
IDbContextTransaction
  & ;
_transaction
  < H
=
  I J
null
  K O
)
  O P
{
ÀÀ 	
bool
ÃÃ 
isRoot
ÃÃ 
=
ÃÃ 
_context
ÃÃ "
==
ÃÃ# %
null
ÃÃ& *
;
ÃÃ* +

TDbContext
ÕÕ 
context
ÕÕ 
=
ÕÕ  
_context
ÕÕ! )
??
ÕÕ* ,
InitContext
ÕÕ- 8
(
ÕÕ8 9
)
ÕÕ9 :
;
ÕÕ: ;
var
ŒŒ 
transaction
ŒŒ 
=
ŒŒ 
_transaction
ŒŒ *
??
ŒŒ+ -
context
ŒŒ. 5
.
ŒŒ5 6
Database
ŒŒ6 >
.
ŒŒ> ?
BeginTransaction
ŒŒ? O
(
ŒŒO P
)
ŒŒP Q
;
ŒŒQ R
try
œœ 
{
–– 
bool
—— 
result
—— 
=
—— 
false
—— #
;
——# $
TModel
““ 
model
““ 
=
““ 
await
““ $
context
““% ,
.
““, -
Set
““- 0
<
““0 1
TModel
““1 7
>
““7 8
(
““8 9
)
““9 :
.
““: ;!
FirstOrDefaultAsync
““; N
(
““N O
	predicate
““O X
)
““X Y
.
““Y Z
ConfigureAwait
““Z h
(
““h i
false
““i n
)
““n o
;
““o p
if
”” 
(
”” 
model
”” 
!=
”” 
null
”” !
)
””! "
{
‘‘ 
foreach
’’ 
(
’’ 
var
’’  
field
’’! &
in
’’' )
fields
’’* 0
)
’’0 1
{
÷÷ 
var
◊◊ 
lamda
◊◊ !
=
◊◊" #
	GetLambda
◊◊$ -
(
◊◊- .
field
◊◊. 3
.
◊◊3 4
PropertyName
◊◊4 @
,
◊◊@ A
false
◊◊B G
)
◊◊G H
;
◊◊H I
if
ÿÿ 
(
ÿÿ 
lamda
ÿÿ !
!=
ÿÿ" $
null
ÿÿ% )
)
ÿÿ) *
{
ŸŸ 
var
⁄⁄ 
prop
⁄⁄  $
=
⁄⁄% &
context
⁄⁄' .
.
⁄⁄. /
Entry
⁄⁄/ 4
(
⁄⁄4 5
model
⁄⁄5 :
)
⁄⁄: ;
.
⁄⁄; <
Property
⁄⁄< D
(
⁄⁄D E
field
⁄⁄E J
.
⁄⁄J K
PropertyName
⁄⁄K W
)
⁄⁄W X
;
⁄⁄X Y
if
€€ 
(
€€  
DateTime
€€  (
.
€€( )
TryParse
€€) 1
(
€€1 2
field
€€2 7
.
€€7 8
PropertyValue
€€8 E
,
€€E F
out
€€G J
DateTime
€€K S
	dateValue
€€T ]
)
€€] ^
)
€€^ _
{
‹‹ 
prop
››  $
.
››$ %
CurrentValue
››% 1
=
››2 3
	dateValue
››4 =
;
››= >
}
ﬁﬁ 
else
ﬂﬂ  
if
ﬂﬂ! #
(
ﬂﬂ$ %
int
ﬂﬂ% (
.
ﬂﬂ( )
TryParse
ﬂﬂ) 1
(
ﬂﬂ1 2
field
ﬂﬂ2 7
.
ﬂﬂ7 8
PropertyValue
ﬂﬂ8 E
,
ﬂﬂE F
out
ﬂﬂG J
int
ﬂﬂK N
integerValue
ﬂﬂO [
)
ﬂﬂ[ \
)
ﬂﬂ\ ]
{
‡‡ 
prop
··  $
.
··$ %
CurrentValue
··% 1
=
··2 3
integerValue
··4 @
;
··@ A
}
‚‚ 
else
„„  
{
‰‰ 
prop
ÂÂ  $
.
ÂÂ$ %
CurrentValue
ÂÂ% 1
=
ÂÂ2 3
field
ÂÂ4 9
.
ÂÂ9 :
PropertyValue
ÂÂ: G
;
ÂÂG H
}
ÊÊ 
await
ËË !
context
ËË" )
.
ËË) *
SaveChangesAsync
ËË* :
(
ËË: ;
)
ËË; <
.
ËË< =
ConfigureAwait
ËË= K
(
ËËK L
false
ËËL Q
)
ËËQ R
;
ËËR S
result
ÈÈ "
=
ÈÈ# $
true
ÈÈ% )
;
ÈÈ) *
}
ÍÍ 
else
ÎÎ 
{
ÏÏ 
result
ÌÌ "
=
ÌÌ# $
false
ÌÌ% *
;
ÌÌ* +
break
ÓÓ !
;
ÓÓ! "
}
ÔÔ 
}
 
}
ÒÒ 
HandleTransaction
ÛÛ !
(
ÛÛ! "
result
ÛÛ" (
,
ÛÛ( )
isRoot
ÛÛ* 0
,
ÛÛ0 1
transaction
ÛÛ2 =
)
ÛÛ= >
;
ÛÛ> ?
return
ıı 
new
ıı  
RepositoryResponse
ıı -
<
ıı- .
bool
ıı. 2
>
ıı2 3
(
ıı3 4
)
ıı4 5
{
ˆˆ 
	IsSucceed
˜˜ 
=
˜˜ 
result
˜˜  &
,
˜˜& '
Data
¯¯ 
=
¯¯ 
result
¯¯ !
}
˘˘ 
;
˘˘ 
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚ 
ex
˚˚ 
)
˚˚  
{
¸¸ 
LogErrorMessage
˝˝ 
(
˝˝  
ex
˝˝  "
)
˝˝" #
;
˝˝# $
if
˛˛ 
(
˛˛ 
_transaction
˛˛  
==
˛˛! #
null
˛˛$ (
)
˛˛( )
{
ˇˇ 
transaction
ÅÅ 
.
ÅÅ  
Rollback
ÅÅ  (
(
ÅÅ( )
)
ÅÅ) *
;
ÅÅ* +
}
ÇÇ 
return
ÑÑ 
new
ÑÑ  
RepositoryResponse
ÑÑ -
<
ÑÑ- .
bool
ÑÑ. 2
>
ÑÑ2 3
(
ÑÑ3 4
)
ÑÑ4 5
{
ÖÖ 
	IsSucceed
ÜÜ 
=
ÜÜ 
false
ÜÜ  %
,
ÜÜ% &
Data
áá 
=
áá 
false
áá  
,
áá  !
	Exception
àà 
=
àà 
ex
àà  "
}
ââ 
;
ââ 
}
ää 
finally
ãã 
{
åå 
if
çç 
(
çç 
_context
çç 
==
çç 
null
çç  $
)
çç$ %
{
éé 
context
êê 
.
êê 
Dispose
êê #
(
êê# $
)
êê$ %
;
êê% &
}
ëë 
}
íí 
}
ìì 	
private
óó 
void
óó 
HandleTransaction
óó &
(
óó& '
bool
óó' +
	isSucceed
óó, 5
,
óó5 6
bool
óó7 ;
isRoot
óó< B
,
óóB C#
IDbContextTransaction
óóD Y
transaction
óóZ e
)
óóe f
{
òò 	
if
ôô 
(
ôô 
	isSucceed
ôô 
)
ôô 
{
öö 
if
õõ 
(
õõ 
isRoot
õõ 
)
õõ 
{
úú 
transaction
ûû 
.
ûû  
Commit
ûû  &
(
ûû& '
)
ûû' (
;
ûû( )
}
üü 
}
†† 
else
°° 
{
¢¢ 
if
££ 
(
££ 
isRoot
££ 
)
££ 
{
§§ 
transaction
¶¶ 
.
¶¶  
Rollback
¶¶  (
(
¶¶( )
)
¶¶) *
;
¶¶* +
}
ßß 
}
®® 
}
©© 	
	protected
±± 
LambdaExpression
±± "
	GetLambda
±±# ,
(
±±, -
string
±±- 3
propName
±±4 <
,
±±< =
bool
±±> B
isGetDefault
±±C O
=
±±P Q
true
±±R V
)
±±V W
{
≤≤ 	
var
≥≥ 
	parameter
≥≥ 
=
≥≥ 

Expression
≥≥ &
.
≥≥& '
	Parameter
≥≥' 0
(
≥≥0 1
typeof
≥≥1 7
(
≥≥7 8
TModel
≥≥8 >
)
≥≥> ?
)
≥≥? @
;
≥≥@ A
var
¥¥ 
type
¥¥ 
=
¥¥ 
typeof
¥¥ 
(
¥¥ 
TModel
¥¥ $
)
¥¥$ %
;
¥¥% &
var
µµ 
prop
µµ 
=
µµ 
Array
µµ 
.
µµ 
Find
µµ !
(
µµ! "
type
µµ" &
.
µµ& '
GetProperties
µµ' 4
(
µµ4 5
)
µµ5 6
,
µµ6 7
p
µµ8 9
=>
µµ: <
p
µµ= >
.
µµ> ?
Name
µµ? C
==
µµD F
propName
µµG O
)
µµO P
;
µµP Q
if
∂∂ 
(
∂∂ 
prop
∂∂ 
==
∂∂ 
null
∂∂ 
&&
∂∂ 
isGetDefault
∂∂  ,
)
∂∂, -
{
∑∑ 
propName
∏∏ 
=
∏∏ 
type
∏∏ 
.
∏∏  
GetProperties
∏∏  -
(
∏∏- .
)
∏∏. /
.
∏∏/ 0
FirstOrDefault
∏∏0 >
(
∏∏> ?
)
∏∏? @
?
∏∏@ A
.
∏∏A B
Name
∏∏B F
;
∏∏F G
}
ππ 
var
∫∫ 
memberExpression
∫∫  
=
∫∫! "

Expression
∫∫# -
.
∫∫- .
Property
∫∫. 6
(
∫∫6 7
	parameter
∫∫7 @
,
∫∫@ A
propName
∫∫B J
)
∫∫J K
;
∫∫K L
return
ªª 

Expression
ªª 
.
ªª 
Lambda
ªª $
(
ªª$ %
memberExpression
ªª% 5
,
ªª5 6
	parameter
ªª7 @
)
ªª@ A
;
ªªA B
}
ºº 	
}
ΩΩ 
}ææ “d
[E:\_Workspace\Github\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\CommonViewModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

ViewModels )
{ 
public 

class 
	ApiResult 
< 
T 
> 
{ 
[ 	
JsonProperty	 
( 
$str 
) 
] 
public 
T 
Data 
{ 
get 
; 
set  
;  !
}" #
["" 	
JsonProperty""	 
("" 
$str"" 
)"" 
]""  
public## 
List## 
<## 
string## 
>## 
Errors## "
{### $
get##% (
;##( )
set##* -
;##- .
}##/ 0
=##1 2
new##3 6
List##7 ;
<##; <
string##< B
>##B C
(##C D
)##D E
;##E F
[++ 	
JsonProperty++	 
(++ 
$str++ !
)++! "
]++" #
public,, 
	Exception,, 
	Exception,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
[44 	
JsonProperty44	 
(44 
$str44 #
)44# $
]44$ %
public55 
string55 
ResponseKey55 !
{55" #
get55$ '
;55' (
set55) ,
;55, -
}55. /
[== 	
JsonProperty==	 
(== 
$str== 
)== 
]==  
public>> 
int>> 
Status>> 
{>> 
get>> 
;>>  
set>>! $
;>>$ %
}>>& '
}?? 
publicDD 

classDD 
EntityFieldDD 
{EE 
[LL 	
JsonPropertyLL	 
(LL 
$strLL $
)LL$ %
]LL% &
publicMM 
stringMM 
PropertyNameMM "
{MM# $
getMM% (
;MM( )
setMM* -
;MM- .
}MM/ 0
[UU 	
JsonPropertyUU	 
(UU 
$strUU %
)UU% &
]UU& '
publicVV 
stringVV 
PropertyValueVV #
{VV$ %
getVV& )
;VV) *
setVV+ .
;VV. /
}VV0 1
}WW 
public\\ 

class\\ 
FileStreamViewModel\\ $
{]] 
[dd 	
JsonPropertydd	 
(dd 
$strdd 
)dd 
]dd  
publicee 
stringee 
Base64ee 
{ee 
getee "
;ee" #
setee$ '
;ee' (
}ee) *
[mm 	
JsonPropertymm	 
(mm 
$strmm 
)mm 
]mm 
publicnn 
stringnn 
Namenn 
{nn 
getnn  
;nn  !
setnn" %
;nn% &
}nn' (
[vv 	
JsonPropertyvv	 
(vv 
$strvv 
)vv 
]vv 
publicww 
intww 
Sizeww 
{ww 
getww 
;ww 
setww "
;ww" #
}ww$ %
[ 	
JsonProperty	 
( 
$str 
) 
] 
public
ÄÄ 
string
ÄÄ 
Type
ÄÄ 
{
ÄÄ 
get
ÄÄ  
;
ÄÄ  !
set
ÄÄ" %
;
ÄÄ% &
}
ÄÄ' (
}
ÅÅ 
public
áá 

class
áá 
PaginationModel
áá  
<
áá  !
T
áá! "
>
áá" #
{
àà 
public
åå 
PaginationModel
åå 
(
åå 
)
åå  
{
çç 	
	PageIndex
éé 
=
éé 
$num
éé 
;
éé 
PageSize
èè 
=
èè 
$num
èè 
;
èè 

TotalItems
êê 
=
êê 
$num
êê 
;
êê 
	TotalPage
ëë 
=
ëë 
$num
ëë 
;
ëë 
Items
íí 
=
íí 
new
íí 
List
íí 
<
íí 
T
íí 
>
íí 
(
íí  
)
íí  !
;
íí! "
}
ìì 	
[
õõ 	
JsonProperty
õõ	 
(
õõ 
$str
õõ 
)
õõ 
]
õõ 
public
úú 
List
úú 
<
úú 
T
úú 
>
úú 
Items
úú 
{
úú 
get
úú "
;
úú" #
set
úú$ '
;
úú' (
}
úú) *
[
§§ 	
JsonProperty
§§	 
(
§§ 
$str
§§ !
)
§§! "
]
§§" #
public
•• 
List
•• 
<
•• 
JObject
•• 
>
•• 
	JsonItems
•• &
{
••' (
get
••) ,
;
••, -
set
••. 1
;
••1 2
}
••3 4
=
••5 6
new
••7 :
List
••; ?
<
••? @
JObject
••@ G
>
••G H
(
••H I
)
••I J
;
••J K
[
≠≠ 	
JsonProperty
≠≠	 
(
≠≠ 
$str
≠≠ !
)
≠≠! "
]
≠≠" #
public
ÆÆ 
int
ÆÆ 
	PageIndex
ÆÆ 
{
ÆÆ 
get
ÆÆ "
;
ÆÆ" #
set
ÆÆ$ '
;
ÆÆ' (
}
ÆÆ) *
[
∂∂ 	
JsonProperty
∂∂	 
(
∂∂ 
$str
∂∂  
)
∂∂  !
]
∂∂! "
public
∑∑ 
int
∑∑ 
PageSize
∑∑ 
{
∑∑ 
get
∑∑ !
;
∑∑! "
set
∑∑# &
;
∑∑& '
}
∑∑( )
[
øø 	
JsonProperty
øø	 
(
øø 
$str
øø "
)
øø" #
]
øø# $
public
¿¿ 
int
¿¿ 

TotalItems
¿¿ 
{
¿¿ 
get
¿¿  #
;
¿¿# $
set
¿¿% (
;
¿¿( )
}
¿¿* +
[
»» 	
JsonProperty
»»	 
(
»» 
$str
»» !
)
»»! "
]
»»" #
public
…… 
int
…… 
	TotalPage
…… 
{
…… 
get
…… "
;
……" #
set
……$ '
;
……' (
}
……) *
}
   
public
–– 

class
––  
RepositoryResponse
–– #
<
––# $
TResult
––$ +
>
––+ ,
{
—— 
[
ÿÿ 	
JsonProperty
ÿÿ	 
(
ÿÿ 
$str
ÿÿ !
)
ÿÿ! "
]
ÿÿ" #
public
ŸŸ 
bool
ŸŸ 
	IsSucceed
ŸŸ 
{
ŸŸ 
get
ŸŸ  #
;
ŸŸ# $
set
ŸŸ% (
;
ŸŸ( )
}
ŸŸ* +
[
·· 	
JsonProperty
··	 
(
·· 
$str
·· #
)
··# $
]
··$ %
public
‚‚ 
string
‚‚ 
ResponseKey
‚‚ !
{
‚‚" #
get
‚‚$ '
;
‚‚' (
set
‚‚) ,
;
‚‚, -
}
‚‚. /
[
ÍÍ 	
JsonProperty
ÍÍ	 
(
ÍÍ 
$str
ÍÍ 
)
ÍÍ 
]
ÍÍ  
public
ÎÎ 
int
ÎÎ 
Status
ÎÎ 
{
ÎÎ 
get
ÎÎ 
;
ÎÎ  
set
ÎÎ! $
;
ÎÎ$ %
}
ÎÎ& '
[
ÛÛ 	
JsonProperty
ÛÛ	 
(
ÛÛ 
$str
ÛÛ 
)
ÛÛ 
]
ÛÛ  
public
ÙÙ 
List
ÙÙ 
<
ÙÙ 
string
ÙÙ 
>
ÙÙ 
Errors
ÙÙ "
{
ÙÙ# $
get
ÙÙ% (
;
ÙÙ( )
set
ÙÙ* -
;
ÙÙ- .
}
ÙÙ/ 0
=
ÙÙ1 2
new
ÙÙ3 6
List
ÙÙ7 ;
<
ÙÙ; <
string
ÙÙ< B
>
ÙÙB C
(
ÙÙC D
)
ÙÙD E
;
ÙÙE F
[
¸¸ 	
JsonProperty
¸¸	 
(
¸¸ 
$str
¸¸ !
)
¸¸! "
]
¸¸" #
public
˝˝ 
	Exception
˝˝ 
	Exception
˝˝ "
{
˝˝# $
get
˝˝% (
;
˝˝( )
set
˝˝* -
;
˝˝- .
}
˝˝/ 0
[
ÖÖ 	
JsonProperty
ÖÖ	 
(
ÖÖ 
$str
ÖÖ 
)
ÖÖ 
]
ÖÖ 
public
ÜÜ 
TResult
ÜÜ 
Data
ÜÜ 
{
ÜÜ 
get
ÜÜ !
;
ÜÜ! "
set
ÜÜ# &
;
ÜÜ& '
}
ÜÜ( )
}
àà 
public
çç 

class
çç 
RequestPaging
çç 
{
éé 
[
ïï 	
JsonProperty
ïï	 
(
ïï 
$str
ïï !
)
ïï! "
]
ïï" #
public
ññ 
int
ññ 
	CountryId
ññ 
{
ññ 
get
ññ "
;
ññ" #
set
ññ$ '
;
ññ' (
}
ññ) *
[
ûû 	
JsonProperty
ûû	 
(
ûû 
$str
ûû 
)
ûû  
]
ûû  !
public
üü 
string
üü 
Culture
üü 
{
üü 
get
üü  #
;
üü# $
set
üü% (
;
üü( )
}
üü* +
[
ßß 	
JsonProperty
ßß	 
(
ßß 
$str
ßß !
)
ßß! "
]
ßß" #
public
®® 
OrderByDirection
®® 
	Direction
®®  )
{
®®* +
get
®®, /
;
®®/ 0
set
®®1 4
;
®®4 5
}
®®6 7
=
®®8 9
OrderByDirection
®®: J
.
®®J K
	Ascending
®®K T
;
®®T U
[
∞∞ 	
JsonProperty
∞∞	 
(
∞∞ 
$str
∞∞ 
)
∞∞ 
]
∞∞ 
public
±± 
string
±± 
Key
±± 
{
±± 
get
±± 
;
±±  
set
±±! $
;
±±$ %
}
±±& '
[
ππ 	
JsonProperty
ππ	 
(
ππ 
$str
ππ 
)
ππ  
]
ππ  !
public
∫∫ 
string
∫∫ 
Keyword
∫∫ 
{
∫∫ 
get
∫∫  #
;
∫∫# $
set
∫∫% (
;
∫∫( )
}
∫∫* +
[
¬¬ 	
JsonProperty
¬¬	 
(
¬¬ 
$str
¬¬ 
)
¬¬ 
]
¬¬  
public
√√ 
Common
√√ 
.
√√ 
Utility
√√ 
.
√√ 
Enums
√√ #
.
√√# $
SWStatus
√√$ ,
?
√√, -
Status
√√. 4
{
√√5 6
get
√√7 :
;
√√: ;
set
√√< ?
;
√√? @
}
√√A B
[
ÀÀ 	
JsonProperty
ÀÀ	 
(
ÀÀ 
$str
ÀÀ 
)
ÀÀ  
]
ÀÀ  !
public
ÃÃ 
string
ÃÃ 
OrderBy
ÃÃ 
{
ÃÃ 
get
ÃÃ  #
;
ÃÃ# $
set
ÃÃ% (
;
ÃÃ( )
}
ÃÃ* +
=
ÃÃ, -
$str
ÃÃ. 2
;
ÃÃ2 3
[
‘‘ 	
JsonProperty
‘‘	 
(
‘‘ 
$str
‘‘ !
)
‘‘! "
]
‘‘" #
public
’’ 
int
’’ 
	PageIndex
’’ 
{
’’ 
get
’’ "
;
’’" #
set
’’$ '
;
’’' (
}
’’) *
=
’’+ ,
$num
’’- .
;
’’. /
[
›› 	
JsonProperty
››	 
(
›› 
$str
››  
)
››  !
]
››! "
public
ﬁﬁ 
int
ﬁﬁ 
?
ﬁﬁ 
PageSize
ﬁﬁ 
{
ﬁﬁ 
get
ﬁﬁ "
;
ﬁﬁ" #
set
ﬁﬁ$ '
;
ﬁﬁ' (
}
ﬁﬁ) *
=
ﬁﬁ+ ,
$num
ﬁﬁ- /
;
ﬁﬁ/ 0
[
ÊÊ 	
JsonProperty
ÊÊ	 
(
ÊÊ 
$str
ÊÊ !
)
ÊÊ! "
]
ÊÊ" #
public
ÁÁ 
string
ÁÁ 
	UserAgent
ÁÁ 
{
ÁÁ  !
get
ÁÁ" %
;
ÁÁ% &
set
ÁÁ' *
;
ÁÁ* +
}
ÁÁ, -
[
ÔÔ 	
JsonProperty
ÔÔ	 
(
ÔÔ 
$str
ÔÔ 
)
ÔÔ 
]
ÔÔ  
public
 
string
 
UserId
 
{
 
get
 "
;
" #
set
$ '
;
' (
}
) *
[
ÚÚ 	
JsonProperty
ÚÚ	 
(
ÚÚ 
$str
ÚÚ  
)
ÚÚ  !
]
ÚÚ! "
public
ÛÛ 
DateTime
ÛÛ 
?
ÛÛ 
FromDate
ÛÛ !
{
ÛÛ" #
get
ÛÛ$ '
;
ÛÛ' (
set
ÛÛ) ,
;
ÛÛ, -
}
ÛÛ. /
[
ıı 	
JsonProperty
ıı	 
(
ıı 
$str
ıı 
)
ıı 
]
ıı  
public
ˆˆ 
DateTime
ˆˆ 
?
ˆˆ 
ToDate
ˆˆ 
{
ˆˆ  !
get
ˆˆ" %
;
ˆˆ% &
set
ˆˆ' *
;
ˆˆ* +
}
ˆˆ, -
}
˜˜ 
}¯¯ ÿ 
XE:\_Workspace\Github\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\ViewModelBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

ViewModels )
{ 
public 

abstract 
class 
ViewModelBase '
<' (

TDbContext( 2
,2 3
TModel4 :
,: ;
TView< A
>A B
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
ViewModelBase #
<# $

TDbContext$ .
,. /
TModel0 6
,6 7
TView8 =
>= >
{   
[&& 	

JsonIgnore&&	 
]&& 
public'' 
bool'' 
IsValid'' 
='' 
true'' "
;''" #
private,, 
static,, 
DefaultRepository,, (
<,,( )

TDbContext,,) 3
,,,3 4
TModel,,5 ;
,,,; <
TView,,= B
>,,B C
_repo,,D I
;,,I J
private11 
IMapper11 
_mapper11 
;11  
private66 
TModel66 
_model66 
;66 
private;; 
IMapper;; 
_modelMapper;; $
;;;$ %
[== 	

JsonIgnore==	 
]== 
public>> 
static>> 
DefaultRepository>> '
<>>' (

TDbContext>>( 2
,>>2 3
TModel>>4 :
,>>: ;
TView>>< A
>>>A B

Repository>>C M
{>>N O
get?? 
{?? 
return?? 
_repo?? 
???? !
(??" #
_repo??# (
=??) *
DefaultRepository??+ <
<??< =

TDbContext??= G
,??G H
TModel??I O
,??O P
TView??Q V
>??V W
.??W X
Instance??X `
)??` a
;??a b
}??c d
set@@ 
=>@@ 
_repo@@ 
=@@ 
value@@  
;@@  !
}AA 	
[II 	

JsonIgnoreII	 
]II 
publicJJ 
	ExceptionJJ 
	ExceptionJJ "
{JJ# $
getJJ% (
;JJ( )
setJJ* -
;JJ- .
}JJ/ 0
[RR 	

JsonIgnoreRR	 
]RR 
publicSS 
boolSS 
IsCloneSS 
{SS 
getSS !
;SS! "
setSS# &
;SS& '
}SS( )
=SS* +
falseSS, 1
;SS1 2
[[[ 	

JsonIgnore[[	 
][[ 
public\\ 
bool\\ 

IsLazyLoad\\ 
{\\  
get\\! $
;\\$ %
set\\& )
;\\) *
}\\+ ,
=\\- .
true\\/ 3
;\\3 4
[dd 	

JsonIgnoredd	 
]dd 
publicee 
Listee 
<ee 
SupportedCultureee $
>ee$ % 
ListSupportedCultureee& :
{ee; <
getee= @
;ee@ A
seteeB E
;eeE F
}eeG H
[mm 	

JsonIgnoremm	 
]mm 
publicnn 
IMappernn 
Mappernn 
{nn 
getoo 
{oo 
returnoo 
_mapperoo  
??oo! #
(oo$ %
_mapperoo% ,
=oo- .
thisoo/ 3
.oo3 4
CreateMapperoo4 @
(oo@ A
)ooA B
)ooB C
;ooC D
}ooE F
setpp 
=>pp 
_mapperpp 
=pp 
valuepp "
;pp" #
}qq 	
[yy 	

JsonIgnoreyy	 
]yy 
publiczz 
TModelzz 
Modelzz 
{zz 
get{{ 
{{{ 
if|| 
(|| 
_model|| 
==|| 
null|| "
)||" #
{}} 
Type~~ 
	classType~~ "
=~~# $
typeof~~% +
(~~+ ,
TModel~~, 2
)~~2 3
;~~3 4
ConstructorInfo #
classConstructor$ 4
=5 6
	classType7 @
.@ A
GetConstructorA O
(O P
newP S
TypeT X
[X Y
]Y Z
{[ \
}] ^
)^ _
;_ `
_model
ÄÄ 
=
ÄÄ 
(
ÄÄ 
TModel
ÄÄ $
)
ÄÄ$ %
classConstructor
ÄÄ% 5
.
ÄÄ5 6
Invoke
ÄÄ6 <
(
ÄÄ< =
new
ÄÄ= @
object
ÄÄA G
[
ÄÄG H
]
ÄÄH I
{
ÄÄJ K
}
ÄÄL M
)
ÄÄM N
;
ÄÄN O
}
ÅÅ 
return
ÇÇ 
_model
ÇÇ 
;
ÇÇ 
}
ÉÉ 
set
ÑÑ 
=>
ÑÑ 
_model
ÑÑ 
=
ÑÑ 
value
ÑÑ !
;
ÑÑ! "
}
ÖÖ 	
[
çç 	

JsonIgnore
çç	 
]
çç 
public
éé 
IMapper
éé 
ModelMapper
éé "
{
éé# $
get
èè 
{
èè 
return
èè 
_modelMapper
èè %
??
èè& (
(
èè) *
_modelMapper
èè* 6
=
èè7 8
this
èè9 =
.
èè= >
CreateModelMapper
èè> O
(
èèO P
)
èèP Q
)
èèQ R
;
èèR S
}
èèT U
set
êê 
=>
êê 
_modelMapper
êê 
=
êê  !
value
êê" '
;
êê' (
}
ëë 	
[
ôô 	

JsonIgnore
ôô	 
]
ôô 
public
öö 
int
öö 
	PageIndex
öö 
{
öö 
get
öö "
;
öö" #
set
öö$ '
;
öö' (
}
öö) *
=
öö+ ,
$num
öö- .
;
öö. /
[
¢¢ 	

JsonIgnore
¢¢	 
]
¢¢ 
public
££ 
int
££ 
PageSize
££ 
{
££ 
get
££ !
;
££! "
set
££# &
;
££& '
}
££( )
=
££* +
$num
££, 0
;
££0 1
[
´´ 	
JsonProperty
´´	 
(
´´ 
$str
´´  
)
´´  !
]
´´! "
public
¨¨ 
int
¨¨ 
?
¨¨ 
Priority
¨¨ 
{
¨¨ 
get
¨¨ "
;
¨¨" #
set
¨¨$ '
;
¨¨' (
}
¨¨) *
=
¨¨+ ,
$num
¨¨- .
;
¨¨. /
[
¥¥ 	
JsonProperty
¥¥	 
(
¥¥ 
$str
¥¥ 
)
¥¥ 
]
¥¥  
public
µµ 
SWStatus
µµ 
Status
µµ 
{
µµ  
get
µµ! $
;
µµ$ %
set
µµ& )
;
µµ) *
}
µµ+ ,
=
µµ- .
SWStatus
µµ/ 7
.
µµ7 8
Preview
µµ8 ?
;
µµ? @
[
ΩΩ 	
JsonProperty
ΩΩ	 
(
ΩΩ 
$str
ΩΩ &
)
ΩΩ& '
]
ΩΩ' (
public
ææ 
string
ææ 
Specificulture
ææ $
{
ææ% &
get
ææ' *
;
ææ* +
set
ææ, /
;
ææ/ 0
}
ææ1 2
private
ƒƒ 
IMapper
ƒƒ 
CreateMapper
ƒƒ $
(
ƒƒ$ %
)
ƒƒ% &
{
≈≈ 	
var
∆∆ 
config
∆∆ 
=
∆∆ 
new
∆∆ !
MapperConfiguration
∆∆ 0
(
∆∆0 1
cfg
∆∆1 4
=>
∆∆5 7
cfg
∆∆8 ;
.
∆∆; <
	CreateMap
∆∆< E
<
∆∆E F
TModel
∆∆F L
,
∆∆L M
TView
∆∆N S
>
∆∆S T
(
∆∆T U
)
∆∆U V
.
∆∆V W

ReverseMap
∆∆W a
(
∆∆a b
)
∆∆b c
)
∆∆c d
;
∆∆d e
var
«« 
mapper
«« 
=
«« 
new
«« 
Mapper
«« #
(
««# $
config
««$ *
)
««* +
;
««+ ,
return
»» 
mapper
»» 
;
»» 
}
…… 	
private
œœ 
IMapper
œœ 
CreateModelMapper
œœ )
(
œœ) *
)
œœ* +
{
–– 	
var
—— 
config
—— 
=
—— 
new
—— !
MapperConfiguration
—— 0
(
——0 1
cfg
——1 4
=>
——5 7
cfg
——8 ;
.
——; <
	CreateMap
——< E
<
——E F
TModel
——F L
,
——L M
TModel
——N T
>
——T U
(
——U V
)
——V W
.
——W X

ReverseMap
——X b
(
——b c
)
——c d
)
——d e
;
——e f
var
““ 
mapper
““ 
=
““ 
new
““ 
Mapper
““ #
(
““# $
config
““$ *
)
““* +
;
““+ ,
return
”” 
mapper
”” 
;
”” 
}
‘‘ 	
[
’’ 	

JsonIgnore
’’	 
]
’’ 
public
÷÷ 
List
÷÷ 
<
÷÷ 
string
÷÷ 
>
÷÷ 
Errors
÷÷ "
{
÷÷# $
get
÷÷% (
;
÷÷( )
set
÷÷* -
;
÷÷- .
}
÷÷/ 0
=
÷÷1 2
new
÷÷3 6
List
÷÷7 ;
<
÷÷; <
string
÷÷< B
>
÷÷B C
(
÷÷C D
)
÷÷D E
;
÷÷E F
public
·· 
virtual
·· 
void
·· 

ExpandView
·· &
(
··& '

TDbContext
··' 1
_context
··2 :
=
··; <
null
··= A
,
··A B#
IDbContextTransaction
··C X
_transaction
··Y e
=
··f g
null
··h l
)
··l m
{
‚‚ 	
}
„„ 	
public
ÈÈ 
virtual
ÈÈ 

TDbContext
ÈÈ !
InitContext
ÈÈ" -
(
ÈÈ- .
)
ÈÈ. /
{
ÍÍ 	
Type
ÎÎ 
	classType
ÎÎ 
=
ÎÎ 
typeof
ÎÎ #
(
ÎÎ# $

TDbContext
ÎÎ$ .
)
ÎÎ. /
;
ÎÎ/ 0
ConstructorInfo
ÏÏ 
classConstructor
ÏÏ ,
=
ÏÏ- .
	classType
ÏÏ/ 8
.
ÏÏ8 9
GetConstructor
ÏÏ9 G
(
ÏÏG H
new
ÏÏH K
Type
ÏÏL P
[
ÏÏP Q
]
ÏÏQ R
{
ÏÏS T
}
ÏÏU V
)
ÏÏV W
;
ÏÏW X

TDbContext
ÌÌ 
context
ÌÌ 
=
ÌÌ  
(
ÌÌ! "

TDbContext
ÌÌ" ,
)
ÌÌ, -
classConstructor
ÌÌ- =
.
ÌÌ= >
Invoke
ÌÌ> D
(
ÌÌD E
new
ÌÌE H
object
ÌÌI O
[
ÌÌO P
]
ÌÌP Q
{
ÌÌR S
}
ÌÌT U
)
ÌÌU V
;
ÌÌV W
return
ÔÔ 
context
ÔÔ 
;
ÔÔ 
}
 	
public
ˆˆ 
virtual
ˆˆ 
TModel
ˆˆ 
	InitModel
ˆˆ '
(
ˆˆ' (
)
ˆˆ( )
{
˜˜ 	
Type
¯¯ 
	classType
¯¯ 
=
¯¯ 
typeof
¯¯ #
(
¯¯# $
TModel
¯¯$ *
)
¯¯* +
;
¯¯+ ,
ConstructorInfo
˘˘ 
classConstructor
˘˘ ,
=
˘˘- .
	classType
˘˘/ 8
.
˘˘8 9
GetConstructor
˘˘9 G
(
˘˘G H
new
˘˘H K
Type
˘˘L P
[
˘˘P Q
]
˘˘Q R
{
˘˘S T
}
˘˘U V
)
˘˘V W
;
˘˘W X
TModel
˙˙ 
context
˙˙ 
=
˙˙ 
(
˙˙ 
TModel
˙˙ $
)
˙˙$ %
classConstructor
˙˙% 5
.
˙˙5 6
Invoke
˙˙6 <
(
˙˙< =
new
˙˙= @
object
˙˙A G
[
˙˙G H
]
˙˙H I
{
˙˙J K
}
˙˙L M
)
˙˙M N
;
˙˙N O
return
¸¸ 
context
¸¸ 
;
¸¸ 
}
˝˝ 	
public
áá 
virtual
áá 
TView
áá 
InitView
áá %
(
áá% &
TModel
áá& ,
model
áá- 2
=
áá3 4
null
áá5 9
,
áá9 :
bool
áá; ?

isLazyLoad
áá@ J
=
ááK L
true
ááM Q
,
ááQ R

TDbContext
ááS ]
_context
áá^ f
=
áág h
null
áái m
,
áám n$
IDbContextTransactionááo Ñ
_transactionááÖ ë
=ááí ì
nullááî ò
)ááò ô
{
àà 	
Type
ââ 
	classType
ââ 
=
ââ 
typeof
ââ #
(
ââ# $
TView
ââ$ )
)
ââ) *
;
ââ* +
ConstructorInfo
ãã 
classConstructor
ãã ,
=
ãã- .
	classType
ãã/ 8
.
ãã8 9
GetConstructor
ãã9 G
(
ããG H
new
ããH K
Type
ããL P
[
ããP Q
]
ããQ R
{
ããS T
}
ããU V
)
ããV W
;
ããW X
if
åå 
(
åå 
model
åå 
==
åå 
null
åå 
&&
åå  
classConstructor
åå! 1
!=
åå2 4
null
åå5 9
)
åå9 :
{
çç 
return
éé 
(
éé 
TView
éé 
)
éé 
classConstructor
éé .
.
éé. /
Invoke
éé/ 5
(
éé5 6
new
éé6 9
object
éé: @
[
éé@ A
]
ééA B
{
ééC D
}
ééE F
)
ééF G
;
ééG H
}
èè 
else
êê 
{
ëë 
classConstructor
íí  
=
íí! "
	classType
íí# ,
.
íí, -
GetConstructor
íí- ;
(
íí; <
new
íí< ?
Type
íí@ D
[
ííD E
]
ííE F
{
ííG H
typeof
ííI O
(
ííO P
TModel
ííP V
)
ííV W
,
ííW X
typeof
ííY _
(
íí_ `
bool
íí` d
)
ííd e
,
ííe f
typeof
ííg m
(
íím n

TDbContext
íín x
)
ííx y
,
ííy z
typeofíí{ Å
(ííÅ Ç%
IDbContextTransactionííÇ ó
)ííó ò
}ííô ö
)ííö õ
;ííõ ú
if
ìì 
(
ìì 
classConstructor
ìì $
!=
ìì% '
null
ìì( ,
)
ìì, -
{
îî 
return
ïï 
(
ïï 
TView
ïï !
)
ïï! "
classConstructor
ïï" 2
.
ïï2 3
Invoke
ïï3 9
(
ïï9 :
new
ïï: =
object
ïï> D
[
ïïD E
]
ïïE F
{
ïïG H
model
ïïI N
,
ïïN O

isLazyLoad
ïïP Z
,
ïïZ [
_context
ïï\ d
,
ïïd e
_transaction
ïïf r
}
ïïs t
)
ïït u
;
ïïu v
}
ññ 
else
óó 
{
òò 
classConstructor
ôô $
=
ôô% &
	classType
ôô' 0
.
ôô0 1
GetConstructor
ôô1 ?
(
ôô? @
new
ôô@ C
Type
ôôD H
[
ôôH I
]
ôôI J
{
ôôK L
typeof
ôôM S
(
ôôS T
TModel
ôôT Z
)
ôôZ [
,
ôô[ \
typeof
ôô] c
(
ôôc d

TDbContext
ôôd n
)
ôôn o
,
ôôo p
typeof
ôôq w
(
ôôw x$
IDbContextTransactionôôx ç
)ôôç é
}ôôè ê
)ôôê ë
;ôôë í
return
öö 
(
öö 
TView
öö !
)
öö! "
classConstructor
öö" 2
.
öö2 3
Invoke
öö3 9
(
öö9 :
new
öö: =
object
öö> D
[
ööD E
]
ööE F
{
ööG H
model
ööI N
,
ööN O
_context
ööP X
,
ööX Y
_transaction
ööZ f
}
öög h
)
ööh i
;
ööi j
}
õõ 
}
úú 
}
ùù 	
public
ØØ 
virtual
ØØ 
TModel
ØØ 

ParseModel
ØØ (
(
ØØ( )

TDbContext
ØØ) 3
_context
ØØ4 <
=
ØØ= >
null
ØØ? C
,
ØØC D#
IDbContextTransaction
ØØE Z
_transaction
ØØ[ g
=
ØØh i
null
ØØj n
)
ØØn o
{
∞∞ 	
this
≤≤ 
.
≤≤ 
Model
≤≤ 
=
≤≤ 
	InitModel
≤≤ "
(
≤≤" #
)
≤≤# $
;
≤≤$ %
Mapper
≥≥ 
.
≥≥ 
Map
≥≥ 
<
≥≥ 
TView
≥≥ 
,
≥≥ 
TModel
≥≥ $
>
≥≥$ %
(
≥≥% &
(
≥≥& '
TView
≥≥' ,
)
≥≥, -
this
≥≥- 1
,
≥≥1 2
Model
≥≥3 8
)
≥≥8 9
;
≥≥9 :
return
¥¥ 
this
¥¥ 
.
¥¥ 
Model
¥¥ 
;
¥¥ 
}
µµ 	
public
ææ 
virtual
ææ 
TView
ææ 
	ParseView
ææ &
(
ææ& '
bool
ææ' +
isExpand
ææ, 4
=
ææ5 6
true
ææ7 ;
,
ææ; <

TDbContext
ææ= G
_context
ææH P
=
ææQ R
null
ææS W
,
ææW X#
IDbContextTransaction
ææY n
_transaction
ææo {
=
ææ| }
nullææ~ Ç
)
øø4 5
{
¿¿ 	
Mapper
¬¬ 
.
¬¬ 
Map
¬¬ 
<
¬¬ 
TModel
¬¬ 
,
¬¬ 
TView
¬¬ $
>
¬¬$ %
(
¬¬% &
Model
¬¬& +
,
¬¬+ ,
(
¬¬- .
TView
¬¬. 3
)
¬¬3 4
this
¬¬4 8
)
¬¬8 9
;
¬¬9 :
if
√√ 
(
√√ 
isExpand
√√ 
)
√√ 
{
ƒƒ 
bool
≈≈ 
IsRoot
≈≈ 
=
≈≈ 
_context
≈≈ &
==
≈≈' )
null
≈≈* .
;
≈≈. /
var
∆∆ 
context
∆∆ 
=
∆∆ 
_context
∆∆ &
??
∆∆' )
InitContext
∆∆* 5
(
∆∆5 6
)
∆∆6 7
;
∆∆7 8
var
«« 
transaction
«« 
=
««  !
_transaction
««" .
??
««/ 1
context
««2 9
.
««9 :
Database
««: B
.
««B C
BeginTransaction
««C S
(
««S T
)
««T U
;
««U V
try
»» 
{
…… 

ExpandView
   
(
   
context
   &
,
  & '
transaction
  ( 3
)
  3 4
;
  4 5
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ  
ex
ÃÃ! #
)
ÃÃ# $
{
ÕÕ 

Repository
ŒŒ 
.
ŒŒ 
LogErrorMessage
ŒŒ .
(
ŒŒ. /
ex
ŒŒ/ 1
)
ŒŒ1 2
;
ŒŒ2 3
if
œœ 
(
œœ 
IsRoot
œœ 
)
œœ 
{
–– 
transaction
““ #
.
““# $
Rollback
““$ ,
(
““, -
)
““- .
;
““. /
}
”” 
}
‘‘ 
finally
’’ 
{
÷÷ 
if
◊◊ 
(
◊◊ 
IsRoot
◊◊ 
)
◊◊ 
{
ÿÿ 
context
⁄⁄ 
.
⁄⁄  
Dispose
⁄⁄  '
(
⁄⁄' (
)
⁄⁄( )
;
⁄⁄) *
}
€€ 
}
‹‹ 
}
›› 
return
ﬁﬁ 
(
ﬁﬁ 
TView
ﬁﬁ 
)
ﬁﬁ 
this
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 	
public
ÊÊ 
virtual
ÊÊ 
void
ÊÊ 
Validate
ÊÊ $
(
ÊÊ$ %

TDbContext
ÊÊ% /
_context
ÊÊ0 8
=
ÊÊ9 :
null
ÊÊ; ?
,
ÊÊ? @#
IDbContextTransaction
ÊÊA V
_transaction
ÊÊW c
=
ÊÊd e
null
ÊÊf j
)
ÊÊj k
{
ÁÁ 	
var
ËË 
validateContext
ËË 
=
ËË  !
new
ËË" %
System
ËË& ,
.
ËË, -
ComponentModel
ËË- ;
.
ËË; <
DataAnnotations
ËË< K
.
ËËK L
ValidationContext
ËËL ]
(
ËË] ^
this
ËË^ b
,
ËËb c
serviceProvider
ËËd s
:
ËËs t
null
ËËu y
,
ËËy z
itemsËË{ Ä
:ËËÄ Å
nullËËÇ Ü
)ËËÜ á
;ËËá à
var
ÈÈ 
results
ÈÈ 
=
ÈÈ 
new
ÈÈ 
List
ÈÈ "
<
ÈÈ" #
ValidationResult
ÈÈ# 3
>
ÈÈ3 4
(
ÈÈ4 5
)
ÈÈ5 6
;
ÈÈ6 7
IsValid
ÎÎ 
=
ÎÎ 
	Validator
ÎÎ 
.
ÎÎ  
TryValidateObject
ÎÎ  1
(
ÎÎ1 2
this
ÎÎ2 6
,
ÎÎ6 7
validateContext
ÎÎ8 G
,
ÎÎG H
results
ÎÎI P
)
ÎÎP Q
;
ÎÎQ R
if
ÏÏ 
(
ÏÏ 
!
ÏÏ 
IsValid
ÏÏ 
)
ÏÏ 
{
ÌÌ 
Errors
ÓÓ 
.
ÓÓ 
AddRange
ÓÓ 
(
ÓÓ  
results
ÓÓ  '
.
ÓÓ' (
Select
ÓÓ( .
(
ÓÓ. /
e
ÓÓ/ 0
=>
ÓÓ1 3
e
ÓÓ4 5
.
ÓÓ5 6
ErrorMessage
ÓÓ6 B
)
ÓÓB C
)
ÓÓC D
;
ÓÓD E
}
ÔÔ 
}
 	
public
˛˛ 
virtual
˛˛ 
async
˛˛ 
Task
˛˛ !
<
˛˛! " 
RepositoryResponse
˛˛" 4
<
˛˛4 5
List
˛˛5 9
<
˛˛9 :
TView
˛˛: ?
>
˛˛? @
>
˛˛@ A
>
˛˛A B

CloneAsync
˛˛C M
(
˛˛M N
TModel
˛˛N T
model
˛˛U Z
,
˛˛Z [
List
˛˛\ `
<
˛˛` a
SupportedCulture
˛˛a q
>
˛˛q r
cloneCultures˛˛s Ä
,
ˇˇ 

TDbContext
ˇˇ 
_context
ˇˇ !
=
ˇˇ" #
null
ˇˇ$ (
,
ˇˇ( )#
IDbContextTransaction
ˇˇ* ?
_transaction
ˇˇ@ L
=
ˇˇM N
null
ˇˇO S
)
ˇˇS T
{
ÄÄ 	
bool
ÅÅ 
IsRoot
ÅÅ 
=
ÅÅ 
_context
ÅÅ "
==
ÅÅ# %
null
ÅÅ& *
;
ÅÅ* +
var
ÇÇ 
context
ÇÇ 
=
ÇÇ 
_context
ÇÇ "
??
ÇÇ# %
InitContext
ÇÇ& 1
(
ÇÇ1 2
)
ÇÇ2 3
;
ÇÇ3 4
var
ÉÉ 
transaction
ÉÉ 
=
ÉÉ 
_transaction
ÉÉ *
??
ÉÉ+ -
context
ÉÉ. 5
.
ÉÉ5 6
Database
ÉÉ6 >
.
ÉÉ> ?
BeginTransaction
ÉÉ? O
(
ÉÉO P
)
ÉÉP Q
;
ÉÉQ R 
RepositoryResponse
ÑÑ 
<
ÑÑ 
List
ÑÑ #
<
ÑÑ# $
TView
ÑÑ$ )
>
ÑÑ) *
>
ÑÑ* +
result
ÑÑ, 2
=
ÑÑ3 4
new
ÑÑ5 8 
RepositoryResponse
ÑÑ9 K
<
ÑÑK L
List
ÑÑL P
<
ÑÑP Q
TView
ÑÑQ V
>
ÑÑV W
>
ÑÑW X
(
ÑÑX Y
)
ÑÑY Z
{
ÖÖ 
	IsSucceed
ÜÜ 
=
ÜÜ 
true
ÜÜ  
,
ÜÜ  !
Data
áá 
=
áá 
new
áá 
List
áá 
<
áá  
TView
áá  %
>
áá% &
(
áá& '
)
áá' (
}
àà 
;
àà 
try
ää 
{
ãã 
if
åå 
(
åå 
cloneCultures
åå !
!=
åå" $
null
åå% )
)
åå) *
{
çç 
foreach
éé 
(
éé 
var
éé  
culture
éé! (
in
éé) +
cloneCultures
éé, 9
)
éé9 :
{
èè 
string
êê 
desSpecificulture
êê 0
=
êê1 2
culture
êê3 :
.
êê: ;
Specificulture
êê; I
;
êêI J
TView
íí 
view
íí "
=
íí# $
InitView
íí% -
(
íí- .
)
íí. /
;
íí/ 0
view
ìì 
.
ìì 
Model
ìì "
=
ìì# $
model
ìì% *
;
ìì* +
view
îî 
.
îî 
	ParseView
îî &
(
îî& '
isExpand
îî' /
:
îî/ 0
false
îî1 6
,
îî6 7
_context
îî8 @
:
îî@ A
context
îîB I
,
îîI J
_transaction
îîK W
:
îîW X
transaction
îîY d
)
îîd e
;
îîe f
view
ïï 
.
ïï 
Specificulture
ïï +
=
ïï, -
desSpecificulture
ïï. ?
;
ïï? @
bool
óó 
isExist
óó $
=
óó% &

Repository
óó' 1
.
óó1 2
CheckIsExists
óó2 ?
(
óó? @
view
óó@ D
.
óóD E

ParseModel
óóE O
(
óóO P
_context
óóP X
,
óóX Y
_transaction
óóZ f
)
óóf g
,
óóg h
_context
óói q
:
óóq r
context
óós z
,
óóz {
_transactionóó| à
:óóà â
transactionóóä ï
)óóï ñ
;óóñ ó
if
ôô 
(
ôô 
isExist
ôô #
)
ôô# $
{
öö 
result
õõ "
.
õõ" #
	IsSucceed
õõ# ,
=
õõ- .
true
õõ/ 3
;
õõ3 4
result
úú "
.
úú" #
Data
úú# '
.
úú' (
Add
úú( +
(
úú+ ,
view
úú, 0
)
úú0 1
;
úú1 2
}
ùù 
else
ûû 
{
üü 
var
†† 
cloneResult
††  +
=
††, -
await
††. 3
view
††4 8
.
††8 9
SaveModelAsync
††9 G
(
††G H
false
††H M
,
††M N
context
††O V
,
††V W
transaction
††X c
)
††c d
.
††d e
ConfigureAwait
††e s
(
††s t
false
††t y
)
††y z
;
††z {
if
°° 
(
°°  
cloneResult
°°  +
.
°°+ ,
	IsSucceed
°°, 5
)
°°5 6
{
¢¢ 
var
££  #
cloneSubResult
££$ 2
=
££3 4
await
££5 :!
CloneSubModelsAsync
££; N
(
££N O
cloneResult
££O Z
.
££Z [
Data
££[ _
,
££_ `
cloneCultures
££a n
,
££n o
context
££p w
,
££w x
transaction££y Ñ
)££Ñ Ö
.££Ö Ü
ConfigureAwait££Ü î
(££î ï
false££ï ö
)££ö õ
;££õ ú
if
§§  "
(
§§# $
!
§§$ %
cloneSubResult
§§% 3
.
§§3 4
	IsSucceed
§§4 =
)
§§= >
{
••  !
cloneResult
¶¶$ /
.
¶¶/ 0
Errors
¶¶0 6
.
¶¶6 7
AddRange
¶¶7 ?
(
¶¶? @
cloneSubResult
¶¶@ N
.
¶¶N O
Errors
¶¶O U
)
¶¶U V
;
¶¶V W
cloneResult
ßß$ /
.
ßß/ 0
	Exception
ßß0 9
=
ßß: ;
cloneSubResult
ßß< J
.
ßßJ K
	Exception
ßßK T
;
ßßT U
}
®®  !
result
™™  &
.
™™& '
	IsSucceed
™™' 0
=
™™1 2
result
™™3 9
.
™™9 :
	IsSucceed
™™: C
&&
™™D F
cloneResult
™™G R
.
™™R S
	IsSucceed
™™S \
&&
™™] _
cloneSubResult
™™` n
.
™™n o
	IsSucceed
™™o x
;
™™x y
result
´´  &
.
´´& '
Data
´´' +
.
´´+ ,
Add
´´, /
(
´´/ 0
cloneResult
´´0 ;
.
´´; <
Data
´´< @
)
´´@ A
;
´´A B
}
¨¨ 
else
≠≠  
{
ÆÆ 
result
ØØ  &
.
ØØ& '
	IsSucceed
ØØ' 0
=
ØØ1 2
result
ØØ3 9
.
ØØ9 :
	IsSucceed
ØØ: C
&&
ØØD F
cloneResult
ØØG R
.
ØØR S
	IsSucceed
ØØS \
;
ØØ\ ]
result
∞∞  &
.
∞∞& '
Errors
∞∞' -
.
∞∞- .
AddRange
∞∞. 6
(
∞∞6 7
cloneResult
∞∞7 B
.
∞∞B C
Errors
∞∞C I
)
∞∞I J
;
∞∞J K
result
±±  &
.
±±& '
	Exception
±±' 0
=
±±1 2
cloneResult
±±3 >
.
±±> ?
	Exception
±±? H
;
±±H I
}
≤≤ 
}
≥≥ 
if
µµ 
(
µµ 
result
µµ "
.
µµ" #
	IsSucceed
µµ# ,
)
µµ, -
{
∂∂ 
if
∑∑ 
(
∑∑  
_transaction
∑∑  ,
==
∑∑- /
null
∑∑0 4
)
∑∑4 5
{
∏∏ 
transaction
ππ  +
.
ππ+ ,
Commit
ππ, 2
(
ππ2 3
)
ππ3 4
;
ππ4 5
}
∫∫ 
}
ªª 
else
ºº 
{
ΩΩ 
if
ææ 
(
ææ  
_transaction
ææ  ,
==
ææ- /
null
ææ0 4
)
ææ4 5
{
øø 
transaction
¿¿  +
.
¿¿+ ,
Rollback
¿¿, 4
(
¿¿4 5
)
¿¿5 6
;
¿¿6 7
}
¡¡ 
}
¬¬ 
}
√√ 
return
ƒƒ 
result
ƒƒ !
;
ƒƒ! "
}
≈≈ 
else
∆∆ 
{
«« 
return
»» 
result
»» !
;
»»! "
}
…… 
}
   
catch
ÀÀ 
(
ÀÀ 
	Exception
ÀÀ 
ex
ÀÀ 
)
ÀÀ  
{
ÃÃ 
result
ÕÕ 
.
ÕÕ 
	IsSucceed
ÕÕ  
=
ÕÕ! "
false
ÕÕ# (
;
ÕÕ( )
result
ŒŒ 
.
ŒŒ 
	Exception
ŒŒ  
=
ŒŒ! "
ex
ŒŒ# %
;
ŒŒ% &
return
œœ 
result
œœ 
;
œœ 
}
–– 
finally
—— 
{
““ 
if
”” 
(
”” 
_context
”” 
==
”” 
null
””  $
)
””$ %
{
‘‘ 
_context
’’ 
.
’’ 
Dispose
’’ $
(
’’$ %
)
’’% &
;
’’& '
}
÷÷ 
}
◊◊ 
}
ÿÿ 	
public
‰‰ 
virtual
‰‰ 
async
‰‰ 
Task
‰‰ !
<
‰‰! " 
RepositoryResponse
‰‰" 4
<
‰‰4 5
bool
‰‰5 9
>
‰‰9 :
>
‰‰: ;!
CloneSubModelsAsync
‰‰< O
(
‰‰O P
TView
‰‰P U
parent
‰‰V \
,
‰‰\ ]
List
‰‰^ b
<
‰‰b c
SupportedCulture
‰‰c s
>
‰‰s t
cloneCultures‰‰u Ç
,‰‰Ç É

TDbContext‰‰Ñ é
_context‰‰è ó
=‰‰ò ô
null‰‰ö û
,‰‰û ü%
IDbContextTransaction‰‰† µ
_transaction‰‰∂ ¬
=‰‰√ ƒ
null‰‰≈ …
)‰‰…  
{
ÊÊ 	
var
ÁÁ 

taskSource
ÁÁ 
=
ÁÁ 
new
ÁÁ  "
TaskCompletionSource
ÁÁ! 5
<
ÁÁ5 6 
RepositoryResponse
ÁÁ6 H
<
ÁÁH I
bool
ÁÁI M
>
ÁÁM N
>
ÁÁN O
(
ÁÁO P
)
ÁÁP Q
;
ÁÁQ R

taskSource
ËË 
.
ËË 
	SetResult
ËË  
(
ËË  !
new
ËË! $ 
RepositoryResponse
ËË% 7
<
ËË7 8
bool
ËË8 <
>
ËË< =
(
ËË= >
)
ËË> ?
{
ËË@ A
	IsSucceed
ËËB K
=
ËËL M
true
ËËN R
,
ËËR S
Data
ËËT X
=
ËËY Z
true
ËË[ _
}
ËË` a
)
ËËa b
;
ËËb c
return
ÈÈ 

taskSource
ÈÈ 
.
ÈÈ 
Task
ÈÈ "
.
ÈÈ" #
Result
ÈÈ# )
;
ÈÈ) *
}
ÍÍ 	
public
ÛÛ 
virtual
ÛÛ 
async
ÛÛ 
Task
ÛÛ !
<
ÛÛ! " 
RepositoryResponse
ÛÛ" 4
<
ÛÛ4 5
bool
ÛÛ5 9
>
ÛÛ9 :
>
ÛÛ: ;
RemoveModelAsync
ÛÛ< L
(
ÛÛL M
bool
ÛÛM Q#
isRemoveRelatedModels
ÛÛR g
=
ÛÛh i
false
ÛÛj o
,
ÛÛo p

TDbContext
ÛÛq {
_contextÛÛ| Ñ
=ÛÛÖ Ü
nullÛÛá ã
,ÛÛã å%
IDbContextTransactionÛÛç ¢
_transactionÛÛ£ Ø
=ÛÛ∞ ±
nullÛÛ≤ ∂
)ÛÛ∂ ∑
{
ÙÙ 	
var
ıı 
context
ıı 
=
ıı 
_context
ıı "
??
ıı# %
InitContext
ıı& 1
(
ıı1 2
)
ıı2 3
;
ıı3 4
var
ˆˆ 
transaction
ˆˆ 
=
ˆˆ 
_transaction
ˆˆ *
??
ˆˆ+ -
context
ˆˆ. 5
.
ˆˆ5 6
Database
ˆˆ6 >
.
ˆˆ> ?
BeginTransaction
ˆˆ? O
(
ˆˆO P
)
ˆˆP Q
;
ˆˆQ R 
RepositoryResponse
˜˜ 
<
˜˜ 
bool
˜˜ #
>
˜˜# $
result
˜˜% +
=
˜˜, -
new
˜˜. 1 
RepositoryResponse
˜˜2 D
<
˜˜D E
bool
˜˜E I
>
˜˜I J
(
˜˜J K
)
˜˜K L
{
˜˜M N
	IsSucceed
˜˜O X
=
˜˜Y Z
true
˜˜[ _
}
˜˜` a
;
˜˜a b
try
¯¯ 
{
˘˘ 

ParseModel
˙˙ 
(
˙˙ 
_context
˙˙ #
,
˙˙# $
_transaction
˙˙% 1
)
˙˙1 2
;
˙˙2 3
if
˚˚ 
(
˚˚ #
isRemoveRelatedModels
˚˚ )
)
˚˚) *
{
¸¸ 
var
˝˝ !
removeRelatedResult
˝˝ +
=
˝˝, -
await
˝˝. 3&
RemoveRelatedModelsAsync
˝˝4 L
(
˝˝L M
(
˝˝M N
TView
˝˝N S
)
˝˝S T
this
˝˝T X
,
˝˝X Y
context
˝˝Z a
,
˝˝a b
transaction
˝˝c n
)
˝˝n o
.
˝˝o p
ConfigureAwait
˝˝p ~
(
˝˝~ 
false˝˝ Ñ
)˝˝Ñ Ö
;˝˝Ö Ü
if
˛˛ 
(
˛˛ !
removeRelatedResult
˛˛ +
.
˛˛+ ,
	IsSucceed
˛˛, 5
)
˛˛5 6
{
ˇˇ 
result
ÄÄ 
=
ÄÄ  
await
ÄÄ! &

Repository
ÄÄ' 1
.
ÄÄ1 2
RemoveModelAsync
ÄÄ2 B
(
ÄÄB C
Model
ÄÄC H
,
ÄÄH I
context
ÄÄJ Q
,
ÄÄQ R
transaction
ÄÄS ^
)
ÄÄ^ _
.
ÄÄ_ `
ConfigureAwait
ÄÄ` n
(
ÄÄn o
false
ÄÄo t
)
ÄÄt u
;
ÄÄu v
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
result
ÑÑ 
.
ÑÑ 
	IsSucceed
ÑÑ (
=
ÑÑ) *
result
ÑÑ+ 1
.
ÑÑ1 2
	IsSucceed
ÑÑ2 ;
&&
ÑÑ< >!
removeRelatedResult
ÑÑ? R
.
ÑÑR S
	IsSucceed
ÑÑS \
;
ÑÑ\ ]
result
ÖÖ 
.
ÖÖ 
Errors
ÖÖ %
.
ÖÖ% &
AddRange
ÖÖ& .
(
ÖÖ. /!
removeRelatedResult
ÖÖ/ B
.
ÖÖB C
Errors
ÖÖC I
)
ÖÖI J
;
ÖÖJ K
result
ÜÜ 
.
ÜÜ 
	Exception
ÜÜ (
=
ÜÜ) *!
removeRelatedResult
ÜÜ+ >
.
ÜÜ> ?
	Exception
ÜÜ? H
;
ÜÜH I
}
áá 
}
àà 
else
ââ 
{
ää 
result
ãã 
=
ãã 
await
ãã "

Repository
ãã# -
.
ãã- .
RemoveModelAsync
ãã. >
(
ãã> ?
Model
ãã? D
,
ããD E
context
ããF M
,
ããM N
transaction
ããO Z
)
ããZ [
.
ãã[ \
ConfigureAwait
ãã\ j
(
ããj k
false
ããk p
)
ããp q
;
ããq r
}
åå 
if
çç 
(
çç 
result
çç 
.
çç 
	IsSucceed
çç $
)
çç$ %
{
éé 
if
èè 
(
èè 
_transaction
èè $
==
èè% '
null
èè( ,
)
èè, -
{
êê 
transaction
ëë #
.
ëë# $
Commit
ëë$ *
(
ëë* +
)
ëë+ ,
;
ëë, -
}
íí 
return
îî 
result
îî !
;
îî! "
}
ïï 
else
ññ 
{
óó 
if
òò 
(
òò 
_transaction
òò $
==
òò% '
null
òò( ,
)
òò, -
{
ôô 
transaction
öö #
.
öö# $
Rollback
öö$ ,
(
öö, -
)
öö- .
;
öö. /
}
õõ 
result
úú 
.
úú 
	IsSucceed
úú $
=
úú% &
false
úú' ,
;
úú, -
return
ùù 
result
ùù !
;
ùù! "
}
ûû 
}
üü 
catch
†† 
(
†† 
	Exception
†† 
ex
†† 
)
††  
{
°° 
if
¢¢ 
(
¢¢ 
_transaction
¢¢  
==
¢¢! #
null
¢¢$ (
)
¢¢( )
{
££ 
transaction
•• 
.
••  
Rollback
••  (
(
••( )
)
••) *
;
••* +
}
¶¶ 
result
ßß 
.
ßß 
	IsSucceed
ßß  
=
ßß! "
false
ßß# (
;
ßß( )
result
®® 
.
®® 
	Exception
®®  
=
®®! "
ex
®®# %
;
®®% &
return
©© 
result
©© 
;
©© 
}
™™ 
finally
´´ 
{
¨¨ 
if
≠≠ 
(
≠≠ 
_context
≠≠ 
==
≠≠ 
null
≠≠  $
)
≠≠$ %
{
ÆÆ 
context
∞∞ 
.
∞∞ 
Dispose
∞∞ #
(
∞∞# $
)
∞∞$ %
;
∞∞% &
}
±± 
}
≤≤ 
}
≥≥ 	
public
ææ 
virtual
ææ 
async
ææ 
Task
ææ !
<
ææ! " 
RepositoryResponse
ææ" 4
<
ææ4 5
bool
ææ5 9
>
ææ9 :
>
ææ: ;&
RemoveRelatedModelsAsync
ææ< T
(
ææT U
TView
ææU Z
view
ææ[ _
,
ææ_ `

TDbContext
ææa k
_context
ææl t
=
ææu v
null
ææw {
,
ææ{ |$
IDbContextTransactionææ} í
_transactionææì ü
=ææ† °
nullææ¢ ¶
)ææ¶ ß
{
¿¿ 	
var
¡¡ 

taskSource
¡¡ 
=
¡¡ 
new
¡¡  "
TaskCompletionSource
¡¡! 5
<
¡¡5 6 
RepositoryResponse
¡¡6 H
<
¡¡H I
bool
¡¡I M
>
¡¡M N
>
¡¡N O
(
¡¡O P
)
¡¡P Q
;
¡¡Q R

taskSource
¬¬ 
.
¬¬ 
	SetResult
¬¬  
(
¬¬  !
new
¬¬! $ 
RepositoryResponse
¬¬% 7
<
¬¬7 8
bool
¬¬8 <
>
¬¬< =
(
¬¬= >
)
¬¬> ?
{
¬¬@ A
	IsSucceed
¬¬B K
=
¬¬L M
true
¬¬N R
}
¬¬S T
)
¬¬T U
;
¬¬U V
return
√√ 

taskSource
√√ 
.
√√ 
Task
√√ "
.
√√" #
Result
√√# )
;
√√) *
}
ƒƒ 	
public
ÕÕ 
virtual
ÕÕ 
async
ÕÕ 
Task
ÕÕ !
<
ÕÕ! " 
RepositoryResponse
ÕÕ" 4
<
ÕÕ4 5
TView
ÕÕ5 :
>
ÕÕ: ;
>
ÕÕ; <
SaveModelAsync
ÕÕ= K
(
ÕÕK L
bool
ÕÕL P
isSaveSubModels
ÕÕQ `
=
ÕÕa b
false
ÕÕc h
,
ÕÕh i

TDbContext
ÕÕj t
_context
ÕÕu }
=
ÕÕ~ 
nullÕÕÄ Ñ
,ÕÕÑ Ö%
IDbContextTransactionÕÕÜ õ
_transactionÕÕú ®
=ÕÕ© ™
nullÕÕ´ Ø
)ÕÕØ ∞
{
ŒŒ 	
bool
œœ 
IsRoot
œœ 
=
œœ 
_context
œœ "
==
œœ# %
null
œœ& *
;
œœ* +
var
–– 
context
–– 
=
–– 
_context
–– "
??
––# %
InitContext
––& 1
(
––1 2
)
––2 3
;
––3 4
var
—— 
transaction
—— 
=
—— 
_transaction
—— *
??
——+ -
context
——. 5
.
——5 6
Database
——6 >
.
——> ?
BeginTransaction
——? O
(
——O P
)
——P Q
;
——Q R 
RepositoryResponse
““ 
<
““ 
TView
““ $
>
““$ %
result
““& ,
=
““- .
new
““/ 2 
RepositoryResponse
““3 E
<
““E F
TView
““F K
>
““K L
(
““L M
)
““M N
{
““O P
	IsSucceed
““Q Z
=
““[ \
true
““] a
}
““b c
;
““c d
Validate
”” 
(
”” 
)
”” 
;
”” 
if
‘‘ 
(
‘‘ 
IsValid
‘‘ 
)
‘‘ 
{
’’ 
try
÷÷ 
{
◊◊ 

ParseModel
ÿÿ 
(
ÿÿ 
_context
ÿÿ '
,
ÿÿ' (
_transaction
ÿÿ) 5
)
ÿÿ5 6
;
ÿÿ6 7
result
ŸŸ 
=
ŸŸ 
await
ŸŸ "

Repository
ŸŸ# -
.
ŸŸ- .
SaveModelAsync
ŸŸ. <
(
ŸŸ< =
(
ŸŸ= >
TView
ŸŸ> C
)
ŸŸC D
this
ŸŸD H
,
ŸŸH I
_context
ŸŸJ R
:
ŸŸR S
context
ŸŸT [
,
ŸŸ[ \
_transaction
ŸŸ] i
:
ŸŸi j
transaction
ŸŸk v
)
ŸŸv w
.
ŸŸw x
ConfigureAwaitŸŸx Ü
(ŸŸÜ á
falseŸŸá å
)ŸŸå ç
;ŸŸç é
if
‹‹ 
(
‹‹ 
result
‹‹ 
.
‹‹ 
	IsSucceed
‹‹ (
&&
‹‹) +
isSaveSubModels
‹‹, ;
)
‹‹; <
{
›› 
var
ﬁﬁ 

saveResult
ﬁﬁ &
=
ﬁﬁ' (
await
ﬁﬁ) . 
SaveSubModelsAsync
ﬁﬁ/ A
(
ﬁﬁA B
Model
ﬁﬁB G
,
ﬁﬁG H
context
ﬁﬁI P
,
ﬁﬁP Q
transaction
ﬁﬁR ]
)
ﬁﬁ] ^
.
ﬁﬁ^ _
ConfigureAwait
ﬁﬁ_ m
(
ﬁﬁm n
false
ﬁﬁn s
)
ﬁﬁs t
;
ﬁﬁt u
if
ﬂﬂ 
(
ﬂﬂ 
!
ﬂﬂ 

saveResult
ﬂﬂ '
.
ﬂﬂ' (
	IsSucceed
ﬂﬂ( 1
)
ﬂﬂ1 2
{
‡‡ 
result
·· "
.
··" #
Errors
··# )
.
··) *
AddRange
··* 2
(
··2 3

saveResult
··3 =
.
··= >
Errors
··> D
)
··D E
;
··E F
result
‚‚ "
.
‚‚" #
	Exception
‚‚# ,
=
‚‚- .

saveResult
‚‚/ 9
.
‚‚9 :
	Exception
‚‚: C
;
‚‚C D
}
„„ 
result
‰‰ 
.
‰‰ 
	IsSucceed
‰‰ (
=
‰‰) *
result
‰‰+ 1
.
‰‰1 2
	IsSucceed
‰‰2 ;
&&
‰‰< >

saveResult
‰‰? I
.
‰‰I J
	IsSucceed
‰‰J S
;
‰‰S T
}
ÂÂ 
if
ËË 
(
ËË 
result
ËË 
.
ËË 
	IsSucceed
ËË (
&&
ËË) +
IsClone
ËË, 3
&&
ËË4 6
IsRoot
ËË7 =
)
ËË= >
{
ÈÈ 
var
ÍÍ 
cloneCultures
ÍÍ )
=
ÍÍ* +"
ListSupportedCulture
ÍÍ, @
.
ÍÍ@ A
Where
ÍÍA F
(
ÍÍF G
c
ÍÍG H
=>
ÍÍI K
c
ÍÍL M
.
ÍÍM N
Specificulture
ÍÍN \
!=
ÍÍ] _
Specificulture
ÍÍ` n
&&
ÍÍo q
c
ÍÍr s
.
ÍÍs t
IsSupported
ÍÍt 
)ÍÍ Ä
.ÍÍÄ Å
ToListÍÍÅ á
(ÍÍá à
)ÍÍà â
;ÍÍâ ä
var
ÎÎ 
cloneResult
ÎÎ '
=
ÎÎ( )
await
ÎÎ* /

CloneAsync
ÎÎ0 :
(
ÎÎ: ;
Model
ÎÎ; @
,
ÎÎ@ A
cloneCultures
ÎÎB O
,
ÎÎO P
_context
ÎÎQ Y
:
ÎÎY Z
context
ÎÎ[ b
,
ÎÎb c
_transaction
ÎÎd p
:
ÎÎp q
transaction
ÎÎr }
)
ÎÎ} ~
.
ÎÎ~ 
ConfigureAwaitÎÎ ç
(ÎÎç é
falseÎÎé ì
)ÎÎì î
;ÎÎî ï
if
ÏÏ 
(
ÏÏ 
!
ÏÏ 
cloneResult
ÏÏ (
.
ÏÏ( )
	IsSucceed
ÏÏ) 2
)
ÏÏ2 3
{
ÌÌ 
result
ÓÓ "
.
ÓÓ" #
Errors
ÓÓ# )
.
ÓÓ) *
AddRange
ÓÓ* 2
(
ÓÓ2 3
cloneResult
ÓÓ3 >
.
ÓÓ> ?
Errors
ÓÓ? E
)
ÓÓE F
;
ÓÓF G
result
ÔÔ "
.
ÔÔ" #
	Exception
ÔÔ# ,
=
ÔÔ- .
cloneResult
ÔÔ/ :
.
ÔÔ: ;
	Exception
ÔÔ; D
;
ÔÔD E
}
 
result
ÒÒ 
.
ÒÒ 
	IsSucceed
ÒÒ (
=
ÒÒ) *
result
ÒÒ+ 1
.
ÒÒ1 2
	IsSucceed
ÒÒ2 ;
&&
ÒÒ< >
cloneResult
ÒÒ? J
.
ÒÒJ K
	IsSucceed
ÒÒK T
;
ÒÒT U
}
ÚÚ 
if
ıı 
(
ıı 
result
ıı 
.
ıı 
	IsSucceed
ıı (
)
ıı( )
{
ˆˆ 
if
˜˜ 
(
˜˜ 
IsRoot
˜˜ "
)
˜˜" #
{
¯¯ 
transaction
˙˙ '
.
˙˙' (
Commit
˙˙( .
(
˙˙. /
)
˙˙/ 0
;
˙˙0 1
}
˚˚ 
result
¸¸ 
.
¸¸ 
Data
¸¸ #
=
¸¸$ %
this
¸¸& *
as
¸¸+ -
TView
¸¸. 3
;
¸¸3 4
return
˝˝ 
result
˝˝ %
;
˝˝% &
}
˛˛ 
else
ˇˇ 
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
IsRoot
ÅÅ "
)
ÅÅ" #
{
ÇÇ 
transaction
ÑÑ '
.
ÑÑ' (
Rollback
ÑÑ( 0
(
ÑÑ0 1
)
ÑÑ1 2
;
ÑÑ2 3
}
ÖÖ 
return
ÜÜ 
result
ÜÜ %
;
ÜÜ% &
}
áá 
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ  
ex
ââ! #
)
ââ# $
{
ää 

Repository
ãã 
.
ãã 
LogErrorMessage
ãã .
(
ãã. /
ex
ãã/ 1
)
ãã1 2
;
ãã2 3
if
åå 
(
åå 
IsRoot
åå 
)
åå 
{
çç 
transaction
èè #
.
èè# $
Rollback
èè$ ,
(
èè, -
)
èè- .
;
èè. /
}
êê 
result
ëë 
.
ëë 
	IsSucceed
ëë $
=
ëë% &
false
ëë' ,
;
ëë, -
result
íí 
.
íí 
	Exception
íí $
=
íí% &
ex
íí' )
;
íí) *
return
ìì 
result
ìì !
;
ìì! "
}
îî 
finally
ïï 
{
ññ 
if
óó 
(
óó 
IsRoot
óó 
)
óó 
{
òò 
context
öö 
.
öö  
Dispose
öö  '
(
öö' (
)
öö( )
;
öö) *
}
õõ 
}
úú 
}
ùù 
else
ûû 
{
üü 
return
†† 
new
††  
RepositoryResponse
†† -
<
††- .
TView
††. 3
>
††3 4
(
††4 5
)
††5 6
{
°° 
	IsSucceed
¢¢ 
=
¢¢ 
false
¢¢  %
,
¢¢% &
Data
££ 
=
££ 
null
££ 
,
££  
Errors
§§ 
=
§§ 
Errors
§§ #
}
•• 
;
•• 
}
¶¶ 
}
ßß 	
public
≥≥ 
virtual
≥≥ 
async
≥≥ 
Task
≥≥ !
<
≥≥! " 
RepositoryResponse
≥≥" 4
<
≥≥4 5
bool
≥≥5 9
>
≥≥9 :
>
≥≥: ; 
SaveSubModelsAsync
≥≥< N
(
≥≥N O
TModel
≥≥O U
parent
≥≥V \
,
≥≥\ ]

TDbContext
≥≥^ h
_context
≥≥i q
=
≥≥r s
null
≥≥t x
,
≥≥x y$
IDbContextTransaction≥≥z è
_transaction≥≥ê ú
=≥≥ù û
null≥≥ü £
)≥≥£ §
{
µµ 	
var
∂∂ 

taskSource
∂∂ 
=
∂∂ 
new
∂∂  "
TaskCompletionSource
∂∂! 5
<
∂∂5 6 
RepositoryResponse
∂∂6 H
<
∂∂H I
bool
∂∂I M
>
∂∂M N
>
∂∂N O
(
∂∂O P
)
∂∂P Q
;
∂∂Q R

taskSource
∑∑ 
.
∑∑ 
	SetResult
∑∑  
(
∑∑  !
new
∑∑! $ 
RepositoryResponse
∑∑% 7
<
∑∑7 8
bool
∑∑8 <
>
∑∑< =
(
∑∑= >
)
∑∑> ?
{
∑∑@ A
	IsSucceed
∑∑B K
=
∑∑L M
true
∑∑N R
}
∑∑S T
)
∑∑T U
;
∑∑U V
return
∏∏ 

taskSource
∏∏ 
.
∏∏ 
Task
∏∏ "
.
∏∏" #
Result
∏∏# )
;
∏∏) *
}
ππ 	
public
…… 
virtual
……  
RepositoryResponse
…… )
<
……) *
List
……* .
<
……. /
TView
……/ 4
>
……4 5
>
……5 6
Clone
……7 <
(
……< =
TModel
……= C
model
……D I
,
……I J
List
……K O
<
……O P
SupportedCulture
……P `
>
……` a
cloneCultures
……b o
,
……o p

TDbContext
……q {
_context……| Ñ
=……Ö Ü
null……á ã
,……ã å%
IDbContextTransaction……ç ¢
_transaction……£ Ø
=……∞ ±
null……≤ ∂
)……∂ ∑
{
   	
bool
ÀÀ 
IsRoot
ÀÀ 
=
ÀÀ 
_context
ÀÀ "
==
ÀÀ# %
null
ÀÀ& *
;
ÀÀ* +
var
ÃÃ 
context
ÃÃ 
=
ÃÃ 
_context
ÃÃ "
??
ÃÃ# %
InitContext
ÃÃ& 1
(
ÃÃ1 2
)
ÃÃ2 3
;
ÃÃ3 4
var
ÕÕ 
transaction
ÕÕ 
=
ÕÕ 
_transaction
ÕÕ *
??
ÕÕ+ -
context
ÕÕ. 5
.
ÕÕ5 6
Database
ÕÕ6 >
.
ÕÕ> ?
BeginTransaction
ÕÕ? O
(
ÕÕO P
)
ÕÕP Q
;
ÕÕQ R 
RepositoryResponse
œœ 
<
œœ 
List
œœ #
<
œœ# $
TView
œœ$ )
>
œœ) *
>
œœ* +
result
œœ, 2
=
œœ3 4
new
œœ5 8 
RepositoryResponse
œœ9 K
<
œœK L
List
œœL P
<
œœP Q
TView
œœQ V
>
œœV W
>
œœW X
(
œœX Y
)
œœY Z
{
–– 
	IsSucceed
—— 
=
—— 
true
——  
,
——  !
Data
““ 
=
““ 
new
““ 
List
““ 
<
““  
TView
““  %
>
““% &
(
““& '
)
““' (
}
”” 
;
”” 
try
’’ 
{
÷÷ 
if
◊◊ 
(
◊◊ 
cloneCultures
◊◊ !
!=
◊◊" $
null
◊◊% )
)
◊◊) *
{
ÿÿ 
foreach
ŸŸ 
(
ŸŸ 
var
ŸŸ  
culture
ŸŸ! (
in
ŸŸ) +
cloneCultures
ŸŸ, 9
)
ŸŸ9 :
{
⁄⁄ 
string
€€ 
desSpecificulture
€€ 0
=
€€1 2
culture
€€3 :
.
€€: ;
Specificulture
€€; I
;
€€I J
TView
›› 
view
›› "
=
››# $
InitView
››% -
(
››- .
)
››. /
;
››/ 0
view
ﬁﬁ 
.
ﬁﬁ 
Model
ﬁﬁ "
=
ﬁﬁ# $
model
ﬁﬁ% *
;
ﬁﬁ* +
view
ﬂﬂ 
.
ﬂﬂ 
	ParseView
ﬂﬂ &
(
ﬂﬂ& '
isExpand
ﬂﬂ' /
:
ﬂﬂ/ 0
false
ﬂﬂ1 6
,
ﬂﬂ6 7
_context
ﬂﬂ8 @
:
ﬂﬂ@ A
context
ﬂﬂB I
,
ﬂﬂI J
_transaction
ﬂﬂK W
:
ﬂﬂW X
transaction
ﬂﬂY d
)
ﬂﬂd e
;
ﬂﬂe f
view
‡‡ 
.
‡‡ 
Specificulture
‡‡ +
=
‡‡, -
desSpecificulture
‡‡. ?
;
‡‡? @
bool
‚‚ 
isExist
‚‚ $
=
‚‚% &

Repository
‚‚' 1
.
‚‚1 2
CheckIsExists
‚‚2 ?
(
‚‚? @
view
‚‚@ D
.
‚‚D E

ParseModel
‚‚E O
(
‚‚O P
_context
‚‚P X
,
‚‚X Y
_transaction
‚‚Z f
)
‚‚f g
,
‚‚g h
_context
‚‚i q
:
‚‚q r
context
‚‚s z
,
‚‚z {
_transaction‚‚| à
:‚‚à â
transaction‚‚ä ï
)‚‚ï ñ
;‚‚ñ ó
if
‰‰ 
(
‰‰ 
isExist
‰‰ #
)
‰‰# $
{
ÂÂ 
result
ÊÊ "
.
ÊÊ" #
	IsSucceed
ÊÊ# ,
=
ÊÊ- .
true
ÊÊ/ 3
;
ÊÊ3 4
result
ÁÁ "
.
ÁÁ" #
Data
ÁÁ# '
.
ÁÁ' (
Add
ÁÁ( +
(
ÁÁ+ ,
view
ÁÁ, 0
)
ÁÁ0 1
;
ÁÁ1 2
}
ËË 
else
ÈÈ 
{
ÍÍ 
var
ÎÎ 
cloneResult
ÎÎ  +
=
ÎÎ, -
view
ÎÎ. 2
.
ÎÎ2 3
	SaveModel
ÎÎ3 <
(
ÎÎ< =
false
ÎÎ= B
,
ÎÎB C
context
ÎÎD K
,
ÎÎK L
transaction
ÎÎM X
)
ÎÎX Y
;
ÎÎY Z
if
ÏÏ 
(
ÏÏ  
cloneResult
ÏÏ  +
.
ÏÏ+ ,
	IsSucceed
ÏÏ, 5
)
ÏÏ5 6
{
ÌÌ 
var
ÓÓ  #
cloneSubResult
ÓÓ$ 2
=
ÓÓ3 4
CloneSubModels
ÓÓ5 C
(
ÓÓC D
cloneResult
ÓÓD O
.
ÓÓO P
Data
ÓÓP T
,
ÓÓT U
cloneCultures
ÓÓV c
,
ÓÓc d
context
ÓÓe l
,
ÓÓl m
transaction
ÓÓn y
)
ÓÓy z
;
ÓÓz {
if
ÔÔ  "
(
ÔÔ# $
!
ÔÔ$ %
cloneSubResult
ÔÔ% 3
.
ÔÔ3 4
	IsSucceed
ÔÔ4 =
)
ÔÔ= >
{
  !
cloneResult
ÒÒ$ /
.
ÒÒ/ 0
Errors
ÒÒ0 6
.
ÒÒ6 7
AddRange
ÒÒ7 ?
(
ÒÒ? @
cloneSubResult
ÒÒ@ N
.
ÒÒN O
Errors
ÒÒO U
)
ÒÒU V
;
ÒÒV W
cloneResult
ÚÚ$ /
.
ÚÚ/ 0
	Exception
ÚÚ0 9
=
ÚÚ: ;
cloneSubResult
ÚÚ< J
.
ÚÚJ K
	Exception
ÚÚK T
;
ÚÚT U
}
ÛÛ  !
result
ıı  &
.
ıı& '
	IsSucceed
ıı' 0
=
ıı1 2
result
ıı3 9
.
ıı9 :
	IsSucceed
ıı: C
&&
ııD F
cloneResult
ııG R
.
ııR S
	IsSucceed
ııS \
&&
ıı] _
cloneSubResult
ıı` n
.
ıın o
	IsSucceed
ııo x
;
ııx y
result
ˆˆ  &
.
ˆˆ& '
Data
ˆˆ' +
.
ˆˆ+ ,
Add
ˆˆ, /
(
ˆˆ/ 0
cloneResult
ˆˆ0 ;
.
ˆˆ; <
Data
ˆˆ< @
)
ˆˆ@ A
;
ˆˆA B
}
˜˜ 
else
¯¯  
{
˘˘ 
result
˙˙  &
.
˙˙& '
	IsSucceed
˙˙' 0
=
˙˙1 2
result
˙˙3 9
.
˙˙9 :
	IsSucceed
˙˙: C
&&
˙˙D F
cloneResult
˙˙G R
.
˙˙R S
	IsSucceed
˙˙S \
;
˙˙\ ]
result
˚˚  &
.
˚˚& '
Errors
˚˚' -
.
˚˚- .
AddRange
˚˚. 6
(
˚˚6 7
cloneResult
˚˚7 B
.
˚˚B C
Errors
˚˚C I
)
˚˚I J
;
˚˚J K
result
¸¸  &
.
¸¸& '
	Exception
¸¸' 0
=
¸¸1 2
cloneResult
¸¸3 >
.
¸¸> ?
	Exception
¸¸? H
;
¸¸H I
}
˝˝ 
}
˛˛ 
if
ÄÄ 
(
ÄÄ 
result
ÄÄ "
.
ÄÄ" #
	IsSucceed
ÄÄ# ,
)
ÄÄ, -
{
ÅÅ 
if
ÇÇ 
(
ÇÇ  
_transaction
ÇÇ  ,
==
ÇÇ- /
null
ÇÇ0 4
)
ÇÇ4 5
{
ÉÉ 
transaction
ÑÑ  +
.
ÑÑ+ ,
Commit
ÑÑ, 2
(
ÑÑ2 3
)
ÑÑ3 4
;
ÑÑ4 5
}
ÖÖ 
}
ÜÜ 
else
áá 
{
àà 
if
ââ 
(
ââ  
_transaction
ââ  ,
==
ââ- /
null
ââ0 4
)
ââ4 5
{
ää 
transaction
ãã  +
.
ãã+ ,
Rollback
ãã, 4
(
ãã4 5
)
ãã5 6
;
ãã6 7
}
åå 
}
çç 
}
éé 
return
èè 
result
èè !
;
èè! "
}
êê 
else
ëë 
{
íí 
return
ìì 
result
ìì !
;
ìì! "
}
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
result
òò 
.
òò 
	IsSucceed
òò  
=
òò! "
false
òò# (
;
òò( )
result
ôô 
.
ôô 
	Exception
ôô  
=
ôô! "
ex
ôô# %
;
ôô% &
return
öö 
result
öö 
;
öö 
}
õõ 
finally
úú 
{
ùù 
if
ûû 
(
ûû 
_context
ûû 
==
ûû 
null
ûû  $
)
ûû$ %
{
üü 
_context
†† 
.
†† 
Dispose
†† $
(
††$ %
)
††% &
;
††& '
}
°° 
}
¢¢ 
}
££ 	
public
≠≠ 
virtual
≠≠  
RepositoryResponse
≠≠ )
<
≠≠) *
bool
≠≠* .
>
≠≠. /
CloneSubModels
≠≠0 >
(
≠≠> ?
TView
≠≠? D
parent
≠≠E K
,
≠≠K L
List
≠≠M Q
<
≠≠Q R
SupportedCulture
≠≠R b
>
≠≠b c
cloneCultures
≠≠d q
,
≠≠q r

TDbContext
≠≠s }
_context≠≠~ Ü
=≠≠á à
null≠≠â ç
,≠≠ç é%
IDbContextTransaction≠≠è §
_transaction≠≠• ±
=≠≠≤ ≥
null≠≠¥ ∏
)≠≠∏ π
{
ÆÆ 	
return
ØØ 
new
ØØ  
RepositoryResponse
ØØ )
<
ØØ) *
bool
ØØ* .
>
ØØ. /
(
ØØ/ 0
)
ØØ0 1
{
ØØ2 3
	IsSucceed
ØØ4 =
=
ØØ> ?
true
ØØ@ D
}
ØØE F
;
ØØF G
}
∞∞ 	
public
ππ 
virtual
ππ  
RepositoryResponse
ππ )
<
ππ) *
bool
ππ* .
>
ππ. /
RemoveModel
ππ0 ;
(
ππ; <
bool
ππ< @#
isRemoveRelatedModels
ππA V
=
ππW X
false
ππY ^
,
ππ^ _

TDbContext
ππ` j
_context
ππk s
=
ππt u
null
ππv z
,
ππz {$
IDbContextTransactionππ| ë
_transactionππí û
=ππü †
nullππ° •
)ππ• ¶
{
∫∫ 	
var
ªª 
context
ªª 
=
ªª 
_context
ªª "
??
ªª# %
InitContext
ªª& 1
(
ªª1 2
)
ªª2 3
;
ªª3 4
var
ºº 
transaction
ºº 
=
ºº 
_transaction
ºº *
??
ºº+ -
context
ºº. 5
.
ºº5 6
Database
ºº6 >
.
ºº> ?
BeginTransaction
ºº? O
(
ººO P
)
ººP Q
;
ººQ R 
RepositoryResponse
ΩΩ 
<
ΩΩ 
bool
ΩΩ #
>
ΩΩ# $
result
ΩΩ% +
=
ΩΩ, -
new
ΩΩ. 1 
RepositoryResponse
ΩΩ2 D
<
ΩΩD E
bool
ΩΩE I
>
ΩΩI J
(
ΩΩJ K
)
ΩΩK L
{
ΩΩM N
	IsSucceed
ΩΩO X
=
ΩΩY Z
true
ΩΩ[ _
}
ΩΩ` a
;
ΩΩa b
try
ææ 
{
øø 

ParseModel
¿¿ 
(
¿¿ 
_context
¿¿ #
,
¿¿# $
_transaction
¿¿% 1
)
¿¿1 2
;
¿¿2 3
if
¡¡ 
(
¡¡ #
isRemoveRelatedModels
¡¡ )
)
¡¡) *
{
¬¬ 
var
√√ !
removeRelatedResult
√√ +
=
√√, -!
RemoveRelatedModels
√√. A
(
√√A B
(
√√B C
TView
√√C H
)
√√H I
this
√√I M
,
√√M N
context
√√O V
,
√√V W
transaction
√√X c
)
√√c d
;
√√d e
if
ƒƒ 
(
ƒƒ !
removeRelatedResult
ƒƒ +
.
ƒƒ+ ,
	IsSucceed
ƒƒ, 5
)
ƒƒ5 6
{
≈≈ 
result
∆∆ 
=
∆∆  

Repository
∆∆! +
.
∆∆+ ,
RemoveModel
∆∆, 7
(
∆∆7 8
Model
∆∆8 =
,
∆∆= >
context
∆∆? F
,
∆∆F G
transaction
∆∆H S
)
∆∆S T
;
∆∆T U
}
«« 
else
»» 
{
…… 
result
   
.
   
	IsSucceed
   (
=
  ) *
result
  + 1
.
  1 2
	IsSucceed
  2 ;
&&
  < >!
removeRelatedResult
  ? R
.
  R S
	IsSucceed
  S \
;
  \ ]
result
ÀÀ 
.
ÀÀ 
Errors
ÀÀ %
.
ÀÀ% &
AddRange
ÀÀ& .
(
ÀÀ. /!
removeRelatedResult
ÀÀ/ B
.
ÀÀB C
Errors
ÀÀC I
)
ÀÀI J
;
ÀÀJ K
result
ÃÃ 
.
ÃÃ 
	Exception
ÃÃ (
=
ÃÃ) *!
removeRelatedResult
ÃÃ+ >
.
ÃÃ> ?
	Exception
ÃÃ? H
;
ÃÃH I
}
ÕÕ 
}
ŒŒ 
else
œœ 
{
–– 
result
—— 
=
—— 

Repository
—— '
.
——' (
RemoveModel
——( 3
(
——3 4
Model
——4 9
,
——9 :
context
——; B
,
——B C
transaction
——D O
)
——O P
;
——P Q
}
““ 
if
‘‘ 
(
‘‘ 
result
‘‘ 
.
‘‘ 
	IsSucceed
‘‘ $
)
‘‘$ %
{
’’ 
if
÷÷ 
(
÷÷ 
_transaction
÷÷ $
==
÷÷% '
null
÷÷( ,
)
÷÷, -
{
◊◊ 
transaction
ÿÿ #
.
ÿÿ# $
Commit
ÿÿ$ *
(
ÿÿ* +
)
ÿÿ+ ,
;
ÿÿ, -
}
ŸŸ 
return
€€ 
result
€€ !
;
€€! "
}
‹‹ 
else
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
_transaction
ﬂﬂ $
==
ﬂﬂ% '
null
ﬂﬂ( ,
)
ﬂﬂ, -
{
‡‡ 
transaction
·· #
.
··# $
Rollback
··$ ,
(
··, -
)
··- .
;
··. /
}
‚‚ 
result
„„ 
.
„„ 
	IsSucceed
„„ $
=
„„% &
false
„„' ,
;
„„, -
return
‰‰ 
result
‰‰ !
;
‰‰! "
}
ÂÂ 
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ 
	Exception
ÁÁ 
ex
ÁÁ 
)
ÁÁ  
{
ËË 
if
ÈÈ 
(
ÈÈ 
_transaction
ÈÈ  
==
ÈÈ! #
null
ÈÈ$ (
)
ÈÈ( )
{
ÍÍ 
transaction
ÏÏ 
.
ÏÏ  
Rollback
ÏÏ  (
(
ÏÏ( )
)
ÏÏ) *
;
ÏÏ* +
}
ÌÌ 
result
ÓÓ 
.
ÓÓ 
	IsSucceed
ÓÓ  
=
ÓÓ! "
false
ÓÓ# (
;
ÓÓ( )
result
ÔÔ 
.
ÔÔ 
	Exception
ÔÔ  
=
ÔÔ! "
ex
ÔÔ# %
;
ÔÔ% &
return
 
result
 
;
 
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
_context
ÙÙ 
==
ÙÙ 
null
ÙÙ  $
)
ÙÙ$ %
{
ıı 
context
˜˜ 
.
˜˜ 
Dispose
˜˜ #
(
˜˜# $
)
˜˜$ %
;
˜˜% &
}
¯¯ 
}
˘˘ 
}
˙˙ 	
public
ÉÉ 
virtual
ÉÉ  
RepositoryResponse
ÉÉ )
<
ÉÉ) *
bool
ÉÉ* .
>
ÉÉ. /!
RemoveRelatedModels
ÉÉ0 C
(
ÉÉC D
TView
ÉÉD I
view
ÉÉJ N
,
ÉÉN O

TDbContext
ÉÉP Z
_context
ÉÉ[ c
=
ÉÉd e
null
ÉÉf j
,
ÉÉj k$
IDbContextTransactionÉÉl Å
_transactionÉÉÇ é
=ÉÉè ê
nullÉÉë ï
)ÉÉï ñ
{
ÑÑ 	
return
ÖÖ 
new
ÖÖ  
RepositoryResponse
ÖÖ )
<
ÖÖ) *
bool
ÖÖ* .
>
ÖÖ. /
(
ÖÖ/ 0
)
ÖÖ0 1
{
ÖÖ2 3
	IsSucceed
ÖÖ4 =
=
ÖÖ> ?
true
ÖÖ@ D
}
ÖÖE F
;
ÖÖF G
}
ÜÜ 	
public
èè 
virtual
èè  
RepositoryResponse
èè )
<
èè) *
TView
èè* /
>
èè/ 0
	SaveModel
èè1 :
(
èè: ;
bool
èè; ?
isSaveSubModels
èè@ O
=
èèP Q
false
èèR W
,
èèW X

TDbContext
èèY c
_context
èèd l
=
èèm n
null
èèo s
,
èès t$
IDbContextTransactionèèu ä
_transactionèèã ó
=èèò ô
nullèèö û
)èèû ü
{
êê 	
bool
ëë 
IsRoot
ëë 
=
ëë 
_context
ëë "
==
ëë# %
null
ëë& *
;
ëë* +
var
íí 
context
íí 
=
íí 
_context
íí "
??
íí# %
InitContext
íí& 1
(
íí1 2
)
íí2 3
;
íí3 4
var
ìì 
transaction
ìì 
=
ìì 
_transaction
ìì *
??
ìì+ -
context
ìì. 5
.
ìì5 6
Database
ìì6 >
.
ìì> ?
BeginTransaction
ìì? O
(
ììO P
)
ììP Q
;
ììQ R 
RepositoryResponse
îî 
<
îî 
TView
îî $
>
îî$ %
result
îî& ,
=
îî- .
new
îî/ 2 
RepositoryResponse
îî3 E
<
îîE F
TView
îîF K
>
îîK L
(
îîL M
)
îîM N
{
îîO P
	IsSucceed
îîQ Z
=
îî[ \
true
îî] a
}
îîb c
;
îîc d
Validate
ïï 
(
ïï 
)
ïï 
;
ïï 
if
ññ 
(
ññ 
IsValid
ññ 
)
ññ 
{
óó 
try
òò 
{
ôô 

ParseModel
öö 
(
öö 
_context
öö '
,
öö' (
_transaction
öö) 5
)
öö5 6
;
öö6 7
result
õõ 
=
õõ 

Repository
õõ '
.
õõ' (
	SaveModel
õõ( 1
(
õõ1 2
(
õõ2 3
TView
õõ3 8
)
õõ8 9
this
õõ9 =
,
õõ= >
_context
õõ? G
:
õõG H
context
õõI P
,
õõP Q
_transaction
õõR ^
:
õõ^ _
transaction
õõ` k
)
õõk l
;
õõl m
if
ûû 
(
ûû 
result
ûû 
.
ûû 
	IsSucceed
ûû (
&&
ûû) +
isSaveSubModels
ûû, ;
)
ûû; <
{
üü 
var
†† 

saveResult
†† &
=
††' (
SaveSubModels
††) 6
(
††6 7
Model
††7 <
,
††< =
context
††> E
,
††E F
transaction
††G R
)
††R S
;
††S T
if
°° 
(
°° 
!
°° 

saveResult
°° '
.
°°' (
	IsSucceed
°°( 1
)
°°1 2
{
¢¢ 
result
££ "
.
££" #
Errors
££# )
.
££) *
AddRange
££* 2
(
££2 3

saveResult
££3 =
.
££= >
Errors
££> D
)
££D E
;
££E F
result
§§ "
.
§§" #
	Exception
§§# ,
=
§§- .

saveResult
§§/ 9
.
§§9 :
	Exception
§§: C
;
§§C D
}
•• 
result
¶¶ 
.
¶¶ 
	IsSucceed
¶¶ (
=
¶¶) *
result
¶¶+ 1
.
¶¶1 2
	IsSucceed
¶¶2 ;
&&
¶¶< >

saveResult
¶¶? I
.
¶¶I J
	IsSucceed
¶¶J S
;
¶¶S T
}
ßß 
if
™™ 
(
™™ 
result
™™ 
.
™™ 
	IsSucceed
™™ (
&&
™™) +
IsClone
™™, 3
&&
™™4 6
IsRoot
™™7 =
)
™™= >
{
´´ 
var
¨¨ 
cloneCultures
¨¨ )
=
¨¨* +"
ListSupportedCulture
¨¨, @
.
¨¨@ A
Where
¨¨A F
(
¨¨F G
c
¨¨G H
=>
¨¨I K
c
¨¨L M
.
¨¨M N
Specificulture
¨¨N \
!=
¨¨] _
Specificulture
¨¨` n
&&
¨¨o q
c
¨¨r s
.
¨¨s t
IsSupported
¨¨t 
)¨¨ Ä
.¨¨Ä Å
ToList¨¨Å á
(¨¨á à
)¨¨à â
;¨¨â ä
var
≠≠ 
cloneResult
≠≠ '
=
≠≠( )
Clone
≠≠* /
(
≠≠/ 0
Model
≠≠0 5
,
≠≠5 6
cloneCultures
≠≠7 D
,
≠≠D E
_context
≠≠F N
:
≠≠N O
context
≠≠P W
,
≠≠W X
_transaction
≠≠Y e
:
≠≠e f
transaction
≠≠g r
)
≠≠r s
;
≠≠s t
if
ÆÆ 
(
ÆÆ 
!
ÆÆ 
cloneResult
ÆÆ (
.
ÆÆ( )
	IsSucceed
ÆÆ) 2
)
ÆÆ2 3
{
ØØ 
result
∞∞ "
.
∞∞" #
Errors
∞∞# )
.
∞∞) *
AddRange
∞∞* 2
(
∞∞2 3
cloneResult
∞∞3 >
.
∞∞> ?
Errors
∞∞? E
)
∞∞E F
;
∞∞F G
result
±± "
.
±±" #
	Exception
±±# ,
=
±±- .
cloneResult
±±/ :
.
±±: ;
	Exception
±±; D
;
±±D E
}
≤≤ 
result
≥≥ 
.
≥≥ 
	IsSucceed
≥≥ (
=
≥≥) *
result
≥≥+ 1
.
≥≥1 2
	IsSucceed
≥≥2 ;
&&
≥≥< >
cloneResult
≥≥? J
.
≥≥J K
	IsSucceed
≥≥K T
;
≥≥T U
}
¥¥ 
if
∑∑ 
(
∑∑ 
result
∑∑ 
.
∑∑ 
	IsSucceed
∑∑ (
)
∑∑( )
{
∏∏ 
if
ππ 
(
ππ 
IsRoot
ππ "
)
ππ" #
{
∫∫ 
transaction
ºº '
.
ºº' (
Commit
ºº( .
(
ºº. /
)
ºº/ 0
;
ºº0 1
}
ΩΩ 
result
ææ 
.
ææ 
Data
ææ #
=
ææ$ %
this
ææ& *
as
ææ+ -
TView
ææ. 3
;
ææ3 4
return
øø 
result
øø %
;
øø% &
}
¿¿ 
else
¡¡ 
{
¬¬ 
if
√√ 
(
√√ 
IsRoot
√√ "
)
√√" #
{
ƒƒ 
transaction
∆∆ '
.
∆∆' (
Rollback
∆∆( 0
(
∆∆0 1
)
∆∆1 2
;
∆∆2 3
}
«« 
return
»» 
result
»» %
;
»»% &
}
…… 
}
   
catch
ÀÀ 
(
ÀÀ 
	Exception
ÀÀ  
ex
ÀÀ! #
)
ÀÀ# $
{
ÃÃ 

Repository
ÕÕ 
.
ÕÕ 
LogErrorMessage
ÕÕ .
(
ÕÕ. /
ex
ÕÕ/ 1
)
ÕÕ1 2
;
ÕÕ2 3
if
ŒŒ 
(
ŒŒ 
IsRoot
ŒŒ 
)
ŒŒ 
{
œœ 
transaction
—— #
.
——# $
Rollback
——$ ,
(
——, -
)
——- .
;
——. /
}
““ 
result
”” 
.
”” 
	IsSucceed
”” $
=
””% &
false
””' ,
;
””, -
result
‘‘ 
.
‘‘ 
	Exception
‘‘ $
=
‘‘% &
ex
‘‘' )
;
‘‘) *
return
’’ 
result
’’ !
;
’’! "
}
÷÷ 
finally
◊◊ 
{
ÿÿ 
if
ŸŸ 
(
ŸŸ 
IsRoot
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
context
‹‹ 
.
‹‹  
Dispose
‹‹  '
(
‹‹' (
)
‹‹( )
;
‹‹) *
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 
else
‡‡ 
{
·· 
return
‚‚ 
new
‚‚  
RepositoryResponse
‚‚ -
<
‚‚- .
TView
‚‚. 3
>
‚‚3 4
(
‚‚4 5
)
‚‚5 6
{
„„ 
	IsSucceed
‰‰ 
=
‰‰ 
false
‰‰  %
,
‰‰% &
Data
ÂÂ 
=
ÂÂ 
null
ÂÂ 
,
ÂÂ  
Errors
ÊÊ 
=
ÊÊ 
Errors
ÊÊ #
}
ÁÁ 
;
ÁÁ 
}
ËË 
}
ÈÈ 	
public
ÚÚ 
virtual
ÚÚ  
RepositoryResponse
ÚÚ )
<
ÚÚ) *
bool
ÚÚ* .
>
ÚÚ. /
SaveSubModels
ÚÚ0 =
(
ÚÚ= >
TModel
ÚÚ> D
parent
ÚÚE K
,
ÚÚK L

TDbContext
ÚÚM W
_context
ÚÚX `
=
ÚÚa b
null
ÚÚc g
,
ÚÚg h#
IDbContextTransaction
ÚÚi ~
_transactionÚÚ ã
=ÚÚå ç
nullÚÚé í
)ÚÚí ì
{
ÛÛ 	
return
ÙÙ 
new
ÙÙ  
RepositoryResponse
ÙÙ )
<
ÙÙ) *
bool
ÙÙ* .
>
ÙÙ. /
(
ÙÙ/ 0
)
ÙÙ0 1
{
ÙÙ2 3
	IsSucceed
ÙÙ4 =
=
ÙÙ> ?
true
ÙÙ@ D
}
ÙÙE F
;
ÙÙF G
}
ıı 	
	protected
ÅÅ 
ViewModelBase
ÅÅ 
(
ÅÅ  
TModel
ÅÅ  &
model
ÅÅ' ,
,
ÅÅ, -

TDbContext
ÅÅ. 8
_context
ÅÅ9 A
=
ÅÅB C
null
ÅÅD H
,
ÅÅH I#
IDbContextTransaction
ÅÅJ _
_transaction
ÅÅ` l
=
ÅÅm n
null
ÅÅo s
)
ÅÅs t
{
ÇÇ 	
this
ÉÉ 
.
ÉÉ 
Model
ÉÉ 
=
ÉÉ 
model
ÉÉ 
;
ÉÉ 
	ParseView
ÑÑ 
(
ÑÑ 
_context
ÑÑ 
:
ÑÑ 
_context
ÑÑ  (
,
ÑÑ( )
_transaction
ÑÑ* 6
:
ÑÑ6 7
_transaction
ÑÑ8 D
)
ÑÑD E
;
ÑÑE F
}
ÖÖ 	
	protected
éé 
ViewModelBase
éé 
(
éé  
TModel
éé  &
model
éé' ,
,
éé, -
bool
éé. 2

isLazyLoad
éé3 =
,
éé= >

TDbContext
éé? I
_context
ééJ R
=
ééS T
null
ééU Y
,
ééY Z#
IDbContextTransaction
éé[ p
_transaction
ééq }
=
éé~ 
nullééÄ Ñ
)ééÑ Ö
{
èè 	
this
êê 
.
êê 
Model
êê 
=
êê 
model
êê 
;
êê 

IsLazyLoad
ëë 
=
ëë 

isLazyLoad
ëë #
;
ëë# $
	ParseView
íí 
(
íí 
isExpand
íí 
:
íí 

isLazyLoad
íí  *
,
íí* +
_context
íí, 4
:
íí4 5
_context
íí6 >
,
íí> ?
_transaction
íí@ L
:
ííL M
_transaction
ííN Z
)
ííZ [
;
íí[ \
}
ìì 	
	protected
òò 
ViewModelBase
òò 
(
òò  
)
òò  !
{
ôô 	
this
öö 
.
öö 
Model
öö 
=
öö 
	InitModel
öö "
(
öö" #
)
öö# $
;
öö$ %
	ParseView
õõ 
(
õõ 
)
õõ 
;
õõ 
}
úú 	
}
üü 
}†† ø"
RE:\_Workspace\Github\Swastika-Heart\src\Swastika\UI\Core\SignalR\BaseSignalRHub.cs
	namespace 	
Swastika
 
. 
UI 
. 
Core 
. 
SignalR "
{ 
public 

abstract 
class 
BaseSignalRHub (
:) *
Hub+ .
{ 
	protected 
static 
readonly !
List" &
<& '
SignalRClient' 4
>4 5
Users6 ;
=< =
new> A
ListB F
<F G
SignalRClientG T
>T U
(U V
)V W
;W X
public 
override 
Task 
OnConnectedAsync -
(- .
). /
{ 	!
UpdateGroupConnection !
(! "
)" #
;# $
return   
base   
.   
OnConnectedAsync   (
(  ( )
)  ) *
;  * +
}!! 	
public(( 
override(( 
Task(( 
OnDisconnectedAsync(( 0
(((0 1
	Exception((1 :
	exception((; D
)((D E
{)) 	
Users++ 
.++ 
	RemoveAll++ 
(++ 
u++ 
=>++  
u++! "
.++" #
ConnectionId++# /
==++0 2
Context++3 :
.++: ;
ConnectionId++; G
)++G H
;++H I
return,, 
base,, 
.,, 
OnDisconnectedAsync,, +
(,,+ ,
	exception,,, 5
),,5 6
;,,6 7
}-- 	
public22 
virtual22 
void22 !
UpdateGroupConnection22 1
(221 2
)222 3
{33 	
var44 
user44 
=44 
Users44 
.44 
Find44 !
(44! "
p44" #
=>44$ &
p44' (
.44( )
ConnectionId44) 5
==446 8
Context449 @
.44@ A
ConnectionId44A M
)44M N
;44N O
if55 
(55 
user55 
!=55 
null55 
)55 
{66 
}99 
}:: 	
public@@ 
virtual@@ 
void@@ )
UpdatePlayerConnectionIdAsync@@ 9
(@@9 :
string@@: @
playerId@@A I
)@@I J
{AA 	
varCC 
playerCC 
=CC 
UsersCC 
.CC 
FindCC #
(CC# $
pCC$ %
=>CC& (
pCC) *
.CC* +
UserIdCC+ 1
==CC2 4
playerIdCC5 =
)CC= >
;CC> ?
ifDD 
(DD 
playerDD 
!=DD 
nullDD 
&&DD !
playerDD" (
.DD( )
ConnectionIdDD) 5
!=DD6 8
ContextDD9 @
.DD@ A
ConnectionIdDDA M
)DDM N
{EE 
playerHH 
.HH 
ConnectionIdHH #
=HH$ %
ContextHH& -
.HH- .
ConnectionIdHH. :
;HH: ;
}JJ 
}KK 	
privateRR 
voidRR 

FailResultRR 
(RR  
dynamicRR  '
objDataRR( /
,RR/ 0
stringRR1 7
errorMsgRR8 @
)RR@ A
{SS 	
constTT 
stringTT 
responseKeyTT $
=TT% &
$strTT' /
;TT/ 0
constUU 
intUU 
statusUU 
=UU 
$numUU  
;UU  !
	ApiResultVV 
<VV 
dynamicVV 
>VV 
resultVV %
=VV& '
newVV( +
	ApiResultVV, 5
<VV5 6
dynamicVV6 =
>VV= >
(VV> ?
)VV? @
{WW 
ResponseKeyXX 
=XX 
responseKeyXX )
,XX) *
StatusYY 
=YY 
statusYY 
,YY  
DataZZ 
=ZZ 
objDataZZ 
,ZZ 
}\\ 
;\\ 
Clients]] 
.]] 
Client]] 
(]] 
Context]] "
.]]" #
ConnectionId]]# /
)]]/ 0
.]]0 1
InvokeAsync]]1 <
(]]< =
$str]]= M
,]]M N
result]]O U
)]]U V
;]]V W
}^^ 	
}__ 
}`` 