µê
MD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Helper\CommonHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{ 
public 

static 
class 
CommonHelper $
{ 
private 
static 
readonly 
char  $
[$ %
]% &
_base62chars' 3
=4 5
$str L
. 
ToCharArray 
( 
) 
; 
private"" 
static"" 
readonly"" 
Random""  &
_random""' .
=""/ 0
new""1 4
Random""5 ;
(""; <
)""< =
;""= >
public(( 
static(( 
RSAParameters(( #
GenerateKey(($ /
(((/ 0
)((0 1
{)) 	
using** 
(** 
var** 
key** 
=** 
new**  $
RSACryptoServiceProvider**! 9
(**9 :
$num**: >
)**> ?
)**? @
{++ 
return,, 
key,, 
.,, 
ExportParameters,, +
(,,+ ,
true,,, 0
),,0 1
;,,1 2
}-- 
}.. 	
public55 
static55 
string55 
	GetBase6255 &
(55& '
int55' *
length55+ 1
)551 2
{66 	
var77 
sb77 
=77 
new77 
StringBuilder77 &
(77& '
length77' -
)77- .
;77. /
for99 
(99 
int99 
i99 
=99 
$num99 
;99 
i99 
<99 
length99  &
;99& '
i99( )
++99) +
)99+ ,
sb:: 
.:: 
Append:: 
(:: 
_base62chars:: &
[::& '
_random::' .
.::. /
Next::/ 3
(::3 4
$num::4 6
)::6 7
]::7 8
)::8 9
;::9 :
return<< 
sb<< 
.<< 
ToString<< 
(<< 
)<<  
;<<  !
}== 	
publicDD 
staticDD 
stringDD 
GetFullPathDD (
(DD( )
stringDD) /
[DD/ 0
]DD0 1
subPathsDD2 :
)DD: ;
{EE 	
stringFF 
resultFF 
=FF 
stringFF "
.FF" #
EmptyFF# (
;FF( )
stringGG 
	strFormatGG 
=GG 
stringGG %
.GG% &
EmptyGG& +
;GG+ ,
forHH 
(HH 
intHH 
iHH 
=HH 
$numHH 
;HH 
iHH 
<HH 
subPathsHH  (
.HH( )
LengthHH) /
;HH/ 0
iHH1 2
++HH2 4
)HH4 5
{II 
	strFormatKK 
+=KK 
$strKK !
+KK" #
iKK$ %
+KK& '
$strKK( +
+KK, -
(KK. /
iKK/ 0
<KK1 2
subPathsKK3 ;
.KK; <
LengthKK< B
-KKC D
$numKKE F
?KKG H
$strKKI L
:KKM N
stringKKO U
.KKU V
EmptyKKV [
)KK[ \
;KK\ ]
}LL 
returnMM 
stringMM 
.MM 
FormatMM  
(MM  !
	strFormatMM! *
,MM* +
subPathsMM, 4
)MM4 5
.MM5 6
ReplaceMM6 =
(MM= >
$strMM> B
,MMB C
$strMMD G
)MMG H
;MMH I
}NN 	
publicUU 
staticUU 
stringUU 
GetRandomNameUU *
(UU* +
stringUU+ 1
filenameUU2 :
)UU: ;
{VV 	
stringWW 
extWW 
=WW 
filenameWW !
.WW! "
SplitWW" '
(WW' (
$charWW( +
)WW+ ,
[WW, -
$numWW- .
]WW. /
;WW/ 0
returnXX 
stringXX 
.XX 
FormatXX  
(XX  !
$strXX! *
,XX* +
GuidXX, 0
.XX0 1
NewGuidXX1 8
(XX8 9
)XX9 :
.XX: ;
ToStringXX; C
(XXC D
$strXXD G
)XXG H
,XXH I
extXXJ M
)XXM N
;XXN O
}YY 	
public`` 
static`` 
async`` 
System`` "
.``" #
	Threading``# ,
.``, -
Tasks``- 2
.``2 3
Task``3 7
<``7 8
string``8 >
>``> ?
GetWebResponseAsync``@ S
(``S T
string``T Z
url``[ ^
)``^ _
{aa 	
HttpWebRequestbb 

webRequestbb %
=bb& '
(bb( )
HttpWebRequestbb) 7
)bb7 8

WebRequestbb8 B
.bbB C
CreatebbC I
(bbI J
urlbbJ M
)bbM N
;bbN O
usingcc 
(cc 
WebResponsecc 
responsecc '
=cc( )
awaitcc* /

webRequestcc0 :
.cc: ;
GetResponseAsynccc; K
(ccK L
)ccL M
.ccM N
ConfigureAwaitccN \
(cc\ ]
falsecc] b
)ccb c
)ccc d
{dd 
usingee 
(ee 
Streamee 
	resStreamee '
=ee( )
responseee* 2
.ee2 3
GetResponseStreamee3 D
(eeD E
)eeE F
)eeF G
{ff 
StreamReadergg  
readergg! '
=gg( )
newgg* -
StreamReadergg. :
(gg: ;
	resStreamgg; D
,ggD E
EncodingggF N
.ggN O
UTF8ggO S
)ggS T
;ggT U
returnhh 
readerhh !
.hh! "
	ReadToEndhh" +
(hh+ ,
)hh, -
;hh- .
}ii 
}jj 
}kk 	
publicrr 
staticrr 
Streamrr 
	LoadImagerr &
(rr& '
stringrr' -

strImage64rr. 8
)rr8 9
{ss 	
tryvv 
{ww 
stringxx 
imgDataxx 
=xx  

strImage64xx! +
.xx+ ,
	Substringxx, 5
(xx5 6

strImage64xx6 @
.xx@ A
IndexOfxxA H
(xxH I
$charxxI L
)xxL M
+xxN O
$numxxP Q
)xxQ R
;xxR S
byteyy 
[yy 
]yy 

imageBytesyy !
=yy" #
Convertyy$ +
.yy+ ,
FromBase64Stringyy, <
(yy< =
imgDatayy= D
)yyD E
;yyE F
returnzz 
newzz 
MemoryStreamzz '
(zz' (

imageByteszz( 2
,zz2 3
$numzz4 5
,zz5 6

imageByteszz7 A
.zzA B
LengthzzB H
)zzH I
;zzI J
}{{ 
catch|| 
{}} 
return~~ 
null~~ 
;~~ 
} 
}
ÄÄ 	
public
áá 
static
áá 
string
áá #
ParseJsonPropertyName
áá 2
(
áá2 3
string
áá3 9
input
áá: ?
)
áá? @
{
àà 	
if
ââ 
(
ââ 
!
ââ 
string
ââ 
.
ââ 
IsNullOrEmpty
ââ %
(
ââ% &
input
ââ& +
)
ââ+ ,
)
ââ, -
{
ää 
return
ãã 
Char
ãã 
.
ãã 
ToLower
ãã #
(
ãã# $
input
ãã$ )
[
ãã) *
$num
ãã* +
]
ãã+ ,
)
ãã, -
+
ãã. /
input
ãã0 5
.
ãã5 6
	Substring
ãã6 ?
(
ãã? @
$num
ãã@ A
)
ããA B
;
ããB C
}
åå 
else
çç 
{
éé 
return
èè 
string
èè 
.
èè 
Empty
èè #
;
èè# $
}
êê 
}
ëë 	
public
òò 
static
òò 
string
òò 
ReadFromFile
òò )
(
òò) *
string
òò* 0
filename
òò1 9
)
òò9 :
{
ôô 	
string
öö 
s
öö 
=
öö 
$str
öö 
;
öö 
try
õõ 
{
úú 

FileStream
ùù 
file
ùù 
=
ùù  !
new
ùù" %

FileStream
ùù& 0
(
ùù0 1
filename
ùù1 9
,
ùù9 :
FileMode
ùù; C
.
ùùC D
Open
ùùD H
,
ùùH I

FileAccess
ùùJ T
.
ùùT U
Read
ùùU Y
)
ùùY Z
;
ùùZ [
StreamReader
ûû 
sr
ûû 
=
ûû  !
new
ûû" %
StreamReader
ûû& 2
(
ûû2 3
file
ûû3 7
)
ûû7 8
;
ûû8 9
s
üü 
=
üü 
sr
üü 
.
üü 
	ReadToEnd
üü  
(
üü  !
)
üü! "
;
üü" #
sr
†† 
.
†† 
Dispose
†† 
(
†† 
)
†† 
;
†† 
file
°° 
.
°° 
Dispose
°° 
(
°° 
)
°° 
;
°° 
}
¢¢ 
catch
££ 
{
§§ 
s
•• 
=
•• 
$str
•• 
;
•• 
}
¶¶ 
return
ßß 
s
ßß 
;
ßß 
}
®® 	
public
ØØ 
static
ØØ 
bool
ØØ 

RemoveFile
ØØ %
(
ØØ% &
string
ØØ& ,
filePath
ØØ- 5
)
ØØ5 6
{
∞∞ 	
bool
±± 
result
±± 
=
±± 
false
±± 
;
±±  
try
≤≤ 
{
≥≥ 
if
¥¥ 
(
¥¥ 
File
¥¥ 
.
¥¥ 
Exists
¥¥ 
(
¥¥  
filePath
¥¥  (
)
¥¥( )
)
¥¥) *
{
µµ 
File
∂∂ 
.
∂∂ 
Delete
∂∂ 
(
∂∂  
filePath
∂∂  (
)
∂∂( )
;
∂∂) *
result
∑∑ 
=
∑∑ 
true
∑∑ !
;
∑∑! "
}
∏∏ 
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
e
∫∫ 
)
∫∫ 
{
ªª 
throw
ºº 
;
ºº 
}
ΩΩ 
return
ææ 
result
ææ 
;
ææ 
}
øø 	
public
»» 
static
»» 
bool
»» 
SaveFileBase64
»» )
(
»») *
string
»»* 0
folder
»»1 7
,
»»7 8
string
»»9 ?
filename
»»@ H
,
»»H I
string
»»J P
	strBase64
»»Q Z
)
»»Z [
{
…… 	
try
ÃÃ 
{
ÕÕ 
string
ŒŒ 
fullPath
ŒŒ 
=
ŒŒ  !
GetFullPath
ŒŒ" -
(
ŒŒ- .
new
ŒŒ. 1
string
ŒŒ2 8
[
ŒŒ8 9
]
ŒŒ9 :
{
œœ 
folder
–– 
,
–– 
filename
—— 
}
““ 
)
““ 
;
““ 
string
”” 
fileData
”” 
=
””  !
	strBase64
””" +
.
””+ ,
	Substring
””, 5
(
””5 6
	strBase64
””6 ?
.
””? @
IndexOf
””@ G
(
””G H
$char
””H K
)
””K L
+
””M N
$num
””O P
)
””P Q
;
””Q R
byte
‘‘ 
[
‘‘ 
]
‘‘ 
bytes
‘‘ 
=
‘‘ 
Convert
‘‘ &
.
‘‘& '
FromBase64String
‘‘' 7
(
‘‘7 8
fileData
‘‘8 @
)
‘‘@ A
;
‘‘A B
if
÷÷ 
(
÷÷ 
!
÷÷ 
	Directory
÷÷ 
.
÷÷ 
Exists
÷÷ %
(
÷÷% &
folder
÷÷& ,
)
÷÷, -
)
÷÷- .
{
◊◊ 
	Directory
ÿÿ 
.
ÿÿ 
CreateDirectory
ÿÿ -
(
ÿÿ- .
folder
ÿÿ. 4
)
ÿÿ4 5
;
ÿÿ5 6
}
ŸŸ 
if
€€ 
(
€€ 
File
€€ 
.
€€ 
Exists
€€ 
(
€€  
fullPath
€€  (
)
€€( )
)
€€) *
{
‹‹ 
File
›› 
.
›› 
Delete
›› 
(
››  
fullPath
››  (
)
››( )
;
››) *
}
ﬁﬁ 

FileStream
‡‡ 
fs
‡‡ 
=
‡‡ 
new
‡‡  #

FileStream
‡‡$ .
(
‡‡. /
fullPath
‡‡/ 7
,
‡‡7 8
FileMode
‡‡9 A
.
‡‡A B
Create
‡‡B H
)
‡‡H I
;
‡‡I J
BinaryWriter
·· 
w
·· 
=
··  
new
··! $
BinaryWriter
··% 1
(
··1 2
fs
··2 4
)
··4 5
;
··5 6
try
‚‚ 
{
„„ 
w
‰‰ 
.
‰‰ 
Write
‰‰ 
(
‰‰ 
bytes
‰‰ !
)
‰‰! "
;
‰‰" #
}
ÂÂ 
finally
ÊÊ 
{
ÁÁ 
fs
ËË 
.
ËË 
Close
ËË 
(
ËË 
)
ËË 
;
ËË 
w
ÈÈ 
.
ÈÈ 
Close
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
return
ÎÎ 
true
ÎÎ 
;
ÎÎ 
}
ÏÏ 
catch
ÌÌ 
{
ÓÓ 
return
ÔÔ 
false
ÔÔ 
;
ÔÔ 
}
 
}
ÒÒ 	
public
˘˘ 
static
˘˘ 
async
˘˘ 
System
˘˘ "
.
˘˘" #
	Threading
˘˘# ,
.
˘˘, -
Tasks
˘˘- 2
.
˘˘2 3
Task
˘˘3 7
<
˘˘7 8
string
˘˘8 >
>
˘˘> ?
UploadFileAsync
˘˘@ O
(
˘˘O P
string
˘˘P V
fullPath
˘˘W _
,
˘˘_ `
	IFormFile
˘˘a j
file
˘˘k o
)
˘˘o p
{
˙˙ 	
try
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 
!
˝˝ 
	Directory
˝˝ 
.
˝˝ 
Exists
˝˝ %
(
˝˝% &
fullPath
˝˝& .
)
˝˝. /
)
˝˝/ 0
{
˛˛ 
	Directory
ˇˇ 
.
ˇˇ 
CreateDirectory
ˇˇ -
(
ˇˇ- .
fullPath
ˇˇ. 6
)
ˇˇ6 7
;
ˇˇ7 8
}
ÄÄ 
if
ÇÇ 
(
ÇÇ 
file
ÇÇ 
!=
ÇÇ 
null
ÇÇ  
)
ÇÇ  !
{
ÉÉ 
string
ÜÜ 
fileName
ÜÜ #
=
ÜÜ$ %
string
ÜÜ& ,
.
ÜÜ, -
Format
ÜÜ- 3
(
ÜÜ3 4
$str
ÜÜ4 =
,
ÜÜ= >
Guid
áá 
.
áá 
NewGuid
áá $
(
áá$ %
)
áá% &
.
áá& '
ToString
áá' /
(
áá/ 0
$str
áá0 3
)
áá3 4
,
áá4 5
file
àà 
.
àà 
FileName
àà %
.
àà% &
Split
àà& +
(
àà+ ,
$char
àà, /
)
àà/ 0
.
àà0 1
Last
àà1 5
(
àà5 6
)
àà6 7
)
àà7 8
;
àà8 9
using
ââ 
(
ââ 
var
ââ 

fileStream
ââ )
=
ââ* +
new
ââ, /

FileStream
ââ0 :
(
ââ: ;
Path
ââ; ?
.
ââ? @
Combine
ââ@ G
(
ââG H
fullPath
ââH P
,
ââP Q
fileName
ââR Z
)
ââZ [
,
ââ[ \
FileMode
ââ] e
.
ââe f
Create
ââf l
,
ââl m

FileAccess
âân x
.
ââx y
	ReadWriteâây Ç
)ââÇ É
)ââÉ Ñ
{
ää 
await
ãã 
file
ãã "
.
ãã" #
CopyToAsync
ãã# .
(
ãã. /

fileStream
ãã/ 9
)
ãã9 :
.
ãã: ;
ConfigureAwait
ãã; I
(
ããI J
false
ããJ O
)
ããO P
;
ããP Q
return
åå 
fileName
åå '
;
åå' (
}
çç 
}
éé 
else
èè 
{
êê 
return
ëë 
string
ëë !
.
ëë! "
Empty
ëë" '
;
ëë' (
}
íí 
}
ìì 
catch
îî 
{
ïï 
return
ññ 
string
ññ 
.
ññ 
Empty
ññ #
;
ññ# $
}
óó 
}
òò 	
public
üü 
static
üü 
void
üü 
WriteBytesToFile
üü +
(
üü+ ,
string
üü, 2
fullPath
üü3 ;
,
üü; <
string
üü= C
	strBase64
üüD M
)
üüM N
{
†† 	
string
°° 
fileData
°° 
=
°° 
	strBase64
°° '
.
°°' (
	Substring
°°( 1
(
°°1 2
	strBase64
°°2 ;
.
°°; <
IndexOf
°°< C
(
°°C D
$char
°°D G
)
°°G H
+
°°I J
$num
°°K L
)
°°L M
;
°°M N
byte
¢¢ 
[
¢¢ 
]
¢¢ 
bytes
¢¢ 
=
¢¢ 
Convert
¢¢ "
.
¢¢" #
FromBase64String
¢¢# 3
(
¢¢3 4
fileData
¢¢4 <
)
¢¢< =
;
¢¢= >
if
££ 
(
££ 
File
££ 
.
££ 
Exists
££ 
(
££ 
fullPath
££ $
)
££$ %
)
££% &
{
§§ 
File
•• 
.
•• 
Delete
•• 
(
•• 
fullPath
•• $
)
••$ %
;
••% &
}
¶¶ 

FileStream
®® 
fs
®® 
=
®® 
new
®® 

FileStream
®®  *
(
®®* +
fullPath
®®+ 3
,
®®3 4
FileMode
®®5 =
.
®®= >
Create
®®> D
)
®®D E
;
®®E F
BinaryWriter
©© 
w
©© 
=
©© 
new
©©  
BinaryWriter
©©! -
(
©©- .
fs
©©. 0
)
©©0 1
;
©©1 2
try
™™ 
{
´´ 
w
¨¨ 
.
¨¨ 
Write
¨¨ 
(
¨¨ 
bytes
¨¨ 
)
¨¨ 
;
¨¨ 
}
≠≠ 
finally
ÆÆ 
{
ØØ 
fs
∞∞ 
.
∞∞ 
Close
∞∞ 
(
∞∞ 
)
∞∞ 
;
∞∞ 
w
±± 
.
±± 
Close
±± 
(
±± 
)
±± 
;
±± 
}
≤≤ 
}
≥≥ 	
}
œœ 
}–– ˛

GD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Helper\Helper.cs
	namespace 	
Swastika
 
. 
UI 
. 
Base 
{ 
public 

static 
class 
	ApiHelper !
<! "
T" #
># $
{ 
public 
static 
	ApiResult 
<  
T  !
>! "
	GetResult# ,
(, -
int- 0
status1 7
,7 8
T9 :
data; ?
,? @
stringA G
responseKeyH S
,S T
ListU Y
<Y Z
stringZ `
>` a
errorsb h
)h i
{ 	
	ApiResult 
< 
T 
> 
result 
=  !
new" %
	ApiResult& /
</ 0
T0 1
>1 2
(2 3
)3 4
{ 
Status   
=   
status   
,    
ResponseKey!! 
=!! 
responseKey!! )
,!!) *
Data"" 
="" 
data"" 
,"" 
Errors## 
=## 
errors## 
,##  
}$$ 
;$$ 
return&& 
result&& 
;&& 
}'' 	
}(( 
})) ‰;
JD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Helper\SEOHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{ 
public 

static 
class 
	SeoHelper !
{ 
public 
static 
string "
DeleteSpecialCharaters 3
(3 4
string4 :
str; >
)> ?
{ 	
const 
string 
replaceChar $
=% &
$str' )
;) *
string 
[ 
] 
pattern 
= 
{  
$str! $
,$ %
$str& )
,) *
$str+ /
,/ 0
$str1 4
,4 5
$str6 9
,9 :
$str; >
}? @
;@ A
foreach 
( 
string 
item  
in! #
pattern$ +
)+ ,
{ 
str   
=   
str   
.   
Replace   !
(  ! "
item  " &
,  & '
replaceChar  ( 3
)  3 4
;  4 5
}!! 
return"" 
str"" 
;"" 
}## 	
public** 
static** 
string** 
GetSEOString** )
(**) *
string*** 0
s**1 2
)**2 3
{++ 	
return,, 
WhiteSpaceToHyphen,, %
(,,% &
ConvertToUnSign,,& 5
(,,5 6"
DeleteSpecialCharaters,,6 L
(,,L M
s,,M N
),,N O
),,O P
),,P Q
;,,Q R
}-- 	
public88 
static88 
string88 
ConvertToUnSign88 ,
(88, -
string88- 3
text884 8
)888 9
{99 	
if:: 
(:: 
text:: 
!=:: 
null:: 
):: 
{;; 
for<< 
(<< 
int<< 
i<< 
=<< 
$num<< 
;<<  
i<<! "
<<<# $
$num<<% '
;<<' (
i<<) *
++<<* ,
)<<, -
{== 
text>> 
=>> 
text>> 
.>>  
Replace>>  '
(>>' (
(>>( )
(>>) *
char>>* .
)>>. /
i>>/ 0
)>>0 1
.>>1 2
ToString>>2 :
(>>: ;
)>>; <
,>>< =
$str>>> @
)>>@ A
;>>A B
}?? 
forAA 
(AA 
intAA 
iAA 
=AA 
$numAA 
;AA  
iAA! "
<AA# $
$numAA% '
;AA' (
iAA) *
++AA* ,
)AA, -
{BB 
textCC 
=CC 
textCC 
.CC  
ReplaceCC  '
(CC' (
(CC( )
(CC) *
charCC* .
)CC. /
iCC/ 0
)CC0 1
.CC1 2
ToStringCC2 :
(CC: ;
)CC; <
,CC< =
$strCC> @
)CC@ A
;CCA B
}DD 
forFF 
(FF 
intFF 
iFF 
=FF 
$numFF 
;FF  
iFF! "
<FF# $
$numFF% '
;FF' (
iFF) *
++FF* ,
)FF, -
{GG 
textHH 
=HH 
textHH 
.HH  
ReplaceHH  '
(HH' (
(HH( )
(HH) *
charHH* .
)HH. /
iHH/ 0
)HH0 1
.HH1 2
ToStringHH2 :
(HH: ;
)HH; <
,HH< =
$strHH> @
)HH@ A
;HHA B
}II 
forKK 
(KK 
intKK 
iKK 
=KK 
$numKK  
;KK  !
iKK" #
<KK$ %
$numKK& )
;KK) *
iKK+ ,
++KK, .
)KK. /
{LL 
textMM 
=MM 
textMM 
.MM  
ReplaceMM  '
(MM' (
(MM( )
(MM) *
charMM* .
)MM. /
iMM/ 0
)MM0 1
.MM1 2
ToStringMM2 :
(MM: ;
)MM; <
,MM< =
$strMM> @
)MM@ A
;MMA B
}NN 
}OO 
elsePP 
{QQ 
textRR 
=RR 
$strRR 
;RR 
}SS 
SystemVV 
.VV 
TextVV 
.VV 
RegularExpressionsVV *
.VV* +
RegexVV+ 0
regexVV1 6
=VV7 8
newVV9 <
SystemVV= C
.VVC D
TextVVD H
.VVH I
RegularExpressionsVVI [
.VV[ \
RegexVV\ a
(VVa b
$str	VVb Ö
)
VVÖ Ü
;
VVÜ á
stringXX 
strFormDXX 
=XX 
textXX "
.XX" #
	NormalizeXX# ,
(XX, -
SystemXX- 3
.XX3 4
TextXX4 8
.XX8 9
NormalizationFormXX9 J
.XXJ K
FormDXXK P
)XXP Q
;XXQ R
returnZZ 
regexZZ 
.ZZ 
ReplaceZZ  
(ZZ  !
strFormDZZ! )
,ZZ) *
StringZZ+ 1
.ZZ1 2
EmptyZZ2 7
)ZZ7 8
.ZZ8 9
ReplaceZZ9 @
(ZZ@ A
$charZZA I
,ZZI J
$charZZK N
)ZZN O
.ZZO P
ReplaceZZP W
(ZZW X
$charZZX `
,ZZ` a
$charZZb e
)ZZe f
;ZZf g
}[[ 	
publicee 
staticee 
stringee 
WhiteSpaceToHyphenee /
(ee/ 0
stringee0 6
stree7 :
)ee: ;
{ff 	
chargg 
replaceChargg 
=gg 
$chargg "
;gg" #
stringhh 
patternhh 
=hh 
$strhh "
;hh" #
MatchCollectionii 
matchsii "
=ii# $
Regexii% *
.ii* +
Matchesii+ 2
(ii2 3
strii3 6
,ii6 7
patternii8 ?
,ii? @
RegexOptionsiiA M
.iiM N

IgnoreCaseiiN X
)iiX Y
;iiY Z
foreachjj 
(jj 
Matchjj 
mjj 
injj 
matchsjj  &
)jj& '
{kk 
strll 
=ll 
strll 
.ll 
Replacell !
(ll! "
mll" #
.ll# $
Valuell$ )
[ll) *
$numll* +
]ll+ ,
,ll, -
replaceCharll. 9
)ll9 :
;ll: ;
}mm 
replaceCharnn 
=nn 
$charnn 
;nn 
patternoo 
=oo 
$stroo 
;oo 
matchspp 
=pp 
Regexpp 
.pp 
Matchespp "
(pp" #
strpp# &
,pp& '
patternpp( /
,pp/ 0
RegexOptionspp1 =
.pp= >

IgnoreCasepp> H
)ppH I
;ppI J
foreachqq 
(qq 
Matchqq 
mqq 
inqq 
matchsqq  &
)qq& '
{rr 
strss 
=ss 
strss 
.ss 
Replacess !
(ss! "
mss" #
.ss# $
Valuess$ )
[ss) *
$numss* +
]ss+ ,
,ss, -
replaceCharss. 9
)ss9 :
;ss: ;
}tt 
returnuu 
struu 
.uu 
ToLoweruu 
(uu 
)uu  
;uu  !
}vv 	
}ww 
}xx ø
GD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Utility\Const.cs
	namespace		 	
Swastika		
 
.		 
Common		 
.		 
Utility		 !
{

 
public 

static 
class 
Const 
{ 
public 
const 
string $
CONST_DEFAULT_CONNECTION 4
=5 6
$str7 J
;J K
public 
const 
string !
CONST_CHAT_CONNECTION 1
=2 3
$str4 D
;D E
public 
const 
string !
CONST_FILE_APPSETTING 1
=2 3
$str4 F
;F G
public 
const 
string )
CONST_PATH_HOME_ACCESS_DENIED 9
=: ;
$str< Q
;Q R
public$$ 
const$$ 
string$$ !
CONST_PATH_HOME_ERROR$$ 1
=$$2 3
$str$$4 A
;$$A B
public)) 
const)) 
string)) !
CONST_SECTION_LOGGING)) 1
=))2 3
$str))4 =
;))= >
public.. 
const.. 
string.. 
CONST_ROUTE_DEFAULT.. /
=..0 1
$str..2 ;
;..; <
public33 
const33 
string33 
CONST_APPID33 '
=33( )
$str33* ;
;33; <
public88 
const88 
string88 
CONST_APPSECRET88 +
=88, -
$str88. ?
;88? @
public== 
const== 
string== 0
$CONST_DOMAIN_NOTIFICATION_KEY_COMMIT== @
===A B
$str==C K
;==K L
publicBB 
constBB 
stringBB 6
*CONST_DOMAIN_NOTIFICATION_KEY_COMMIT_VALUEBB F
=BBG H
$strBBI t
;BBt u
publicGG 
constGG 
stringGG %
CONST_DOMAIN_NOTIFICATIONGG 5
=GG6 7
$strGG8 L
;GGL M
publicLL 
constLL 
stringLL .
"CONST_DEFAULT_EXTENSIONS_FILE_PATHLL >
=LL? @
$strLLA [
;LL[ \
publicQQ 
constQQ 
stringQQ -
!CONST_DEFAULT_EXTENSION_FILE_NAMEQQ =
=QQ> ?
$strQQ@ Q
;QQQ R
}RR 
}SS ä
FD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Utility\Enum.cs
	namespace 	
Swastika
 
. 
Common 
. 
Utility !
{ 
public 

class 
Enums 
{ 
public		 
enum		 
SWStatus		 
{

 	
Deleted 
= 
$num 
, 
Preview 
= 
$num 
, 
	Published 
= 
$num 
, 
Draft 
= 
$num 
, 
Schedule 
= 
$num 
} 	
public 
enum 
ResponseKey 
{ 	
NotFound 
, 
OK 
, 

BadRequest 
} 	
} 
} ◊
SD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\SignalRModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

class 
SignalRClient 
{ 
public 
string 
UserId 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
NickName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public$$ 
string$$ 
ConnectionId$$ "
{$$# $
get$$% (
;$$( )
set$$* -
;$$- .
}$$/ 0
public,, 
DateTime,, 

JoinedDate,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
}-- 
}.. Ω
VD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\SupportedCulture.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public

 

class

 
SupportedCulture

 !
{ 
public 
int 
Id 
{ 
get 
; 
set  
;  !
}" #
public 
string 
Specificulture $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public"" 
string"" 
Lcid"" 
{"" 
get""  
;""  !
set""" %
;""% &
}""' (
public** 
string** 
Alias** 
{** 
get** !
;**! "
set**# &
;**& '
}**( )
public22 
string22 
FullName22 
{22  
get22! $
;22$ %
set22& )
;22) *
}22+ ,
public:: 
string:: 
Description:: !
{::" #
get::$ '
;::' (
set::) ,
;::, -
}::. /
publicBB 
stringBB 
IconBB 
{BB 
getBB  
;BB  !
setBB" %
;BB% &
}BB' (
publicJJ 
boolJJ 
IsSupportedJJ 
{JJ  !
getJJ" %
;JJ% &
setJJ' *
;JJ* +
}JJ, -
}KK 
}LL ˛
]D:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Repository\DefaultRepositories.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{		 
public 

class 
DefaultRepository "
<" #

TDbContext# -
,- .
TModel/ 5
,5 6
TView7 <
>< =
:> ?
Swastika 
. 
Domain 
. 
Data 
. 

Repository '
.' (
ViewRepositoryBase( :
<: ;

TDbContext; E
,E F
TModelG M
,M N
TViewO T
>T U
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
Swastika 
. 
Domain %
.% &
Data& *
.* +

ViewModels+ 5
.5 6
ViewModelBase6 C
<C D

TDbContextD N
,N O
TModelP V
,V W
TViewX ]
>] ^
{ 
private 
static 
volatile 
DefaultRepository  1
<1 2

TDbContext2 <
,< =
TModel> D
,D E
TViewF K
>K L
instanceM U
;U V
private 
static 
readonly 
object  &
syncRoot' /
=0 1
new2 5
Object6 <
(< =
)= >
;> ?
private$$ 
DefaultRepository$$ !
($$! "
)$$" #
{%% 	
}&& 	
public.. 
static.. 
DefaultRepository.. '
<..' (

TDbContext..( 2
,..2 3
TModel..4 :
,..: ;
TView..< A
>..A B
Instance..C K
{..L M
get// 
{// 
if00 
(00 
instance00 
==00 
null00  $
)00$ %
{11 
lock22 
(22 
syncRoot22 "
)22" #
{33 
if44 
(44 
instance44 $
==44% '
null44( ,
)44, -
instance55 $
=55% &
new55' *
DefaultRepository55+ <
<55< =

TDbContext55= G
,55G H
TModel55I O
,55O P
TView55Q V
>55V W
(55W X
)55X Y
;55Y Z
}66 
}77 
return99 
instance99 
;99  
}:: 
};; 	
}<< 
}== ›˘
\D:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Repository\ViewRepositoryBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{ 
public 

abstract 
class 
ViewRepositoryBase ,
<, -

TDbContext- 7
,7 8
TModel9 ?
,? @
TViewA F
>F G
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 

ViewModels  
.  !
ViewModelBase! .
<. /

TDbContext/ 9
,9 :
TModel; A
,A B
TViewC H
>H I
{ 
	protected!! 
ViewRepositoryBase!! $
(!!$ %
)!!% &
{"" 	
}$$ 	
public-- 
virtual-- 
bool-- 
CheckIsExists-- )
(--) *
TModel--* 0
entity--1 7
,--7 8

TDbContext--9 C
_context--D L
=--M N
null--O S
,--S T!
IDbContextTransaction--U j
_transaction--k w
=--x y
null--z ~
)--~ 
{.. 	
bool// 
isRoot// 
=// 
_context// "
==//# %
null//& *
;//* +

TDbContext00 
context00 
=00  
_context00! )
??00* ,
InitContext00- 8
(008 9
)009 :
;00: ;
var11 
transaction11 
=11 
_transaction11 *
??11+ -
context11. 5
.115 6
Database116 >
.11> ?
BeginTransaction11? O
(11O P
)11P Q
;11Q R
try22 
{33 
return55 
context55 
.55 
Set55 "
<55" #
TModel55# )
>55) *
(55* +
)55+ ,
.55, -
Any55- 0
(550 1
e551 2
=>553 5
e556 7
==558 :
entity55; A
)55A B
;55B C
}99 
catch:: 
(:: 
	Exception:: 
ex:: 
)::  
{;; 
LogErrorMessage<< 
(<<  
ex<<  "
)<<" #
;<<# $
if== 
(== 
isRoot== 
)== 
{>> 
transaction?? 
.??  
Rollback??  (
(??( )
)??) *
;??* +
}@@ 
returnAA 
falseAA 
;AA 
}BB 
finallyCC 
{DD 
ifEE 
(EE 
isRootEE 
)EE 
{FF 
transactionHH 
.HH  
DisposeHH  '
(HH' (
)HH( )
;HH) *
contextII 
.II 
DisposeII #
(II# $
)II$ %
;II% &
}JJ 
}KK 
}LL 	
publicUU 
boolUU 
CheckIsExistsUU !
(UU! "
SystemUU" (
.UU( )
FuncUU) -
<UU- .
TModelUU. 4
,UU4 5
boolUU6 :
>UU: ;
	predicateUU< E
,UUE F

TDbContextUUG Q
_contextUUR Z
=UU[ \
nullUU] a
,UUa b!
IDbContextTransactionUUc x
_transaction	UUy Ö
=
UUÜ á
null
UUà å
)
UUå ç
{VV 	
boolWW 
isRootWW 
=WW 
_contextWW "
==WW# %
nullWW& *
;WW* +

TDbContextXX 
contextXX 
=XX  
_contextXX! )
??XX* ,
InitContextXX- 8
(XX8 9
)XX9 :
;XX: ;
varYY 
transactionYY 
=YY 
_transactionYY *
??YY+ -
contextYY. 5
.YY5 6
DatabaseYY6 >
.YY> ?
BeginTransactionYY? O
(YYO P
)YYP Q
;YYQ R
tryZZ 
{[[ 
return]] 
context]] 
.]] 
Set]] "
<]]" #
TModel]]# )
>]]) *
(]]* +
)]]+ ,
.]], -
Any]]- 0
(]]0 1
	predicate]]1 :
)]]: ;
;]]; <
}aa 
catchbb 
(bb 
	Exceptionbb 
exbb 
)bb  
{cc 
LogErrorMessagedd 
(dd  
exdd  "
)dd" #
;dd# $
ifee 
(ee 
isRootee 
)ee 
{ff 
transactiongg 
.gg  
Rollbackgg  (
(gg( )
)gg) *
;gg* +
}hh 
returnii 
falseii 
;ii 
}jj 
finallykk 
{ll 
ifmm 
(mm 
isRootmm 
)mm 
{nn 
transactionpp 
.pp  
Disposepp  '
(pp' (
)pp( )
;pp) *
contextqq 
.qq 
Disposeqq #
(qq# $
)qq$ %
;qq% &
}rr 
}ss 
}tt 	
public}} 
virtual}} 
RepositoryResponse}} )
<}}) *
TView}}* /
>}}/ 0
CreateModel}}1 <
(}}< =
TView}}= B
view}}C G
,~~ 	

TDbContext~~
 
_context~~ 
=~~ 
null~~  $
,~~$ %!
IDbContextTransaction~~& ;
_transaction~~< H
=~~I J
null~~K O
)~~O P
{ 	
bool
ÄÄ 
isRoot
ÄÄ 
=
ÄÄ 
_context
ÄÄ "
==
ÄÄ# %
null
ÄÄ& *
;
ÄÄ* +

TDbContext
ÅÅ 
context
ÅÅ 
=
ÅÅ  
_context
ÅÅ! )
??
ÅÅ* ,
InitContext
ÅÅ- 8
(
ÅÅ8 9
)
ÅÅ9 :
;
ÅÅ: ;
var
ÇÇ 
transaction
ÇÇ 
=
ÇÇ 
_transaction
ÇÇ *
??
ÇÇ+ -
context
ÇÇ. 5
.
ÇÇ5 6
Database
ÇÇ6 >
.
ÇÇ> ?
BeginTransaction
ÇÇ? O
(
ÇÇO P
)
ÇÇP Q
;
ÇÇQ R 
RepositoryResponse
ÉÉ 
<
ÉÉ 
TView
ÉÉ $
>
ÉÉ$ %
result
ÉÉ& ,
=
ÉÉ- .
new
ÉÉ/ 2 
RepositoryResponse
ÉÉ3 E
<
ÉÉE F
TView
ÉÉF K
>
ÉÉK L
(
ÉÉL M
)
ÉÉM N
{
ÉÉO P
	IsSucceed
ÉÉQ Z
=
ÉÉ[ \
true
ÉÉ] a
}
ÉÉb c
;
ÉÉc d
try
ÑÑ 
{
ÖÖ 
context
ÜÜ 
.
ÜÜ 
Entry
ÜÜ 
(
ÜÜ 
view
ÜÜ "
.
ÜÜ" #
Model
ÜÜ# (
)
ÜÜ( )
.
ÜÜ) *
State
ÜÜ* /
=
ÜÜ0 1
EntityState
ÜÜ2 =
.
ÜÜ= >
Added
ÜÜ> C
;
ÜÜC D
context
áá 
.
áá 
SaveChanges
áá #
(
áá# $
)
áá$ %
;
áá% &
if
àà 
(
àà 
result
àà 
.
àà 
	IsSucceed
àà $
)
àà$ %
{
ââ 
result
ää 
.
ää 
Data
ää 
=
ää  !
view
ää" &
;
ää& '
if
ãã 
(
ãã 
isRoot
ãã 
)
ãã 
{
åå 
transaction
çç #
.
çç# $
Commit
çç$ *
(
çç* +
)
çç+ ,
;
çç, -
}
éé 
return
êê 
result
êê !
;
êê! "
}
ëë 
else
íí 
{
ìì 
if
îî 
(
îî 
isRoot
îî 
)
îî 
{
ïï 
transaction
ññ #
.
ññ# $
Rollback
ññ$ ,
(
ññ, -
)
ññ- .
;
ññ. /
}
óó 
return
ôô 
result
ôô !
;
ôô! "
}
öö 
}
õõ 
catch
úú 
(
úú 
	Exception
úú 
ex
úú 
)
úú  
{
ùù 
LogErrorMessage
ûû 
(
ûû  
ex
ûû  "
)
ûû" #
;
ûû# $
result
üü 
.
üü 
	IsSucceed
üü  
=
üü! "
false
üü# (
;
üü( )
result
†† 
.
†† 
	Exception
††  
=
††! "
ex
††# %
;
††% &
if
°° 
(
°° 
isRoot
°° 
)
°° 
{
¢¢ 
transaction
££ 
.
££  
Rollback
££  (
(
££( )
)
££) *
;
££* +
}
§§ 
return
•• 
result
•• 
;
•• 
}
¶¶ 
finally
ßß 
{
®® 
if
©© 
(
©© 
isRoot
©© 
)
©© 
{
™™ 
transaction
¨¨ 
.
¨¨  
Dispose
¨¨  '
(
¨¨' (
)
¨¨( )
;
¨¨) *
context
≠≠ 
.
≠≠ 
Dispose
≠≠ #
(
≠≠# $
)
≠≠$ %
;
≠≠% &
}
ÆÆ 
}
ØØ 
}
∞∞ 	
public
ππ 
virtual
ππ 
async
ππ 
Task
ππ !
<
ππ! " 
RepositoryResponse
ππ" 4
<
ππ4 5
TView
ππ5 :
>
ππ: ;
>
ππ; <
CreateModelAsync
ππ= M
(
ππM N
TView
ππN S
view
ππT X
,
∫∫ 	

TDbContext
∫∫
 
_context
∫∫ 
=
∫∫ 
null
∫∫  $
,
∫∫$ %#
IDbContextTransaction
∫∫& ;
_transaction
∫∫< H
=
∫∫I J
null
∫∫K O
)
∫∫O P
{
ªª 	
bool
ºº 
isRoot
ºº 
=
ºº 
_context
ºº "
==
ºº# %
null
ºº& *
;
ºº* +

TDbContext
ΩΩ 
context
ΩΩ 
=
ΩΩ  
_context
ΩΩ! )
??
ΩΩ* ,
InitContext
ΩΩ- 8
(
ΩΩ8 9
)
ΩΩ9 :
;
ΩΩ: ;
var
ææ 
transaction
ææ 
=
ææ 
_transaction
ææ *
??
ææ+ -
context
ææ. 5
.
ææ5 6
Database
ææ6 >
.
ææ> ?
BeginTransaction
ææ? O
(
ææO P
)
ææP Q
;
ææQ R 
RepositoryResponse
øø 
<
øø 
TView
øø $
>
øø$ %
result
øø& ,
=
øø- .
new
øø/ 2 
RepositoryResponse
øø3 E
<
øøE F
TView
øøF K
>
øøK L
(
øøL M
)
øøM N
{
øøO P
	IsSucceed
øøQ Z
=
øø[ \
true
øø] a
}
øøb c
;
øøc d
try
¿¿ 
{
¡¡ 
context
¬¬ 
.
¬¬ 
Entry
¬¬ 
(
¬¬ 
view
¬¬ "
.
¬¬" #
Model
¬¬# (
)
¬¬( )
.
¬¬) *
State
¬¬* /
=
¬¬0 1
EntityState
¬¬2 =
.
¬¬= >
Added
¬¬> C
;
¬¬C D
await
√√ 
context
√√ 
.
√√ 
SaveChangesAsync
√√ .
(
√√. /
)
√√/ 0
.
√√0 1
ConfigureAwait
√√1 ?
(
√√? @
false
√√@ E
)
√√E F
;
√√F G
if
ÕÕ 
(
ÕÕ 
result
ÕÕ 
.
ÕÕ 
	IsSucceed
ÕÕ $
)
ÕÕ$ %
{
ŒŒ 
result
–– 
.
–– 
Data
–– 
=
––  !
view
––" &
;
––& '
if
—— 
(
—— 
isRoot
—— 
)
—— 
{
““ 
transaction
‘‘ #
.
‘‘# $
Commit
‘‘$ *
(
‘‘* +
)
‘‘+ ,
;
‘‘, -
}
’’ 
return
◊◊ 
result
◊◊ !
;
◊◊! "
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
if
€€ 
(
€€ 
isRoot
€€ 
)
€€ 
{
‹‹ 
transaction
ﬁﬁ #
.
ﬁﬁ# $
Rollback
ﬁﬁ$ ,
(
ﬁﬁ, -
)
ﬁﬁ- .
;
ﬁﬁ. /
}
ﬂﬂ 
return
‡‡ 
result
‡‡ !
;
‡‡! "
}
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
LogErrorMessage
ÂÂ 
(
ÂÂ  
ex
ÂÂ  "
)
ÂÂ" #
;
ÂÂ# $
result
ÊÊ 
.
ÊÊ 
	IsSucceed
ÊÊ  
=
ÊÊ! "
false
ÊÊ# (
;
ÊÊ( )
result
ÁÁ 
.
ÁÁ 
	Exception
ÁÁ  
=
ÁÁ! "
ex
ÁÁ# %
;
ÁÁ% &
if
ËË 
(
ËË 
isRoot
ËË 
)
ËË 
{
ÈÈ 
transaction
ÎÎ 
.
ÎÎ  
Rollback
ÎÎ  (
(
ÎÎ( )
)
ÎÎ) *
;
ÎÎ* +
}
ÏÏ 
return
ÓÓ 
result
ÓÓ 
;
ÓÓ 
}
ÔÔ 
finally
 
{
ÒÒ 
if
ÚÚ 
(
ÚÚ 
isRoot
ÚÚ 
)
ÚÚ 
{
ÛÛ 
transaction
ıı 
.
ıı  
Dispose
ıı  '
(
ıı' (
)
ıı( )
;
ıı) *
context
ˆˆ 
.
ˆˆ 
Dispose
ˆˆ #
(
ˆˆ# $
)
ˆˆ$ %
;
ˆˆ% &
}
˜˜ 
}
¯¯ 
}
˘˘ 	
public
ÇÇ 
virtual
ÇÇ  
RepositoryResponse
ÇÇ )
<
ÇÇ) *
TView
ÇÇ* /
>
ÇÇ/ 0
	EditModel
ÇÇ1 :
(
ÇÇ: ;
TView
ÇÇ; @
view
ÇÇA E
,
ÉÉ 	

TDbContext
ÉÉ
 
_context
ÉÉ 
=
ÉÉ 
null
ÉÉ  $
,
ÉÉ$ %#
IDbContextTransaction
ÉÉ& ;
_transaction
ÉÉ< H
=
ÉÉI J
null
ÉÉK O
)
ÉÉO P
{
ÑÑ 	
bool
ÖÖ 
isRoot
ÖÖ 
=
ÖÖ 
_context
ÖÖ "
==
ÖÖ# %
null
ÖÖ& *
;
ÖÖ* +

TDbContext
ÜÜ 
context
ÜÜ 
=
ÜÜ  
_context
ÜÜ! )
??
ÜÜ* ,
InitContext
ÜÜ- 8
(
ÜÜ8 9
)
ÜÜ9 :
;
ÜÜ: ;
var
áá 
transaction
áá 
=
áá 
_transaction
áá *
??
áá+ -
context
áá. 5
.
áá5 6
Database
áá6 >
.
áá> ?
BeginTransaction
áá? O
(
ááO P
)
ááP Q
;
ááQ R 
RepositoryResponse
àà 
<
àà 
TView
àà $
>
àà$ %
result
àà& ,
=
àà- .
new
àà/ 2 
RepositoryResponse
àà3 E
<
ààE F
TView
ààF K
>
ààK L
(
ààL M
)
ààM N
{
ààO P
	IsSucceed
ààQ Z
=
àà[ \
true
àà] a
}
ààb c
;
ààc d
try
ââ 
{
ää 
context
åå 
.
åå 
Set
åå 
<
åå 
TModel
åå "
>
åå" #
(
åå# $
)
åå$ %
.
åå% &
Update
åå& ,
(
åå, -
view
åå- 1
.
åå1 2
Model
åå2 7
)
åå7 8
;
åå8 9
context
çç 
.
çç 
SaveChanges
çç #
(
çç# $
)
çç$ %
;
çç% &
if
óó 
(
óó 
result
óó 
.
óó 
	IsSucceed
óó $
)
óó$ %
{
òò 
result
ôô 
.
ôô 
Data
ôô 
=
ôô  !
view
ôô" &
;
ôô& '
if
öö 
(
öö 
isRoot
öö 
)
öö 
{
õõ 
transaction
ùù #
.
ùù# $
Commit
ùù$ *
(
ùù* +
)
ùù+ ,
;
ùù, -
}
ûû 
return
üü 
result
üü !
;
üü! "
}
†† 
else
°° 
{
¢¢ 
if
££ 
(
££ 
isRoot
££ 
)
££ 
{
§§ 
transaction
¶¶ #
.
¶¶# $
Rollback
¶¶$ ,
(
¶¶, -
)
¶¶- .
;
¶¶. /
}
ßß 
return
®® 
result
®® !
;
®®! "
}
©© 
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´  
{
¨¨ 
LogErrorMessage
≠≠ 
(
≠≠  
ex
≠≠  "
)
≠≠" #
;
≠≠# $
result
ÆÆ 
.
ÆÆ 
	IsSucceed
ÆÆ  
=
ÆÆ! "
false
ÆÆ# (
;
ÆÆ( )
result
ØØ 
.
ØØ 
	Exception
ØØ  
=
ØØ! "
ex
ØØ# %
;
ØØ% &
if
∞∞ 
(
∞∞ 
isRoot
∞∞ 
)
∞∞ 
{
±± 
transaction
≥≥ 
.
≥≥  
Rollback
≥≥  (
(
≥≥( )
)
≥≥) *
;
≥≥* +
}
¥¥ 
return
µµ 
result
µµ 
;
µµ 
}
∂∂ 
finally
∑∑ 
{
∏∏ 
if
ππ 
(
ππ 
isRoot
ππ 
)
ππ 
{
∫∫ 
transaction
ºº 
.
ºº  
Dispose
ºº  '
(
ºº' (
)
ºº( )
;
ºº) *
context
ΩΩ 
.
ΩΩ 
Dispose
ΩΩ #
(
ΩΩ# $
)
ΩΩ$ %
;
ΩΩ% &
}
ææ 
}
øø 
}
¿¿ 	
public
…… 
virtual
…… 
async
…… 
Task
…… !
<
……! " 
RepositoryResponse
……" 4
<
……4 5
TView
……5 :
>
……: ;
>
……; <
EditModelAsync
……= K
(
……K L
TView
……L Q
view
……R V
,
……V W

TDbContext
……X b
_context
……c k
=
……l m
null
……n r
,
……r s$
IDbContextTransaction……t â
_transaction……ä ñ
=……ó ò
null……ô ù
)……ù û
{
   	
bool
ÀÀ 
isRoot
ÀÀ 
=
ÀÀ 
_context
ÀÀ "
==
ÀÀ# %
null
ÀÀ& *
;
ÀÀ* +
var
ÃÃ 
context
ÃÃ 
=
ÃÃ 
_context
ÃÃ "
??
ÃÃ# %
InitContext
ÃÃ& 1
(
ÃÃ1 2
)
ÃÃ2 3
;
ÃÃ3 4
var
ÕÕ 
transaction
ÕÕ 
=
ÕÕ 
_transaction
ÕÕ *
??
ÕÕ+ -
context
ÕÕ. 5
.
ÕÕ5 6
Database
ÕÕ6 >
.
ÕÕ> ?
BeginTransaction
ÕÕ? O
(
ÕÕO P
)
ÕÕP Q
;
ÕÕQ R 
RepositoryResponse
ŒŒ 
<
ŒŒ 
TView
ŒŒ $
>
ŒŒ$ %
result
ŒŒ& ,
=
ŒŒ- .
new
ŒŒ/ 2 
RepositoryResponse
ŒŒ3 E
<
ŒŒE F
TView
ŒŒF K
>
ŒŒK L
(
ŒŒL M
)
ŒŒM N
{
ŒŒO P
	IsSucceed
ŒŒQ Z
=
ŒŒ[ \
true
ŒŒ] a
}
ŒŒb c
;
ŒŒc d
try
œœ 
{
–– 
context
““ 
.
““ 
Set
““ 
<
““ 
TModel
““ "
>
““" #
(
““# $
)
““$ %
.
““% &
Update
““& ,
(
““, -
view
““- 1
.
““1 2
Model
““2 7
)
““7 8
;
““8 9
await
”” 
context
”” 
.
”” 
SaveChangesAsync
”” .
(
””. /
)
””/ 0
.
””0 1
ConfigureAwait
””1 ?
(
””? @
false
””@ E
)
””E F
;
””F G
if
›› 
(
›› 
result
›› 
.
›› 
	IsSucceed
›› $
)
››$ %
{
ﬁﬁ 
result
ﬂﬂ 
.
ﬂﬂ 
Data
ﬂﬂ 
=
ﬂﬂ  !
view
ﬂﬂ" &
;
ﬂﬂ& '
if
‡‡ 
(
‡‡ 
isRoot
‡‡ 
)
‡‡ 
{
·· 
transaction
„„ #
.
„„# $
Commit
„„$ *
(
„„* +
)
„„+ ,
;
„„, -
}
‰‰ 
return
ÂÂ 
result
ÂÂ !
;
ÂÂ! "
}
ÊÊ 
else
ÁÁ 
{
ËË 
if
ÈÈ 
(
ÈÈ 
isRoot
ÈÈ 
)
ÈÈ 
{
ÍÍ 
transaction
ÏÏ #
.
ÏÏ# $
Rollback
ÏÏ$ ,
(
ÏÏ, -
)
ÏÏ- .
;
ÏÏ. /
}
ÌÌ 
return
ÓÓ 
result
ÓÓ !
;
ÓÓ! "
}
ÔÔ 
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
ex
ÒÒ 
)
ÒÒ  
{
ÚÚ 
LogErrorMessage
ÛÛ 
(
ÛÛ  
ex
ÛÛ  "
)
ÛÛ" #
;
ÛÛ# $
result
ÙÙ 
.
ÙÙ 
	IsSucceed
ÙÙ  
=
ÙÙ! "
false
ÙÙ# (
;
ÙÙ( )
result
ıı 
.
ıı 
	Exception
ıı  
=
ıı! "
ex
ıı# %
;
ıı% &
if
ˆˆ 
(
ˆˆ 
isRoot
ˆˆ 
)
ˆˆ 
{
˜˜ 
transaction
˘˘ 
.
˘˘  
Rollback
˘˘  (
(
˘˘( )
)
˘˘) *
;
˘˘* +
}
˙˙ 
return
¸¸ 
result
¸¸ 
;
¸¸ 
}
˝˝ 
finally
˛˛ 
{
ˇˇ 
if
ÄÄ 
(
ÄÄ 
isRoot
ÄÄ 
)
ÄÄ 
{
ÅÅ 
context
ÉÉ 
.
ÉÉ 
Dispose
ÉÉ #
(
ÉÉ# $
)
ÉÉ$ %
;
ÉÉ% &
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
èè 
virtual
èè  
RepositoryResponse
èè )
<
èè) *
TView
èè* /
>
èè/ 0
GetSingleModel
èè1 ?
(
èè? @

Expression
êê 
<
êê 
Func
êê 
<
êê 
TModel
êê 
,
êê 
bool
êê  $
>
êê$ %
>
êê% &
	predicate
êê' 0
,
ëë 	

TDbContext
ëë
 
_context
ëë 
=
ëë 
null
ëë  $
,
ëë$ %#
IDbContextTransaction
ëë& ;
_transaction
ëë< H
=
ëëI J
null
ëëK O
)
ëëO P
{
íí 	
bool
ìì 
isRoot
ìì 
=
ìì 
_context
ìì "
==
ìì# %
null
ìì& *
;
ìì* +
var
îî 
context
îî 
=
îî 
_context
îî "
??
îî# %
InitContext
îî& 1
(
îî1 2
)
îî2 3
;
îî3 4
var
ïï 
transaction
ïï 
=
ïï 
_transaction
ïï *
??
ïï+ -
context
ïï. 5
.
ïï5 6
Database
ïï6 >
.
ïï> ?
BeginTransaction
ïï? O
(
ïïO P
)
ïïP Q
;
ïïQ R
try
ññ 
{
óó 
TModel
òò 
model
òò 
=
òò 
context
òò &
.
òò& '
Set
òò' *
<
òò* +
TModel
òò+ 1
>
òò1 2
(
òò2 3
)
òò3 4
.
òò4 5
FirstOrDefault
òò5 C
(
òòC D
	predicate
òòD M
)
òòM N
;
òòN O
if
ôô 
(
ôô 
model
ôô 
!=
ôô 
null
ôô !
)
ôô! "
{
öö 
context
õõ 
.
õõ 
Entry
õõ !
(
õõ! "
model
õõ" '
)
õõ' (
.
õõ( )
State
õõ) .
=
õõ/ 0
EntityState
õõ1 <
.
õõ< =
Detached
õõ= E
;
õõE F
var
úú 

viewResult
úú "
=
úú# $
	ParseView
úú% .
(
úú. /
model
úú/ 4
,
úú4 5
context
úú6 =
,
úú= >
transaction
úú? J
)
úúJ K
;
úúK L
return
ùù 
new
ùù  
RepositoryResponse
ùù 1
<
ùù1 2
TView
ùù2 7
>
ùù7 8
(
ùù8 9
)
ùù9 :
{
ûû 
	IsSucceed
üü !
=
üü" #
true
üü$ (
,
üü( )
Data
†† 
=
†† 

viewResult
†† )
}
°° 
;
°° 
}
¢¢ 
else
££ 
{
§§ 
return
•• 
new
••  
RepositoryResponse
•• 1
<
••1 2
TView
••2 7
>
••7 8
(
••8 9
)
••9 :
{
¶¶ 
	IsSucceed
ßß !
=
ßß" #
false
ßß$ )
,
ßß) *
Data
®® 
=
®® 
default
®® &
(
®®& '
TView
®®' ,
)
®®, -
}
©© 
;
©© 
}
™™ 
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
LogErrorMessage
ÆÆ 
(
ÆÆ  
ex
ÆÆ  "
)
ÆÆ" #
;
ÆÆ# $
if
ØØ 
(
ØØ 
isRoot
ØØ 
)
ØØ 
{
∞∞ 
transaction
≤≤ 
.
≤≤  
Rollback
≤≤  (
(
≤≤( )
)
≤≤) *
;
≤≤* +
}
≥≥ 
return
µµ 
new
µµ  
RepositoryResponse
µµ -
<
µµ- .
TView
µµ. 3
>
µµ3 4
(
µµ4 5
)
µµ5 6
{
∂∂ 
	IsSucceed
∑∑ 
=
∑∑ 
false
∑∑  %
,
∑∑% &
Data
∏∏ 
=
∏∏ 
default
∏∏ "
(
∏∏" #
TView
∏∏# (
)
∏∏( )
}
ππ 
;
ππ 
}
∫∫ 
finally
ªª 
{
ºº 
if
ΩΩ 
(
ΩΩ 
isRoot
ΩΩ 
)
ΩΩ 
{
ææ 
context
¿¿ 
.
¿¿ 
Dispose
¿¿ #
(
¿¿# $
)
¿¿$ %
;
¿¿% &
}
¡¡ 
}
¬¬ 
}
√√ 	
public
ÃÃ 
virtual
ÃÃ 
async
ÃÃ 
Task
ÃÃ !
<
ÃÃ! " 
RepositoryResponse
ÃÃ" 4
<
ÃÃ4 5
TView
ÃÃ5 :
>
ÃÃ: ;
>
ÃÃ; <!
GetSingleModelAsync
ÃÃ= P
(
ÃÃP Q

Expression
ÕÕ 
<
ÕÕ 
Func
ÕÕ 
<
ÕÕ 
TModel
ÕÕ 
,
ÕÕ 
bool
ÕÕ  $
>
ÕÕ$ %
>
ÕÕ% &
	predicate
ÕÕ' 0
,
ŒŒ 	

TDbContext
ŒŒ
 
_context
ŒŒ 
=
ŒŒ 
null
ŒŒ  $
,
ŒŒ$ %#
IDbContextTransaction
ŒŒ& ;
_transaction
ŒŒ< H
=
ŒŒI J
null
ŒŒK O
)
ŒŒO P
{
œœ 	
bool
–– 
isRoot
–– 
=
–– 
_context
–– "
==
––# %
null
––& *
;
––* +
var
—— 
context
—— 
=
—— 
_context
—— "
??
——# %
InitContext
——& 1
(
——1 2
)
——2 3
;
——3 4
var
““ 
transaction
““ 
=
““ 
_transaction
““ *
??
““+ -
context
““. 5
.
““5 6
Database
““6 >
.
““> ?
BeginTransaction
““? O
(
““O P
)
““P Q
;
““Q R
try
‘‘ 
{
’’ 
TModel
÷÷ 
model
÷÷ 
=
÷÷ 
await
÷÷ $
context
÷÷% ,
.
÷÷, -
Set
÷÷- 0
<
÷÷0 1
TModel
÷÷1 7
>
÷÷7 8
(
÷÷8 9
)
÷÷9 :
.
÷÷: ;!
FirstOrDefaultAsync
÷÷; N
(
÷÷N O
	predicate
÷÷O X
)
÷÷X Y
.
÷÷Y Z
ConfigureAwait
÷÷Z h
(
÷÷h i
false
÷÷i n
)
÷÷n o
;
÷÷o p
if
◊◊ 
(
◊◊ 
model
◊◊ 
!=
◊◊ 
null
◊◊ !
)
◊◊! "
{
ÿÿ 
context
ŸŸ 
.
ŸŸ 
Entry
ŸŸ !
(
ŸŸ! "
model
ŸŸ" '
)
ŸŸ' (
.
ŸŸ( )
State
ŸŸ) .
=
ŸŸ/ 0
EntityState
ŸŸ1 <
.
ŸŸ< =
Detached
ŸŸ= E
;
ŸŸE F
var
€€ 

viewResult
€€ "
=
€€# $
	ParseView
€€% .
(
€€. /
model
€€/ 4
,
€€4 5
context
€€6 =
,
€€= >
transaction
€€? J
)
€€J K
;
€€K L
return
‹‹ 
new
‹‹  
RepositoryResponse
‹‹ 1
<
‹‹1 2
TView
‹‹2 7
>
‹‹7 8
(
‹‹8 9
)
‹‹9 :
{
›› 
	IsSucceed
ﬁﬁ !
=
ﬁﬁ" #
true
ﬁﬁ$ (
,
ﬁﬁ( )
Data
ﬂﬂ 
=
ﬂﬂ 

viewResult
ﬂﬂ )
}
‡‡ 
;
‡‡ 
}
·· 
else
‚‚ 
{
„„ 
return
‰‰ 
new
‰‰  
RepositoryResponse
‰‰ 1
<
‰‰1 2
TView
‰‰2 7
>
‰‰7 8
(
‰‰8 9
)
‰‰9 :
{
ÂÂ 
	IsSucceed
ÊÊ !
=
ÊÊ" #
false
ÊÊ$ )
,
ÊÊ) *
Data
ÁÁ 
=
ÁÁ 
default
ÁÁ &
(
ÁÁ& '
TView
ÁÁ' ,
)
ÁÁ, -
}
ËË 
;
ËË 
}
ÈÈ 
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ 
ex
ÎÎ 
)
ÎÎ  
{
ÏÏ 
LogErrorMessage
ÌÌ 
(
ÌÌ  
ex
ÌÌ  "
)
ÌÌ" #
;
ÌÌ# $
if
ÓÓ 
(
ÓÓ 
isRoot
ÓÓ 
)
ÓÓ 
{
ÔÔ 
transaction
ÒÒ 
.
ÒÒ  
Rollback
ÒÒ  (
(
ÒÒ( )
)
ÒÒ) *
;
ÒÒ* +
}
ÚÚ 
return
ÙÙ 
new
ÙÙ  
RepositoryResponse
ÙÙ -
<
ÙÙ- .
TView
ÙÙ. 3
>
ÙÙ3 4
(
ÙÙ4 5
)
ÙÙ5 6
{
ıı 
	IsSucceed
ˆˆ 
=
ˆˆ 
false
ˆˆ  %
,
ˆˆ% &
Data
˜˜ 
=
˜˜ 
default
˜˜ "
(
˜˜" #
TView
˜˜# (
)
˜˜( )
}
¯¯ 
;
¯¯ 
}
˘˘ 
finally
˙˙ 
{
˚˚ 
if
¸¸ 
(
¸¸ 
isRoot
¸¸ 
)
¸¸ 
{
˝˝ 
context
ˇˇ 
.
ˇˇ 
Dispose
ˇˇ #
(
ˇˇ# $
)
ˇˇ$ %
;
ˇˇ% &
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
public
àà 
virtual
àà 

TDbContext
àà !
InitContext
àà" -
(
àà- .
)
àà. /
{
ââ 	
Type
ää 
	classType
ää 
=
ää 
typeof
ää #
(
ää# $

TDbContext
ää$ .
)
ää. /
;
ää/ 0
ConstructorInfo
ãã 
classConstructor
ãã ,
=
ãã- .
	classType
ãã/ 8
.
ãã8 9
GetConstructor
ãã9 G
(
ããG H
new
ããH K
Type
ããL P
[
ããP Q
]
ããQ R
{
ããS T
}
ããU V
)
ããV W
;
ããW X

TDbContext
åå 
context
åå 
=
åå  
(
åå! "

TDbContext
åå" ,
)
åå, -
classConstructor
åå- =
.
åå= >
Invoke
åå> D
(
ååD E
new
ååE H
object
ååI O
[
ååO P
]
ååP Q
{
ååR S
}
ååT U
)
ååU V
;
ååV W
return
éé 
context
éé 
;
éé 
}
èè 	
public
ïï 
virtual
ïï 
void
ïï 
LogErrorMessage
ïï +
(
ïï+ ,
	Exception
ïï, 5
ex
ïï6 8
)
ïï8 9
{
ññ 	
}
óó 	
public
§§ 
virtual
§§ 
PaginationModel
§§ &
<
§§& '
TView
§§' ,
>
§§, -
ParsePagingQuery
§§. >
(
§§> ?

IQueryable
§§? I
<
§§I J
TModel
§§J P
>
§§P Q
query
§§R W
,
•• 	
string
••
 !
orderByPropertyName
•• $
,
••$ %
OrderByDirection
••& 6
	direction
••7 @
,
¶¶ 	
int
¶¶
 
?
¶¶ 
pageSize
¶¶ 
,
¶¶ 
int
¶¶ 
?
¶¶ 
	pageIndex
¶¶ '
,
ßß 	

TDbContext
ßß
 
context
ßß 
,
ßß #
IDbContextTransaction
ßß 3
transaction
ßß4 ?
)
ßß? @
{
®® 	
List
©© 
<
©© 
TModel
©© 
>
©© 
lstModel
©© !
=
©©" #
new
©©$ '
List
©©( ,
<
©©, -
TModel
©©- 3
>
©©3 4
(
©©4 5
)
©©5 6
;
©©6 7
PaginationModel
´´ 
<
´´ 
TView
´´ !
>
´´! "
result
´´# )
=
´´* +
new
´´, /
PaginationModel
´´0 ?
<
´´? @
TView
´´@ E
>
´´E F
(
´´F G
)
´´G H
{
¨¨ 

TotalItems
≠≠ 
=
≠≠ 
query
≠≠ "
.
≠≠" #
Count
≠≠# (
(
≠≠( )
)
≠≠) *
,
≠≠* +
	PageIndex
ÆÆ 
=
ÆÆ 
	pageIndex
ÆÆ %
??
ÆÆ& (
$num
ÆÆ) *
}
ØØ 
;
ØØ 
dynamic
∞∞ 
orderBy
∞∞ 
=
∞∞ 
	GetLambda
∞∞ '
(
∞∞' (!
orderByPropertyName
∞∞( ;
)
∞∞; <
;
∞∞< =

IQueryable
±± 
<
±± 
TModel
±± 
>
±± 
sorted
±± %
=
±±& '
null
±±( ,
;
±±, -
try
≤≤ 
{
≥≥ 
result
¥¥ 
.
¥¥ 
PageSize
¥¥ 
=
¥¥  !
pageSize
¥¥" *
??
¥¥+ -
result
¥¥. 4
.
¥¥4 5

TotalItems
¥¥5 ?
;
¥¥? @
if
∂∂ 
(
∂∂ 
pageSize
∂∂ 
.
∂∂ 
HasValue
∂∂ %
)
∂∂% &
{
∑∑ 
result
∏∏ 
.
∏∏ 
	TotalPage
∏∏ $
=
∏∏% &
(
∏∏' (
result
∏∏( .
.
∏∏. /

TotalItems
∏∏/ 9
/
∏∏: ;
pageSize
∏∏< D
.
∏∏D E
Value
∏∏E J
)
∏∏J K
+
∏∏L M
(
∏∏N O
result
∏∏O U
.
∏∏U V

TotalItems
∏∏V `
%
∏∏a b
pageSize
∏∏c k
.
∏∏k l
Value
∏∏l q
>
∏∏r s
$num
∏∏t u
?
∏∏v w
$num
∏∏x y
:
∏∏z {
$num
∏∏| }
)
∏∏} ~
;
∏∏~ 
}
ππ 
switch
ªª 
(
ªª 
	direction
ªª !
)
ªª! "
{
ºº 
case
ΩΩ 
OrderByDirection
ΩΩ )
.
ΩΩ) *

Descending
ΩΩ* 4
:
ΩΩ4 5
sorted
ææ 
=
ææ  
	Queryable
ææ! *
.
ææ* +
OrderByDescending
ææ+ <
(
ææ< =
query
ææ= B
,
ææB C
orderBy
ææD K
)
ææK L
;
ææL M
if
øø 
(
øø 
pageSize
øø $
.
øø$ %
HasValue
øø% -
)
øø- .
{
¿¿ 
lstModel
¡¡ $
=
¡¡% &
sorted
¡¡' -
.
¡¡- .
Skip
¡¡. 2
(
¡¡2 3
	pageIndex
¡¡3 <
.
¡¡< =
Value
¡¡= B
*
¡¡C D
pageSize
¡¡E M
.
¡¡M N
Value
¡¡N S
)
¡¡S T
.
¬¬ 
Take
¬¬ !
(
¬¬! "
pageSize
¬¬" *
.
¬¬* +
Value
¬¬+ 0
)
¬¬0 1
.
√√ 
ToList
√√ #
(
√√# $
)
√√$ %
;
√√% &
}
ƒƒ 
else
≈≈ 
{
∆∆ 
lstModel
«« $
=
««% &
sorted
««' -
.
««- .
ToList
««. 4
(
««4 5
)
««5 6
;
««6 7
}
»» 
break
…… 
;
…… 
default
ÀÀ 
:
ÀÀ 
sorted
ÃÃ 
=
ÃÃ  
	Queryable
ÃÃ! *
.
ÃÃ* +
OrderBy
ÃÃ+ 2
(
ÃÃ2 3
query
ÃÃ3 8
,
ÃÃ8 9
orderBy
ÃÃ: A
)
ÃÃA B
;
ÃÃB C
if
ÕÕ 
(
ÕÕ 
pageSize
ÕÕ $
.
ÕÕ$ %
HasValue
ÕÕ% -
)
ÕÕ- .
{
ŒŒ 
lstModel
œœ $
=
œœ% &
sorted
œœ' -
.
–– 
Skip
–– !
(
––! "
	pageIndex
––" +
.
––+ ,
Value
––, 1
*
––2 3
pageSize
––4 <
.
––< =
Value
––= B
)
––B C
.
—— 
Take
—— !
(
——! "
pageSize
——" *
.
——* +
Value
——+ 0
)
——0 1
.
““ 
ToList
““ #
(
““# $
)
““$ %
;
““% &
}
”” 
else
‘‘ 
{
’’ 
lstModel
÷÷ $
=
÷÷% &
sorted
÷÷' -
.
÷÷- .
ToList
÷÷. 4
(
÷÷4 5
)
÷÷5 6
;
÷÷6 7
}
◊◊ 
break
ÿÿ 
;
ÿÿ 
}
ŸŸ 
lstModel
⁄⁄ 
.
⁄⁄ 
ForEach
⁄⁄  
(
⁄⁄  !
model
⁄⁄! &
=>
⁄⁄' )
context
⁄⁄* 1
.
⁄⁄1 2
Entry
⁄⁄2 7
(
⁄⁄7 8
model
⁄⁄8 =
)
⁄⁄= >
.
⁄⁄> ?
State
⁄⁄? D
=
⁄⁄E F
EntityState
⁄⁄G R
.
⁄⁄R S
Detached
⁄⁄S [
)
⁄⁄[ \
;
⁄⁄\ ]
var
€€ 
lstView
€€ 
=
€€ 
	ParseView
€€ '
(
€€' (
lstModel
€€( 0
,
€€0 1
context
€€2 9
,
€€9 :
transaction
€€; F
)
€€F G
;
€€G H
result
‹‹ 
.
‹‹ 
Items
‹‹ 
=
‹‹ 
lstView
‹‹ &
;
‹‹& '
return
›› 
result
›› 
;
›› 
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
LogErrorMessage
·· 
(
··  
ex
··  "
)
··" #
;
··# $
return
‚‚ 
null
‚‚ 
;
‚‚ 
}
„„ 
}
‰‰ 	
public
ÒÒ 
virtual
ÒÒ 
async
ÒÒ 
Task
ÒÒ !
<
ÒÒ! "
PaginationModel
ÒÒ" 1
<
ÒÒ1 2
TView
ÒÒ2 7
>
ÒÒ7 8
>
ÒÒ8 9#
ParsePagingQueryAsync
ÒÒ: O
(
ÒÒO P

IQueryable
ÒÒP Z
<
ÒÒZ [
TModel
ÒÒ[ a
>
ÒÒa b
query
ÒÒc h
,
ÚÚ 	
string
ÚÚ
 !
orderByPropertyName
ÚÚ $
,
ÚÚ$ %
OrderByDirection
ÚÚ& 6
	direction
ÚÚ7 @
,
ÛÛ 	
int
ÛÛ
 
?
ÛÛ 
pageSize
ÛÛ 
,
ÛÛ 
int
ÛÛ 
?
ÛÛ 
	pageIndex
ÛÛ '
,
ÙÙ 	

TDbContext
ÙÙ
 
context
ÙÙ 
,
ÙÙ #
IDbContextTransaction
ÙÙ 3
transaction
ÙÙ4 ?
)
ÙÙ? @
{
ıı 	
List
ˆˆ 
<
ˆˆ 
TModel
ˆˆ 
>
ˆˆ 
lstModel
ˆˆ !
=
ˆˆ" #
new
ˆˆ$ '
List
ˆˆ( ,
<
ˆˆ, -
TModel
ˆˆ- 3
>
ˆˆ3 4
(
ˆˆ4 5
)
ˆˆ5 6
;
ˆˆ6 7
PaginationModel
¯¯ 
<
¯¯ 
TView
¯¯ !
>
¯¯! "
result
¯¯# )
=
¯¯* +
new
¯¯, /
PaginationModel
¯¯0 ?
<
¯¯? @
TView
¯¯@ E
>
¯¯E F
(
¯¯F G
)
¯¯G H
{
˘˘ 

TotalItems
˙˙ 
=
˙˙ 
query
˙˙ "
.
˙˙" #
Count
˙˙# (
(
˙˙( )
)
˙˙) *
,
˙˙* +
	PageIndex
˚˚ 
=
˚˚ 
	pageIndex
˚˚ %
??
˚˚& (
$num
˚˚) *
}
¸¸ 
;
¸¸ 
dynamic
˝˝ 
orderBy
˝˝ 
=
˝˝ 
	GetLambda
˝˝ '
(
˝˝' (!
orderByPropertyName
˝˝( ;
)
˝˝; <
;
˝˝< =

IQueryable
˛˛ 
<
˛˛ 
TModel
˛˛ 
>
˛˛ 
sorted
˛˛ %
=
˛˛& '
null
˛˛( ,
;
˛˛, -
try
ˇˇ 
{
ÄÄ 
result
ÅÅ 
.
ÅÅ 
PageSize
ÅÅ 
=
ÅÅ  !
pageSize
ÅÅ" *
??
ÅÅ+ -
result
ÅÅ. 4
.
ÅÅ4 5

TotalItems
ÅÅ5 ?
;
ÅÅ? @
if
ÉÉ 
(
ÉÉ 
pageSize
ÉÉ 
.
ÉÉ 
HasValue
ÉÉ %
)
ÉÉ% &
{
ÑÑ 
result
ÖÖ 
.
ÖÖ 
	TotalPage
ÖÖ $
=
ÖÖ% &
(
ÖÖ' (
result
ÖÖ( .
.
ÖÖ. /

TotalItems
ÖÖ/ 9
/
ÖÖ: ;
pageSize
ÖÖ< D
.
ÖÖD E
Value
ÖÖE J
)
ÖÖJ K
+
ÖÖL M
(
ÖÖN O
result
ÖÖO U
.
ÖÖU V

TotalItems
ÖÖV `
%
ÖÖa b
pageSize
ÖÖc k
.
ÖÖk l
Value
ÖÖl q
>
ÖÖr s
$num
ÖÖt u
?
ÖÖv w
$num
ÖÖx y
:
ÖÖz {
$num
ÖÖ| }
)
ÖÖ} ~
;
ÖÖ~ 
}
ÜÜ 
switch
àà 
(
àà 
	direction
àà !
)
àà! "
{
ââ 
case
ää 
OrderByDirection
ää )
.
ää) *

Descending
ää* 4
:
ää4 5
sorted
ãã 
=
ãã  
	Queryable
ãã! *
.
ãã* +
OrderByDescending
ãã+ <
(
ãã< =
query
ãã= B
,
ããB C
orderBy
ããD K
)
ããK L
;
ããL M
if
åå 
(
åå 
pageSize
åå $
.
åå$ %
HasValue
åå% -
)
åå- .
{
çç 
lstModel
éé $
=
éé% &
await
éé' ,
sorted
éé- 3
.
éé3 4
Skip
éé4 8
(
éé8 9
	pageIndex
éé9 B
.
ééB C
Value
ééC H
*
ééI J
pageSize
ééK S
.
ééS T
Value
ééT Y
)
ééY Z
.
èè 
Take
èè !
(
èè! "
pageSize
èè" *
.
èè* +
Value
èè+ 0
)
èè0 1
.
êê 
ToListAsync
êê (
(
êê( )
)
êê) *
.
êê* +
ConfigureAwait
êê+ 9
(
êê9 :
false
êê: ?
)
êê? @
;
êê@ A
}
ëë 
else
íí 
{
ìì 
lstModel
îî $
=
îî% &
sorted
îî' -
.
îî- .
ToList
îî. 4
(
îî4 5
)
îî5 6
;
îî6 7
}
ïï 
break
ññ 
;
ññ 
default
òò 
:
òò 
sorted
ôô 
=
ôô  
	Queryable
ôô! *
.
ôô* +
OrderBy
ôô+ 2
(
ôô2 3
query
ôô3 8
,
ôô8 9
orderBy
ôô: A
)
ôôA B
;
ôôB C
if
öö 
(
öö 
pageSize
öö $
.
öö$ %
HasValue
öö% -
)
öö- .
{
õõ 
lstModel
úú $
=
úú% &
await
úú' ,
sorted
úú- 3
.
ùù 
Skip
ùù !
(
ùù! "
	pageIndex
ùù" +
.
ùù+ ,
Value
ùù, 1
*
ùù2 3
pageSize
ùù4 <
.
ùù< =
Value
ùù= B
)
ùùB C
.
ûû 
Take
ûû !
(
ûû! "
pageSize
ûû" *
.
ûû* +
Value
ûû+ 0
)
ûû0 1
.
üü 
ToListAsync
üü (
(
üü( )
)
üü) *
.
üü* +
ConfigureAwait
üü+ 9
(
üü9 :
false
üü: ?
)
üü? @
;
üü@ A
}
†† 
else
°° 
{
¢¢ 
lstModel
££ $
=
££% &
await
££' ,
sorted
££- 3
.
££3 4
ToListAsync
££4 ?
(
££? @
)
££@ A
.
££A B
ConfigureAwait
££B P
(
££P Q
false
££Q V
)
££V W
;
££W X
}
§§ 
break
•• 
;
•• 
}
¶¶ 
lstModel
ßß 
.
ßß 
ForEach
ßß  
(
ßß  !
model
ßß! &
=>
ßß' )
context
ßß* 1
.
ßß1 2
Entry
ßß2 7
(
ßß7 8
model
ßß8 =
)
ßß= >
.
ßß> ?
State
ßß? D
=
ßßE F
EntityState
ßßG R
.
ßßR S
Detached
ßßS [
)
ßß[ \
;
ßß\ ]
var
®® 
lstView
®® 
=
®® 
	ParseView
®® '
(
®®' (
lstModel
®®( 0
,
®®0 1
context
®®2 9
,
®®9 :
transaction
®®; F
)
®®F G
;
®®G H
result
©© 
.
©© 
Items
©© 
=
©© 
lstView
©© &
;
©©& '
return
™™ 
result
™™ 
;
™™ 
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
LogErrorMessage
ÆÆ 
(
ÆÆ  
ex
ÆÆ  "
)
ÆÆ" #
;
ÆÆ# $
return
ØØ 
null
ØØ 
;
ØØ 
}
∞∞ 
}
±± 	
public
∫∫ 
virtual
∫∫ 
List
∫∫ 
<
∫∫ 
TView
∫∫ !
>
∫∫! "
	ParseView
∫∫# ,
(
∫∫, -
List
∫∫- 1
<
∫∫1 2
TModel
∫∫2 8
>
∫∫8 9
	lstModels
∫∫: C
,
∫∫C D

TDbContext
∫∫E O
_context
∫∫P X
=
∫∫Y Z
null
∫∫[ _
,
∫∫_ `#
IDbContextTransaction
∫∫a v
_transaction∫∫w É
=∫∫Ñ Ö
null∫∫Ü ä
)∫∫ä ã
{
ªª 	
List
ºº 
<
ºº 
TView
ºº 
>
ºº 
lstView
ºº 
=
ºº  !
new
ºº" %
List
ºº& *
<
ºº* +
TView
ºº+ 0
>
ºº0 1
(
ºº1 2
)
ºº2 3
;
ºº3 4
foreach
ΩΩ 
(
ΩΩ 
var
ΩΩ 
model
ΩΩ 
in
ΩΩ !
	lstModels
ΩΩ" +
)
ΩΩ+ ,
{
ææ 
lstView
øø 
.
øø 
Add
øø 
(
øø 
	ParseView
øø %
(
øø% &
model
øø& +
,
øø+ ,
_context
øø- 5
,
øø5 6
_transaction
øø7 C
)
øøC D
)
øøD E
;
øøE F
}
¿¿ 
return
¬¬ 
lstView
¬¬ 
;
¬¬ 
}
√√ 	
public
ÃÃ 
virtual
ÃÃ 
TView
ÃÃ 
	ParseView
ÃÃ &
(
ÃÃ& '
TModel
ÃÃ' -
model
ÃÃ. 3
,
ÃÃ3 4

TDbContext
ÃÃ5 ?
_context
ÃÃ@ H
=
ÃÃI J
null
ÃÃK O
,
ÃÃO P#
IDbContextTransaction
ÃÃQ f
_transaction
ÃÃg s
=
ÃÃt u
null
ÃÃv z
)
ÃÃz {
{
ÕÕ 	
Type
ŒŒ 
	classType
ŒŒ 
=
ŒŒ 
typeof
ŒŒ #
(
ŒŒ# $
TView
ŒŒ$ )
)
ŒŒ) *
;
ŒŒ* +
ConstructorInfo
œœ 
classConstructor
œœ ,
=
œœ- .
	classType
œœ/ 8
.
œœ8 9
GetConstructor
œœ9 G
(
œœG H
new
œœH K
Type
œœL P
[
œœP Q
]
œœQ R
{
œœS T
model
œœU Z
.
œœZ [
GetType
œœ[ b
(
œœb c
)
œœc d
,
œœd e
typeof
œœf l
(
œœl m

TDbContext
œœm w
)
œœw x
,
œœx y
typeofœœz Ä
(œœÄ Å%
IDbContextTransactionœœÅ ñ
)œœñ ó
}œœò ô
)œœô ö
;œœö õ
if
–– 
(
–– 
classConstructor
––  
!=
––! #
null
––$ (
)
––( )
{
—— 
return
““ 
(
““ 
TView
““ 
)
““ 
classConstructor
““ .
.
““. /
Invoke
““/ 5
(
““5 6
new
““6 9
object
““: @
[
““@ A
]
““A B
{
““C D
model
““E J
,
““J K
_context
““L T
,
““T U
_transaction
““V b
}
““c d
)
““d e
;
““e f
}
”” 
else
‘‘ 
{
’’ 
classConstructor
÷÷  
=
÷÷! "
	classType
÷÷# ,
.
÷÷, -
GetConstructor
÷÷- ;
(
÷÷; <
new
÷÷< ?
Type
÷÷@ D
[
÷÷D E
]
÷÷E F
{
÷÷G H
model
÷÷I N
.
÷÷N O
GetType
÷÷O V
(
÷÷V W
)
÷÷W X
}
÷÷Y Z
)
÷÷Z [
;
÷÷[ \
return
◊◊ 
(
◊◊ 
TView
◊◊ 
)
◊◊ 
classConstructor
◊◊ .
.
◊◊. /
Invoke
◊◊/ 5
(
◊◊5 6
new
◊◊6 9
object
◊◊: @
[
◊◊@ A
]
◊◊A B
{
◊◊C D
model
◊◊E J
}
◊◊K L
)
◊◊L M
;
◊◊M N
}
ÿÿ 
}
ŸŸ 	
public
ﬁﬁ 
virtual
ﬁﬁ 
void
ﬁﬁ  
RegisterAutoMapper
ﬁﬁ .
(
ﬁﬁ. /
)
ﬁﬁ/ 0
{
ﬂﬂ 	
Mapper
‡‡ 
.
‡‡ 

Initialize
‡‡ 
(
‡‡ 
cfg
‡‡ !
=>
‡‡" $
{
·· 
cfg
‚‚ 
.
‚‚ 
	CreateMap
‚‚ 
<
‚‚ 
TModel
‚‚ $
,
‚‚$ %
TView
‚‚& +
>
‚‚+ ,
(
‚‚, -
)
‚‚- .
;
‚‚. /
cfg
„„ 
.
„„ 
	CreateMap
„„ 
<
„„ 
TView
„„ #
,
„„# $
TModel
„„% +
>
„„+ ,
(
„„, -
)
„„- .
;
„„. /
}
‰‰ 
)
‰‰ 
;
‰‰ 
}
ÂÂ 	
public
ÔÔ 
virtual
ÔÔ  
RepositoryResponse
ÔÔ )
<
ÔÔ) *
List
ÔÔ* .
<
ÔÔ. /
TView
ÔÔ/ 4
>
ÔÔ4 5
>
ÔÔ5 6
GetModelList
ÔÔ7 C
(
ÔÔC D

TDbContext
ÔÔD N
_context
ÔÔO W
=
ÔÔX Y
null
ÔÔZ ^
,
ÔÔ^ _#
IDbContextTransaction
ÔÔ` u
_transactionÔÔv Ç
=ÔÔÉ Ñ
nullÔÔÖ â
)ÔÔâ ä
{
 	
bool
ÒÒ 
isRoot
ÒÒ 
=
ÒÒ 
_context
ÒÒ "
==
ÒÒ# %
null
ÒÒ& *
;
ÒÒ* +
var
ÚÚ 
context
ÚÚ 
=
ÚÚ 
_context
ÚÚ "
??
ÚÚ# %
InitContext
ÚÚ& 1
(
ÚÚ1 2
)
ÚÚ2 3
;
ÚÚ3 4
var
ÛÛ 
transaction
ÛÛ 
=
ÛÛ 
_transaction
ÛÛ *
??
ÛÛ+ -
context
ÛÛ. 5
.
ÛÛ5 6
Database
ÛÛ6 >
.
ÛÛ> ?
BeginTransaction
ÛÛ? O
(
ÛÛO P
)
ÛÛP Q
;
ÛÛQ R
List
ÙÙ 
<
ÙÙ 
TView
ÙÙ 
>
ÙÙ 
result
ÙÙ 
=
ÙÙ  
new
ÙÙ! $
List
ÙÙ% )
<
ÙÙ) *
TView
ÙÙ* /
>
ÙÙ/ 0
(
ÙÙ0 1
)
ÙÙ1 2
;
ÙÙ2 3
try
ıı 
{
ˆˆ 
var
˜˜ 
lstModel
˜˜ 
=
˜˜ 
context
˜˜ &
.
˜˜& '
Set
˜˜' *
<
˜˜* +
TModel
˜˜+ 1
>
˜˜1 2
(
˜˜2 3
)
˜˜3 4
.
˜˜4 5
ToList
˜˜5 ;
(
˜˜; <
)
˜˜< =
;
˜˜= >
lstModel
˘˘ 
.
˘˘ 
ForEach
˘˘  
(
˘˘  !
model
˘˘! &
=>
˘˘' )
context
˘˘* 1
.
˘˘1 2
Entry
˘˘2 7
(
˘˘7 8
model
˘˘8 =
)
˘˘= >
.
˘˘> ?
State
˘˘? D
=
˘˘E F
EntityState
˘˘G R
.
˘˘R S
Detached
˘˘S [
)
˘˘[ \
;
˘˘\ ]
result
˙˙ 
=
˙˙ 
	ParseView
˙˙ "
(
˙˙" #
lstModel
˙˙# +
,
˙˙+ ,
context
˙˙- 4
,
˙˙4 5
transaction
˙˙6 A
)
˙˙A B
;
˙˙B C
return
˚˚ 
new
˚˚  
RepositoryResponse
˚˚ -
<
˚˚- .
List
˚˚. 2
<
˚˚2 3
TView
˚˚3 8
>
˚˚8 9
>
˚˚9 :
(
˚˚: ;
)
˚˚; <
{
¸¸ 
	IsSucceed
˝˝ 
=
˝˝ 
true
˝˝  $
,
˝˝$ %
Data
˛˛ 
=
˛˛ 
result
˛˛ !
}
ˇˇ 
;
ˇˇ 
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
	Exception
ÅÅ 
ex
ÅÅ 
)
ÅÅ  
{
ÇÇ 
LogErrorMessage
ÉÉ 
(
ÉÉ  
ex
ÉÉ  "
)
ÉÉ" #
;
ÉÉ# $
if
ÑÑ 
(
ÑÑ 
isRoot
ÑÑ 
)
ÑÑ 
{
ÖÖ 
transaction
áá 
.
áá  
Rollback
áá  (
(
áá( )
)
áá) *
;
áá* +
}
àà 
return
ää 
new
ää  
RepositoryResponse
ää -
<
ää- .
List
ää. 2
<
ää2 3
TView
ää3 8
>
ää8 9
>
ää9 :
(
ää: ;
)
ää; <
{
ãã 
	IsSucceed
åå 
=
åå 
false
åå  %
,
åå% &
Data
çç 
=
çç 
null
çç 
,
çç  
	Exception
éé 
=
éé 
ex
éé  "
}
èè 
;
èè 
}
êê 
finally
ëë 
{
íí 
if
ìì 
(
ìì 
isRoot
ìì 
)
ìì 
{
îî 
context
ññ 
.
ññ 
Dispose
ññ #
(
ññ# $
)
ññ$ %
;
ññ% &
}
óó 
}
òò 
}
ôô 	
public
•• 
virtual
••  
RepositoryResponse
•• )
<
••) *
PaginationModel
••* 9
<
••9 :
TView
••: ?
>
••? @
>
••@ A
GetModelList
••B N
(
••N O
string
¶¶ !
orderByPropertyName
¶¶ "
,
¶¶" #
OrderByDirection
¶¶$ 4
	direction
¶¶5 >
,
¶¶> ?
int
¶¶@ C
?
¶¶C D
pageSize
¶¶E M
,
¶¶M N
int
¶¶O R
?
¶¶R S
	pageIndex
¶¶T ]
,
ßß 	

TDbContext
ßß
 
_context
ßß 
=
ßß 
null
ßß  $
,
ßß$ %#
IDbContextTransaction
ßß& ;
_transaction
ßß< H
=
ßßI J
null
ßßK O
)
ßßO P
{
®® 	
bool
©© 
isRoot
©© 
=
©© 
_context
©© "
==
©©# %
null
©©& *
;
©©* +
var
™™ 
context
™™ 
=
™™ 
_context
™™ "
??
™™# %
InitContext
™™& 1
(
™™1 2
)
™™2 3
;
™™3 4
var
´´ 
transaction
´´ 
=
´´ 
_transaction
´´ *
??
´´+ -
context
´´. 5
.
´´5 6
Database
´´6 >
.
´´> ?
BeginTransaction
´´? O
(
´´O P
)
´´P Q
;
´´Q R
try
≠≠ 
{
ÆÆ 
var
ØØ 
query
ØØ 
=
ØØ 
context
ØØ #
.
ØØ# $
Set
ØØ$ '
<
ØØ' (
TModel
ØØ( .
>
ØØ. /
(
ØØ/ 0
)
ØØ0 1
;
ØØ1 2
var
±± 
result
±± 
=
±± 
ParsePagingQuery
±± -
(
±±- .
query
±±. 3
,
±±3 4!
orderByPropertyName
±±5 H
,
±±H I
	direction
±±J S
,
±±S T
pageSize
±±U ]
,
±±] ^
	pageIndex
±±_ h
,
≤≤ 
context
≤≤ 
,
≤≤ 
transaction
≤≤ &
)
≤≤& '
;
≤≤' (
return
¥¥ 
new
¥¥  
RepositoryResponse
¥¥ -
<
¥¥- .
PaginationModel
¥¥. =
<
¥¥= >
TView
¥¥> C
>
¥¥C D
>
¥¥D E
(
¥¥E F
)
¥¥F G
{
µµ 
	IsSucceed
∂∂ 
=
∂∂ 
true
∂∂  $
,
∂∂$ %
Data
∑∑ 
=
∑∑ 
result
∑∑ !
}
∏∏ 
;
∏∏ 
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
ex
∫∫ 
)
∫∫  
{
ªª 
LogErrorMessage
ºº 
(
ºº  
ex
ºº  "
)
ºº" #
;
ºº# $
if
ΩΩ 
(
ΩΩ 
isRoot
ΩΩ 
)
ΩΩ 
{
ææ 
transaction
¿¿ 
.
¿¿  
Rollback
¿¿  (
(
¿¿( )
)
¿¿) *
;
¿¿* +
}
¡¡ 
return
√√ 
new
√√  
RepositoryResponse
√√ -
<
√√- .
PaginationModel
√√. =
<
√√= >
TView
√√> C
>
√√C D
>
√√D E
(
√√E F
)
√√F G
{
ƒƒ 
	IsSucceed
≈≈ 
=
≈≈ 
false
≈≈  %
,
≈≈% &
Data
∆∆ 
=
∆∆ 
null
∆∆ 
,
∆∆  
	Exception
«« 
=
«« 
ex
««  "
}
»» 
;
»» 
}
…… 
finally
   
{
ÀÀ 
if
ÃÃ 
(
ÃÃ 
isRoot
ÃÃ 
)
ÃÃ 
{
ÕÕ 
context
œœ 
.
œœ 
Dispose
œœ #
(
œœ# $
)
œœ$ %
;
œœ% &
}
–– 
}
—— 
}
““ 	
public
⁄⁄ 
virtual
⁄⁄ 
async
⁄⁄ 
Task
⁄⁄ !
<
⁄⁄! " 
RepositoryResponse
⁄⁄" 4
<
⁄⁄4 5
List
⁄⁄5 9
<
⁄⁄9 :
TView
⁄⁄: ?
>
⁄⁄? @
>
⁄⁄@ A
>
⁄⁄A B
GetModelListAsync
⁄⁄C T
(
⁄⁄T U

TDbContext
⁄⁄U _
_context
⁄⁄` h
=
⁄⁄i j
null
⁄⁄k o
,
⁄⁄o p$
IDbContextTransaction⁄⁄q Ü
_transaction⁄⁄á ì
=⁄⁄î ï
null⁄⁄ñ ö
)⁄⁄ö õ
{
€€ 	
bool
‹‹ 
isRoot
‹‹ 
=
‹‹ 
_context
‹‹ "
==
‹‹# %
null
‹‹& *
;
‹‹* +
var
›› 
context
›› 
=
›› 
_context
›› "
??
››# %
InitContext
››& 1
(
››1 2
)
››2 3
;
››3 4
var
ﬁﬁ 
transaction
ﬁﬁ 
=
ﬁﬁ 
_transaction
ﬁﬁ *
??
ﬁﬁ+ -
context
ﬁﬁ. 5
.
ﬁﬁ5 6
Database
ﬁﬁ6 >
.
ﬁﬁ> ?
BeginTransaction
ﬁﬁ? O
(
ﬁﬁO P
)
ﬁﬁP Q
;
ﬁﬁQ R
List
ﬂﬂ 
<
ﬂﬂ 
TView
ﬂﬂ 
>
ﬂﬂ 
result
ﬂﬂ 
=
ﬂﬂ  
new
ﬂﬂ! $
List
ﬂﬂ% )
<
ﬂﬂ) *
TView
ﬂﬂ* /
>
ﬂﬂ/ 0
(
ﬂﬂ0 1
)
ﬂﬂ1 2
;
ﬂﬂ2 3
try
‡‡ 
{
·· 
var
‚‚ 
lstModel
‚‚ 
=
‚‚ 
await
‚‚ $
context
‚‚% ,
.
‚‚, -
Set
‚‚- 0
<
‚‚0 1
TModel
‚‚1 7
>
‚‚7 8
(
‚‚8 9
)
‚‚9 :
.
‚‚: ;
ToListAsync
‚‚; F
(
‚‚F G
)
‚‚G H
.
‚‚H I
ConfigureAwait
‚‚I W
(
‚‚W X
false
‚‚X ]
)
‚‚] ^
;
‚‚^ _
lstModel
‰‰ 
.
‰‰ 
ForEach
‰‰  
(
‰‰  !
model
‰‰! &
=>
‰‰' )
context
‰‰* 1
.
‰‰1 2
Entry
‰‰2 7
(
‰‰7 8
model
‰‰8 =
)
‰‰= >
.
‰‰> ?
State
‰‰? D
=
‰‰E F
EntityState
‰‰G R
.
‰‰R S
Detached
‰‰S [
)
‰‰[ \
;
‰‰\ ]
result
ÂÂ 
=
ÂÂ 
	ParseView
ÂÂ "
(
ÂÂ" #
lstModel
ÂÂ# +
,
ÂÂ+ ,
_context
ÂÂ- 5
,
ÂÂ5 6
_transaction
ÂÂ7 C
)
ÂÂC D
;
ÂÂD E
return
ÊÊ 
new
ÊÊ  
RepositoryResponse
ÊÊ -
<
ÊÊ- .
List
ÊÊ. 2
<
ÊÊ2 3
TView
ÊÊ3 8
>
ÊÊ8 9
>
ÊÊ9 :
(
ÊÊ: ;
)
ÊÊ; <
{
ÁÁ 
	IsSucceed
ËË 
=
ËË 
true
ËË  $
,
ËË$ %
Data
ÈÈ 
=
ÈÈ 
result
ÈÈ !
}
ÍÍ 
;
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ  
{
ÌÌ 
LogErrorMessage
ÓÓ 
(
ÓÓ  
ex
ÓÓ  "
)
ÓÓ" #
;
ÓÓ# $
if
ÔÔ 
(
ÔÔ 
isRoot
ÔÔ 
)
ÔÔ 
{
 
transaction
ÚÚ 
.
ÚÚ  
Rollback
ÚÚ  (
(
ÚÚ( )
)
ÚÚ) *
;
ÚÚ* +
}
ÛÛ 
return
ıı 
new
ıı  
RepositoryResponse
ıı -
<
ıı- .
List
ıı. 2
<
ıı2 3
TView
ıı3 8
>
ıı8 9
>
ıı9 :
(
ıı: ;
)
ıı; <
{
ˆˆ 
	IsSucceed
˜˜ 
=
˜˜ 
false
˜˜  %
,
˜˜% &
Data
¯¯ 
=
¯¯ 
null
¯¯ 
,
¯¯  
	Exception
˘˘ 
=
˘˘ 
ex
˘˘  "
}
˙˙ 
;
˙˙ 
}
˚˚ 
finally
¸¸ 
{
˝˝ 
if
˛˛ 
(
˛˛ 
isRoot
˛˛ 
)
˛˛ 
{
ˇˇ 
context
ÅÅ 
.
ÅÅ 
Dispose
ÅÅ #
(
ÅÅ# $
)
ÅÅ$ %
;
ÅÅ% &
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
êê 
virtual
êê 
async
êê 
Task
êê !
<
êê! " 
RepositoryResponse
êê" 4
<
êê4 5
PaginationModel
êê5 D
<
êêD E
TView
êêE J
>
êêJ K
>
êêK L
>
êêL M
GetModelListAsync
êêN _
(
êê_ `
string
ëë !
orderByPropertyName
ëë "
,
ëë" #
OrderByDirection
ëë$ 4
	direction
ëë5 >
,
ëë> ?
int
ëë@ C
?
ëëC D
pageSize
ëëE M
,
ëëM N
int
ëëO R
?
ëëR S
	pageIndex
ëëT ]
,
íí 	

TDbContext
íí
 
_context
íí 
=
íí 
null
íí  $
,
íí$ %#
IDbContextTransaction
íí& ;
_transaction
íí< H
=
ííI J
null
ííK O
)
ííO P
{
ìì 	
bool
îî 
isRoot
îî 
=
îî 
_context
îî "
==
îî# %
null
îî& *
;
îî* +
var
ïï 
context
ïï 
=
ïï 
_context
ïï "
??
ïï# %
InitContext
ïï& 1
(
ïï1 2
)
ïï2 3
;
ïï3 4
var
ññ 
transaction
ññ 
=
ññ 
_transaction
ññ *
??
ññ+ -
context
ññ. 5
.
ññ5 6
Database
ññ6 >
.
ññ> ?
BeginTransaction
ññ? O
(
ññO P
)
ññP Q
;
ññQ R
try
òò 
{
ôô 
var
öö 
query
öö 
=
öö 
context
öö #
.
öö# $
Set
öö$ '
<
öö' (
TModel
öö( .
>
öö. /
(
öö/ 0
)
öö0 1
;
öö1 2
var
úú 
result
úú 
=
úú 
await
úú "#
ParsePagingQueryAsync
úú# 8
(
úú8 9
query
úú9 >
,
úú> ?!
orderByPropertyName
úú@ S
,
úúS T
	direction
úúU ^
,
úú^ _
pageSize
úú` h
,
úúh i
	pageIndex
úúj s
,
úús t
context
úúu |
,
úú| }
transactionúú~ â
)úúâ ä
.úúä ã
ConfigureAwaitúúã ô
(úúô ö
falseúúö ü
)úúü †
;úú† °
return
ùù 
new
ùù  
RepositoryResponse
ùù -
<
ùù- .
PaginationModel
ùù. =
<
ùù= >
TView
ùù> C
>
ùùC D
>
ùùD E
(
ùùE F
)
ùùF G
{
ûû 
	IsSucceed
üü 
=
üü 
true
üü  $
,
üü$ %
Data
†† 
=
†† 
result
†† !
}
°° 
;
°° 
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
LogErrorMessage
•• 
(
••  
ex
••  "
)
••" #
;
••# $
if
¶¶ 
(
¶¶ 
isRoot
¶¶ 
)
¶¶ 
{
ßß 
transaction
©© 
.
©©  
Rollback
©©  (
(
©©( )
)
©©) *
;
©©* +
}
™™ 
return
¨¨ 
new
¨¨  
RepositoryResponse
¨¨ -
<
¨¨- .
PaginationModel
¨¨. =
<
¨¨= >
TView
¨¨> C
>
¨¨C D
>
¨¨D E
(
¨¨E F
)
¨¨F G
{
≠≠ 
	IsSucceed
ÆÆ 
=
ÆÆ 
false
ÆÆ  %
,
ÆÆ% &
Data
ØØ 
=
ØØ 
null
ØØ 
,
ØØ  
	Exception
∞∞ 
=
∞∞ 
ex
∞∞  "
}
±± 
;
±± 
}
≤≤ 
finally
≥≥ 
{
¥¥ 
if
µµ 
(
µµ 
isRoot
µµ 
)
µµ 
{
∂∂ 
context
∏∏ 
.
∏∏ 
Dispose
∏∏ #
(
∏∏# $
)
∏∏$ %
;
∏∏% &
}
ππ 
}
∫∫ 
}
ªª 	
public
»» 
virtual
»»  
RepositoryResponse
»» )
<
»») *
List
»»* .
<
»». /
TView
»»/ 4
>
»»4 5
>
»»5 6
GetModelListBy
»»7 E
(
»»E F

Expression
»»F P
<
»»P Q
Func
»»Q U
<
»»U V
TModel
»»V \
,
»»\ ]
bool
»»^ b
>
»»b c
>
»»c d
	predicate
»»e n
,
…… 	

TDbContext
……
 
_context
…… 
=
…… 
null
……  $
,
……$ %#
IDbContextTransaction
……& ;
_transaction
……< H
=
……I J
null
……K O
)
……O P
{
   	
bool
ÀÀ 
isRoot
ÀÀ 
=
ÀÀ 
_context
ÀÀ "
==
ÀÀ# %
null
ÀÀ& *
;
ÀÀ* +
var
ÃÃ 
context
ÃÃ 
=
ÃÃ 
_context
ÃÃ "
??
ÃÃ# %
InitContext
ÃÃ& 1
(
ÃÃ1 2
)
ÃÃ2 3
;
ÃÃ3 4
var
ÕÕ 
transaction
ÕÕ 
=
ÕÕ 
_transaction
ÕÕ *
??
ÕÕ+ -
context
ÕÕ. 5
.
ÕÕ5 6
Database
ÕÕ6 >
.
ÕÕ> ?
BeginTransaction
ÕÕ? O
(
ÕÕO P
)
ÕÕP Q
;
ÕÕQ R
try
œœ 
{
–– 
var
—— 
lstModel
—— 
=
—— 
context
—— &
.
——& '
Set
——' *
<
——* +
TModel
——+ 1
>
——1 2
(
——2 3
)
——3 4
.
——4 5
Where
——5 :
(
——: ;
	predicate
——; D
)
——D E
.
——E F
ToList
——F L
(
——L M
)
——M N
;
——N O
lstModel
““ 
.
““ 
ForEach
““  
(
““  !
model
““! &
=>
““' )
context
““* 1
.
““1 2
Entry
““2 7
(
““7 8
model
““8 =
)
““= >
.
““> ?
State
““? D
=
““E F
EntityState
““G R
.
““R S
Detached
““S [
)
““[ \
;
““\ ]
var
”” 
lstViewResult
”” !
=
””" #
	ParseView
””$ -
(
””- .
lstModel
””. 6
,
””6 7
_context
””8 @
,
””@ A
_transaction
””B N
)
””N O
;
””O P
return
‘‘ 
new
‘‘  
RepositoryResponse
‘‘ -
<
‘‘- .
List
‘‘. 2
<
‘‘2 3
TView
‘‘3 8
>
‘‘8 9
>
‘‘9 :
(
‘‘: ;
)
‘‘; <
{
’’ 
	IsSucceed
÷÷ 
=
÷÷ 
true
÷÷  $
,
÷÷$ %
Data
◊◊ 
=
◊◊ 
lstViewResult
◊◊ (
}
ÿÿ 
;
ÿÿ 
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ 
LogErrorMessage
‹‹ 
(
‹‹  
ex
‹‹  "
)
‹‹" #
;
‹‹# $
if
›› 
(
›› 
isRoot
›› 
)
›› 
{
ﬁﬁ 
transaction
‡‡ 
.
‡‡  
Rollback
‡‡  (
(
‡‡( )
)
‡‡) *
;
‡‡* +
}
·· 
return
„„ 
new
„„  
RepositoryResponse
„„ -
<
„„- .
List
„„. 2
<
„„2 3
TView
„„3 8
>
„„8 9
>
„„9 :
(
„„: ;
)
„„; <
{
‰‰ 
	IsSucceed
ÂÂ 
=
ÂÂ 
false
ÂÂ  %
,
ÂÂ% &
Data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
,
ÊÊ  
	Exception
ÁÁ 
=
ÁÁ 
ex
ÁÁ  "
}
ËË 
;
ËË 
}
ÈÈ 
finally
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
isRoot
ÏÏ 
)
ÏÏ 
{
ÌÌ 
context
ÔÔ 
.
ÔÔ 
Dispose
ÔÔ #
(
ÔÔ# $
)
ÔÔ$ %
;
ÔÔ% &
}
 
}
ÒÒ 
}
ÚÚ 	
public
ˇˇ 
virtual
ˇˇ  
RepositoryResponse
ˇˇ )
<
ˇˇ) *
PaginationModel
ˇˇ* 9
<
ˇˇ9 :
TView
ˇˇ: ?
>
ˇˇ? @
>
ˇˇ@ A
GetModelListBy
ˇˇB P
(
ˇˇP Q

Expression
ÄÄ 
<
ÄÄ 
Func
ÄÄ 
<
ÄÄ 
TModel
ÄÄ 
,
ÄÄ 
bool
ÄÄ  $
>
ÄÄ$ %
>
ÄÄ% &
	predicate
ÄÄ' 0
,
ÄÄ0 1
string
ÄÄ2 8!
orderByPropertyName
ÄÄ9 L
,
ÄÄL M
OrderByDirection
ÄÄN ^
	direction
ÄÄ_ h
,
ÄÄh i
int
ÄÄj m
?
ÄÄm n
pageSize
ÄÄo w
,
ÄÄw x
int
ÄÄy |
?
ÄÄ| }
	pageIndexÄÄ~ á
,
ÅÅ 	

TDbContext
ÅÅ
 
_context
ÅÅ 
=
ÅÅ 
null
ÅÅ  $
,
ÅÅ$ %#
IDbContextTransaction
ÅÅ& ;
_transaction
ÅÅ< H
=
ÅÅI J
null
ÅÅK O
)
ÅÅO P
{
ÇÇ 	
bool
ÉÉ 
isRoot
ÉÉ 
=
ÉÉ 
_context
ÉÉ "
==
ÉÉ# %
null
ÉÉ& *
;
ÉÉ* +
var
ÑÑ 
context
ÑÑ 
=
ÑÑ 
_context
ÑÑ "
??
ÑÑ# %
InitContext
ÑÑ& 1
(
ÑÑ1 2
)
ÑÑ2 3
;
ÑÑ3 4
var
ÖÖ 
transaction
ÖÖ 
=
ÖÖ 
_transaction
ÖÖ *
??
ÖÖ+ -
context
ÖÖ. 5
.
ÖÖ5 6
Database
ÖÖ6 >
.
ÖÖ> ?
BeginTransaction
ÖÖ? O
(
ÖÖO P
)
ÖÖP Q
;
ÖÖQ R
try
áá 
{
àà 
var
ââ 
query
ââ 
=
ââ 
context
ââ #
.
ââ# $
Set
ââ$ '
<
ââ' (
TModel
ââ( .
>
ââ. /
(
ââ/ 0
)
ââ0 1
.
ââ1 2
Where
ââ2 7
(
ââ7 8
	predicate
ââ8 A
)
ââA B
;
ââB C
var
ää 
result
ää 
=
ää 
ParsePagingQuery
ää -
(
ää- .
query
ää. 3
,
ãã !
orderByPropertyName
ãã %
,
ãã% &
	direction
ãã' 0
,
åå 
pageSize
åå 
,
åå 
	pageIndex
åå %
,
çç 
context
çç 
,
çç 
transaction
çç &
)
çç& '
;
çç' (
return
éé 
new
éé  
RepositoryResponse
éé -
<
éé- .
PaginationModel
éé. =
<
éé= >
TView
éé> C
>
ééC D
>
ééD E
(
ééE F
)
ééF G
{
èè 
	IsSucceed
êê 
=
êê 
true
êê  $
,
êê$ %
Data
ëë 
=
ëë 
result
ëë !
}
íí 
;
íí 
}
ìì 
catch
îî 
(
îî 
	Exception
îî 
ex
îî 
)
îî  
{
ïï 
LogErrorMessage
ññ 
(
ññ  
ex
ññ  "
)
ññ" #
;
ññ# $
if
óó 
(
óó 
isRoot
óó 
)
óó 
{
òò 
transaction
öö 
.
öö  
Rollback
öö  (
(
öö( )
)
öö) *
;
öö* +
}
õõ 
return
ùù 
new
ùù  
RepositoryResponse
ùù -
<
ùù- .
PaginationModel
ùù. =
<
ùù= >
TView
ùù> C
>
ùùC D
>
ùùD E
(
ùùE F
)
ùùF G
{
ûû 
	IsSucceed
üü 
=
üü 
false
üü  %
,
üü% &
Data
†† 
=
†† 
null
†† 
,
††  
	Exception
°° 
=
°° 
ex
°°  "
}
¢¢ 
;
¢¢ 
}
££ 
finally
§§ 
{
•• 
if
¶¶ 
(
¶¶ 
isRoot
¶¶ 
)
¶¶ 
{
ßß 
context
©© 
.
©© 
Dispose
©© #
(
©©# $
)
©©$ %
;
©©% &
}
™™ 
}
´´ 
}
¨¨ 	
public
µµ 
virtual
µµ 
async
µµ 
Task
µµ !
<
µµ! " 
RepositoryResponse
µµ" 4
<
µµ4 5
List
µµ5 9
<
µµ9 :
TView
µµ: ?
>
µµ? @
>
µµ@ A
>
µµA B!
GetModelListByAsync
µµC V
(
µµV W

Expression
µµW a
<
µµa b
Func
µµb f
<
µµf g
TModel
µµg m
,
µµm n
bool
µµo s
>
µµs t
>
µµt u
	predicate
µµv 
,
∂∂ 	

TDbContext
∂∂
 
_context
∂∂ 
=
∂∂ 
null
∂∂  $
,
∂∂$ %#
IDbContextTransaction
∂∂& ;
_transaction
∂∂< H
=
∂∂I J
null
∂∂K O
)
∂∂O P
{
∑∑ 	
bool
∏∏ 
isRoot
∏∏ 
=
∏∏ 
_context
∏∏ "
==
∏∏# %
null
∏∏& *
;
∏∏* +
var
ππ 
context
ππ 
=
ππ 
_context
ππ "
??
ππ# %
InitContext
ππ& 1
(
ππ1 2
)
ππ2 3
;
ππ3 4
var
∫∫ 
transaction
∫∫ 
=
∫∫ 
_transaction
∫∫ *
??
∫∫+ -
context
∫∫. 5
.
∫∫5 6
Database
∫∫6 >
.
∫∫> ?
BeginTransaction
∫∫? O
(
∫∫O P
)
∫∫P Q
;
∫∫Q R
try
ºº 
{
ΩΩ 
var
ææ 
query
ææ 
=
ææ 
context
ææ #
.
ææ# $
Set
ææ$ '
<
ææ' (
TModel
ææ( .
>
ææ. /
(
ææ/ 0
)
ææ0 1
.
ææ1 2
Where
ææ2 7
(
ææ7 8
	predicate
ææ8 A
)
ææA B
;
ææB C
var
øø 
lstModel
øø 
=
øø 
await
øø $
query
øø% *
.
øø* +
ToListAsync
øø+ 6
(
øø6 7
)
øø7 8
.
øø8 9
ConfigureAwait
øø9 G
(
øøG H
false
øøH M
)
øøM N
;
øøN O
lstModel
¿¿ 
.
¿¿ 
ForEach
¿¿  
(
¿¿  !
model
¿¿! &
=>
¿¿' )
context
¿¿* 1
.
¿¿1 2
Entry
¿¿2 7
(
¿¿7 8
model
¿¿8 =
)
¿¿= >
.
¿¿> ?
State
¿¿? D
=
¿¿E F
EntityState
¿¿G R
.
¿¿R S
Detached
¿¿S [
)
¿¿[ \
;
¿¿\ ]
var
¡¡ 
result
¡¡ 
=
¡¡ 
	ParseView
¡¡ &
(
¡¡& '
lstModel
¡¡' /
,
¡¡/ 0
_context
¡¡1 9
,
¡¡9 :
_transaction
¡¡; G
)
¡¡G H
;
¡¡H I
return
¬¬ 
new
¬¬  
RepositoryResponse
¬¬ -
<
¬¬- .
List
¬¬. 2
<
¬¬2 3
TView
¬¬3 8
>
¬¬8 9
>
¬¬9 :
(
¬¬: ;
)
¬¬; <
{
√√ 
	IsSucceed
ƒƒ 
=
ƒƒ 
true
ƒƒ  $
,
ƒƒ$ %
Data
≈≈ 
=
≈≈ 
result
≈≈ !
}
∆∆ 
;
∆∆ 
}
«« 
catch
»» 
(
»» 
	Exception
»» 
ex
»» 
)
»»  
{
…… 
LogErrorMessage
   
(
    
ex
    "
)
  " #
;
  # $
if
ÀÀ 
(
ÀÀ 
isRoot
ÀÀ 
)
ÀÀ 
{
ÃÃ 
transaction
ŒŒ 
.
ŒŒ  
Rollback
ŒŒ  (
(
ŒŒ( )
)
ŒŒ) *
;
ŒŒ* +
}
œœ 
return
—— 
new
——  
RepositoryResponse
—— -
<
——- .
List
——. 2
<
——2 3
TView
——3 8
>
——8 9
>
——9 :
(
——: ;
)
——; <
{
““ 
	IsSucceed
”” 
=
”” 
false
””  %
,
””% &
Data
‘‘ 
=
‘‘ 
null
‘‘ 
,
‘‘  
	Exception
’’ 
=
’’ 
ex
’’  "
}
÷÷ 
;
÷÷ 
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
isRoot
⁄⁄ 
)
⁄⁄ 
{
€€ 
context
›› 
.
›› 
Dispose
›› #
(
››# $
)
››$ %
;
››% &
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 	
public
ÌÌ 
virtual
ÌÌ 
async
ÌÌ 
Task
ÌÌ !
<
ÌÌ! " 
RepositoryResponse
ÌÌ" 4
<
ÌÌ4 5
PaginationModel
ÌÌ5 D
<
ÌÌD E
TView
ÌÌE J
>
ÌÌJ K
>
ÌÌK L
>
ÌÌL M!
GetModelListByAsync
ÌÌN a
(
ÌÌa b

Expression
ÓÓ 
<
ÓÓ 
Func
ÓÓ 
<
ÓÓ 
TModel
ÓÓ 
,
ÓÓ 
bool
ÓÓ  $
>
ÓÓ$ %
>
ÓÓ% &
	predicate
ÓÓ' 0
,
ÓÓ0 1
string
ÓÓ2 8!
orderByPropertyName
ÓÓ9 L
,
ÔÔ 	
OrderByDirection
ÔÔ
 
	direction
ÔÔ $
,
ÔÔ$ %
int
ÔÔ& )
?
ÔÔ) *
pageSize
ÔÔ+ 3
,
ÔÔ3 4
int
ÔÔ5 8
?
ÔÔ8 9
	pageIndex
ÔÔ: C
,
 	

TDbContext

 
_context
 
=
 
null
  $
,
$ %#
IDbContextTransaction
& ;
_transaction
< H
=
I J
null
K O
)
O P
{
ÒÒ 	
bool
ÚÚ 
isRoot
ÚÚ 
=
ÚÚ 
_context
ÚÚ "
==
ÚÚ# %
null
ÚÚ& *
;
ÚÚ* +
var
ÛÛ 
context
ÛÛ 
=
ÛÛ 
_context
ÛÛ "
??
ÛÛ# %
InitContext
ÛÛ& 1
(
ÛÛ1 2
)
ÛÛ2 3
;
ÛÛ3 4
var
ÙÙ 
transaction
ÙÙ 
=
ÙÙ 
_transaction
ÙÙ *
??
ÙÙ+ -
context
ÙÙ. 5
.
ÙÙ5 6
Database
ÙÙ6 >
.
ÙÙ> ?
BeginTransaction
ÙÙ? O
(
ÙÙO P
)
ÙÙP Q
;
ÙÙQ R
try
ˆˆ 
{
˜˜ 
var
¯¯ 
query
¯¯ 
=
¯¯ 
context
¯¯ #
.
¯¯# $
Set
¯¯$ '
<
¯¯' (
TModel
¯¯( .
>
¯¯. /
(
¯¯/ 0
)
¯¯0 1
.
¯¯1 2
Where
¯¯2 7
(
¯¯7 8
	predicate
¯¯8 A
)
¯¯A B
;
¯¯B C
var
˙˙ 
result
˙˙ 
=
˙˙ 
await
˙˙ "#
ParsePagingQueryAsync
˙˙# 8
(
˙˙8 9
query
˙˙9 >
,
˚˚ !
orderByPropertyName
˚˚ %
,
˚˚% &
	direction
˚˚' 0
,
¸¸ 
pageSize
¸¸ 
,
¸¸ 
	pageIndex
¸¸ %
,
˝˝ 
context
˝˝ 
,
˝˝ 
transaction
˝˝ &
)
˝˝& '
.
˝˝' (
ConfigureAwait
˝˝( 6
(
˝˝6 7
false
˝˝7 <
)
˝˝< =
;
˝˝= >
return
˛˛ 
new
˛˛  
RepositoryResponse
˛˛ -
<
˛˛- .
PaginationModel
˛˛. =
<
˛˛= >
TView
˛˛> C
>
˛˛C D
>
˛˛D E
(
˛˛E F
)
˛˛F G
{
ˇˇ 
	IsSucceed
Ä	Ä	 
=
Ä	Ä	 
true
Ä	Ä	  $
,
Ä	Ä	$ %
Data
Å	Å	 
=
Å	Å	 
result
Å	Å	 !
}
Ç	Ç	 
;
Ç	Ç	 
}
É	É	 
catch
Ñ	Ñ	 
(
Ñ	Ñ	 
	Exception
Ñ	Ñ	 
ex
Ñ	Ñ	 
)
Ñ	Ñ	  
{
Ö	Ö	 
LogErrorMessage
Ü	Ü	 
(
Ü	Ü	  
ex
Ü	Ü	  "
)
Ü	Ü	" #
;
Ü	Ü	# $
if
á	á	 
(
á	á	 
isRoot
á	á	 
)
á	á	 
{
à	à	 
transaction
ä	ä	 
.
ä	ä	  
Rollback
ä	ä	  (
(
ä	ä	( )
)
ä	ä	) *
;
ä	ä	* +
}
ã	ã	 
return
ç	ç	 
new
ç	ç	  
RepositoryResponse
ç	ç	 -
<
ç	ç	- .
PaginationModel
ç	ç	. =
<
ç	ç	= >
TView
ç	ç	> C
>
ç	ç	C D
>
ç	ç	D E
(
ç	ç	E F
)
ç	ç	F G
{
é	é	 
	IsSucceed
è	è	 
=
è	è	 
false
è	è	  %
,
è	è	% &
Data
ê	ê	 
=
ê	ê	 
null
ê	ê	 
,
ê	ê	  
	Exception
ë	ë	 
=
ë	ë	 
ex
ë	ë	  "
}
í	í	 
;
í	í	 
}
ì	ì	 
finally
î	î	 
{
ï	ï	 
if
ñ	ñ	 
(
ñ	ñ	 
isRoot
ñ	ñ	 
)
ñ	ñ	 
{
ó	ó	 
context
ô	ô	 
.
ô	ô	 
Dispose
ô	ô	 #
(
ô	ô	# $
)
ô	ô	$ %
;
ô	ô	% &
}
ö	ö	 
}
õ	õ	 
}
ú	ú	 	
public
®	®	 
virtual
®	®	  
RepositoryResponse
®	®	 )
<
®	®	) *
bool
®	®	* .
>
®	®	. /
RemoveListModel
®	®	0 ?
(
®	®	? @

Expression
®	®	@ J
<
®	®	J K
Func
®	®	K O
<
®	®	O P
TModel
®	®	P V
,
®	®	V W
bool
®	®	X \
>
®	®	\ ]
>
®	®	] ^
	predicate
®	®	_ h
,
©	©	 	

TDbContext
©	©	
 
_context
©	©	 
=
©	©	 
null
©	©	  $
,
©	©	$ %#
IDbContextTransaction
©	©	& ;
_transaction
©	©	< H
=
©	©	I J
null
©	©	K O
)
©	©	O P
{
™	™	 	
bool
´	´	 
isRoot
´	´	 
=
´	´	 
_context
´	´	 "
==
´	´	# %
null
´	´	& *
;
´	´	* +

TDbContext
¨	¨	 
context
¨	¨	 
=
¨	¨	  
_context
¨	¨	! )
??
¨	¨	* ,
InitContext
¨	¨	- 8
(
¨	¨	8 9
)
¨	¨	9 :
;
¨	¨	: ;
var
≠	≠	 
transaction
≠	≠	 
=
≠	≠	 
_transaction
≠	≠	 *
??
≠	≠	+ -
context
≠	≠	. 5
.
≠	≠	5 6
Database
≠	≠	6 >
.
≠	≠	> ?
BeginTransaction
≠	≠	? O
(
≠	≠	O P
)
≠	≠	P Q
;
≠	≠	Q R
try
Æ	Æ	 
{
Ø	Ø	 
var
∞	∞	 
Items
∞	∞	 
=
∞	∞	 
context
∞	∞	 #
.
∞	∞	# $
Set
∞	∞	$ '
<
∞	∞	' (
TModel
∞	∞	( .
>
∞	∞	. /
(
∞	∞	/ 0
)
∞	∞	0 1
.
∞	∞	1 2
Where
∞	∞	2 7
(
∞	∞	7 8
	predicate
∞	∞	8 A
)
∞	∞	A B
.
∞	∞	B C
ToList
∞	∞	C I
(
∞	∞	I J
)
∞	∞	J K
;
∞	∞	K L
bool
±	±	 
result
±	±	 
=
±	±	 
true
±	±	 "
;
±	±	" #
if
≤	≤	 
(
≤	≤	 
Items
≤	≤	 
!=
≤	≤	 
null
≤	≤	 !
)
≤	≤	! "
{
≥	≥	 
foreach
¥	¥	 
(
¥	¥	 
var
¥	¥	  
model
¥	¥	! &
in
¥	¥	' )
Items
¥	¥	* /
)
¥	¥	/ 0
{
µ	µ	 
if
∂	∂	 
(
∂	∂	 
result
∂	∂	 "
)
∂	∂	" #
{
∑	∑	 
var
∏	∏	 
r
∏	∏	  !
=
∏	∏	" #
RemoveModel
∏	∏	$ /
(
∏	∏	/ 0
model
∏	∏	0 5
,
∏	∏	5 6
context
∏	∏	7 >
,
∏	∏	> ?
transaction
∏	∏	@ K
)
∏	∏	K L
;
∏	∏	L M
result
π	π	 "
=
π	π	# $
result
π	π	% +
&&
π	π	, .
r
π	π	/ 0
.
π	π	0 1
	IsSucceed
π	π	1 :
;
π	π	: ;
}
∫	∫	 
else
ª	ª	 
{
º	º	 
break
Ω	Ω	 !
;
Ω	Ω	! "
}
æ	æ	 
}
ø	ø	 
HandleTransaction
¡	¡	 %
(
¡	¡	% &
result
¡	¡	& ,
,
¡	¡	, -
isRoot
¡	¡	. 4
,
¡	¡	4 5
transaction
¡	¡	6 A
)
¡	¡	A B
;
¡	¡	B C
return
√	√	 
new
√	√	  
RepositoryResponse
√	√	 1
<
√	√	1 2
bool
√	√	2 6
>
√	√	6 7
(
√	√	7 8
)
√	√	8 9
{
ƒ	ƒ	 
	IsSucceed
≈	≈	 !
=
≈	≈	" #
result
≈	≈	$ *
,
≈	≈	* +
Data
∆	∆	 
=
∆	∆	 
result
∆	∆	 %
}
«	«	 
;
«	«	 
}
»	»	 
else
…	…	 
{
 	 	 
return
À	À	 
new
À	À	  
RepositoryResponse
À	À	 1
<
À	À	1 2
bool
À	À	2 6
>
À	À	6 7
(
À	À	7 8
)
À	À	8 9
{
Ã	Ã	 
	IsSucceed
Õ	Õ	 !
=
Õ	Õ	" #
true
Õ	Õ	$ (
,
Õ	Õ	( )
Data
Œ	Œ	 
=
Œ	Œ	 
true
Œ	Œ	 #
}
œ	œ	 
;
œ	œ	 
}
–	–	 
}
—	—	 
catch
“	“	 
(
“	“	 
	Exception
“	“	 
ex
“	“	 
)
“	“	  
{
”	”	 
LogErrorMessage
‘	‘	 
(
‘	‘	  
ex
‘	‘	  "
)
‘	‘	" #
;
‘	‘	# $
if
’	’	 
(
’	’	 
isRoot
’	’	 
)
’	’	 
{
÷	÷	 
transaction
ÿ	ÿ	 
.
ÿ	ÿ	  
Rollback
ÿ	ÿ	  (
(
ÿ	ÿ	( )
)
ÿ	ÿ	) *
;
ÿ	ÿ	* +
}
Ÿ	Ÿ	 
return
€	€	 
new
€	€	  
RepositoryResponse
€	€	 -
<
€	€	- .
bool
€	€	. 2
>
€	€	2 3
(
€	€	3 4
)
€	€	4 5
{
‹	‹	 
	IsSucceed
›	›	 
=
›	›	 
false
›	›	  %
,
›	›	% &
Data
ﬁ	ﬁ	 
=
ﬁ	ﬁ	 
false
ﬁ	ﬁ	  
,
ﬁ	ﬁ	  !
	Exception
ﬂ	ﬂ	 
=
ﬂ	ﬂ	 
ex
ﬂ	ﬂ	  "
}
‡	‡	 
;
‡	‡	 
}
·	·	 
finally
‚	‚	 
{
„	„	 
if
‰	‰	 
(
‰	‰	 
isRoot
‰	‰	 
)
‰	‰	 
{
Â	Â	 
context
Á	Á	 
.
Á	Á	 
Dispose
Á	Á	 #
(
Á	Á	# $
)
Á	Á	$ %
;
Á	Á	% &
}
Ë	Ë	 
}
È	È	 
}
Í	Í	 	
public
Ù	Ù	 
virtual
Ù	Ù	 
async
Ù	Ù	 
Task
Ù	Ù	 !
<
Ù	Ù	! " 
RepositoryResponse
Ù	Ù	" 4
<
Ù	Ù	4 5
bool
Ù	Ù	5 9
>
Ù	Ù	9 :
>
Ù	Ù	: ;"
RemoveListModelAsync
Ù	Ù	< P
(
Ù	Ù	P Q

Expression
Ù	Ù	Q [
<
Ù	Ù	[ \
Func
Ù	Ù	\ `
<
Ù	Ù	` a
TModel
Ù	Ù	a g
,
Ù	Ù	g h
bool
Ù	Ù	i m
>
Ù	Ù	m n
>
Ù	Ù	n o
	predicate
Ù	Ù	p y
,
ı	ı	 	

TDbContext
ı	ı	
 
_context
ı	ı	 
=
ı	ı	 
null
ı	ı	  $
,
ı	ı	$ %#
IDbContextTransaction
ı	ı	& ;
_transaction
ı	ı	< H
=
ı	ı	I J
null
ı	ı	K O
)
ı	ı	O P
{
ˆ	ˆ	 	
bool
˜	˜	 
isRoot
˜	˜	 
=
˜	˜	 
_context
˜	˜	 "
==
˜	˜	# %
null
˜	˜	& *
;
˜	˜	* +

TDbContext
¯	¯	 
context
¯	¯	 
=
¯	¯	  
_context
¯	¯	! )
??
¯	¯	* ,
InitContext
¯	¯	- 8
(
¯	¯	8 9
)
¯	¯	9 :
;
¯	¯	: ;
var
˘	˘	 
transaction
˘	˘	 
=
˘	˘	 
_transaction
˘	˘	 *
??
˘	˘	+ -
context
˘	˘	. 5
.
˘	˘	5 6
Database
˘	˘	6 >
.
˘	˘	> ?
BeginTransaction
˘	˘	? O
(
˘	˘	O P
)
˘	˘	P Q
;
˘	˘	Q R
try
˙	˙	 
{
˚	˚	 
var
¸	¸	 
Items
¸	¸	 
=
¸	¸	 
await
¸	¸	 !
context
¸	¸	" )
.
¸	¸	) *
Set
¸	¸	* -
<
¸	¸	- .
TModel
¸	¸	. 4
>
¸	¸	4 5
(
¸	¸	5 6
)
¸	¸	6 7
.
¸	¸	7 8
Where
¸	¸	8 =
(
¸	¸	= >
	predicate
¸	¸	> G
)
¸	¸	G H
.
¸	¸	H I
ToListAsync
¸	¸	I T
(
¸	¸	T U
)
¸	¸	U V
.
¸	¸	V W
ConfigureAwait
¸	¸	W e
(
¸	¸	e f
false
¸	¸	f k
)
¸	¸	k l
;
¸	¸	l m
bool
˝	˝	 
result
˝	˝	 
=
˝	˝	 
true
˝	˝	 "
;
˝	˝	" #
if
˛	˛	 
(
˛	˛	 
Items
˛	˛	 
!=
˛	˛	 
null
˛	˛	 !
)
˛	˛	! "
{
ˇ	ˇ	 
foreach
Ä
Ä
 
(
Ä
Ä
 
var
Ä
Ä
  
model
Ä
Ä
! &
in
Ä
Ä
' )
Items
Ä
Ä
* /
)
Ä
Ä
/ 0
{
Å
Å
 
if
Ç
Ç
 
(
Ç
Ç
 
result
Ç
Ç
 "
)
Ç
Ç
" #
{
É
É
 
var
Ñ
Ñ
 
r
Ñ
Ñ
  !
=
Ñ
Ñ
" #
await
Ñ
Ñ
$ )
RemoveModelAsync
Ñ
Ñ
* :
(
Ñ
Ñ
: ;
model
Ñ
Ñ
; @
,
Ñ
Ñ
@ A
context
Ñ
Ñ
B I
,
Ñ
Ñ
I J
transaction
Ñ
Ñ
K V
)
Ñ
Ñ
V W
.
Ñ
Ñ
W X
ConfigureAwait
Ñ
Ñ
X f
(
Ñ
Ñ
f g
false
Ñ
Ñ
g l
)
Ñ
Ñ
l m
;
Ñ
Ñ
m n
result
Ö
Ö
 "
=
Ö
Ö
# $
result
Ö
Ö
% +
&&
Ö
Ö
, .
r
Ö
Ö
/ 0
.
Ö
Ö
0 1
	IsSucceed
Ö
Ö
1 :
;
Ö
Ö
: ;
}
Ü
Ü
 
else
á
á
 
{
à
à
 
break
â
â
 !
;
â
â
! "
}
ä
ä
 
}
ã
ã
 
HandleTransaction
ç
ç
 %
(
ç
ç
% &
result
ç
ç
& ,
,
ç
ç
, -
isRoot
ç
ç
. 4
,
ç
ç
4 5
transaction
ç
ç
6 A
)
ç
ç
A B
;
ç
ç
B C
return
è
è
 
new
è
è
  
RepositoryResponse
è
è
 1
<
è
è
1 2
bool
è
è
2 6
>
è
è
6 7
(
è
è
7 8
)
è
è
8 9
{
ê
ê
 
	IsSucceed
ë
ë
 !
=
ë
ë
" #
result
ë
ë
$ *
,
ë
ë
* +
Data
í
í
 
=
í
í
 
result
í
í
 %
}
ì
ì
 
;
ì
ì
 
}
î
î
 
else
ï
ï
 
{
ñ
ñ
 
return
ó
ó
 
new
ó
ó
  
RepositoryResponse
ó
ó
 1
<
ó
ó
1 2
bool
ó
ó
2 6
>
ó
ó
6 7
(
ó
ó
7 8
)
ó
ó
8 9
{
ò
ò
 
	IsSucceed
ô
ô
 !
=
ô
ô
" #
true
ô
ô
$ (
,
ô
ô
( )
Data
ö
ö
 
=
ö
ö
 
true
ö
ö
 #
}
õ
õ
 
;
õ
õ
 
}
ú
ú
 
}
ù
ù
 
catch
û
û
 
(
û
û
 
	Exception
û
û
 
ex
û
û
 
)
û
û
  
{
ü
ü
 
LogErrorMessage
†
†
 
(
†
†
  
ex
†
†
  "
)
†
†
" #
;
†
†
# $
if
°
°
 
(
°
°
 
isRoot
°
°
 
)
°
°
 
{
¢
¢
 
transaction
§
§
 
.
§
§
  
Rollback
§
§
  (
(
§
§
( )
)
§
§
) *
;
§
§
* +
}
•
•
 
return
ß
ß
 
new
ß
ß
  
RepositoryResponse
ß
ß
 -
<
ß
ß
- .
bool
ß
ß
. 2
>
ß
ß
2 3
(
ß
ß
3 4
)
ß
ß
4 5
{
®
®
 
	IsSucceed
©
©
 
=
©
©
 
false
©
©
  %
,
©
©
% &
Data
™
™
 
=
™
™
 
false
™
™
  
,
™
™
  !
	Exception
´
´
 
=
´
´
 
ex
´
´
  "
}
¨
¨
 
;
¨
¨
 
}
≠
≠
 
finally
Æ
Æ
 
{
Ø
Ø
 
if
∞
∞
 
(
∞
∞
 
isRoot
∞
∞
 
)
∞
∞
 
{
±
±
 
context
≥
≥
 
.
≥
≥
 
Dispose
≥
≥
 #
(
≥
≥
# $
)
≥
≥
$ %
;
≥
≥
% &
}
¥
¥
 
}
µ
µ
 
}
∂
∂
 	
public
¿
¿
 
virtual
¿
¿
  
RepositoryResponse
¿
¿
 )
<
¿
¿
) *
bool
¿
¿
* .
>
¿
¿
. /
RemoveModel
¿
¿
0 ;
(
¿
¿
; <

Expression
¿
¿
< F
<
¿
¿
F G
Func
¿
¿
G K
<
¿
¿
K L
TModel
¿
¿
L R
,
¿
¿
R S
bool
¿
¿
T X
>
¿
¿
X Y
>
¿
¿
Y Z
	predicate
¿
¿
[ d
,
¿
¿
d e

TDbContext
¿
¿
f p
_context
¿
¿
q y
=
¿
¿
z {
null¿
¿
| Ä
,¿
¿
Ä Å%
IDbContextTransaction¿
¿
Ç ó
_transaction¿
¿
ò §
=¿
¿
• ¶
null¿
¿
ß ´
)¿
¿
´ ¨
{
¡
¡
 	
bool
¬
¬
 
isRoot
¬
¬
 
=
¬
¬
 
_context
¬
¬
 "
==
¬
¬
# %
null
¬
¬
& *
;
¬
¬
* +

TDbContext
√
√
 
context
√
√
 
=
√
√
  
_context
√
√
! )
??
√
√
* ,
InitContext
√
√
- 8
(
√
√
8 9
)
√
√
9 :
;
√
√
: ;
var
ƒ
ƒ
 
transaction
ƒ
ƒ
 
=
ƒ
ƒ
 
_transaction
ƒ
ƒ
 *
??
ƒ
ƒ
+ -
context
ƒ
ƒ
. 5
.
ƒ
ƒ
5 6
Database
ƒ
ƒ
6 >
.
ƒ
ƒ
> ?
BeginTransaction
ƒ
ƒ
? O
(
ƒ
ƒ
O P
)
ƒ
ƒ
P Q
;
ƒ
ƒ
Q R
try
≈
≈
 
{
∆
∆
 
TModel
«
«
 
model
«
«
 
=
«
«
 
context
«
«
 &
.
«
«
& '
Set
«
«
' *
<
«
«
* +
TModel
«
«
+ 1
>
«
«
1 2
(
«
«
2 3
)
«
«
3 4
.
«
«
4 5
FirstOrDefault
«
«
5 C
(
«
«
C D
	predicate
«
«
D M
)
«
«
M N
;
«
«
N O
bool
»
»
 
result
»
»
 
=
»
»
 
true
»
»
 "
;
»
»
" #
if
…
…
 
(
…
…
 
model
…
…
 
!=
…
…
 
null
…
…
 !
&&
…
…
" $
CheckIsExists
…
…
% 2
(
…
…
2 3
model
…
…
3 8
,
…
…
8 9
context
…
…
: A
,
…
…
A B
transaction
…
…
C N
)
…
…
N O
)
…
…
O P
{
 
 
 
context
À
À
 
.
À
À
 
Entry
À
À
 !
(
À
À
! "
model
À
À
" '
)
À
À
' (
.
À
À
( )
State
À
À
) .
=
À
À
/ 0
EntityState
À
À
1 <
.
À
À
< =
Deleted
À
À
= D
;
À
À
D E
result
Ã
Ã
 
=
Ã
Ã
 
context
Ã
Ã
 $
.
Ã
Ã
$ %
SaveChanges
Ã
Ã
% 0
(
Ã
Ã
0 1
)
Ã
Ã
1 2
>
Ã
Ã
3 4
$num
Ã
Ã
5 6
;
Ã
Ã
6 7
}
Õ
Õ
 
HandleTransaction
œ
œ
 !
(
œ
œ
! "
result
œ
œ
" (
,
œ
œ
( )
isRoot
œ
œ
* 0
,
œ
œ
0 1
transaction
œ
œ
2 =
)
œ
œ
= >
;
œ
œ
> ?
return
—
—
 
new
—
—
  
RepositoryResponse
—
—
 -
<
—
—
- .
bool
—
—
. 2
>
—
—
2 3
(
—
—
3 4
)
—
—
4 5
{
“
“
 
	IsSucceed
”
”
 
=
”
”
 
result
”
”
  &
,
”
”
& '
Data
‘
‘
 
=
‘
‘
 
result
‘
‘
 !
}
’
’
 
;
’
’
 
}
÷
÷
 
catch
◊
◊
 
(
◊
◊
 
	Exception
◊
◊
 
ex
◊
◊
 
)
◊
◊
  
{
ÿ
ÿ
 
LogErrorMessage
Ÿ
Ÿ
 
(
Ÿ
Ÿ
  
ex
Ÿ
Ÿ
  "
)
Ÿ
Ÿ
" #
;
Ÿ
Ÿ
# $
if
⁄
⁄
 
(
⁄
⁄
 
isRoot
⁄
⁄
 
)
⁄
⁄
 
{
€
€
 
transaction
›
›
 
.
›
›
  
Rollback
›
›
  (
(
›
›
( )
)
›
›
) *
;
›
›
* +
}
ﬁ
ﬁ
 
return
‡
‡
 
new
‡
‡
  
RepositoryResponse
‡
‡
 -
<
‡
‡
- .
bool
‡
‡
. 2
>
‡
‡
2 3
(
‡
‡
3 4
)
‡
‡
4 5
{
·
·
 
	IsSucceed
‚
‚
 
=
‚
‚
 
false
‚
‚
  %
,
‚
‚
% &
Data
„
„
 
=
„
„
 
false
„
„
  
,
„
„
  !
	Exception
‰
‰
 
=
‰
‰
 
ex
‰
‰
  "
}
Â
Â
 
;
Â
Â
 
}
Ê
Ê
 
finally
Á
Á
 
{
Ë
Ë
 
if
È
È
 
(
È
È
 
isRoot
È
È
 
)
È
È
 
{
Í
Í
 
context
Ï
Ï
 
.
Ï
Ï
 
Dispose
Ï
Ï
 #
(
Ï
Ï
# $
)
Ï
Ï
$ %
;
Ï
Ï
% &
}
Ì
Ì
 
}
Ó
Ó
 
}
Ô
Ô
 	
public
˘
˘
 
virtual
˘
˘
  
RepositoryResponse
˘
˘
 )
<
˘
˘
) *
bool
˘
˘
* .
>
˘
˘
. /
RemoveModel
˘
˘
0 ;
(
˘
˘
; <
TModel
˘
˘
< B
model
˘
˘
C H
,
˘
˘
H I

TDbContext
˘
˘
J T
_context
˘
˘
U ]
=
˘
˘
^ _
null
˘
˘
` d
,
˘
˘
d e#
IDbContextTransaction
˘
˘
f {
_transaction˘
˘
| à
=˘
˘
â ä
null˘
˘
ã è
)˘
˘
è ê
{
˙
˙
 	
bool
˚
˚
 
isRoot
˚
˚
 
=
˚
˚
 
_context
˚
˚
 "
==
˚
˚
# %
null
˚
˚
& *
;
˚
˚
* +

TDbContext
¸
¸
 
context
¸
¸
 
=
¸
¸
  
_context
¸
¸
! )
??
¸
¸
* ,
InitContext
¸
¸
- 8
(
¸
¸
8 9
)
¸
¸
9 :
;
¸
¸
: ;
var
˝
˝
 
transaction
˝
˝
 
=
˝
˝
 
_transaction
˝
˝
 *
??
˝
˝
+ -
context
˝
˝
. 5
.
˝
˝
5 6
Database
˝
˝
6 >
.
˝
˝
> ?
BeginTransaction
˝
˝
? O
(
˝
˝
O P
)
˝
˝
P Q
;
˝
˝
Q R
try
˛
˛
 
{
ˇ
ˇ
 
bool
ÄÄ 
result
ÄÄ 
=
ÄÄ 
true
ÄÄ "
;
ÄÄ" #
if
ÅÅ 
(
ÅÅ 
model
ÅÅ 
!=
ÅÅ 
null
ÅÅ !
&&
ÅÅ" $
CheckIsExists
ÅÅ% 2
(
ÅÅ2 3
model
ÅÅ3 8
,
ÅÅ8 9
context
ÅÅ: A
,
ÅÅA B
transaction
ÅÅC N
)
ÅÅN O
)
ÅÅO P
{
ÇÇ 
context
ÉÉ 
.
ÉÉ 
Entry
ÉÉ !
(
ÉÉ! "
model
ÉÉ" '
)
ÉÉ' (
.
ÉÉ( )
State
ÉÉ) .
=
ÉÉ/ 0
EntityState
ÉÉ1 <
.
ÉÉ< =
Deleted
ÉÉ= D
;
ÉÉD E
result
ÑÑ 
=
ÑÑ 
context
ÑÑ $
.
ÑÑ$ %
SaveChanges
ÑÑ% 0
(
ÑÑ0 1
)
ÑÑ1 2
>
ÑÑ3 4
$num
ÑÑ5 6
;
ÑÑ6 7
}
ÖÖ 
HandleTransaction
áá !
(
áá! "
result
áá" (
,
áá( )
isRoot
áá* 0
,
áá0 1
transaction
áá2 =
)
áá= >
;
áá> ?
return
ââ 
new
ââ  
RepositoryResponse
ââ -
<
ââ- .
bool
ââ. 2
>
ââ2 3
(
ââ3 4
)
ââ4 5
{
ää 
	IsSucceed
ãã 
=
ãã 
result
ãã  &
,
ãã& '
Data
åå 
=
åå 
result
åå !
}
çç 
;
çç 
}
éé 
catch
èè 
(
èè 
	Exception
èè 
ex
èè 
)
èè  
{
êê 
LogErrorMessage
ëë 
(
ëë  
ex
ëë  "
)
ëë" #
;
ëë# $
if
íí 
(
íí 
isRoot
íí 
)
íí 
{
ìì 
transaction
ïï 
.
ïï  
Rollback
ïï  (
(
ïï( )
)
ïï) *
;
ïï* +
}
ññ 
return
òò 
new
òò  
RepositoryResponse
òò -
<
òò- .
bool
òò. 2
>
òò2 3
(
òò3 4
)
òò4 5
{
ôô 
	IsSucceed
öö 
=
öö 
false
öö  %
,
öö% &
Data
õõ 
=
õõ 
false
õõ  
,
õõ  !
	Exception
úú 
=
úú 
ex
úú  "
}
ùù 
;
ùù 
}
ûû 
finally
üü 
{
†† 
if
°° 
(
°° 
isRoot
°° 
)
°° 
{
¢¢ 
context
§§ 
.
§§ 
Dispose
§§ #
(
§§# $
)
§§$ %
;
§§% &
}
•• 
}
¶¶ 
}
ßß 	
public
±± 
virtual
±± 
async
±± 
Task
±± !
<
±±! " 
RepositoryResponse
±±" 4
<
±±4 5
bool
±±5 9
>
±±9 :
>
±±: ;
RemoveModelAsync
±±< L
(
±±L M

Expression
±±M W
<
±±W X
Func
±±X \
<
±±\ ]
TModel
±±] c
,
±±c d
bool
±±e i
>
±±i j
>
±±j k
	predicate
±±l u
,
±±u v

TDbContext±±w Å
_context±±Ç ä
=±±ã å
null±±ç ë
,±±ë í%
IDbContextTransaction±±ì ®
_transaction±±© µ
=±±∂ ∑
null±±∏ º
)±±º Ω
{
≤≤ 	
bool
≥≥ 
isRoot
≥≥ 
=
≥≥ 
_context
≥≥ "
==
≥≥# %
null
≥≥& *
;
≥≥* +

TDbContext
¥¥ 
context
¥¥ 
=
¥¥  
_context
¥¥! )
??
¥¥* ,
InitContext
¥¥- 8
(
¥¥8 9
)
¥¥9 :
;
¥¥: ;
var
µµ 
transaction
µµ 
=
µµ 
_transaction
µµ *
??
µµ+ -
context
µµ. 5
.
µµ5 6
Database
µµ6 >
.
µµ> ?
BeginTransaction
µµ? O
(
µµO P
)
µµP Q
;
µµQ R
try
∂∂ 
{
∑∑ 
TModel
∏∏ 
model
∏∏ 
=
∏∏ 
await
∏∏ $
context
∏∏% ,
.
∏∏, -
Set
∏∏- 0
<
∏∏0 1
TModel
∏∏1 7
>
∏∏7 8
(
∏∏8 9
)
∏∏9 :
.
∏∏: ;!
FirstOrDefaultAsync
∏∏; N
(
∏∏N O
	predicate
∏∏O X
)
∏∏X Y
.
∏∏Y Z
ConfigureAwait
∏∏Z h
(
∏∏h i
false
∏∏i n
)
∏∏n o
;
∏∏o p
bool
ππ 
result
ππ 
=
ππ 
true
ππ "
;
ππ" #
if
∫∫ 
(
∫∫ 
model
∫∫ 
!=
∫∫ 
null
∫∫ !
&&
∫∫" $
CheckIsExists
∫∫% 2
(
∫∫2 3
model
∫∫3 8
,
∫∫8 9
context
∫∫: A
,
∫∫A B
transaction
∫∫C N
)
∫∫N O
)
∫∫O P
{
ªª 
context
ºº 
.
ºº 
Entry
ºº !
(
ºº! "
model
ºº" '
)
ºº' (
.
ºº( )
State
ºº) .
=
ºº/ 0
EntityState
ºº1 <
.
ºº< =
Deleted
ºº= D
;
ººD E
result
ΩΩ 
=
ΩΩ 
await
ΩΩ "
context
ΩΩ# *
.
ΩΩ* +
SaveChangesAsync
ΩΩ+ ;
(
ΩΩ; <
)
ΩΩ< =
.
ΩΩ= >
ConfigureAwait
ΩΩ> L
(
ΩΩL M
false
ΩΩM R
)
ΩΩR S
>
ΩΩT U
$num
ΩΩV W
;
ΩΩW X
}
ææ 
HandleTransaction
¿¿ !
(
¿¿! "
result
¿¿" (
,
¿¿( )
isRoot
¿¿* 0
,
¿¿0 1
transaction
¿¿2 =
)
¿¿= >
;
¿¿> ?
return
¬¬ 
new
¬¬  
RepositoryResponse
¬¬ -
<
¬¬- .
bool
¬¬. 2
>
¬¬2 3
(
¬¬3 4
)
¬¬4 5
{
√√ 
	IsSucceed
ƒƒ 
=
ƒƒ 
result
ƒƒ  &
,
ƒƒ& '
Data
≈≈ 
=
≈≈ 
result
≈≈ !
}
∆∆ 
;
∆∆ 
}
«« 
catch
»» 
(
»» 
	Exception
»» 
ex
»» 
)
»»  
{
…… 
LogErrorMessage
   
(
    
ex
    "
)
  " #
;
  # $
if
ÀÀ 
(
ÀÀ 
isRoot
ÀÀ 
)
ÀÀ 
{
ÃÃ 
transaction
ŒŒ 
.
ŒŒ  
Rollback
ŒŒ  (
(
ŒŒ( )
)
ŒŒ) *
;
ŒŒ* +
}
œœ 
return
—— 
new
——  
RepositoryResponse
—— -
<
——- .
bool
——. 2
>
——2 3
(
——3 4
)
——4 5
{
““ 
	IsSucceed
”” 
=
”” 
false
””  %
,
””% &
Data
‘‘ 
=
‘‘ 
false
‘‘  
,
‘‘  !
	Exception
’’ 
=
’’ 
ex
’’  "
}
÷÷ 
;
÷÷ 
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
isRoot
⁄⁄ 
)
⁄⁄ 
{
€€ 
context
›› 
.
›› 
Dispose
›› #
(
››# $
)
››$ %
;
››% &
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 	
public
ÍÍ 
virtual
ÍÍ 
async
ÍÍ 
Task
ÍÍ !
<
ÍÍ! " 
RepositoryResponse
ÍÍ" 4
<
ÍÍ4 5
bool
ÍÍ5 9
>
ÍÍ9 :
>
ÍÍ: ;
RemoveModelAsync
ÍÍ< L
(
ÍÍL M
TModel
ÍÍM S
model
ÍÍT Y
,
ÍÍY Z

TDbContext
ÍÍ[ e
_context
ÍÍf n
=
ÍÍo p
null
ÍÍq u
,
ÍÍu v$
IDbContextTransactionÍÍw å
_transactionÍÍç ô
=ÍÍö õ
nullÍÍú †
)ÍÍ† °
{
ÎÎ 	
bool
ÏÏ 
isRoot
ÏÏ 
=
ÏÏ 
_context
ÏÏ "
==
ÏÏ# %
null
ÏÏ& *
;
ÏÏ* +

TDbContext
ÌÌ 
context
ÌÌ 
=
ÌÌ  
_context
ÌÌ! )
??
ÌÌ* ,
InitContext
ÌÌ- 8
(
ÌÌ8 9
)
ÌÌ9 :
;
ÌÌ: ;
var
ÓÓ 
transaction
ÓÓ 
=
ÓÓ 
_transaction
ÓÓ *
??
ÓÓ+ -
context
ÓÓ. 5
.
ÓÓ5 6
Database
ÓÓ6 >
.
ÓÓ> ?
BeginTransaction
ÓÓ? O
(
ÓÓO P
)
ÓÓP Q
;
ÓÓQ R
try
ÔÔ 
{
 
bool
ÒÒ 
result
ÒÒ 
=
ÒÒ 
true
ÒÒ "
;
ÒÒ" #
if
ÚÚ 
(
ÚÚ 
model
ÚÚ 
!=
ÚÚ 
null
ÚÚ !
&&
ÚÚ" $
CheckIsExists
ÚÚ% 2
(
ÚÚ2 3
model
ÚÚ3 8
,
ÚÚ8 9
context
ÚÚ: A
,
ÚÚA B
transaction
ÚÚC N
)
ÚÚN O
)
ÚÚO P
{
ÛÛ 
context
ÙÙ 
.
ÙÙ 
Entry
ÙÙ !
(
ÙÙ! "
model
ÙÙ" '
)
ÙÙ' (
.
ÙÙ( )
State
ÙÙ) .
=
ÙÙ/ 0
EntityState
ÙÙ1 <
.
ÙÙ< =
Deleted
ÙÙ= D
;
ÙÙD E
result
ıı 
=
ıı 
await
ıı "
context
ıı# *
.
ıı* +
SaveChangesAsync
ıı+ ;
(
ıı; <
)
ıı< =
.
ıı= >
ConfigureAwait
ıı> L
(
ııL M
false
ııM R
)
ııR S
>
ııT U
$num
ııV W
;
ııW X
}
ˆˆ 
HandleTransaction
¯¯ !
(
¯¯! "
result
¯¯" (
,
¯¯( )
isRoot
¯¯* 0
,
¯¯0 1
transaction
¯¯2 =
)
¯¯= >
;
¯¯> ?
return
˙˙ 
new
˙˙  
RepositoryResponse
˙˙ -
<
˙˙- .
bool
˙˙. 2
>
˙˙2 3
(
˙˙3 4
)
˙˙4 5
{
˚˚ 
	IsSucceed
¸¸ 
=
¸¸ 
result
¸¸  &
,
¸¸& '
Data
˝˝ 
=
˝˝ 
result
˝˝ !
}
˛˛ 
;
˛˛ 
}
ˇˇ 
catch
ÄÄ 
(
ÄÄ 
	Exception
ÄÄ 
ex
ÄÄ 
)
ÄÄ  
{
ÅÅ 
LogErrorMessage
ÇÇ 
(
ÇÇ  
ex
ÇÇ  "
)
ÇÇ" #
;
ÇÇ# $
if
ÉÉ 
(
ÉÉ 
isRoot
ÉÉ 
)
ÉÉ 
{
ÑÑ 
transaction
ÜÜ 
.
ÜÜ  
Rollback
ÜÜ  (
(
ÜÜ( )
)
ÜÜ) *
;
ÜÜ* +
}
áá 
return
ââ 
new
ââ  
RepositoryResponse
ââ -
<
ââ- .
bool
ââ. 2
>
ââ2 3
(
ââ3 4
)
ââ4 5
{
ää 
	IsSucceed
ãã 
=
ãã 
false
ãã  %
,
ãã% &
Data
åå 
=
åå 
false
åå  
,
åå  !
	Exception
çç 
=
çç 
ex
çç  "
}
éé 
;
éé 
}
èè 
finally
êê 
{
ëë 
if
íí 
(
íí 
isRoot
íí 
)
íí 
{
ìì 
context
ïï 
.
ïï 
Dispose
ïï #
(
ïï# $
)
ïï$ %
;
ïï% &
}
ññ 
}
óó 
}
òò 	
public
¢¢ 
virtual
¢¢  
RepositoryResponse
¢¢ )
<
¢¢) *
TView
¢¢* /
>
¢¢/ 0
	SaveModel
¢¢1 :
(
¢¢: ;
TView
¢¢; @
view
¢¢A E
,
¢¢E F
bool
¢¢G K
isSaveSubModels
¢¢L [
=
¢¢\ ]
false
¢¢^ c
,
££ 	

TDbContext
££
 
_context
££ 
=
££ 
null
££  $
,
££$ %#
IDbContextTransaction
££& ;
_transaction
££< H
=
££I J
null
££K O
)
££O P
{
§§ 	
if
•• 
(
•• 
CheckIsExists
•• 
(
•• 
view
•• "
.
••" #
Model
••# (
,
••( )
_context
••* 2
,
••2 3
_transaction
••4 @
)
••@ A
)
••A B
{
¶¶ 
return
ßß 
	EditModel
ßß  
(
ßß  !
view
ßß! %
,
ßß% &
_context
ßß' /
,
ßß/ 0
_transaction
ßß1 =
)
ßß= >
;
ßß> ?
}
®® 
else
©© 
{
™™ 
return
´´ 
CreateModel
´´ "
(
´´" #
view
´´# '
,
´´' (
_context
´´) 1
,
´´1 2
_transaction
´´3 ?
)
´´? @
;
´´@ A
}
¨¨ 
}
≠≠ 	
public
∑∑ 
virtual
∑∑ 
Task
∑∑ 
<
∑∑  
RepositoryResponse
∑∑ .
<
∑∑. /
TView
∑∑/ 4
>
∑∑4 5
>
∑∑5 6
SaveModelAsync
∑∑7 E
(
∑∑E F
TView
∑∑F K
view
∑∑L P
,
∑∑P Q
bool
∑∑R V
isSaveSubModels
∑∑W f
=
∑∑g h
false
∑∑i n
,
∏∏ 	

TDbContext
∏∏
 
_context
∏∏ 
=
∏∏ 
null
∏∏  $
,
∏∏$ %#
IDbContextTransaction
∏∏& ;
_transaction
∏∏< H
=
∏∏I J
null
∏∏K O
)
∏∏O P
{
ππ 	
if
∫∫ 
(
∫∫ 
CheckIsExists
∫∫ 
(
∫∫ 
view
∫∫ "
.
∫∫" #
Model
∫∫# (
,
∫∫( )
_context
∫∫* 2
,
∫∫2 3
_transaction
∫∫4 @
)
∫∫@ A
)
∫∫A B
{
ªª 
return
ºº 
EditModelAsync
ºº %
(
ºº% &
view
ºº& *
,
ºº* +
_context
ºº, 4
,
ºº4 5
_transaction
ºº6 B
)
ººB C
;
ººC D
}
ΩΩ 
else
ææ 
{
øø 
return
¿¿ 
CreateModelAsync
¿¿ '
(
¿¿' (
view
¿¿( ,
,
¿¿, -
_context
¿¿. 6
,
¿¿6 7
_transaction
¿¿8 D
)
¿¿D E
;
¿¿E F
}
¡¡ 
}
¬¬ 	
public
ÃÃ 
virtual
ÃÃ 
Task
ÃÃ 
<
ÃÃ 
bool
ÃÃ  
>
ÃÃ  !
SaveSubModelAsync
ÃÃ" 3
(
ÃÃ3 4
TModel
ÃÃ4 :
model
ÃÃ; @
,
ÃÃ@ A

TDbContext
ÃÃB L
context
ÃÃM T
,
ÃÃT U#
IDbContextTransaction
ÃÃV k
_transaction
ÃÃl x
)
ÃÃx y
{
ÕÕ 	
throw
ŒŒ 
new
ŒŒ %
NotImplementedException
ŒŒ -
(
ŒŒ- .
)
ŒŒ. /
;
ŒŒ/ 0
}
œœ 	
public
⁄⁄ 
virtual
⁄⁄  
RepositoryResponse
⁄⁄ )
<
⁄⁄) *
int
⁄⁄* -
>
⁄⁄- .
Max
⁄⁄/ 2
(
⁄⁄2 3

Expression
⁄⁄3 =
<
⁄⁄= >
Func
⁄⁄> B
<
⁄⁄B C
TModel
⁄⁄C I
,
⁄⁄I J
int
⁄⁄K N
>
⁄⁄N O
>
⁄⁄O P
	predicate
⁄⁄Q Z
,
€€ 	

TDbContext
€€
 
_context
€€ 
=
€€ 
null
€€  $
,
€€$ %#
IDbContextTransaction
€€& ;
_transaction
€€< H
=
€€I J
null
€€K O
)
€€O P
{
‹‹ 	
bool
›› 
isRoot
›› 
=
›› 
_context
›› "
==
››# %
null
››& *
;
››* +
var
ﬁﬁ 
context
ﬁﬁ 
=
ﬁﬁ 
_context
ﬁﬁ "
??
ﬁﬁ# %
InitContext
ﬁﬁ& 1
(
ﬁﬁ1 2
)
ﬁﬁ2 3
;
ﬁﬁ3 4
var
ﬂﬂ 
transaction
ﬂﬂ 
=
ﬂﬂ 
_transaction
ﬂﬂ *
??
ﬂﬂ+ -
context
ﬂﬂ. 5
.
ﬂﬂ5 6
Database
ﬂﬂ6 >
.
ﬂﬂ> ?
BeginTransaction
ﬂﬂ? O
(
ﬂﬂO P
)
ﬂﬂP Q
;
ﬂﬂQ R
int
‡‡ 
total
‡‡ 
=
‡‡ 
$num
‡‡ 
;
‡‡ 
try
·· 
{
‚‚ 
total
„„ 
=
„„ 
context
„„ 
.
„„  
Set
„„  #
<
„„# $
TModel
„„$ *
>
„„* +
(
„„+ ,
)
„„, -
.
„„- .
Max
„„. 1
(
„„1 2
	predicate
„„2 ;
)
„„; <
;
„„< =
return
‰‰ 
new
‰‰  
RepositoryResponse
‰‰ -
<
‰‰- .
int
‰‰. 1
>
‰‰1 2
(
‰‰2 3
)
‰‰3 4
{
ÂÂ 
	IsSucceed
ÊÊ 
=
ÊÊ 
true
ÊÊ  $
,
ÊÊ$ %
Data
ÁÁ 
=
ÁÁ 
total
ÁÁ  
}
ËË 
;
ËË 
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ 
ex
ÍÍ 
)
ÍÍ  
{
ÎÎ 
LogErrorMessage
ÏÏ 
(
ÏÏ  
ex
ÏÏ  "
)
ÏÏ" #
;
ÏÏ# $
if
ÌÌ 
(
ÌÌ 
isRoot
ÌÌ 
)
ÌÌ 
{
ÓÓ 
transaction
 
.
  
Rollback
  (
(
( )
)
) *
;
* +
}
ÒÒ 
return
ÛÛ 
new
ÛÛ  
RepositoryResponse
ÛÛ -
<
ÛÛ- .
int
ÛÛ. 1
>
ÛÛ1 2
(
ÛÛ2 3
)
ÛÛ3 4
{
ÙÙ 
	IsSucceed
ıı 
=
ıı 
false
ıı  %
,
ıı% &
Data
ˆˆ 
=
ˆˆ 
$num
ˆˆ 
,
ˆˆ 
	Exception
˜˜ 
=
˜˜ 
ex
˜˜  "
}
¯¯ 
;
¯¯ 
}
˘˘ 
finally
˙˙ 
{
˚˚ 
if
¸¸ 
(
¸¸ 
isRoot
¸¸ 
)
¸¸ 
{
˝˝ 
context
ˇˇ 
.
ˇˇ 
Dispose
ˇˇ #
(
ˇˇ# $
)
ˇˇ$ %
;
ˇˇ% &
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
public
ãã 
virtual
ãã 
async
ãã 
Task
ãã !
<
ãã! " 
RepositoryResponse
ãã" 4
<
ãã4 5
int
ãã5 8
>
ãã8 9
>
ãã9 :
MaxAsync
ãã; C
(
ããC D

Expression
ããD N
<
ããN O
Func
ããO S
<
ããS T
TModel
ããT Z
,
ããZ [
int
ãã\ _
>
ãã_ `
>
ãã` a
	predicate
ããb k
,
åå 	

TDbContext
åå
 
_context
åå 
=
åå 
null
åå  $
,
åå$ %#
IDbContextTransaction
åå& ;
_transaction
åå< H
=
ååI J
null
ååK O
)
ååO P
{
çç 	
bool
éé 
isRoot
éé 
=
éé 
_context
éé "
==
éé# %
null
éé& *
;
éé* +
var
èè 
context
èè 
=
èè 
_context
èè "
??
èè# %
InitContext
èè& 1
(
èè1 2
)
èè2 3
;
èè3 4
var
êê 
transaction
êê 
=
êê 
_transaction
êê *
??
êê+ -
context
êê. 5
.
êê5 6
Database
êê6 >
.
êê> ?
BeginTransaction
êê? O
(
êêO P
)
êêP Q
;
êêQ R
int
ëë 
total
ëë 
=
ëë 
$num
ëë 
;
ëë 
try
íí 
{
ìì 
total
îî 
=
îî 
await
îî 
context
îî %
.
îî% &
Set
îî& )
<
îî) *
TModel
îî* 0
>
îî0 1
(
îî1 2
)
îî2 3
.
îî3 4
MaxAsync
îî4 <
(
îî< =
	predicate
îî= F
)
îîF G
.
îîG H
ConfigureAwait
îîH V
(
îîV W
false
îîW \
)
îî\ ]
;
îî] ^
return
ïï 
new
ïï  
RepositoryResponse
ïï -
<
ïï- .
int
ïï. 1
>
ïï1 2
(
ïï2 3
)
ïï3 4
{
ññ 
	IsSucceed
óó 
=
óó 
true
óó  $
,
óó$ %
Data
òò 
=
òò 
total
òò  
}
ôô 
;
ôô 
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ 
ex
õõ 
)
õõ  
{
úú 
LogErrorMessage
ùù 
(
ùù  
ex
ùù  "
)
ùù" #
;
ùù# $
if
ûû 
(
ûû 
isRoot
ûû 
)
ûû 
{
üü 
transaction
°° 
.
°°  
Rollback
°°  (
(
°°( )
)
°°) *
;
°°* +
}
¢¢ 
return
§§ 
new
§§  
RepositoryResponse
§§ -
<
§§- .
int
§§. 1
>
§§1 2
(
§§2 3
)
§§3 4
{
•• 
	IsSucceed
¶¶ 
=
¶¶ 
false
¶¶  %
,
¶¶% &
Data
ßß 
=
ßß 
$num
ßß 
,
ßß 
	Exception
®® 
=
®® 
ex
®®  "
}
©© 
;
©© 
}
™™ 
finally
´´ 
{
¨¨ 
if
≠≠ 
(
≠≠ 
isRoot
≠≠ 
)
≠≠ 
{
ÆÆ 
context
∞∞ 
.
∞∞ 
Dispose
∞∞ #
(
∞∞# $
)
∞∞$ %
;
∞∞% &
}
±± 
}
≤≤ 
}
≥≥ 	
public
¿¿ 
virtual
¿¿  
RepositoryResponse
¿¿ )
<
¿¿) *
int
¿¿* -
>
¿¿- .
Count
¿¿/ 4
(
¿¿4 5

Expression
¿¿5 ?
<
¿¿? @
Func
¿¿@ D
<
¿¿D E
TModel
¿¿E K
,
¿¿K L
bool
¿¿M Q
>
¿¿Q R
>
¿¿R S
	predicate
¿¿T ]
,
¡¡ 	

TDbContext
¡¡
 
_context
¡¡ 
=
¡¡ 
null
¡¡  $
,
¡¡$ %#
IDbContextTransaction
¡¡& ;
_transaction
¡¡< H
=
¡¡I J
null
¡¡K O
)
¡¡O P
{
¬¬ 	
bool
√√ 
isRoot
√√ 
=
√√ 
_context
√√ "
==
√√# %
null
√√& *
;
√√* +
var
ƒƒ 
context
ƒƒ 
=
ƒƒ 
_context
ƒƒ "
??
ƒƒ# %
InitContext
ƒƒ& 1
(
ƒƒ1 2
)
ƒƒ2 3
;
ƒƒ3 4
var
≈≈ 
transaction
≈≈ 
=
≈≈ 
_transaction
≈≈ *
??
≈≈+ -
context
≈≈. 5
.
≈≈5 6
Database
≈≈6 >
.
≈≈> ?
BeginTransaction
≈≈? O
(
≈≈O P
)
≈≈P Q
;
≈≈Q R
int
∆∆ 
total
∆∆ 
=
∆∆ 
$num
∆∆ 
;
∆∆ 
try
«« 
{
»» 
total
…… 
=
…… 
context
…… 
.
……  
Set
……  #
<
……# $
TModel
……$ *
>
……* +
(
……+ ,
)
……, -
.
……- .
Count
……. 3
(
……3 4
	predicate
……4 =
)
……= >
;
……> ?
return
   
new
    
RepositoryResponse
   -
<
  - .
int
  . 1
>
  1 2
(
  2 3
)
  3 4
{
ÀÀ 
	IsSucceed
ÃÃ 
=
ÃÃ 
true
ÃÃ  $
,
ÃÃ$ %
Data
ÕÕ 
=
ÕÕ 
total
ÕÕ  
}
ŒŒ 
;
ŒŒ 
}
œœ 
catch
–– 
(
–– 
	Exception
–– 
ex
–– 
)
––  
{
—— 
LogErrorMessage
““ 
(
““  
ex
““  "
)
““" #
;
““# $
if
”” 
(
”” 
isRoot
”” 
)
”” 
{
‘‘ 
transaction
÷÷ 
.
÷÷  
Rollback
÷÷  (
(
÷÷( )
)
÷÷) *
;
÷÷* +
}
◊◊ 
return
ŸŸ 
new
ŸŸ  
RepositoryResponse
ŸŸ -
<
ŸŸ- .
int
ŸŸ. 1
>
ŸŸ1 2
(
ŸŸ2 3
)
ŸŸ3 4
{
⁄⁄ 
	IsSucceed
€€ 
=
€€ 
false
€€  %
,
€€% &
Data
‹‹ 
=
‹‹ 
$num
‹‹ 
,
‹‹ 
	Exception
›› 
=
›› 
ex
››  "
}
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
finally
‡‡ 
{
·· 
if
‚‚ 
(
‚‚ 
isRoot
‚‚ 
)
‚‚ 
{
„„ 
context
ÂÂ 
.
ÂÂ 
Dispose
ÂÂ #
(
ÂÂ# $
)
ÂÂ$ %
;
ÂÂ% &
}
ÊÊ 
}
ÁÁ 
}
ËË 	
public
ÒÒ 
virtual
ÒÒ 
async
ÒÒ 
Task
ÒÒ !
<
ÒÒ! " 
RepositoryResponse
ÒÒ" 4
<
ÒÒ4 5
int
ÒÒ5 8
>
ÒÒ8 9
>
ÒÒ9 :

CountAsync
ÒÒ; E
(
ÒÒE F

Expression
ÒÒF P
<
ÒÒP Q
Func
ÒÒQ U
<
ÒÒU V
TModel
ÒÒV \
,
ÒÒ\ ]
bool
ÒÒ^ b
>
ÒÒb c
>
ÒÒc d
	predicate
ÒÒe n
,
ÚÚ 	

TDbContext
ÚÚ
 
_context
ÚÚ 
=
ÚÚ 
null
ÚÚ  $
,
ÚÚ$ %#
IDbContextTransaction
ÚÚ& ;
_transaction
ÚÚ< H
=
ÚÚI J
null
ÚÚK O
)
ÚÚO P
{
ÛÛ 	
bool
ÙÙ 
isRoot
ÙÙ 
=
ÙÙ 
_context
ÙÙ "
==
ÙÙ# %
null
ÙÙ& *
;
ÙÙ* +
var
ıı 
context
ıı 
=
ıı 
_context
ıı "
??
ıı# %
InitContext
ıı& 1
(
ıı1 2
)
ıı2 3
;
ıı3 4
var
ˆˆ 
transaction
ˆˆ 
=
ˆˆ 
_transaction
ˆˆ *
??
ˆˆ+ -
context
ˆˆ. 5
.
ˆˆ5 6
Database
ˆˆ6 >
.
ˆˆ> ?
BeginTransaction
ˆˆ? O
(
ˆˆO P
)
ˆˆP Q
;
ˆˆQ R
int
˜˜ 
total
˜˜ 
=
˜˜ 
$num
˜˜ 
;
˜˜ 
try
¯¯ 
{
˘˘ 
total
˙˙ 
=
˙˙ 
await
˙˙ 
context
˙˙ %
.
˙˙% &
Set
˙˙& )
<
˙˙) *
TModel
˙˙* 0
>
˙˙0 1
(
˙˙1 2
)
˙˙2 3
.
˙˙3 4

CountAsync
˙˙4 >
(
˙˙> ?
	predicate
˙˙? H
)
˙˙H I
.
˙˙I J
ConfigureAwait
˙˙J X
(
˙˙X Y
false
˙˙Y ^
)
˙˙^ _
;
˙˙_ `
return
˚˚ 
new
˚˚  
RepositoryResponse
˚˚ -
<
˚˚- .
int
˚˚. 1
>
˚˚1 2
(
˚˚2 3
)
˚˚3 4
{
¸¸ 
	IsSucceed
˝˝ 
=
˝˝ 
true
˝˝  $
,
˝˝$ %
Data
˛˛ 
=
˛˛ 
total
˛˛  
}
ˇˇ 
;
ˇˇ 
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
	Exception
ÅÅ 
ex
ÅÅ 
)
ÅÅ  
{
ÇÇ 
LogErrorMessage
ÉÉ 
(
ÉÉ  
ex
ÉÉ  "
)
ÉÉ" #
;
ÉÉ# $
if
ÑÑ 
(
ÑÑ 
isRoot
ÑÑ 
)
ÑÑ 
{
ÖÖ 
transaction
áá 
.
áá  
Rollback
áá  (
(
áá( )
)
áá) *
;
áá* +
}
àà 
return
ää 
new
ää  
RepositoryResponse
ää -
<
ää- .
int
ää. 1
>
ää1 2
(
ää2 3
)
ää3 4
{
ãã 
	IsSucceed
åå 
=
åå 
false
åå  %
,
åå% &
Data
çç 
=
çç 
$num
çç 
,
çç 
	Exception
éé 
=
éé 
ex
éé  "
}
èè 
;
èè 
}
êê 
finally
ëë 
{
íí 
if
ìì 
(
ìì 
isRoot
ìì 
)
ìì 
{
îî 
context
ññ 
.
ññ 
Dispose
ññ #
(
ññ# $
)
ññ$ %
;
ññ% &
}
óó 
}
òò 
}
ôô 	
public
•• 
virtual
••  
RepositoryResponse
•• )
<
••) *
int
••* -
>
••- .
Count
••/ 4
(
••4 5

TDbContext
••5 ?
_context
••@ H
=
••I J
null
••K O
,
••O P#
IDbContextTransaction
••Q f
_transaction
••g s
=
••t u
null
••v z
)
••z {
{
¶¶ 	
bool
ßß 
isRoot
ßß 
=
ßß 
_context
ßß "
==
ßß# %
null
ßß& *
;
ßß* +
var
®® 
context
®® 
=
®® 
_context
®® "
??
®®# %
InitContext
®®& 1
(
®®1 2
)
®®2 3
;
®®3 4
var
©© 
transaction
©© 
=
©© 
_transaction
©© *
??
©©+ -
context
©©. 5
.
©©5 6
Database
©©6 >
.
©©> ?
BeginTransaction
©©? O
(
©©O P
)
©©P Q
;
©©Q R
int
™™ 
total
™™ 
=
™™ 
$num
™™ 
;
™™ 
try
´´ 
{
¨¨ 
total
≠≠ 
=
≠≠ 
context
≠≠ 
.
≠≠  
Set
≠≠  #
<
≠≠# $
TModel
≠≠$ *
>
≠≠* +
(
≠≠+ ,
)
≠≠, -
.
≠≠- .
Count
≠≠. 3
(
≠≠3 4
)
≠≠4 5
;
≠≠5 6
return
ÆÆ 
new
ÆÆ  
RepositoryResponse
ÆÆ -
<
ÆÆ- .
int
ÆÆ. 1
>
ÆÆ1 2
(
ÆÆ2 3
)
ÆÆ3 4
{
ØØ 
	IsSucceed
∞∞ 
=
∞∞ 
true
∞∞  $
,
∞∞$ %
Data
±± 
=
±± 
total
±±  
}
≤≤ 
;
≤≤ 
}
≥≥ 
catch
¥¥ 
(
¥¥ 
	Exception
¥¥ 
ex
¥¥ 
)
¥¥  
{
µµ 
LogErrorMessage
∂∂ 
(
∂∂  
ex
∂∂  "
)
∂∂" #
;
∂∂# $
if
∑∑ 
(
∑∑ 
isRoot
∑∑ 
)
∑∑ 
{
∏∏ 
transaction
∫∫ 
.
∫∫  
Rollback
∫∫  (
(
∫∫( )
)
∫∫) *
;
∫∫* +
}
ªª 
return
ΩΩ 
new
ΩΩ  
RepositoryResponse
ΩΩ -
<
ΩΩ- .
int
ΩΩ. 1
>
ΩΩ1 2
(
ΩΩ2 3
)
ΩΩ3 4
{
ææ 
	IsSucceed
øø 
=
øø 
false
øø  %
,
øø% &
Data
¿¿ 
=
¿¿ 
$num
¿¿ 
,
¿¿ 
	Exception
¡¡ 
=
¡¡ 
ex
¡¡  "
}
¬¬ 
;
¬¬ 
}
√√ 
finally
ƒƒ 
{
≈≈ 
if
∆∆ 
(
∆∆ 
isRoot
∆∆ 
)
∆∆ 
{
«« 
context
…… 
.
…… 
Dispose
…… #
(
……# $
)
……$ %
;
……% &
}
   
}
ÀÀ 
}
ÃÃ 	
public
‘‘ 
virtual
‘‘ 
async
‘‘ 
Task
‘‘ !
<
‘‘! " 
RepositoryResponse
‘‘" 4
<
‘‘4 5
int
‘‘5 8
>
‘‘8 9
>
‘‘9 :

CountAsync
‘‘; E
(
‘‘E F

TDbContext
‘‘F P
_context
‘‘Q Y
=
‘‘Z [
null
‘‘\ `
,
‘‘` a#
IDbContextTransaction
‘‘b w
_transaction‘‘x Ñ
=‘‘Ö Ü
null‘‘á ã
)‘‘ã å
{
’’ 	
bool
÷÷ 
isRoot
÷÷ 
=
÷÷ 
_context
÷÷ "
==
÷÷# %
null
÷÷& *
;
÷÷* +
var
◊◊ 
context
◊◊ 
=
◊◊ 
_context
◊◊ "
??
◊◊# %
InitContext
◊◊& 1
(
◊◊1 2
)
◊◊2 3
;
◊◊3 4
var
ÿÿ 
transaction
ÿÿ 
=
ÿÿ 
_transaction
ÿÿ *
??
ÿÿ+ -
context
ÿÿ. 5
.
ÿÿ5 6
Database
ÿÿ6 >
.
ÿÿ> ?
BeginTransaction
ÿÿ? O
(
ÿÿO P
)
ÿÿP Q
;
ÿÿQ R
int
ŸŸ 
total
ŸŸ 
=
ŸŸ 
$num
ŸŸ 
;
ŸŸ 
try
⁄⁄ 
{
€€ 
total
‹‹ 
=
‹‹ 
await
‹‹ 
context
‹‹ %
.
‹‹% &
Set
‹‹& )
<
‹‹) *
TModel
‹‹* 0
>
‹‹0 1
(
‹‹1 2
)
‹‹2 3
.
‹‹3 4

CountAsync
‹‹4 >
(
‹‹> ?
)
‹‹? @
.
‹‹@ A
ConfigureAwait
‹‹A O
(
‹‹O P
false
‹‹P U
)
‹‹U V
;
‹‹V W
return
›› 
new
››  
RepositoryResponse
›› -
<
››- .
int
››. 1
>
››1 2
(
››2 3
)
››3 4
{
ﬁﬁ 
	IsSucceed
ﬂﬂ 
=
ﬂﬂ 
true
ﬂﬂ  $
,
ﬂﬂ$ %
Data
‡‡ 
=
‡‡ 
total
‡‡  
}
·· 
;
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
LogErrorMessage
ÂÂ 
(
ÂÂ  
ex
ÂÂ  "
)
ÂÂ" #
;
ÂÂ# $
if
ÊÊ 
(
ÊÊ 
isRoot
ÊÊ 
)
ÊÊ 
{
ÁÁ 
transaction
ÈÈ 
.
ÈÈ  
Rollback
ÈÈ  (
(
ÈÈ( )
)
ÈÈ) *
;
ÈÈ* +
}
ÍÍ 
return
ÏÏ 
new
ÏÏ  
RepositoryResponse
ÏÏ -
<
ÏÏ- .
int
ÏÏ. 1
>
ÏÏ1 2
(
ÏÏ2 3
)
ÏÏ3 4
{
ÌÌ 
	IsSucceed
ÓÓ 
=
ÓÓ 
false
ÓÓ  %
,
ÓÓ% &
Data
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
,
ÔÔ 
	Exception
 
=
 
ex
  "
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 
finally
ÛÛ 
{
ÙÙ 
if
ıı 
(
ıı 
isRoot
ıı 
)
ıı 
{
ˆˆ 
context
¯¯ 
.
¯¯ 
Dispose
¯¯ #
(
¯¯# $
)
¯¯$ %
;
¯¯% &
}
˘˘ 
}
˙˙ 
}
˚˚ 	
public
ââ  
RepositoryResponse
ââ !
<
ââ! "
bool
ââ" &
>
ââ& '
UpdateFields
ââ( 4
(
ââ4 5

Expression
ââ5 ?
<
ââ? @
Func
ââ@ D
<
ââD E
TModel
ââE K
,
ââK L
bool
ââM Q
>
ââQ R
>
ââR S
	predicate
ââT ]
,
ää 	
List
ää
 
<
ää 
EntityField
ää 
>
ää 
fields
ää "
,
ãã 	

TDbContext
ãã
 
_context
ãã 
=
ãã 
null
ãã  $
,
ãã$ %#
IDbContextTransaction
ãã& ;
_transaction
ãã< H
=
ããI J
null
ããK O
)
ããO P
{
åå 	
bool
çç 
isRoot
çç 
=
çç 
_context
çç "
==
çç# %
null
çç& *
;
çç* +

TDbContext
éé 
context
éé 
=
éé  
_context
éé! )
??
éé* ,
InitContext
éé- 8
(
éé8 9
)
éé9 :
;
éé: ;
var
èè 
transaction
èè 
=
èè 
_transaction
èè *
??
èè+ -
context
èè. 5
.
èè5 6
Database
èè6 >
.
èè> ?
BeginTransaction
èè? O
(
èèO P
)
èèP Q
;
èèQ R
try
êê 
{
ëë 
bool
íí 
result
íí 
=
íí 
false
íí #
;
íí# $
TModel
ìì 
model
ìì 
=
ìì 
context
ìì &
.
ìì& '
Set
ìì' *
<
ìì* +
TModel
ìì+ 1
>
ìì1 2
(
ìì2 3
)
ìì3 4
.
ìì4 5
FirstOrDefault
ìì5 C
(
ììC D
	predicate
ììD M
)
ììM N
;
ììN O
if
îî 
(
îî 
model
îî 
!=
îî 
null
îî !
)
îî! "
{
ïï 
foreach
ññ 
(
ññ 
var
ññ  
field
ññ! &
in
ññ' )
fields
ññ* 0
)
ññ0 1
{
óó 
var
òò 
lamda
òò !
=
òò" #
	GetLambda
òò$ -
(
òò- .
field
òò. 3
.
òò3 4
PropertyName
òò4 @
,
òò@ A
false
òòB G
)
òòG H
;
òòH I
if
ôô 
(
ôô 
lamda
ôô !
!=
ôô" $
null
ôô% )
)
ôô) *
{
öö 
var
õõ 
prop
õõ  $
=
õõ% &
context
õõ' .
.
õõ. /
Entry
õõ/ 4
(
õõ4 5
model
õõ5 :
)
õõ: ;
.
õõ; <
Property
õõ< D
(
õõD E
field
õõE J
.
õõJ K
PropertyName
õõK W
)
õõW X
;
õõX Y
if
úú 
(
úú  
DateTime
úú  (
.
úú( )
TryParse
úú) 1
(
úú1 2
field
úú2 7
.
úú7 8
PropertyValue
úú8 E
,
úúE F
out
úúG J
DateTime
úúK S
	dateValue
úúT ]
)
úú] ^
)
úú^ _
{
ùù 
prop
ûû  $
.
ûû$ %
CurrentValue
ûû% 1
=
ûû2 3
	dateValue
ûû4 =
;
ûû= >
}
üü 
else
††  
if
††! #
(
††$ %
int
††% (
.
††( )
TryParse
††) 1
(
††1 2
field
††2 7
.
††7 8
PropertyValue
††8 E
,
††E F
out
††G J
int
††K N
integerValue
††O [
)
††[ \
)
††\ ]
{
°° 
prop
¢¢  $
.
¢¢$ %
CurrentValue
¢¢% 1
=
¢¢2 3
integerValue
¢¢4 @
;
¢¢@ A
}
££ 
else
§§  
{
•• 
prop
¶¶  $
.
¶¶$ %
CurrentValue
¶¶% 1
=
¶¶2 3
field
¶¶4 9
.
¶¶9 :
PropertyValue
¶¶: G
;
¶¶G H
}
ßß 
context
©© #
.
©©# $
SaveChanges
©©$ /
(
©©/ 0
)
©©0 1
;
©©1 2
result
™™ "
=
™™# $
true
™™% )
;
™™) *
}
´´ 
else
¨¨ 
{
≠≠ 
result
ÆÆ "
=
ÆÆ# $
false
ÆÆ% *
;
ÆÆ* +
break
ØØ !
;
ØØ! "
}
∞∞ 
}
±± 
}
≤≤ 
HandleTransaction
¥¥ !
(
¥¥! "
result
¥¥" (
,
¥¥( )
isRoot
¥¥* 0
,
¥¥0 1
transaction
¥¥2 =
)
¥¥= >
;
¥¥> ?
return
∂∂ 
new
∂∂  
RepositoryResponse
∂∂ -
<
∂∂- .
bool
∂∂. 2
>
∂∂2 3
(
∂∂3 4
)
∂∂4 5
{
∑∑ 
	IsSucceed
∏∏ 
=
∏∏ 
result
∏∏  &
,
∏∏& '
Data
ππ 
=
ππ 
result
ππ !
}
∫∫ 
;
∫∫ 
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº  
{
ΩΩ 
LogErrorMessage
ææ 
(
ææ  
ex
ææ  "
)
ææ" #
;
ææ# $
if
øø 
(
øø 
isRoot
øø 
)
øø 
{
¿¿ 
transaction
¬¬ 
.
¬¬  
Rollback
¬¬  (
(
¬¬( )
)
¬¬) *
;
¬¬* +
}
√√ 
return
≈≈ 
new
≈≈  
RepositoryResponse
≈≈ -
<
≈≈- .
bool
≈≈. 2
>
≈≈2 3
(
≈≈3 4
)
≈≈4 5
{
∆∆ 
	IsSucceed
«« 
=
«« 
false
««  %
,
««% &
Data
»» 
=
»» 
false
»»  
,
»»  !
	Exception
…… 
=
…… 
ex
……  "
}
   
;
   
}
ÀÀ 
finally
ÃÃ 
{
ÕÕ 
if
ŒŒ 
(
ŒŒ 
isRoot
ŒŒ 
)
ŒŒ 
{
œœ 
context
—— 
.
—— 
Dispose
—— #
(
——# $
)
——$ %
;
——% &
}
““ 
}
”” 
}
‘‘ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ 
<
ﬁﬁ  
RepositoryResponse
ﬁﬁ ,
<
ﬁﬁ, -
bool
ﬁﬁ- 1
>
ﬁﬁ1 2
>
ﬁﬁ2 3
UpdateFieldsAsync
ﬁﬁ4 E
(
ﬁﬁE F

Expression
ﬁﬁF P
<
ﬁﬁP Q
Func
ﬁﬁQ U
<
ﬁﬁU V
TModel
ﬁﬁV \
,
ﬁﬁ\ ]
bool
ﬁﬁ^ b
>
ﬁﬁb c
>
ﬁﬁc d
	predicate
ﬁﬁe n
,
ﬂﬂ 	
List
ﬂﬂ
 
<
ﬂﬂ 
EntityField
ﬂﬂ 
>
ﬂﬂ 
fields
ﬂﬂ "
,
‡‡ 	

TDbContext
‡‡
 
_context
‡‡ 
=
‡‡ 
null
‡‡  $
,
‡‡$ %#
IDbContextTransaction
‡‡& ;
_transaction
‡‡< H
=
‡‡I J
null
‡‡K O
)
‡‡O P
{
·· 	
bool
‚‚ 
isRoot
‚‚ 
=
‚‚ 
_context
‚‚ "
==
‚‚# %
null
‚‚& *
;
‚‚* +

TDbContext
„„ 
context
„„ 
=
„„  
_context
„„! )
??
„„* ,
InitContext
„„- 8
(
„„8 9
)
„„9 :
;
„„: ;
var
‰‰ 
transaction
‰‰ 
=
‰‰ 
_transaction
‰‰ *
??
‰‰+ -
context
‰‰. 5
.
‰‰5 6
Database
‰‰6 >
.
‰‰> ?
BeginTransaction
‰‰? O
(
‰‰O P
)
‰‰P Q
;
‰‰Q R
try
ÂÂ 
{
ÊÊ 
bool
ÁÁ 
result
ÁÁ 
=
ÁÁ 
false
ÁÁ #
;
ÁÁ# $
TModel
ËË 
model
ËË 
=
ËË 
await
ËË $
context
ËË% ,
.
ËË, -
Set
ËË- 0
<
ËË0 1
TModel
ËË1 7
>
ËË7 8
(
ËË8 9
)
ËË9 :
.
ËË: ;!
FirstOrDefaultAsync
ËË; N
(
ËËN O
	predicate
ËËO X
)
ËËX Y
.
ËËY Z
ConfigureAwait
ËËZ h
(
ËËh i
false
ËËi n
)
ËËn o
;
ËËo p
if
ÈÈ 
(
ÈÈ 
model
ÈÈ 
!=
ÈÈ 
null
ÈÈ !
)
ÈÈ! "
{
ÍÍ 
foreach
ÎÎ 
(
ÎÎ 
var
ÎÎ  
field
ÎÎ! &
in
ÎÎ' )
fields
ÎÎ* 0
)
ÎÎ0 1
{
ÏÏ 
var
ÌÌ 
lamda
ÌÌ !
=
ÌÌ" #
	GetLambda
ÌÌ$ -
(
ÌÌ- .
field
ÌÌ. 3
.
ÌÌ3 4
PropertyName
ÌÌ4 @
,
ÌÌ@ A
false
ÌÌB G
)
ÌÌG H
;
ÌÌH I
if
ÓÓ 
(
ÓÓ 
lamda
ÓÓ !
!=
ÓÓ" $
null
ÓÓ% )
)
ÓÓ) *
{
ÔÔ 
var
 
prop
  $
=
% &
context
' .
.
. /
Entry
/ 4
(
4 5
model
5 :
)
: ;
.
; <
Property
< D
(
D E
field
E J
.
J K
PropertyName
K W
)
W X
;
X Y
if
ÒÒ 
(
ÒÒ  
DateTime
ÒÒ  (
.
ÒÒ( )
TryParse
ÒÒ) 1
(
ÒÒ1 2
field
ÒÒ2 7
.
ÒÒ7 8
PropertyValue
ÒÒ8 E
,
ÒÒE F
out
ÒÒG J
DateTime
ÒÒK S
	dateValue
ÒÒT ]
)
ÒÒ] ^
)
ÒÒ^ _
{
ÚÚ 
prop
ÛÛ  $
.
ÛÛ$ %
CurrentValue
ÛÛ% 1
=
ÛÛ2 3
	dateValue
ÛÛ4 =
;
ÛÛ= >
}
ÙÙ 
else
ıı  
if
ıı! #
(
ıı$ %
int
ıı% (
.
ıı( )
TryParse
ıı) 1
(
ıı1 2
field
ıı2 7
.
ıı7 8
PropertyValue
ıı8 E
,
ııE F
out
ııG J
int
ııK N
integerValue
ııO [
)
ıı[ \
)
ıı\ ]
{
ˆˆ 
prop
˜˜  $
.
˜˜$ %
CurrentValue
˜˜% 1
=
˜˜2 3
integerValue
˜˜4 @
;
˜˜@ A
}
¯¯ 
else
˘˘  
{
˙˙ 
prop
˚˚  $
.
˚˚$ %
CurrentValue
˚˚% 1
=
˚˚2 3
field
˚˚4 9
.
˚˚9 :
PropertyValue
˚˚: G
;
˚˚G H
}
¸¸ 
await
˛˛ !
context
˛˛" )
.
˛˛) *
SaveChangesAsync
˛˛* :
(
˛˛: ;
)
˛˛; <
.
˛˛< =
ConfigureAwait
˛˛= K
(
˛˛K L
false
˛˛L Q
)
˛˛Q R
;
˛˛R S
result
ˇˇ "
=
ˇˇ# $
true
ˇˇ% )
;
ˇˇ) *
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
result
ÉÉ "
=
ÉÉ# $
false
ÉÉ% *
;
ÉÉ* +
break
ÑÑ !
;
ÑÑ! "
}
ÖÖ 
}
ÜÜ 
}
áá 
HandleTransaction
ââ !
(
ââ! "
result
ââ" (
,
ââ( )
isRoot
ââ* 0
,
ââ0 1
transaction
ââ2 =
)
ââ= >
;
ââ> ?
return
ãã 
new
ãã  
RepositoryResponse
ãã -
<
ãã- .
bool
ãã. 2
>
ãã2 3
(
ãã3 4
)
ãã4 5
{
åå 
	IsSucceed
çç 
=
çç 
result
çç  &
,
çç& '
Data
éé 
=
éé 
result
éé !
}
èè 
;
èè 
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë 
ex
ëë 
)
ëë  
{
íí 
LogErrorMessage
ìì 
(
ìì  
ex
ìì  "
)
ìì" #
;
ìì# $
if
îî 
(
îî 
isRoot
îî 
)
îî 
{
ïï 
transaction
óó 
.
óó  
Rollback
óó  (
(
óó( )
)
óó) *
;
óó* +
}
òò 
return
öö 
new
öö  
RepositoryResponse
öö -
<
öö- .
bool
öö. 2
>
öö2 3
(
öö3 4
)
öö4 5
{
õõ 
	IsSucceed
úú 
=
úú 
false
úú  %
,
úú% &
Data
ùù 
=
ùù 
false
ùù  
,
ùù  !
	Exception
ûû 
=
ûû 
ex
ûû  "
}
üü 
;
üü 
}
†† 
finally
°° 
{
¢¢ 
if
££ 
(
££ 
isRoot
££ 
)
££ 
{
§§ 
context
¶¶ 
.
¶¶ 
Dispose
¶¶ #
(
¶¶# $
)
¶¶$ %
;
¶¶% &
}
ßß 
}
®® 
}
©© 	
private
≠≠ 
void
≠≠ 
HandleTransaction
≠≠ &
(
≠≠& '
bool
≠≠' +
	isSucceed
≠≠, 5
,
≠≠5 6
bool
≠≠7 ;
isRoot
≠≠< B
,
≠≠B C#
IDbContextTransaction
≠≠D Y
transaction
≠≠Z e
)
≠≠e f
{
ÆÆ 	
if
ØØ 
(
ØØ 
	isSucceed
ØØ 
)
ØØ 
{
∞∞ 
if
±± 
(
±± 
isRoot
±± 
)
±± 
{
≤≤ 
transaction
¥¥ 
.
¥¥  
Commit
¥¥  &
(
¥¥& '
)
¥¥' (
;
¥¥( )
}
µµ 
}
∂∂ 
else
∑∑ 
{
∏∏ 
if
ππ 
(
ππ 
isRoot
ππ 
)
ππ 
{
∫∫ 
transaction
ºº 
.
ºº  
Rollback
ºº  (
(
ºº( )
)
ºº) *
;
ºº* +
}
ΩΩ 
}
ææ 
}
øø 	
	protected
«« 
LambdaExpression
«« "
	GetLambda
««# ,
(
««, -
string
««- 3
propName
««4 <
,
««< =
bool
««> B
isGetDefault
««C O
=
««P Q
true
««R V
)
««V W
{
»» 	
var
…… 
	parameter
…… 
=
…… 

Expression
…… &
.
……& '
	Parameter
……' 0
(
……0 1
typeof
……1 7
(
……7 8
TModel
……8 >
)
……> ?
)
……? @
;
……@ A
var
   
type
   
=
   
typeof
   
(
   
TModel
   $
)
  $ %
;
  % &
var
ÀÀ 
prop
ÀÀ 
=
ÀÀ 
Array
ÀÀ 
.
ÀÀ 
Find
ÀÀ !
(
ÀÀ! "
type
ÀÀ" &
.
ÀÀ& '
GetProperties
ÀÀ' 4
(
ÀÀ4 5
)
ÀÀ5 6
,
ÀÀ6 7
p
ÀÀ8 9
=>
ÀÀ: <
p
ÀÀ= >
.
ÀÀ> ?
Name
ÀÀ? C
==
ÀÀD F
propName
ÀÀG O
)
ÀÀO P
;
ÀÀP Q
if
ÃÃ 
(
ÃÃ 
prop
ÃÃ 
==
ÃÃ 
null
ÃÃ 
&&
ÃÃ 
isGetDefault
ÃÃ  ,
)
ÃÃ, -
{
ÕÕ 
propName
ŒŒ 
=
ŒŒ 
type
ŒŒ 
.
ŒŒ  
GetProperties
ŒŒ  -
(
ŒŒ- .
)
ŒŒ. /
.
ŒŒ/ 0
FirstOrDefault
ŒŒ0 >
(
ŒŒ> ?
)
ŒŒ? @
?
ŒŒ@ A
.
ŒŒA B
Name
ŒŒB F
;
ŒŒF G
}
œœ 
var
–– 
memberExpression
––  
=
––! "

Expression
––# -
.
––- .
Property
––. 6
(
––6 7
	parameter
––7 @
,
––@ A
propName
––B J
)
––J K
;
––K L
return
—— 

Expression
—— 
.
—— 
Lambda
—— $
(
——$ %
memberExpression
——% 5
,
——5 6
	parameter
——7 @
)
——@ A
;
——A B
}
““ 	
}
”” 
}‘‘ —d
ZD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\CommonViewModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

ViewModels )
{ 
public 

class 
	ApiResult 
< 
T 
> 
{ 
[ 	
JsonProperty	 
( 
$str 
) 
] 
public 
T 
Data 
{ 
get 
; 
set  
;  !
}" #
["" 	
JsonProperty""	 
("" 
$str"" 
)"" 
]""  
public## 
List## 
<## 
string## 
>## 
Errors## "
{### $
get##% (
;##( )
set##* -
;##- .
}##/ 0
=##1 2
new##3 6
List##7 ;
<##; <
string##< B
>##B C
(##C D
)##D E
;##E F
[++ 	
JsonProperty++	 
(++ 
$str++ !
)++! "
]++" #
public,, 
	Exception,, 
	Exception,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
[44 	
JsonProperty44	 
(44 
$str44 #
)44# $
]44$ %
public55 
string55 
ResponseKey55 !
{55" #
get55$ '
;55' (
set55) ,
;55, -
}55. /
[== 	
JsonProperty==	 
(== 
$str== 
)== 
]==  
public>> 
int>> 
Status>> 
{>> 
get>> 
;>>  
set>>! $
;>>$ %
}>>& '
}?? 
publicDD 

classDD 
EntityFieldDD 
{EE 
[LL 	
JsonPropertyLL	 
(LL 
$strLL $
)LL$ %
]LL% &
publicMM 
stringMM 
PropertyNameMM "
{MM# $
getMM% (
;MM( )
setMM* -
;MM- .
}MM/ 0
[UU 	
JsonPropertyUU	 
(UU 
$strUU %
)UU% &
]UU& '
publicVV 
stringVV 
PropertyValueVV #
{VV$ %
getVV& )
;VV) *
setVV+ .
;VV. /
}VV0 1
}WW 
public\\ 

class\\ 
FileStreamViewModel\\ $
{]] 
[dd 	
JsonPropertydd	 
(dd 
$strdd 
)dd 
]dd  
publicee 
stringee 
Base64ee 
{ee 
getee "
;ee" #
setee$ '
;ee' (
}ee) *
[mm 	
JsonPropertymm	 
(mm 
$strmm 
)mm 
]mm 
publicnn 
stringnn 
Namenn 
{nn 
getnn  
;nn  !
setnn" %
;nn% &
}nn' (
[vv 	
JsonPropertyvv	 
(vv 
$strvv 
)vv 
]vv 
publicww 
intww 
Sizeww 
{ww 
getww 
;ww 
setww "
;ww" #
}ww$ %
[ 	
JsonProperty	 
( 
$str 
) 
] 
public
ÄÄ 
string
ÄÄ 
Type
ÄÄ 
{
ÄÄ 
get
ÄÄ  
;
ÄÄ  !
set
ÄÄ" %
;
ÄÄ% &
}
ÄÄ' (
}
ÅÅ 
public
áá 

class
áá 
PaginationModel
áá  
<
áá  !
T
áá! "
>
áá" #
{
àà 
public
åå 
PaginationModel
åå 
(
åå 
)
åå  
{
çç 	
	PageIndex
éé 
=
éé 
$num
éé 
;
éé 
PageSize
èè 
=
èè 
$num
èè 
;
èè 

TotalItems
êê 
=
êê 
$num
êê 
;
êê 
	TotalPage
ëë 
=
ëë 
$num
ëë 
;
ëë 
Items
íí 
=
íí 
new
íí 
List
íí 
<
íí 
T
íí 
>
íí 
(
íí  
)
íí  !
;
íí! "
}
ìì 	
[
õõ 	
JsonProperty
õõ	 
(
õõ 
$str
õõ 
)
õõ 
]
õõ 
public
úú 
List
úú 
<
úú 
T
úú 
>
úú 
Items
úú 
{
úú 
get
úú "
;
úú" #
set
úú$ '
;
úú' (
}
úú) *
[
§§ 	
JsonProperty
§§	 
(
§§ 
$str
§§ !
)
§§! "
]
§§" #
public
•• 
List
•• 
<
•• 
JObject
•• 
>
•• 
	JsonItems
•• &
{
••' (
get
••) ,
;
••, -
set
••. 1
;
••1 2
}
••3 4
=
••5 6
new
••7 :
List
••; ?
<
••? @
JObject
••@ G
>
••G H
(
••H I
)
••I J
;
••J K
[
≠≠ 	
JsonProperty
≠≠	 
(
≠≠ 
$str
≠≠ !
)
≠≠! "
]
≠≠" #
public
ÆÆ 
int
ÆÆ 
	PageIndex
ÆÆ 
{
ÆÆ 
get
ÆÆ "
;
ÆÆ" #
set
ÆÆ$ '
;
ÆÆ' (
}
ÆÆ) *
[
∂∂ 	
JsonProperty
∂∂	 
(
∂∂ 
$str
∂∂  
)
∂∂  !
]
∂∂! "
public
∑∑ 
int
∑∑ 
PageSize
∑∑ 
{
∑∑ 
get
∑∑ !
;
∑∑! "
set
∑∑# &
;
∑∑& '
}
∑∑( )
[
øø 	
JsonProperty
øø	 
(
øø 
$str
øø "
)
øø" #
]
øø# $
public
¿¿ 
int
¿¿ 

TotalItems
¿¿ 
{
¿¿ 
get
¿¿  #
;
¿¿# $
set
¿¿% (
;
¿¿( )
}
¿¿* +
[
»» 	
JsonProperty
»»	 
(
»» 
$str
»» !
)
»»! "
]
»»" #
public
…… 
int
…… 
	TotalPage
…… 
{
…… 
get
…… "
;
……" #
set
……$ '
;
……' (
}
……) *
}
   
public
–– 

class
––  
RepositoryResponse
–– #
<
––# $
TResult
––$ +
>
––+ ,
{
—— 
[
ÿÿ 	
JsonProperty
ÿÿ	 
(
ÿÿ 
$str
ÿÿ !
)
ÿÿ! "
]
ÿÿ" #
public
ŸŸ 
bool
ŸŸ 
	IsSucceed
ŸŸ 
{
ŸŸ 
get
ŸŸ  #
;
ŸŸ# $
set
ŸŸ% (
;
ŸŸ( )
}
ŸŸ* +
[
·· 	
JsonProperty
··	 
(
·· 
$str
·· #
)
··# $
]
··$ %
public
‚‚ 
string
‚‚ 
ResponseKey
‚‚ !
{
‚‚" #
get
‚‚$ '
;
‚‚' (
set
‚‚) ,
;
‚‚, -
}
‚‚. /
[
ÍÍ 	
JsonProperty
ÍÍ	 
(
ÍÍ 
$str
ÍÍ 
)
ÍÍ 
]
ÍÍ  
public
ÎÎ 
int
ÎÎ 
Status
ÎÎ 
{
ÎÎ 
get
ÎÎ 
;
ÎÎ  
set
ÎÎ! $
;
ÎÎ$ %
}
ÎÎ& '
[
ÛÛ 	
JsonProperty
ÛÛ	 
(
ÛÛ 
$str
ÛÛ 
)
ÛÛ 
]
ÛÛ  
public
ÙÙ 
List
ÙÙ 
<
ÙÙ 
string
ÙÙ 
>
ÙÙ 
Errors
ÙÙ "
{
ÙÙ# $
get
ÙÙ% (
;
ÙÙ( )
set
ÙÙ* -
;
ÙÙ- .
}
ÙÙ/ 0
=
ÙÙ1 2
new
ÙÙ3 6
List
ÙÙ7 ;
<
ÙÙ; <
string
ÙÙ< B
>
ÙÙB C
(
ÙÙC D
)
ÙÙD E
;
ÙÙE F
[
¸¸ 	
JsonProperty
¸¸	 
(
¸¸ 
$str
¸¸ !
)
¸¸! "
]
¸¸" #
public
˝˝ 
	Exception
˝˝ 
	Exception
˝˝ "
{
˝˝# $
get
˝˝% (
;
˝˝( )
set
˝˝* -
;
˝˝- .
}
˝˝/ 0
[
ÖÖ 	
JsonProperty
ÖÖ	 
(
ÖÖ 
$str
ÖÖ 
)
ÖÖ 
]
ÖÖ 
public
ÜÜ 
TResult
ÜÜ 
Data
ÜÜ 
{
ÜÜ 
get
ÜÜ !
;
ÜÜ! "
set
ÜÜ# &
;
ÜÜ& '
}
ÜÜ( )
}
àà 
public
çç 

class
çç 
RequestPaging
çç 
{
éé 
[
ïï 	
JsonProperty
ïï	 
(
ïï 
$str
ïï !
)
ïï! "
]
ïï" #
public
ññ 
int
ññ 
	CountryId
ññ 
{
ññ 
get
ññ "
;
ññ" #
set
ññ$ '
;
ññ' (
}
ññ) *
[
ûû 	
JsonProperty
ûû	 
(
ûû 
$str
ûû 
)
ûû  
]
ûû  !
public
üü 
string
üü 
Culture
üü 
{
üü 
get
üü  #
;
üü# $
set
üü% (
;
üü( )
}
üü* +
[
ßß 	
JsonProperty
ßß	 
(
ßß 
$str
ßß !
)
ßß! "
]
ßß" #
public
®® 
OrderByDirection
®® 
	Direction
®®  )
{
®®* +
get
®®, /
;
®®/ 0
set
®®1 4
;
®®4 5
}
®®6 7
=
®®8 9
OrderByDirection
®®: J
.
®®J K
	Ascending
®®K T
;
®®T U
[
∞∞ 	
JsonProperty
∞∞	 
(
∞∞ 
$str
∞∞ 
)
∞∞ 
]
∞∞ 
public
±± 
string
±± 
Key
±± 
{
±± 
get
±± 
;
±±  
set
±±! $
;
±±$ %
}
±±& '
[
ππ 	
JsonProperty
ππ	 
(
ππ 
$str
ππ 
)
ππ  
]
ππ  !
public
∫∫ 
string
∫∫ 
Keyword
∫∫ 
{
∫∫ 
get
∫∫  #
;
∫∫# $
set
∫∫% (
;
∫∫( )
}
∫∫* +
[
¬¬ 	
JsonProperty
¬¬	 
(
¬¬ 
$str
¬¬ 
)
¬¬ 
]
¬¬  
public
√√ 
Common
√√ 
.
√√ 
Utility
√√ 
.
√√ 
Enums
√√ #
.
√√# $
SWStatus
√√$ ,
?
√√, -
Status
√√. 4
{
√√5 6
get
√√7 :
;
√√: ;
set
√√< ?
;
√√? @
}
√√A B
[
ÀÀ 	
JsonProperty
ÀÀ	 
(
ÀÀ 
$str
ÀÀ 
)
ÀÀ  
]
ÀÀ  !
public
ÃÃ 
string
ÃÃ 
OrderBy
ÃÃ 
{
ÃÃ 
get
ÃÃ  #
;
ÃÃ# $
set
ÃÃ% (
;
ÃÃ( )
}
ÃÃ* +
=
ÃÃ, -
$str
ÃÃ. 2
;
ÃÃ2 3
[
‘‘ 	
JsonProperty
‘‘	 
(
‘‘ 
$str
‘‘ !
)
‘‘! "
]
‘‘" #
public
’’ 
int
’’ 
	PageIndex
’’ 
{
’’ 
get
’’ "
;
’’" #
set
’’$ '
;
’’' (
}
’’) *
=
’’+ ,
$num
’’- .
;
’’. /
[
›› 	
JsonProperty
››	 
(
›› 
$str
››  
)
››  !
]
››! "
public
ﬁﬁ 
int
ﬁﬁ 
?
ﬁﬁ 
PageSize
ﬁﬁ 
{
ﬁﬁ 
get
ﬁﬁ "
;
ﬁﬁ" #
set
ﬁﬁ$ '
;
ﬁﬁ' (
}
ﬁﬁ) *
=
ﬁﬁ+ ,
$num
ﬁﬁ- /
;
ﬁﬁ/ 0
[
ÊÊ 	
JsonProperty
ÊÊ	 
(
ÊÊ 
$str
ÊÊ !
)
ÊÊ! "
]
ÊÊ" #
public
ÁÁ 
string
ÁÁ 
	UserAgent
ÁÁ 
{
ÁÁ  !
get
ÁÁ" %
;
ÁÁ% &
set
ÁÁ' *
;
ÁÁ* +
}
ÁÁ, -
[
ÔÔ 	
JsonProperty
ÔÔ	 
(
ÔÔ 
$str
ÔÔ 
)
ÔÔ 
]
ÔÔ  
public
 
string
 
UserId
 
{
 
get
 "
;
" #
set
$ '
;
' (
}
) *
[
ÚÚ 	
JsonProperty
ÚÚ	 
(
ÚÚ 
$str
ÚÚ  
)
ÚÚ  !
]
ÚÚ! "
public
ÛÛ 
DateTime
ÛÛ 
?
ÛÛ 
FromDate
ÛÛ !
{
ÛÛ" #
get
ÛÛ$ '
;
ÛÛ' (
set
ÛÛ) ,
;
ÛÛ, -
}
ÛÛ. /
[
ıı 	
JsonProperty
ıı	 
(
ıı 
$str
ıı 
)
ıı 
]
ıı  
public
ˆˆ 
DateTime
ˆˆ 
?
ˆˆ 
ToDate
ˆˆ 
{
ˆˆ  !
get
ˆˆ" %
;
ˆˆ% &
set
ˆˆ' *
;
ˆˆ* +
}
ˆˆ, -
}
˜˜ 
}¯¯ µ 
WD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\ViewModelBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

ViewModels )
{ 
public 

abstract 
class 
ViewModelBase '
<' (

TDbContext( 2
,2 3
TModel4 :
,: ;
TView< A
>A B
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
ViewModelBase #
<# $

TDbContext$ .
,. /
TModel0 6
,6 7
TView8 =
>= >
{   
[&& 	

JsonIgnore&&	 
]&& 
private'' 
bool'' 
isValid'' 
='' 
true'' #
;''# $
private,, 
static,, 
DefaultRepository,, (
<,,( )

TDbContext,,) 3
,,,3 4
TModel,,5 ;
,,,; <
TView,,= B
>,,B C
_repo,,D I
;,,I J
private11 
IMapper11 
_mapper11 
;11  
private66 
TModel66 
_model66 
;66 
private;; 
IMapper;; 
_modelMapper;; $
;;;$ %
[== 	

JsonIgnore==	 
]== 
public>> 
static>> 
DefaultRepository>> '
<>>' (

TDbContext>>( 2
,>>2 3
TModel>>4 :
,>>: ;
TView>>< A
>>>A B

Repository>>C M
{>>N O
get?? 
{?? 
return?? 
_repo?? 
???? !
(??" #
_repo??# (
=??) *
DefaultRepository??+ <
<??< =

TDbContext??= G
,??G H
TModel??I O
,??O P
TView??Q V
>??V W
.??W X
Instance??X `
)??` a
;??a b
}??c d
set@@ 
=>@@ 
_repo@@ 
=@@ 
value@@  
;@@  !
}AA 	
[II 	

JsonIgnoreII	 
]II 
publicJJ 
	ExceptionJJ 
	ExceptionJJ "
{JJ# $
getJJ% (
;JJ( )
setJJ* -
;JJ- .
}JJ/ 0
[RR 	

JsonIgnoreRR	 
]RR 
publicSS 
boolSS 
IsCloneSS 
{SS 
getSS !
;SS! "
setSS# &
;SS& '
}SS( )
=SS* +
falseSS, 1
;SS1 2
[[[ 	

JsonIgnore[[	 
][[ 
public\\ 
bool\\ 

IsLazyLoad\\ 
{\\  
get\\! $
;\\$ %
set\\& )
;\\) *
}\\+ ,
=\\- .
true\\/ 3
;\\3 4
[dd 	

JsonIgnoredd	 
]dd 
publicee 
Listee 
<ee 
SupportedCultureee $
>ee$ % 
ListSupportedCultureee& :
{ee; <
getee= @
;ee@ A
seteeB E
;eeE F
}eeG H
[mm 	

JsonIgnoremm	 
]mm 
publicnn 
IMappernn 
Mappernn 
{nn 
getoo 
{oo 
returnoo 
_mapperoo  
??oo! #
(oo$ %
_mapperoo% ,
=oo- .
thisoo/ 3
.oo3 4
CreateMapperoo4 @
(oo@ A
)ooA B
)ooB C
;ooC D
}ooE F
setpp 
=>pp 
_mapperpp 
=pp 
valuepp "
;pp" #
}qq 	
[yy 	

JsonIgnoreyy	 
]yy 
publiczz 
TModelzz 
Modelzz 
{zz 
get{{ 
{{{ 
if|| 
(|| 
_model|| 
==|| 
null|| "
)||" #
{}} 
Type~~ 
	classType~~ "
=~~# $
typeof~~% +
(~~+ ,
TModel~~, 2
)~~2 3
;~~3 4
ConstructorInfo #
classConstructor$ 4
=5 6
	classType7 @
.@ A
GetConstructorA O
(O P
newP S
TypeT X
[X Y
]Y Z
{[ \
}] ^
)^ _
;_ `
_model
ÄÄ 
=
ÄÄ 
(
ÄÄ 
TModel
ÄÄ $
)
ÄÄ$ %
classConstructor
ÄÄ% 5
.
ÄÄ5 6
Invoke
ÄÄ6 <
(
ÄÄ< =
new
ÄÄ= @
object
ÄÄA G
[
ÄÄG H
]
ÄÄH I
{
ÄÄJ K
}
ÄÄL M
)
ÄÄM N
;
ÄÄN O
}
ÅÅ 
return
ÇÇ 
_model
ÇÇ 
;
ÇÇ 
}
ÉÉ 
set
ÑÑ 
=>
ÑÑ 
_model
ÑÑ 
=
ÑÑ 
value
ÑÑ !
;
ÑÑ! "
}
ÖÖ 	
[
çç 	

JsonIgnore
çç	 
]
çç 
public
éé 
IMapper
éé 
ModelMapper
éé "
{
éé# $
get
èè 
{
èè 
return
èè 
_modelMapper
èè %
??
èè& (
(
èè) *
_modelMapper
èè* 6
=
èè7 8
this
èè9 =
.
èè= >
CreateModelMapper
èè> O
(
èèO P
)
èèP Q
)
èèQ R
;
èèR S
}
èèT U
set
êê 
=>
êê 
_modelMapper
êê 
=
êê  !
value
êê" '
;
êê' (
}
ëë 	
[
ôô 	

JsonIgnore
ôô	 
]
ôô 
public
öö 
int
öö 
	PageIndex
öö 
{
öö 
get
öö "
;
öö" #
set
öö$ '
;
öö' (
}
öö) *
=
öö+ ,
$num
öö- .
;
öö. /
[
¢¢ 	

JsonIgnore
¢¢	 
]
¢¢ 
public
££ 
int
££ 
PageSize
££ 
{
££ 
get
££ !
;
££! "
set
££# &
;
££& '
}
££( )
=
££* +
$num
££, 0
;
££0 1
[
´´ 	
JsonProperty
´´	 
(
´´ 
$str
´´  
)
´´  !
]
´´! "
public
¨¨ 
int
¨¨ 
?
¨¨ 
Priority
¨¨ 
{
¨¨ 
get
¨¨ "
;
¨¨" #
set
¨¨$ '
;
¨¨' (
}
¨¨) *
=
¨¨+ ,
$num
¨¨- .
;
¨¨. /
[
¥¥ 	
JsonProperty
¥¥	 
(
¥¥ 
$str
¥¥ 
)
¥¥ 
]
¥¥  
public
µµ 
SWStatus
µµ 
Status
µµ 
{
µµ  
get
µµ! $
;
µµ$ %
set
µµ& )
;
µµ) *
}
µµ+ ,
=
µµ- .
SWStatus
µµ/ 7
.
µµ7 8
Preview
µµ8 ?
;
µµ? @
[
ΩΩ 	
JsonProperty
ΩΩ	 
(
ΩΩ 
$str
ΩΩ &
)
ΩΩ& '
]
ΩΩ' (
public
ææ 
string
ææ 
Specificulture
ææ $
{
ææ% &
get
ææ' *
;
ææ* +
set
ææ, /
;
ææ/ 0
}
ææ1 2
private
ƒƒ 
IMapper
ƒƒ 
CreateMapper
ƒƒ $
(
ƒƒ$ %
)
ƒƒ% &
{
≈≈ 	
var
∆∆ 
config
∆∆ 
=
∆∆ 
new
∆∆ !
MapperConfiguration
∆∆ 0
(
∆∆0 1
cfg
∆∆1 4
=>
∆∆5 7
cfg
∆∆8 ;
.
∆∆; <
	CreateMap
∆∆< E
<
∆∆E F
TModel
∆∆F L
,
∆∆L M
TView
∆∆N S
>
∆∆S T
(
∆∆T U
)
∆∆U V
.
∆∆V W

ReverseMap
∆∆W a
(
∆∆a b
)
∆∆b c
)
∆∆c d
;
∆∆d e
var
«« 
mapper
«« 
=
«« 
new
«« 
Mapper
«« #
(
««# $
config
««$ *
)
««* +
;
««+ ,
return
»» 
mapper
»» 
;
»» 
}
…… 	
private
œœ 
IMapper
œœ 
CreateModelMapper
œœ )
(
œœ) *
)
œœ* +
{
–– 	
var
—— 
config
—— 
=
—— 
new
—— !
MapperConfiguration
—— 0
(
——0 1
cfg
——1 4
=>
——5 7
cfg
——8 ;
.
——; <
	CreateMap
——< E
<
——E F
TModel
——F L
,
——L M
TModel
——N T
>
——T U
(
——U V
)
——V W
.
——W X

ReverseMap
——X b
(
——b c
)
——c d
)
——d e
;
——e f
var
““ 
mapper
““ 
=
““ 
new
““ 
Mapper
““ #
(
““# $
config
““$ *
)
““* +
;
““+ ,
return
”” 
mapper
”” 
;
”” 
}
‘‘ 	
[
÷÷ 	

JsonIgnore
÷÷	 
]
÷÷ 
public
◊◊ 
List
◊◊ 
<
◊◊ 
string
◊◊ 
>
◊◊ 
Errors
◊◊ "
{
◊◊# $
get
◊◊% (
;
◊◊( )
set
◊◊* -
;
◊◊- .
}
◊◊/ 0
=
◊◊1 2
new
◊◊3 6
List
◊◊7 ;
<
◊◊; <
string
◊◊< B
>
◊◊B C
(
◊◊C D
)
◊◊D E
;
◊◊E F
public
ŸŸ 
bool
ŸŸ 
IsValid
ŸŸ 
{
ŸŸ 
get
ŸŸ !
=>
ŸŸ" $
isValid
ŸŸ% ,
;
ŸŸ, -
set
ŸŸ. 1
=>
ŸŸ2 4
isValid
ŸŸ5 <
=
ŸŸ= >
value
ŸŸ? D
;
ŸŸD E
}
ŸŸF G
public
‰‰ 
virtual
‰‰ 
void
‰‰ 

ExpandView
‰‰ &
(
‰‰& '

TDbContext
‰‰' 1
_context
‰‰2 :
=
‰‰; <
null
‰‰= A
,
‰‰A B#
IDbContextTransaction
‰‰C X
_transaction
‰‰Y e
=
‰‰f g
null
‰‰h l
)
‰‰l m
{
ÂÂ 	
}
ÊÊ 	
public
ÏÏ 
virtual
ÏÏ 

TDbContext
ÏÏ !
InitContext
ÏÏ" -
(
ÏÏ- .
)
ÏÏ. /
{
ÌÌ 	
Type
ÓÓ 
	classType
ÓÓ 
=
ÓÓ 
typeof
ÓÓ #
(
ÓÓ# $

TDbContext
ÓÓ$ .
)
ÓÓ. /
;
ÓÓ/ 0
ConstructorInfo
ÔÔ 
classConstructor
ÔÔ ,
=
ÔÔ- .
	classType
ÔÔ/ 8
.
ÔÔ8 9
GetConstructor
ÔÔ9 G
(
ÔÔG H
new
ÔÔH K
Type
ÔÔL P
[
ÔÔP Q
]
ÔÔQ R
{
ÔÔS T
}
ÔÔU V
)
ÔÔV W
;
ÔÔW X

TDbContext
 
context
 
=
  
(
! "

TDbContext
" ,
)
, -
classConstructor
- =
.
= >
Invoke
> D
(
D E
new
E H
object
I O
[
O P
]
P Q
{
R S
}
T U
)
U V
;
V W
return
ÚÚ 
context
ÚÚ 
;
ÚÚ 
}
ÛÛ 	
public
˘˘ 
virtual
˘˘ 
TModel
˘˘ 
	InitModel
˘˘ '
(
˘˘' (
)
˘˘( )
{
˙˙ 	
Type
˚˚ 
	classType
˚˚ 
=
˚˚ 
typeof
˚˚ #
(
˚˚# $
TModel
˚˚$ *
)
˚˚* +
;
˚˚+ ,
ConstructorInfo
¸¸ 
classConstructor
¸¸ ,
=
¸¸- .
	classType
¸¸/ 8
.
¸¸8 9
GetConstructor
¸¸9 G
(
¸¸G H
new
¸¸H K
Type
¸¸L P
[
¸¸P Q
]
¸¸Q R
{
¸¸S T
}
¸¸U V
)
¸¸V W
;
¸¸W X
TModel
˝˝ 
context
˝˝ 
=
˝˝ 
(
˝˝ 
TModel
˝˝ $
)
˝˝$ %
classConstructor
˝˝% 5
.
˝˝5 6
Invoke
˝˝6 <
(
˝˝< =
new
˝˝= @
object
˝˝A G
[
˝˝G H
]
˝˝H I
{
˝˝J K
}
˝˝L M
)
˝˝M N
;
˝˝N O
return
ˇˇ 
context
ˇˇ 
;
ˇˇ 
}
ÄÄ 	
public
ää 
virtual
ää 
TView
ää 
InitView
ää %
(
ää% &
TModel
ää& ,
model
ää- 2
=
ää3 4
null
ää5 9
,
ää9 :
bool
ää; ?

isLazyLoad
ää@ J
=
ääK L
true
ääM Q
,
ääQ R

TDbContext
ääS ]
_context
ää^ f
=
ääg h
null
ääi m
,
ääm n$
IDbContextTransactionääo Ñ
_transactionääÖ ë
=ääí ì
nullääî ò
)ääò ô
{
ãã 	
Type
åå 
	classType
åå 
=
åå 
typeof
åå #
(
åå# $
TView
åå$ )
)
åå) *
;
åå* +
ConstructorInfo
éé 
classConstructor
éé ,
=
éé- .
	classType
éé/ 8
.
éé8 9
GetConstructor
éé9 G
(
ééG H
new
ééH K
Type
ééL P
[
ééP Q
]
ééQ R
{
ééS T
}
ééU V
)
ééV W
;
ééW X
if
èè 
(
èè 
model
èè 
==
èè 
null
èè 
&&
èè  
classConstructor
èè! 1
!=
èè2 4
null
èè5 9
)
èè9 :
{
êê 
return
ëë 
(
ëë 
TView
ëë 
)
ëë 
classConstructor
ëë .
.
ëë. /
Invoke
ëë/ 5
(
ëë5 6
new
ëë6 9
object
ëë: @
[
ëë@ A
]
ëëA B
{
ëëC D
}
ëëE F
)
ëëF G
;
ëëG H
}
íí 
else
ìì 
{
îî 
classConstructor
ïï  
=
ïï! "
	classType
ïï# ,
.
ïï, -
GetConstructor
ïï- ;
(
ïï; <
new
ïï< ?
Type
ïï@ D
[
ïïD E
]
ïïE F
{
ïïG H
typeof
ïïI O
(
ïïO P
TModel
ïïP V
)
ïïV W
,
ïïW X
typeof
ïïY _
(
ïï_ `
bool
ïï` d
)
ïïd e
,
ïïe f
typeof
ïïg m
(
ïïm n

TDbContext
ïïn x
)
ïïx y
,
ïïy z
typeofïï{ Å
(ïïÅ Ç%
IDbContextTransactionïïÇ ó
)ïïó ò
}ïïô ö
)ïïö õ
;ïïõ ú
if
ññ 
(
ññ 
classConstructor
ññ $
!=
ññ% '
null
ññ( ,
)
ññ, -
{
óó 
return
òò 
(
òò 
TView
òò !
)
òò! "
classConstructor
òò" 2
.
òò2 3
Invoke
òò3 9
(
òò9 :
new
òò: =
object
òò> D
[
òòD E
]
òòE F
{
òòG H
model
òòI N
,
òòN O

isLazyLoad
òòP Z
,
òòZ [
_context
òò\ d
,
òòd e
_transaction
òòf r
}
òòs t
)
òòt u
;
òòu v
}
ôô 
else
öö 
{
õõ 
classConstructor
úú $
=
úú% &
	classType
úú' 0
.
úú0 1
GetConstructor
úú1 ?
(
úú? @
new
úú@ C
Type
úúD H
[
úúH I
]
úúI J
{
úúK L
typeof
úúM S
(
úúS T
TModel
úúT Z
)
úúZ [
,
úú[ \
typeof
úú] c
(
úúc d

TDbContext
úúd n
)
úún o
,
úúo p
typeof
úúq w
(
úúw x$
IDbContextTransactionúúx ç
)úúç é
}úúè ê
)úúê ë
;úúë í
return
ùù 
(
ùù 
TView
ùù !
)
ùù! "
classConstructor
ùù" 2
.
ùù2 3
Invoke
ùù3 9
(
ùù9 :
new
ùù: =
object
ùù> D
[
ùùD E
]
ùùE F
{
ùùG H
model
ùùI N
,
ùùN O
_context
ùùP X
,
ùùX Y
_transaction
ùùZ f
}
ùùg h
)
ùùh i
;
ùùi j
}
ûû 
}
üü 
}
†† 	
public
≤≤ 
virtual
≤≤ 
TModel
≤≤ 

ParseModel
≤≤ (
(
≤≤( )

TDbContext
≤≤) 3
_context
≤≤4 <
=
≤≤= >
null
≤≤? C
,
≤≤C D#
IDbContextTransaction
≤≤E Z
_transaction
≤≤[ g
=
≤≤h i
null
≤≤j n
)
≤≤n o
{
≥≥ 	
this
µµ 
.
µµ 
Model
µµ 
=
µµ 
	InitModel
µµ "
(
µµ" #
)
µµ# $
;
µµ$ %
Mapper
∂∂ 
.
∂∂ 
Map
∂∂ 
<
∂∂ 
TView
∂∂ 
,
∂∂ 
TModel
∂∂ $
>
∂∂$ %
(
∂∂% &
(
∂∂& '
TView
∂∂' ,
)
∂∂, -
this
∂∂- 1
,
∂∂1 2
Model
∂∂3 8
)
∂∂8 9
;
∂∂9 :
return
∑∑ 
this
∑∑ 
.
∑∑ 
Model
∑∑ 
;
∑∑ 
}
∏∏ 	
public
¡¡ 
virtual
¡¡ 
TView
¡¡ 
	ParseView
¡¡ &
(
¡¡& '
bool
¡¡' +
isExpand
¡¡, 4
=
¡¡5 6
true
¡¡7 ;
,
¡¡; <

TDbContext
¡¡= G
_context
¡¡H P
=
¡¡Q R
null
¡¡S W
,
¡¡W X#
IDbContextTransaction
¡¡Y n
_transaction
¡¡o {
=
¡¡| }
null¡¡~ Ç
)
¬¬4 5
{
√√ 	
Mapper
≈≈ 
.
≈≈ 
Map
≈≈ 
<
≈≈ 
TModel
≈≈ 
,
≈≈ 
TView
≈≈ $
>
≈≈$ %
(
≈≈% &
Model
≈≈& +
,
≈≈+ ,
(
≈≈- .
TView
≈≈. 3
)
≈≈3 4
this
≈≈4 8
)
≈≈8 9
;
≈≈9 :
if
∆∆ 
(
∆∆ 
isExpand
∆∆ 
)
∆∆ 
{
«« 
bool
»» 
isRoot
»» 
=
»» 
_context
»» &
==
»»' )
null
»»* .
;
»». /
var
…… 
context
…… 
=
…… 
_context
…… &
??
……' )
InitContext
……* 5
(
……5 6
)
……6 7
;
……7 8
var
   
transaction
   
=
    !
_transaction
  " .
??
  / 1
context
  2 9
.
  9 :
Database
  : B
.
  B C
BeginTransaction
  C S
(
  S T
)
  T U
;
  U V
try
ÀÀ 
{
ÃÃ 

ExpandView
ÕÕ 
(
ÕÕ 
context
ÕÕ &
,
ÕÕ& '
transaction
ÕÕ( 3
)
ÕÕ3 4
;
ÕÕ4 5
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ  
ex
œœ! #
)
œœ# $
{
–– 

Repository
—— 
.
—— 
LogErrorMessage
—— .
(
——. /
ex
——/ 1
)
——1 2
;
——2 3
if
““ 
(
““ 
isRoot
““ 
)
““ 
{
”” 
transaction
’’ #
.
’’# $
Rollback
’’$ ,
(
’’, -
)
’’- .
;
’’. /
}
÷÷ 
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
isRoot
⁄⁄ 
)
⁄⁄ 
{
€€ 
context
›› 
.
››  
Dispose
››  '
(
››' (
)
››( )
;
››) *
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
return
·· 
(
·· 
TView
·· 
)
·· 
this
·· 
;
·· 
}
‚‚ 	
public
ÈÈ 
virtual
ÈÈ 
void
ÈÈ 
Validate
ÈÈ $
(
ÈÈ$ %

TDbContext
ÈÈ% /
_context
ÈÈ0 8
=
ÈÈ9 :
null
ÈÈ; ?
,
ÈÈ? @#
IDbContextTransaction
ÈÈA V
_transaction
ÈÈW c
=
ÈÈd e
null
ÈÈf j
)
ÈÈj k
{
ÍÍ 	
var
ÎÎ 
validateContext
ÎÎ 
=
ÎÎ  !
new
ÎÎ" %
System
ÎÎ& ,
.
ÎÎ, -
ComponentModel
ÎÎ- ;
.
ÎÎ; <
DataAnnotations
ÎÎ< K
.
ÎÎK L
ValidationContext
ÎÎL ]
(
ÎÎ] ^
this
ÎÎ^ b
,
ÎÎb c
serviceProvider
ÎÎd s
:
ÎÎs t
null
ÎÎu y
,
ÎÎy z
itemsÎÎ{ Ä
:ÎÎÄ Å
nullÎÎÇ Ü
)ÎÎÜ á
;ÎÎá à
var
ÏÏ 
results
ÏÏ 
=
ÏÏ 
new
ÏÏ 
List
ÏÏ "
<
ÏÏ" #
ValidationResult
ÏÏ# 3
>
ÏÏ3 4
(
ÏÏ4 5
)
ÏÏ5 6
;
ÏÏ6 7
IsValid
ÓÓ 
=
ÓÓ 
	Validator
ÓÓ 
.
ÓÓ  
TryValidateObject
ÓÓ  1
(
ÓÓ1 2
this
ÓÓ2 6
,
ÓÓ6 7
validateContext
ÓÓ8 G
,
ÓÓG H
results
ÓÓI P
)
ÓÓP Q
;
ÓÓQ R
if
ÔÔ 
(
ÔÔ 
!
ÔÔ 
IsValid
ÔÔ 
)
ÔÔ 
{
 
Errors
ÒÒ 
.
ÒÒ 
AddRange
ÒÒ 
(
ÒÒ  
results
ÒÒ  '
.
ÒÒ' (
Select
ÒÒ( .
(
ÒÒ. /
e
ÒÒ/ 0
=>
ÒÒ1 3
e
ÒÒ4 5
.
ÒÒ5 6
ErrorMessage
ÒÒ6 B
)
ÒÒB C
)
ÒÒC D
;
ÒÒD E
}
ÚÚ 
}
ÛÛ 	
public
ÅÅ 
virtual
ÅÅ 
async
ÅÅ 
Task
ÅÅ !
<
ÅÅ! " 
RepositoryResponse
ÅÅ" 4
<
ÅÅ4 5
List
ÅÅ5 9
<
ÅÅ9 :
TView
ÅÅ: ?
>
ÅÅ? @
>
ÅÅ@ A
>
ÅÅA B

CloneAsync
ÅÅC M
(
ÅÅM N
TModel
ÅÅN T
model
ÅÅU Z
,
ÅÅZ [
List
ÅÅ\ `
<
ÅÅ` a
SupportedCulture
ÅÅa q
>
ÅÅq r
cloneCulturesÅÅs Ä
,
ÇÇ 

TDbContext
ÇÇ 
_context
ÇÇ !
=
ÇÇ" #
null
ÇÇ$ (
,
ÇÇ( )#
IDbContextTransaction
ÇÇ* ?
_transaction
ÇÇ@ L
=
ÇÇM N
null
ÇÇO S
)
ÇÇS T
{
ÉÉ 	
bool
ÑÑ 
isRoot
ÑÑ 
=
ÑÑ 
_context
ÑÑ "
==
ÑÑ# %
null
ÑÑ& *
;
ÑÑ* +
var
ÖÖ 
context
ÖÖ 
=
ÖÖ 
_context
ÖÖ "
??
ÖÖ# %
InitContext
ÖÖ& 1
(
ÖÖ1 2
)
ÖÖ2 3
;
ÖÖ3 4
var
ÜÜ 
transaction
ÜÜ 
=
ÜÜ 
_transaction
ÜÜ *
??
ÜÜ+ -
context
ÜÜ. 5
.
ÜÜ5 6
Database
ÜÜ6 >
.
ÜÜ> ?
BeginTransaction
ÜÜ? O
(
ÜÜO P
)
ÜÜP Q
;
ÜÜQ R 
RepositoryResponse
áá 
<
áá 
List
áá #
<
áá# $
TView
áá$ )
>
áá) *
>
áá* +
result
áá, 2
=
áá3 4
new
áá5 8 
RepositoryResponse
áá9 K
<
ááK L
List
ááL P
<
ááP Q
TView
ááQ V
>
ááV W
>
ááW X
(
ááX Y
)
ááY Z
{
àà 
	IsSucceed
ââ 
=
ââ 
true
ââ  
,
ââ  !
Data
ää 
=
ää 
new
ää 
List
ää 
<
ää  
TView
ää  %
>
ää% &
(
ää& '
)
ää' (
}
ãã 
;
ãã 
try
çç 
{
éé 
if
èè 
(
èè 
cloneCultures
èè !
!=
èè" $
null
èè% )
)
èè) *
{
êê 
foreach
ëë 
(
ëë 
var
ëë  
culture
ëë! (
in
ëë) +
cloneCultures
ëë, 9
)
ëë9 :
{
íí 
string
ìì 
desSpecificulture
ìì 0
=
ìì1 2
culture
ìì3 :
.
ìì: ;
Specificulture
ìì; I
;
ììI J
TView
ïï 
view
ïï "
=
ïï# $
InitView
ïï% -
(
ïï- .
)
ïï. /
;
ïï/ 0
view
ññ 
.
ññ 
Model
ññ "
=
ññ# $
model
ññ% *
;
ññ* +
view
óó 
.
óó 
	ParseView
óó &
(
óó& '
isExpand
óó' /
:
óó/ 0
false
óó1 6
,
óó6 7
_context
óó8 @
:
óó@ A
context
óóB I
,
óóI J
_transaction
óóK W
:
óóW X
transaction
óóY d
)
óód e
;
óóe f
view
òò 
.
òò 
Specificulture
òò +
=
òò, -
desSpecificulture
òò. ?
;
òò? @
bool
öö 
isExist
öö $
=
öö% &

Repository
öö' 1
.
öö1 2
CheckIsExists
öö2 ?
(
öö? @
view
öö@ D
.
ööD E

ParseModel
ööE O
(
ööO P
_context
ööP X
,
ööX Y
_transaction
ööZ f
)
ööf g
,
öög h
_context
ööi q
:
ööq r
context
öös z
,
ööz {
_transactionöö| à
:ööà â
transactionööä ï
)ööï ñ
;ööñ ó
if
úú 
(
úú 
isExist
úú #
)
úú# $
{
ùù 
result
ûû "
.
ûû" #
	IsSucceed
ûû# ,
=
ûû- .
true
ûû/ 3
;
ûû3 4
result
üü "
.
üü" #
Data
üü# '
.
üü' (
Add
üü( +
(
üü+ ,
view
üü, 0
)
üü0 1
;
üü1 2
}
†† 
else
°° 
{
¢¢ 
var
££ 
cloneResult
££  +
=
££, -
await
££. 3
view
££4 8
.
££8 9
SaveModelAsync
££9 G
(
££G H
false
££H M
,
££M N
context
££O V
,
££V W
transaction
££X c
)
££c d
.
££d e
ConfigureAwait
££e s
(
££s t
false
££t y
)
££y z
;
££z {
if
§§ 
(
§§  
cloneResult
§§  +
.
§§+ ,
	IsSucceed
§§, 5
)
§§5 6
{
•• 
var
¶¶  #
cloneSubResult
¶¶$ 2
=
¶¶3 4
await
¶¶5 :!
CloneSubModelsAsync
¶¶; N
(
¶¶N O
cloneResult
¶¶O Z
.
¶¶Z [
Data
¶¶[ _
,
¶¶_ `
cloneCultures
¶¶a n
,
¶¶n o
context
¶¶p w
,
¶¶w x
transaction¶¶y Ñ
)¶¶Ñ Ö
.¶¶Ö Ü
ConfigureAwait¶¶Ü î
(¶¶î ï
false¶¶ï ö
)¶¶ö õ
;¶¶õ ú
if
ßß  "
(
ßß# $
!
ßß$ %
cloneSubResult
ßß% 3
.
ßß3 4
	IsSucceed
ßß4 =
)
ßß= >
{
®®  !
cloneResult
©©$ /
.
©©/ 0
Errors
©©0 6
.
©©6 7
AddRange
©©7 ?
(
©©? @
cloneSubResult
©©@ N
.
©©N O
Errors
©©O U
)
©©U V
;
©©V W
cloneResult
™™$ /
.
™™/ 0
	Exception
™™0 9
=
™™: ;
cloneSubResult
™™< J
.
™™J K
	Exception
™™K T
;
™™T U
}
´´  !
result
≠≠  &
.
≠≠& '
	IsSucceed
≠≠' 0
=
≠≠1 2
result
≠≠3 9
.
≠≠9 :
	IsSucceed
≠≠: C
&&
≠≠D F
cloneResult
≠≠G R
.
≠≠R S
	IsSucceed
≠≠S \
&&
≠≠] _
cloneSubResult
≠≠` n
.
≠≠n o
	IsSucceed
≠≠o x
;
≠≠x y
result
ÆÆ  &
.
ÆÆ& '
Data
ÆÆ' +
.
ÆÆ+ ,
Add
ÆÆ, /
(
ÆÆ/ 0
cloneResult
ÆÆ0 ;
.
ÆÆ; <
Data
ÆÆ< @
)
ÆÆ@ A
;
ÆÆA B
}
ØØ 
else
∞∞  
{
±± 
result
≤≤  &
.
≤≤& '
	IsSucceed
≤≤' 0
=
≤≤1 2
result
≤≤3 9
.
≤≤9 :
	IsSucceed
≤≤: C
&&
≤≤D F
cloneResult
≤≤G R
.
≤≤R S
	IsSucceed
≤≤S \
;
≤≤\ ]
result
≥≥  &
.
≥≥& '
Errors
≥≥' -
.
≥≥- .
AddRange
≥≥. 6
(
≥≥6 7
cloneResult
≥≥7 B
.
≥≥B C
Errors
≥≥C I
)
≥≥I J
;
≥≥J K
result
¥¥  &
.
¥¥& '
	Exception
¥¥' 0
=
¥¥1 2
cloneResult
¥¥3 >
.
¥¥> ?
	Exception
¥¥? H
;
¥¥H I
}
µµ 
}
∂∂ 
if
∏∏ 
(
∏∏ 
result
∏∏ "
.
∏∏" #
	IsSucceed
∏∏# ,
)
∏∏, -
{
ππ 
if
∫∫ 
(
∫∫  
isRoot
∫∫  &
)
∫∫& '
{
ªª 
transaction
ºº  +
.
ºº+ ,
Commit
ºº, 2
(
ºº2 3
)
ºº3 4
;
ºº4 5
}
ΩΩ 
}
ææ 
else
øø 
{
¿¿ 
if
¡¡ 
(
¡¡  
isRoot
¡¡  &
)
¡¡& '
{
¬¬ 
transaction
√√  +
.
√√+ ,
Rollback
√√, 4
(
√√4 5
)
√√5 6
;
√√6 7
}
ƒƒ 
}
≈≈ 
}
∆∆ 
return
«« 
result
«« !
;
««! "
}
»» 
else
…… 
{
   
return
ÀÀ 
result
ÀÀ !
;
ÀÀ! "
}
ÃÃ 
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
ex
ŒŒ 
)
ŒŒ  
{
œœ 
result
–– 
.
–– 
	IsSucceed
––  
=
––! "
false
––# (
;
––( )
result
—— 
.
—— 
	Exception
——  
=
——! "
ex
——# %
;
——% &
return
““ 
result
““ 
;
““ 
}
”” 
finally
‘‘ 
{
’’ 
if
÷÷ 
(
÷÷ 
isRoot
÷÷ 
)
÷÷ 
{
◊◊ 
context
ÿÿ 
.
ÿÿ 
Dispose
ÿÿ #
(
ÿÿ# $
)
ÿÿ$ %
;
ÿÿ% &
}
ŸŸ 
}
⁄⁄ 
}
€€ 	
public
ÁÁ 
virtual
ÁÁ 
async
ÁÁ 
Task
ÁÁ !
<
ÁÁ! " 
RepositoryResponse
ÁÁ" 4
<
ÁÁ4 5
bool
ÁÁ5 9
>
ÁÁ9 :
>
ÁÁ: ;!
CloneSubModelsAsync
ÁÁ< O
(
ÁÁO P
TView
ÁÁP U
parent
ÁÁV \
,
ÁÁ\ ]
List
ÁÁ^ b
<
ÁÁb c
SupportedCulture
ÁÁc s
>
ÁÁs t
cloneCulturesÁÁu Ç
,ÁÁÇ É

TDbContextÁÁÑ é
_contextÁÁè ó
=ÁÁò ô
nullÁÁö û
,ÁÁû ü%
IDbContextTransactionÁÁ† µ
_transactionÁÁ∂ ¬
=ÁÁ√ ƒ
nullÁÁ≈ …
)ÁÁ…  
{
ÈÈ 	
var
ÍÍ 

taskSource
ÍÍ 
=
ÍÍ 
new
ÍÍ  "
TaskCompletionSource
ÍÍ! 5
<
ÍÍ5 6 
RepositoryResponse
ÍÍ6 H
<
ÍÍH I
bool
ÍÍI M
>
ÍÍM N
>
ÍÍN O
(
ÍÍO P
)
ÍÍP Q
;
ÍÍQ R

taskSource
ÎÎ 
.
ÎÎ 
	SetResult
ÎÎ  
(
ÎÎ  !
new
ÎÎ! $ 
RepositoryResponse
ÎÎ% 7
<
ÎÎ7 8
bool
ÎÎ8 <
>
ÎÎ< =
(
ÎÎ= >
)
ÎÎ> ?
{
ÎÎ@ A
	IsSucceed
ÎÎB K
=
ÎÎL M
true
ÎÎN R
,
ÎÎR S
Data
ÎÎT X
=
ÎÎY Z
true
ÎÎ[ _
}
ÎÎ` a
)
ÎÎa b
;
ÎÎb c
return
ÏÏ 

taskSource
ÏÏ 
.
ÏÏ 
Task
ÏÏ "
.
ÏÏ" #
Result
ÏÏ# )
;
ÏÏ) *
}
ÌÌ 	
public
ˆˆ 
virtual
ˆˆ 
async
ˆˆ 
Task
ˆˆ !
<
ˆˆ! " 
RepositoryResponse
ˆˆ" 4
<
ˆˆ4 5
bool
ˆˆ5 9
>
ˆˆ9 :
>
ˆˆ: ;
RemoveModelAsync
ˆˆ< L
(
ˆˆL M
bool
ˆˆM Q#
isRemoveRelatedModels
ˆˆR g
=
ˆˆh i
false
ˆˆj o
,
ˆˆo p

TDbContext
ˆˆq {
_contextˆˆ| Ñ
=ˆˆÖ Ü
nullˆˆá ã
,ˆˆã å%
IDbContextTransactionˆˆç ¢
_transactionˆˆ£ Ø
=ˆˆ∞ ±
nullˆˆ≤ ∂
)ˆˆ∂ ∑
{
˜˜ 	
bool
¯¯ 
isRoot
¯¯ 
=
¯¯ 
_context
¯¯ "
==
¯¯# %
null
¯¯& *
;
¯¯* +
var
˘˘ 
context
˘˘ 
=
˘˘ 
_context
˘˘ "
??
˘˘# %
InitContext
˘˘& 1
(
˘˘1 2
)
˘˘2 3
;
˘˘3 4
var
˙˙ 
transaction
˙˙ 
=
˙˙ 
_transaction
˙˙ *
??
˙˙+ -
context
˙˙. 5
.
˙˙5 6
Database
˙˙6 >
.
˙˙> ?
BeginTransaction
˙˙? O
(
˙˙O P
)
˙˙P Q
;
˙˙Q R 
RepositoryResponse
¸¸ 
<
¸¸ 
bool
¸¸ #
>
¸¸# $
result
¸¸% +
=
¸¸, -
new
¸¸. 1 
RepositoryResponse
¸¸2 D
<
¸¸D E
bool
¸¸E I
>
¸¸I J
(
¸¸J K
)
¸¸K L
{
¸¸M N
	IsSucceed
¸¸O X
=
¸¸Y Z
true
¸¸[ _
}
¸¸` a
;
¸¸a b
try
˝˝ 
{
˛˛ 

ParseModel
ˇˇ 
(
ˇˇ 
_context
ˇˇ #
,
ˇˇ# $
_transaction
ˇˇ% 1
)
ˇˇ1 2
;
ˇˇ2 3
if
ÄÄ 
(
ÄÄ #
isRemoveRelatedModels
ÄÄ )
)
ÄÄ) *
{
ÅÅ 
var
ÇÇ !
removeRelatedResult
ÇÇ +
=
ÇÇ, -
await
ÇÇ. 3&
RemoveRelatedModelsAsync
ÇÇ4 L
(
ÇÇL M
(
ÇÇM N
TView
ÇÇN S
)
ÇÇS T
this
ÇÇT X
,
ÇÇX Y
context
ÇÇZ a
,
ÇÇa b
transaction
ÇÇc n
)
ÇÇn o
.
ÇÇo p
ConfigureAwait
ÇÇp ~
(
ÇÇ~ 
falseÇÇ Ñ
)ÇÇÑ Ö
;ÇÇÖ Ü
if
ÉÉ 
(
ÉÉ !
removeRelatedResult
ÉÉ +
.
ÉÉ+ ,
	IsSucceed
ÉÉ, 5
)
ÉÉ5 6
{
ÑÑ 
result
ÖÖ 
=
ÖÖ  
await
ÖÖ! &

Repository
ÖÖ' 1
.
ÖÖ1 2
RemoveModelAsync
ÖÖ2 B
(
ÖÖB C
Model
ÖÖC H
,
ÖÖH I
context
ÖÖJ Q
,
ÖÖQ R
transaction
ÖÖS ^
)
ÖÖ^ _
.
ÖÖ_ `
ConfigureAwait
ÖÖ` n
(
ÖÖn o
false
ÖÖo t
)
ÖÖt u
;
ÖÖu v
}
ÜÜ 
else
áá 
{
àà 
result
ââ 
.
ââ 
	IsSucceed
ââ (
=
ââ) *
result
ââ+ 1
.
ââ1 2
	IsSucceed
ââ2 ;
&&
ââ< >!
removeRelatedResult
ââ? R
.
ââR S
	IsSucceed
ââS \
;
ââ\ ]
result
ää 
.
ää 
Errors
ää %
.
ää% &
AddRange
ää& .
(
ää. /!
removeRelatedResult
ää/ B
.
ääB C
Errors
ääC I
)
ääI J
;
ääJ K
result
ãã 
.
ãã 
	Exception
ãã (
=
ãã) *!
removeRelatedResult
ãã+ >
.
ãã> ?
	Exception
ãã? H
;
ããH I
}
åå 
}
çç 
else
éé 
{
èè 
result
êê 
=
êê 
await
êê "

Repository
êê# -
.
êê- .
RemoveModelAsync
êê. >
(
êê> ?
Model
êê? D
,
êêD E
context
êêF M
,
êêM N
transaction
êêO Z
)
êêZ [
.
êê[ \
ConfigureAwait
êê\ j
(
êêj k
false
êêk p
)
êêp q
;
êêq r
}
ëë 
if
íí 
(
íí 
result
íí 
.
íí 
	IsSucceed
íí $
)
íí$ %
{
ìì 
if
îî 
(
îî 
isRoot
îî 
)
îî 
{
ïï 
transaction
ññ #
.
ññ# $
Commit
ññ$ *
(
ññ* +
)
ññ+ ,
;
ññ, -
}
óó 
return
ôô 
result
ôô !
;
ôô! "
}
öö 
else
õõ 
{
úú 
if
ùù 
(
ùù 
isRoot
ùù 
)
ùù 
{
ûû 
transaction
üü #
.
üü# $
Rollback
üü$ ,
(
üü, -
)
üü- .
;
üü. /
}
†† 
result
°° 
.
°° 
	IsSucceed
°° $
=
°°% &
false
°°' ,
;
°°, -
return
¢¢ 
result
¢¢ !
;
¢¢! "
}
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
if
ßß 
(
ßß 
isRoot
ßß 
)
ßß 
{
®® 
transaction
™™ 
.
™™  
Rollback
™™  (
(
™™( )
)
™™) *
;
™™* +
}
´´ 
result
¨¨ 
.
¨¨ 
	IsSucceed
¨¨  
=
¨¨! "
false
¨¨# (
;
¨¨( )
result
≠≠ 
.
≠≠ 
	Exception
≠≠  
=
≠≠! "
ex
≠≠# %
;
≠≠% &
return
ÆÆ 
result
ÆÆ 
;
ÆÆ 
}
ØØ 
finally
∞∞ 
{
±± 
if
≤≤ 
(
≤≤ 
isRoot
≤≤ 
)
≤≤ 
{
≥≥ 
context
µµ 
.
µµ 
Dispose
µµ #
(
µµ# $
)
µµ$ %
;
µµ% &
}
∂∂ 
}
∑∑ 
}
∏∏ 	
public
√√ 
virtual
√√ 
async
√√ 
Task
√√ !
<
√√! " 
RepositoryResponse
√√" 4
<
√√4 5
bool
√√5 9
>
√√9 :
>
√√: ;&
RemoveRelatedModelsAsync
√√< T
(
√√T U
TView
√√U Z
view
√√[ _
,
√√_ `

TDbContext
√√a k
_context
√√l t
=
√√u v
null
√√w {
,
√√{ |$
IDbContextTransaction√√} í
_transaction√√ì ü
=√√† °
null√√¢ ¶
)√√¶ ß
{
≈≈ 	
var
∆∆ 

taskSource
∆∆ 
=
∆∆ 
new
∆∆  "
TaskCompletionSource
∆∆! 5
<
∆∆5 6 
RepositoryResponse
∆∆6 H
<
∆∆H I
bool
∆∆I M
>
∆∆M N
>
∆∆N O
(
∆∆O P
)
∆∆P Q
;
∆∆Q R

taskSource
«« 
.
«« 
	SetResult
««  
(
««  !
new
««! $ 
RepositoryResponse
««% 7
<
««7 8
bool
««8 <
>
««< =
(
««= >
)
««> ?
{
««@ A
	IsSucceed
««B K
=
««L M
true
««N R
}
««S T
)
««T U
;
««U V
return
»» 

taskSource
»» 
.
»» 
Task
»» "
.
»»" #
Result
»»# )
;
»») *
}
…… 	
public
““ 
virtual
““ 
async
““ 
Task
““ !
<
““! " 
RepositoryResponse
““" 4
<
““4 5
TView
““5 :
>
““: ;
>
““; <
SaveModelAsync
““= K
(
““K L
bool
““L P
isSaveSubModels
““Q `
=
““a b
false
““c h
,
““h i

TDbContext
““j t
_context
““u }
=
““~ 
null““Ä Ñ
,““Ñ Ö%
IDbContextTransaction““Ü õ
_transaction““ú ®
=““© ™
null““´ Ø
)““Ø ∞
{
”” 	
bool
‘‘ 
isRoot
‘‘ 
=
‘‘ 
_context
‘‘ "
==
‘‘# %
null
‘‘& *
;
‘‘* +
var
’’ 
context
’’ 
=
’’ 
_context
’’ "
??
’’# %
InitContext
’’& 1
(
’’1 2
)
’’2 3
;
’’3 4
var
÷÷ 
transaction
÷÷ 
=
÷÷ 
_transaction
÷÷ *
??
÷÷+ -
context
÷÷. 5
.
÷÷5 6
Database
÷÷6 >
.
÷÷> ?
BeginTransaction
÷÷? O
(
÷÷O P
)
÷÷P Q
;
÷÷Q R 
RepositoryResponse
◊◊ 
<
◊◊ 
TView
◊◊ $
>
◊◊$ %
result
◊◊& ,
=
◊◊- .
new
◊◊/ 2 
RepositoryResponse
◊◊3 E
<
◊◊E F
TView
◊◊F K
>
◊◊K L
(
◊◊L M
)
◊◊M N
{
◊◊O P
	IsSucceed
◊◊Q Z
=
◊◊[ \
true
◊◊] a
}
◊◊b c
;
◊◊c d
Validate
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
if
ŸŸ 
(
ŸŸ 
IsValid
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
try
€€ 
{
‹‹ 

ParseModel
›› 
(
›› 
_context
›› '
,
››' (
_transaction
››) 5
)
››5 6
;
››6 7
result
ﬁﬁ 
=
ﬁﬁ 
await
ﬁﬁ "

Repository
ﬁﬁ# -
.
ﬁﬁ- .
SaveModelAsync
ﬁﬁ. <
(
ﬁﬁ< =
(
ﬁﬁ= >
TView
ﬁﬁ> C
)
ﬁﬁC D
this
ﬁﬁD H
,
ﬁﬁH I
_context
ﬁﬁJ R
:
ﬁﬁR S
context
ﬁﬁT [
,
ﬁﬁ[ \
_transaction
ﬁﬁ] i
:
ﬁﬁi j
transaction
ﬁﬁk v
)
ﬁﬁv w
.
ﬁﬁw x
ConfigureAwaitﬁﬁx Ü
(ﬁﬁÜ á
falseﬁﬁá å
)ﬁﬁå ç
;ﬁﬁç é
if
·· 
(
·· 
result
·· 
.
·· 
	IsSucceed
·· (
&&
··) +
isSaveSubModels
··, ;
)
··; <
{
‚‚ 
var
„„ 

saveResult
„„ &
=
„„' (
await
„„) . 
SaveSubModelsAsync
„„/ A
(
„„A B
Model
„„B G
,
„„G H
context
„„I P
,
„„P Q
transaction
„„R ]
)
„„] ^
.
„„^ _
ConfigureAwait
„„_ m
(
„„m n
false
„„n s
)
„„s t
;
„„t u
if
‰‰ 
(
‰‰ 
!
‰‰ 

saveResult
‰‰ '
.
‰‰' (
	IsSucceed
‰‰( 1
)
‰‰1 2
{
ÂÂ 
result
ÊÊ "
.
ÊÊ" #
Errors
ÊÊ# )
.
ÊÊ) *
AddRange
ÊÊ* 2
(
ÊÊ2 3

saveResult
ÊÊ3 =
.
ÊÊ= >
Errors
ÊÊ> D
)
ÊÊD E
;
ÊÊE F
result
ÁÁ "
.
ÁÁ" #
	Exception
ÁÁ# ,
=
ÁÁ- .

saveResult
ÁÁ/ 9
.
ÁÁ9 :
	Exception
ÁÁ: C
;
ÁÁC D
}
ËË 
result
ÈÈ 
.
ÈÈ 
	IsSucceed
ÈÈ (
=
ÈÈ) *
result
ÈÈ+ 1
.
ÈÈ1 2
	IsSucceed
ÈÈ2 ;
&&
ÈÈ< >

saveResult
ÈÈ? I
.
ÈÈI J
	IsSucceed
ÈÈJ S
;
ÈÈS T
}
ÍÍ 
if
ÌÌ 
(
ÌÌ 
result
ÌÌ 
.
ÌÌ 
	IsSucceed
ÌÌ (
&&
ÌÌ) +
IsClone
ÌÌ, 3
&&
ÌÌ4 6
isRoot
ÌÌ7 =
)
ÌÌ= >
{
ÓÓ 
var
ÔÔ 
cloneCultures
ÔÔ )
=
ÔÔ* +"
ListSupportedCulture
ÔÔ, @
.
ÔÔ@ A
Where
ÔÔA F
(
ÔÔF G
c
ÔÔG H
=>
ÔÔI K
c
ÔÔL M
.
ÔÔM N
Specificulture
ÔÔN \
!=
ÔÔ] _
Specificulture
ÔÔ` n
&&
ÔÔo q
c
ÔÔr s
.
ÔÔs t
IsSupported
ÔÔt 
)ÔÔ Ä
.ÔÔÄ Å
ToListÔÔÅ á
(ÔÔá à
)ÔÔà â
;ÔÔâ ä
var
 
cloneResult
 '
=
( )
await
* /

CloneAsync
0 :
(
: ;
Model
; @
,
@ A
cloneCultures
B O
,
O P
_context
Q Y
:
Y Z
context
[ b
,
b c
_transaction
d p
:
p q
transaction
r }
)
} ~
.
~ 
ConfigureAwait ç
(ç é
falseé ì
)ì î
;î ï
if
ÒÒ 
(
ÒÒ 
!
ÒÒ 
cloneResult
ÒÒ (
.
ÒÒ( )
	IsSucceed
ÒÒ) 2
)
ÒÒ2 3
{
ÚÚ 
result
ÛÛ "
.
ÛÛ" #
Errors
ÛÛ# )
.
ÛÛ) *
AddRange
ÛÛ* 2
(
ÛÛ2 3
cloneResult
ÛÛ3 >
.
ÛÛ> ?
Errors
ÛÛ? E
)
ÛÛE F
;
ÛÛF G
result
ÙÙ "
.
ÙÙ" #
	Exception
ÙÙ# ,
=
ÙÙ- .
cloneResult
ÙÙ/ :
.
ÙÙ: ;
	Exception
ÙÙ; D
;
ÙÙD E
}
ıı 
result
ˆˆ 
.
ˆˆ 
	IsSucceed
ˆˆ (
=
ˆˆ) *
result
ˆˆ+ 1
.
ˆˆ1 2
	IsSucceed
ˆˆ2 ;
&&
ˆˆ< >
cloneResult
ˆˆ? J
.
ˆˆJ K
	IsSucceed
ˆˆK T
;
ˆˆT U
}
˜˜ 
if
˙˙ 
(
˙˙ 
result
˙˙ 
.
˙˙ 
	IsSucceed
˙˙ (
)
˙˙( )
{
˚˚ 
if
¸¸ 
(
¸¸ 
isRoot
¸¸ "
)
¸¸" #
{
˝˝ 
transaction
ˇˇ '
.
ˇˇ' (
Commit
ˇˇ( .
(
ˇˇ. /
)
ˇˇ/ 0
;
ˇˇ0 1
}
ÄÄ 
result
ÅÅ 
.
ÅÅ 
Data
ÅÅ #
=
ÅÅ$ %
this
ÅÅ& *
as
ÅÅ+ -
TView
ÅÅ. 3
;
ÅÅ3 4
return
ÇÇ 
result
ÇÇ %
;
ÇÇ% &
}
ÉÉ 
else
ÑÑ 
{
ÖÖ 
if
ÜÜ 
(
ÜÜ 
isRoot
ÜÜ "
)
ÜÜ" #
{
áá 
transaction
ââ '
.
ââ' (
Rollback
ââ( 0
(
ââ0 1
)
ââ1 2
;
ââ2 3
}
ää 
return
ãã 
result
ãã %
;
ãã% &
}
åå 
}
çç 
catch
éé 
(
éé 
	Exception
éé  
ex
éé! #
)
éé# $
{
èè 

Repository
êê 
.
êê 
LogErrorMessage
êê .
(
êê. /
ex
êê/ 1
)
êê1 2
;
êê2 3
if
ëë 
(
ëë 
isRoot
ëë 
)
ëë 
{
íí 
transaction
îî #
.
îî# $
Rollback
îî$ ,
(
îî, -
)
îî- .
;
îî. /
}
ïï 
result
ññ 
.
ññ 
	IsSucceed
ññ $
=
ññ% &
false
ññ' ,
;
ññ, -
result
óó 
.
óó 
	Exception
óó $
=
óó% &
ex
óó' )
;
óó) *
return
òò 
result
òò !
;
òò! "
}
ôô 
finally
öö 
{
õõ 
if
úú 
(
úú 
isRoot
úú 
)
úú 
{
ùù 
context
üü 
.
üü  
Dispose
üü  '
(
üü' (
)
üü( )
;
üü) *
}
†† 
}
°° 
}
¢¢ 
else
££ 
{
§§ 
return
•• 
new
••  
RepositoryResponse
•• -
<
••- .
TView
••. 3
>
••3 4
(
••4 5
)
••5 6
{
¶¶ 
	IsSucceed
ßß 
=
ßß 
false
ßß  %
,
ßß% &
Data
®® 
=
®® 
null
®® 
,
®®  
Errors
©© 
=
©© 
Errors
©© #
}
™™ 
;
™™ 
}
´´ 
}
¨¨ 	
public
∏∏ 
virtual
∏∏ 
async
∏∏ 
Task
∏∏ !
<
∏∏! " 
RepositoryResponse
∏∏" 4
<
∏∏4 5
bool
∏∏5 9
>
∏∏9 :
>
∏∏: ; 
SaveSubModelsAsync
∏∏< N
(
∏∏N O
TModel
∏∏O U
parent
∏∏V \
,
∏∏\ ]

TDbContext
∏∏^ h
_context
∏∏i q
=
∏∏r s
null
∏∏t x
,
∏∏x y$
IDbContextTransaction∏∏z è
_transaction∏∏ê ú
=∏∏ù û
null∏∏ü £
)∏∏£ §
{
∫∫ 	
var
ªª 

taskSource
ªª 
=
ªª 
new
ªª  "
TaskCompletionSource
ªª! 5
<
ªª5 6 
RepositoryResponse
ªª6 H
<
ªªH I
bool
ªªI M
>
ªªM N
>
ªªN O
(
ªªO P
)
ªªP Q
;
ªªQ R

taskSource
ºº 
.
ºº 
	SetResult
ºº  
(
ºº  !
new
ºº! $ 
RepositoryResponse
ºº% 7
<
ºº7 8
bool
ºº8 <
>
ºº< =
(
ºº= >
)
ºº> ?
{
ºº@ A
	IsSucceed
ººB K
=
ººL M
true
ººN R
}
ººS T
)
ººT U
;
ººU V
return
ΩΩ 

taskSource
ΩΩ 
.
ΩΩ 
Task
ΩΩ "
.
ΩΩ" #
Result
ΩΩ# )
;
ΩΩ) *
}
ææ 	
public
ŒŒ 
virtual
ŒŒ  
RepositoryResponse
ŒŒ )
<
ŒŒ) *
List
ŒŒ* .
<
ŒŒ. /
TView
ŒŒ/ 4
>
ŒŒ4 5
>
ŒŒ5 6
Clone
ŒŒ7 <
(
ŒŒ< =
TModel
ŒŒ= C
model
ŒŒD I
,
ŒŒI J
List
ŒŒK O
<
ŒŒO P
SupportedCulture
ŒŒP `
>
ŒŒ` a
cloneCultures
ŒŒb o
,
ŒŒo p

TDbContext
ŒŒq {
_contextŒŒ| Ñ
=ŒŒÖ Ü
nullŒŒá ã
,ŒŒã å%
IDbContextTransactionŒŒç ¢
_transactionŒŒ£ Ø
=ŒŒ∞ ±
nullŒŒ≤ ∂
)ŒŒ∂ ∑
{
œœ 	
bool
–– 
isRoot
–– 
=
–– 
_context
–– "
==
––# %
null
––& *
;
––* +
var
—— 
context
—— 
=
—— 
_context
—— "
??
——# %
InitContext
——& 1
(
——1 2
)
——2 3
;
——3 4
var
““ 
transaction
““ 
=
““ 
_transaction
““ *
??
““+ -
context
““. 5
.
““5 6
Database
““6 >
.
““> ?
BeginTransaction
““? O
(
““O P
)
““P Q
;
““Q R 
RepositoryResponse
‘‘ 
<
‘‘ 
List
‘‘ #
<
‘‘# $
TView
‘‘$ )
>
‘‘) *
>
‘‘* +
result
‘‘, 2
=
‘‘3 4
new
‘‘5 8 
RepositoryResponse
‘‘9 K
<
‘‘K L
List
‘‘L P
<
‘‘P Q
TView
‘‘Q V
>
‘‘V W
>
‘‘W X
(
‘‘X Y
)
‘‘Y Z
{
’’ 
	IsSucceed
÷÷ 
=
÷÷ 
true
÷÷  
,
÷÷  !
Data
◊◊ 
=
◊◊ 
new
◊◊ 
List
◊◊ 
<
◊◊  
TView
◊◊  %
>
◊◊% &
(
◊◊& '
)
◊◊' (
}
ÿÿ 
;
ÿÿ 
try
⁄⁄ 
{
€€ 
if
‹‹ 
(
‹‹ 
cloneCultures
‹‹ !
!=
‹‹" $
null
‹‹% )
)
‹‹) *
{
›› 
foreach
ﬁﬁ 
(
ﬁﬁ 
var
ﬁﬁ  
culture
ﬁﬁ! (
in
ﬁﬁ) +
cloneCultures
ﬁﬁ, 9
)
ﬁﬁ9 :
{
ﬂﬂ 
string
‡‡ 
desSpecificulture
‡‡ 0
=
‡‡1 2
culture
‡‡3 :
.
‡‡: ;
Specificulture
‡‡; I
;
‡‡I J
TView
‚‚ 
view
‚‚ "
=
‚‚# $
InitView
‚‚% -
(
‚‚- .
)
‚‚. /
;
‚‚/ 0
view
„„ 
.
„„ 
Model
„„ "
=
„„# $
model
„„% *
;
„„* +
view
‰‰ 
.
‰‰ 
	ParseView
‰‰ &
(
‰‰& '
isExpand
‰‰' /
:
‰‰/ 0
false
‰‰1 6
,
‰‰6 7
_context
‰‰8 @
:
‰‰@ A
context
‰‰B I
,
‰‰I J
_transaction
‰‰K W
:
‰‰W X
transaction
‰‰Y d
)
‰‰d e
;
‰‰e f
view
ÂÂ 
.
ÂÂ 
Specificulture
ÂÂ +
=
ÂÂ, -
desSpecificulture
ÂÂ. ?
;
ÂÂ? @
bool
ÁÁ 
isExist
ÁÁ $
=
ÁÁ% &

Repository
ÁÁ' 1
.
ÁÁ1 2
CheckIsExists
ÁÁ2 ?
(
ÁÁ? @
view
ÁÁ@ D
.
ÁÁD E

ParseModel
ÁÁE O
(
ÁÁO P
_context
ÁÁP X
,
ÁÁX Y
_transaction
ÁÁZ f
)
ÁÁf g
,
ÁÁg h
_context
ÁÁi q
:
ÁÁq r
context
ÁÁs z
,
ÁÁz {
_transactionÁÁ| à
:ÁÁà â
transactionÁÁä ï
)ÁÁï ñ
;ÁÁñ ó
if
ÈÈ 
(
ÈÈ 
isExist
ÈÈ #
)
ÈÈ# $
{
ÍÍ 
result
ÎÎ "
.
ÎÎ" #
	IsSucceed
ÎÎ# ,
=
ÎÎ- .
true
ÎÎ/ 3
;
ÎÎ3 4
result
ÏÏ "
.
ÏÏ" #
Data
ÏÏ# '
.
ÏÏ' (
Add
ÏÏ( +
(
ÏÏ+ ,
view
ÏÏ, 0
)
ÏÏ0 1
;
ÏÏ1 2
}
ÌÌ 
else
ÓÓ 
{
ÔÔ 
var
 
cloneResult
  +
=
, -
view
. 2
.
2 3
	SaveModel
3 <
(
< =
false
= B
,
B C
context
D K
,
K L
transaction
M X
)
X Y
;
Y Z
if
ÒÒ 
(
ÒÒ  
cloneResult
ÒÒ  +
.
ÒÒ+ ,
	IsSucceed
ÒÒ, 5
)
ÒÒ5 6
{
ÚÚ 
var
ÛÛ  #
cloneSubResult
ÛÛ$ 2
=
ÛÛ3 4
CloneSubModels
ÛÛ5 C
(
ÛÛC D
cloneResult
ÛÛD O
.
ÛÛO P
Data
ÛÛP T
,
ÛÛT U
cloneCultures
ÛÛV c
,
ÛÛc d
context
ÛÛe l
,
ÛÛl m
transaction
ÛÛn y
)
ÛÛy z
;
ÛÛz {
if
ÙÙ  "
(
ÙÙ# $
!
ÙÙ$ %
cloneSubResult
ÙÙ% 3
.
ÙÙ3 4
	IsSucceed
ÙÙ4 =
)
ÙÙ= >
{
ıı  !
cloneResult
ˆˆ$ /
.
ˆˆ/ 0
Errors
ˆˆ0 6
.
ˆˆ6 7
AddRange
ˆˆ7 ?
(
ˆˆ? @
cloneSubResult
ˆˆ@ N
.
ˆˆN O
Errors
ˆˆO U
)
ˆˆU V
;
ˆˆV W
cloneResult
˜˜$ /
.
˜˜/ 0
	Exception
˜˜0 9
=
˜˜: ;
cloneSubResult
˜˜< J
.
˜˜J K
	Exception
˜˜K T
;
˜˜T U
}
¯¯  !
result
˙˙  &
.
˙˙& '
	IsSucceed
˙˙' 0
=
˙˙1 2
result
˙˙3 9
.
˙˙9 :
	IsSucceed
˙˙: C
&&
˙˙D F
cloneResult
˙˙G R
.
˙˙R S
	IsSucceed
˙˙S \
&&
˙˙] _
cloneSubResult
˙˙` n
.
˙˙n o
	IsSucceed
˙˙o x
;
˙˙x y
result
˚˚  &
.
˚˚& '
Data
˚˚' +
.
˚˚+ ,
Add
˚˚, /
(
˚˚/ 0
cloneResult
˚˚0 ;
.
˚˚; <
Data
˚˚< @
)
˚˚@ A
;
˚˚A B
}
¸¸ 
else
˝˝  
{
˛˛ 
result
ˇˇ  &
.
ˇˇ& '
	IsSucceed
ˇˇ' 0
=
ˇˇ1 2
result
ˇˇ3 9
.
ˇˇ9 :
	IsSucceed
ˇˇ: C
&&
ˇˇD F
cloneResult
ˇˇG R
.
ˇˇR S
	IsSucceed
ˇˇS \
;
ˇˇ\ ]
result
ÄÄ  &
.
ÄÄ& '
Errors
ÄÄ' -
.
ÄÄ- .
AddRange
ÄÄ. 6
(
ÄÄ6 7
cloneResult
ÄÄ7 B
.
ÄÄB C
Errors
ÄÄC I
)
ÄÄI J
;
ÄÄJ K
result
ÅÅ  &
.
ÅÅ& '
	Exception
ÅÅ' 0
=
ÅÅ1 2
cloneResult
ÅÅ3 >
.
ÅÅ> ?
	Exception
ÅÅ? H
;
ÅÅH I
}
ÇÇ 
}
ÉÉ 
if
ÖÖ 
(
ÖÖ 
result
ÖÖ "
.
ÖÖ" #
	IsSucceed
ÖÖ# ,
)
ÖÖ, -
{
ÜÜ 
if
áá 
(
áá  
isRoot
áá  &
)
áá& '
{
àà 
transaction
ââ  +
.
ââ+ ,
Commit
ââ, 2
(
ââ2 3
)
ââ3 4
;
ââ4 5
}
ää 
}
ãã 
else
åå 
{
çç 
if
éé 
(
éé  
isRoot
éé  &
)
éé& '
{
èè 
transaction
êê  +
.
êê+ ,
Rollback
êê, 4
(
êê4 5
)
êê5 6
;
êê6 7
}
ëë 
}
íí 
}
ìì 
return
îî 
result
îî !
;
îî! "
}
ïï 
else
ññ 
{
óó 
return
òò 
result
òò !
;
òò! "
}
ôô 
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ 
ex
õõ 
)
õõ  
{
úú 
result
ùù 
.
ùù 
	IsSucceed
ùù  
=
ùù! "
false
ùù# (
;
ùù( )
result
ûû 
.
ûû 
	Exception
ûû  
=
ûû! "
ex
ûû# %
;
ûû% &
return
üü 
result
üü 
;
üü 
}
†† 
finally
°° 
{
¢¢ 
if
££ 
(
££ 
isRoot
££ 
)
££ 
{
§§ 
context
•• 
.
•• 
Dispose
•• #
(
••# $
)
••$ %
;
••% &
}
¶¶ 
}
ßß 
}
®® 	
public
≤≤ 
virtual
≤≤  
RepositoryResponse
≤≤ )
<
≤≤) *
bool
≤≤* .
>
≤≤. /
CloneSubModels
≤≤0 >
(
≤≤> ?
TView
≤≤? D
parent
≤≤E K
,
≤≤K L
List
≤≤M Q
<
≤≤Q R
SupportedCulture
≤≤R b
>
≤≤b c
cloneCultures
≤≤d q
,
≤≤q r

TDbContext
≤≤s }
_context≤≤~ Ü
=≤≤á à
null≤≤â ç
,≤≤ç é%
IDbContextTransaction≤≤è §
_transaction≤≤• ±
=≤≤≤ ≥
null≤≤¥ ∏
)≤≤∏ π
{
≥≥ 	
return
¥¥ 
new
¥¥  
RepositoryResponse
¥¥ )
<
¥¥) *
bool
¥¥* .
>
¥¥. /
(
¥¥/ 0
)
¥¥0 1
{
¥¥2 3
	IsSucceed
¥¥4 =
=
¥¥> ?
true
¥¥@ D
}
¥¥E F
;
¥¥F G
}
µµ 	
public
ææ 
virtual
ææ  
RepositoryResponse
ææ )
<
ææ) *
bool
ææ* .
>
ææ. /
RemoveModel
ææ0 ;
(
ææ; <
bool
ææ< @#
isRemoveRelatedModels
ææA V
=
ææW X
false
ææY ^
,
ææ^ _

TDbContext
ææ` j
_context
ææk s
=
ææt u
null
ææv z
,
ææz {$
IDbContextTransactionææ| ë
_transactionææí û
=ææü †
nullææ° •
)ææ• ¶
{
øø 	
bool
¿¿ 
isRoot
¿¿ 
=
¿¿ 
_context
¿¿ "
==
¿¿# %
null
¿¿& *
;
¿¿* +
var
¡¡ 
context
¡¡ 
=
¡¡ 
_context
¡¡ "
??
¡¡# %
InitContext
¡¡& 1
(
¡¡1 2
)
¡¡2 3
;
¡¡3 4
var
¬¬ 
transaction
¬¬ 
=
¬¬ 
_transaction
¬¬ *
??
¬¬+ -
context
¬¬. 5
.
¬¬5 6
Database
¬¬6 >
.
¬¬> ?
BeginTransaction
¬¬? O
(
¬¬O P
)
¬¬P Q
;
¬¬Q R 
RepositoryResponse
√√ 
<
√√ 
bool
√√ #
>
√√# $
result
√√% +
=
√√, -
new
√√. 1 
RepositoryResponse
√√2 D
<
√√D E
bool
√√E I
>
√√I J
(
√√J K
)
√√K L
{
√√M N
	IsSucceed
√√O X
=
√√Y Z
true
√√[ _
}
√√` a
;
√√a b
try
ƒƒ 
{
≈≈ 

ParseModel
∆∆ 
(
∆∆ 
_context
∆∆ #
,
∆∆# $
_transaction
∆∆% 1
)
∆∆1 2
;
∆∆2 3
if
«« 
(
«« #
isRemoveRelatedModels
«« )
)
««) *
{
»» 
var
…… !
removeRelatedResult
…… +
=
……, -!
RemoveRelatedModels
……. A
(
……A B
(
……B C
TView
……C H
)
……H I
this
……I M
,
……M N
context
……O V
,
……V W
transaction
……X c
)
……c d
;
……d e
if
   
(
   !
removeRelatedResult
   +
.
  + ,
	IsSucceed
  , 5
)
  5 6
{
ÀÀ 
result
ÃÃ 
=
ÃÃ  

Repository
ÃÃ! +
.
ÃÃ+ ,
RemoveModel
ÃÃ, 7
(
ÃÃ7 8
Model
ÃÃ8 =
,
ÃÃ= >
context
ÃÃ? F
,
ÃÃF G
transaction
ÃÃH S
)
ÃÃS T
;
ÃÃT U
}
ÕÕ 
else
ŒŒ 
{
œœ 
result
–– 
.
–– 
	IsSucceed
–– (
=
––) *
result
––+ 1
.
––1 2
	IsSucceed
––2 ;
&&
––< >!
removeRelatedResult
––? R
.
––R S
	IsSucceed
––S \
;
––\ ]
result
—— 
.
—— 
Errors
—— %
.
——% &
AddRange
——& .
(
——. /!
removeRelatedResult
——/ B
.
——B C
Errors
——C I
)
——I J
;
——J K
result
““ 
.
““ 
	Exception
““ (
=
““) *!
removeRelatedResult
““+ >
.
““> ?
	Exception
““? H
;
““H I
}
”” 
}
‘‘ 
else
’’ 
{
÷÷ 
result
◊◊ 
=
◊◊ 

Repository
◊◊ '
.
◊◊' (
RemoveModel
◊◊( 3
(
◊◊3 4
Model
◊◊4 9
,
◊◊9 :
context
◊◊; B
,
◊◊B C
transaction
◊◊D O
)
◊◊O P
;
◊◊P Q
}
ÿÿ 
if
⁄⁄ 
(
⁄⁄ 
result
⁄⁄ 
.
⁄⁄ 
	IsSucceed
⁄⁄ $
)
⁄⁄$ %
{
€€ 
if
‹‹ 
(
‹‹ 
isRoot
‹‹ 
)
‹‹ 
{
›› 
transaction
ﬁﬁ #
.
ﬁﬁ# $
Commit
ﬁﬁ$ *
(
ﬁﬁ* +
)
ﬁﬁ+ ,
;
ﬁﬁ, -
}
ﬂﬂ 
return
·· 
result
·· !
;
··! "
}
‚‚ 
else
„„ 
{
‰‰ 
if
ÂÂ 
(
ÂÂ 
isRoot
ÂÂ 
)
ÂÂ 
{
ÊÊ 
transaction
ÁÁ #
.
ÁÁ# $
Rollback
ÁÁ$ ,
(
ÁÁ, -
)
ÁÁ- .
;
ÁÁ. /
}
ËË 
result
ÈÈ 
.
ÈÈ 
	IsSucceed
ÈÈ $
=
ÈÈ% &
false
ÈÈ' ,
;
ÈÈ, -
return
ÍÍ 
result
ÍÍ !
;
ÍÍ! "
}
ÎÎ 
}
ÏÏ 
catch
ÌÌ 
(
ÌÌ 
	Exception
ÌÌ 
ex
ÌÌ 
)
ÌÌ  
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
isRoot
ÔÔ 
)
ÔÔ 
{
 
transaction
ÚÚ 
.
ÚÚ  
Rollback
ÚÚ  (
(
ÚÚ( )
)
ÚÚ) *
;
ÚÚ* +
}
ÛÛ 
result
ÙÙ 
.
ÙÙ 
	IsSucceed
ÙÙ  
=
ÙÙ! "
false
ÙÙ# (
;
ÙÙ( )
result
ıı 
.
ıı 
	Exception
ıı  
=
ıı! "
ex
ıı# %
;
ıı% &
return
ˆˆ 
result
ˆˆ 
;
ˆˆ 
}
˜˜ 
finally
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ 
isRoot
˙˙ 
)
˙˙ 
{
˚˚ 
context
˝˝ 
.
˝˝ 
Dispose
˝˝ #
(
˝˝# $
)
˝˝$ %
;
˝˝% &
}
˛˛ 
}
ˇˇ 
}
ÄÄ 	
public
ââ 
virtual
ââ  
RepositoryResponse
ââ )
<
ââ) *
bool
ââ* .
>
ââ. /!
RemoveRelatedModels
ââ0 C
(
ââC D
TView
ââD I
view
ââJ N
,
ââN O

TDbContext
ââP Z
_context
ââ[ c
=
ââd e
null
ââf j
,
ââj k$
IDbContextTransactionââl Å
_transactionââÇ é
=ââè ê
nullââë ï
)ââï ñ
{
ää 	
return
ãã 
new
ãã  
RepositoryResponse
ãã )
<
ãã) *
bool
ãã* .
>
ãã. /
(
ãã/ 0
)
ãã0 1
{
ãã2 3
	IsSucceed
ãã4 =
=
ãã> ?
true
ãã@ D
}
ããE F
;
ããF G
}
åå 	
public
ïï 
virtual
ïï  
RepositoryResponse
ïï )
<
ïï) *
TView
ïï* /
>
ïï/ 0
	SaveModel
ïï1 :
(
ïï: ;
bool
ïï; ?
isSaveSubModels
ïï@ O
=
ïïP Q
false
ïïR W
,
ïïW X

TDbContext
ïïY c
_context
ïïd l
=
ïïm n
null
ïïo s
,
ïïs t$
IDbContextTransactionïïu ä
_transactionïïã ó
=ïïò ô
nullïïö û
)ïïû ü
{
ññ 	
bool
óó 
isRoot
óó 
=
óó 
_context
óó "
==
óó# %
null
óó& *
;
óó* +
var
òò 
context
òò 
=
òò 
_context
òò "
??
òò# %
InitContext
òò& 1
(
òò1 2
)
òò2 3
;
òò3 4
var
ôô 
transaction
ôô 
=
ôô 
_transaction
ôô *
??
ôô+ -
context
ôô. 5
.
ôô5 6
Database
ôô6 >
.
ôô> ?
BeginTransaction
ôô? O
(
ôôO P
)
ôôP Q
;
ôôQ R 
RepositoryResponse
öö 
<
öö 
TView
öö $
>
öö$ %
result
öö& ,
=
öö- .
new
öö/ 2 
RepositoryResponse
öö3 E
<
ööE F
TView
ööF K
>
ööK L
(
ööL M
)
ööM N
{
ööO P
	IsSucceed
ööQ Z
=
öö[ \
true
öö] a
}
ööb c
;
ööc d
Validate
õõ 
(
õõ 
)
õõ 
;
õõ 
if
úú 
(
úú 
IsValid
úú 
)
úú 
{
ùù 
try
ûû 
{
üü 

ParseModel
†† 
(
†† 
_context
†† '
,
††' (
_transaction
††) 5
)
††5 6
;
††6 7
result
°° 
=
°° 

Repository
°° '
.
°°' (
	SaveModel
°°( 1
(
°°1 2
(
°°2 3
TView
°°3 8
)
°°8 9
this
°°9 =
,
°°= >
_context
°°? G
:
°°G H
context
°°I P
,
°°P Q
_transaction
°°R ^
:
°°^ _
transaction
°°` k
)
°°k l
;
°°l m
if
§§ 
(
§§ 
result
§§ 
.
§§ 
	IsSucceed
§§ (
&&
§§) +
isSaveSubModels
§§, ;
)
§§; <
{
•• 
var
¶¶ 

saveResult
¶¶ &
=
¶¶' (
SaveSubModels
¶¶) 6
(
¶¶6 7
Model
¶¶7 <
,
¶¶< =
context
¶¶> E
,
¶¶E F
transaction
¶¶G R
)
¶¶R S
;
¶¶S T
if
ßß 
(
ßß 
!
ßß 

saveResult
ßß '
.
ßß' (
	IsSucceed
ßß( 1
)
ßß1 2
{
®® 
result
©© "
.
©©" #
Errors
©©# )
.
©©) *
AddRange
©©* 2
(
©©2 3

saveResult
©©3 =
.
©©= >
Errors
©©> D
)
©©D E
;
©©E F
result
™™ "
.
™™" #
	Exception
™™# ,
=
™™- .

saveResult
™™/ 9
.
™™9 :
	Exception
™™: C
;
™™C D
}
´´ 
result
¨¨ 
.
¨¨ 
	IsSucceed
¨¨ (
=
¨¨) *
result
¨¨+ 1
.
¨¨1 2
	IsSucceed
¨¨2 ;
&&
¨¨< >

saveResult
¨¨? I
.
¨¨I J
	IsSucceed
¨¨J S
;
¨¨S T
}
≠≠ 
if
∞∞ 
(
∞∞ 
result
∞∞ 
.
∞∞ 
	IsSucceed
∞∞ (
&&
∞∞) +
IsClone
∞∞, 3
&&
∞∞4 6
isRoot
∞∞7 =
)
∞∞= >
{
±± 
var
≤≤ 
cloneCultures
≤≤ )
=
≤≤* +"
ListSupportedCulture
≤≤, @
.
≤≤@ A
Where
≤≤A F
(
≤≤F G
c
≤≤G H
=>
≤≤I K
c
≤≤L M
.
≤≤M N
Specificulture
≤≤N \
!=
≤≤] _
Specificulture
≤≤` n
&&
≤≤o q
c
≤≤r s
.
≤≤s t
IsSupported
≤≤t 
)≤≤ Ä
.≤≤Ä Å
ToList≤≤Å á
(≤≤á à
)≤≤à â
;≤≤â ä
var
≥≥ 
cloneResult
≥≥ '
=
≥≥( )
Clone
≥≥* /
(
≥≥/ 0
Model
≥≥0 5
,
≥≥5 6
cloneCultures
≥≥7 D
,
≥≥D E
_context
≥≥F N
:
≥≥N O
context
≥≥P W
,
≥≥W X
_transaction
≥≥Y e
:
≥≥e f
transaction
≥≥g r
)
≥≥r s
;
≥≥s t
if
¥¥ 
(
¥¥ 
!
¥¥ 
cloneResult
¥¥ (
.
¥¥( )
	IsSucceed
¥¥) 2
)
¥¥2 3
{
µµ 
result
∂∂ "
.
∂∂" #
Errors
∂∂# )
.
∂∂) *
AddRange
∂∂* 2
(
∂∂2 3
cloneResult
∂∂3 >
.
∂∂> ?
Errors
∂∂? E
)
∂∂E F
;
∂∂F G
result
∑∑ "
.
∑∑" #
	Exception
∑∑# ,
=
∑∑- .
cloneResult
∑∑/ :
.
∑∑: ;
	Exception
∑∑; D
;
∑∑D E
}
∏∏ 
result
ππ 
.
ππ 
	IsSucceed
ππ (
=
ππ) *
result
ππ+ 1
.
ππ1 2
	IsSucceed
ππ2 ;
&&
ππ< >
cloneResult
ππ? J
.
ππJ K
	IsSucceed
ππK T
;
ππT U
}
∫∫ 
if
ΩΩ 
(
ΩΩ 
result
ΩΩ 
.
ΩΩ 
	IsSucceed
ΩΩ (
)
ΩΩ( )
{
ææ 
if
øø 
(
øø 
isRoot
øø "
)
øø" #
{
¿¿ 
transaction
¬¬ '
.
¬¬' (
Commit
¬¬( .
(
¬¬. /
)
¬¬/ 0
;
¬¬0 1
}
√√ 
result
ƒƒ 
.
ƒƒ 
Data
ƒƒ #
=
ƒƒ$ %
this
ƒƒ& *
as
ƒƒ+ -
TView
ƒƒ. 3
;
ƒƒ3 4
return
≈≈ 
result
≈≈ %
;
≈≈% &
}
∆∆ 
else
«« 
{
»» 
if
…… 
(
…… 
isRoot
…… "
)
……" #
{
   
transaction
ÃÃ '
.
ÃÃ' (
Rollback
ÃÃ( 0
(
ÃÃ0 1
)
ÃÃ1 2
;
ÃÃ2 3
}
ÕÕ 
return
ŒŒ 
result
ŒŒ %
;
ŒŒ% &
}
œœ 
}
–– 
catch
—— 
(
—— 
	Exception
——  
ex
——! #
)
——# $
{
““ 

Repository
”” 
.
”” 
LogErrorMessage
”” .
(
””. /
ex
””/ 1
)
””1 2
;
””2 3
if
‘‘ 
(
‘‘ 
isRoot
‘‘ 
)
‘‘ 
{
’’ 
transaction
◊◊ #
.
◊◊# $
Rollback
◊◊$ ,
(
◊◊, -
)
◊◊- .
;
◊◊. /
}
ÿÿ 
result
ŸŸ 
.
ŸŸ 
	IsSucceed
ŸŸ $
=
ŸŸ% &
false
ŸŸ' ,
;
ŸŸ, -
result
⁄⁄ 
.
⁄⁄ 
	Exception
⁄⁄ $
=
⁄⁄% &
ex
⁄⁄' )
;
⁄⁄) *
return
€€ 
result
€€ !
;
€€! "
}
‹‹ 
finally
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
isRoot
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
context
‚‚ 
.
‚‚  
Dispose
‚‚  '
(
‚‚' (
)
‚‚( )
;
‚‚) *
}
„„ 
}
‰‰ 
}
ÂÂ 
else
ÊÊ 
{
ÁÁ 
return
ËË 
new
ËË  
RepositoryResponse
ËË -
<
ËË- .
TView
ËË. 3
>
ËË3 4
(
ËË4 5
)
ËË5 6
{
ÈÈ 
	IsSucceed
ÍÍ 
=
ÍÍ 
false
ÍÍ  %
,
ÍÍ% &
Data
ÎÎ 
=
ÎÎ 
null
ÎÎ 
,
ÎÎ  
Errors
ÏÏ 
=
ÏÏ 
Errors
ÏÏ #
}
ÌÌ 
;
ÌÌ 
}
ÓÓ 
}
ÔÔ 	
public
¯¯ 
virtual
¯¯  
RepositoryResponse
¯¯ )
<
¯¯) *
bool
¯¯* .
>
¯¯. /
SaveSubModels
¯¯0 =
(
¯¯= >
TModel
¯¯> D
parent
¯¯E K
,
¯¯K L

TDbContext
¯¯M W
_context
¯¯X `
=
¯¯a b
null
¯¯c g
,
¯¯g h#
IDbContextTransaction
¯¯i ~
_transaction¯¯ ã
=¯¯å ç
null¯¯é í
)¯¯í ì
{
˘˘ 	
return
˙˙ 
new
˙˙  
RepositoryResponse
˙˙ )
<
˙˙) *
bool
˙˙* .
>
˙˙. /
(
˙˙/ 0
)
˙˙0 1
{
˙˙2 3
	IsSucceed
˙˙4 =
=
˙˙> ?
true
˙˙@ D
}
˙˙E F
;
˙˙F G
}
˚˚ 	
	protected
áá 
ViewModelBase
áá 
(
áá  
TModel
áá  &
model
áá' ,
,
áá, -

TDbContext
áá. 8
_context
áá9 A
=
ááB C
null
ááD H
,
ááH I#
IDbContextTransaction
ááJ _
_transaction
áá` l
=
áám n
null
ááo s
)
áás t
{
àà 	
this
ââ 
.
ââ 
Model
ââ 
=
ââ 
model
ââ 
;
ââ 
	ParseView
ää 
(
ää 
_context
ää 
:
ää 
_context
ää  (
,
ää( )
_transaction
ää* 6
:
ää6 7
_transaction
ää8 D
)
ääD E
;
ääE F
}
ãã 	
	protected
îî 
ViewModelBase
îî 
(
îî  
TModel
îî  &
model
îî' ,
,
îî, -
bool
îî. 2

isLazyLoad
îî3 =
,
îî= >

TDbContext
îî? I
_context
îîJ R
=
îîS T
null
îîU Y
,
îîY Z#
IDbContextTransaction
îî[ p
_transaction
îîq }
=
îî~ 
nullîîÄ Ñ
)îîÑ Ö
{
ïï 	
this
ññ 
.
ññ 
Model
ññ 
=
ññ 
model
ññ 
;
ññ 

IsLazyLoad
óó 
=
óó 

isLazyLoad
óó #
;
óó# $
	ParseView
òò 
(
òò 
isExpand
òò 
:
òò 

isLazyLoad
òò  *
,
òò* +
_context
òò, 4
:
òò4 5
_context
òò6 >
,
òò> ?
_transaction
òò@ L
:
òòL M
_transaction
òòN Z
)
òòZ [
;
òò[ \
}
ôô 	
	protected
ûû 
ViewModelBase
ûû 
(
ûû  
)
ûû  !
{
üü 	
this
†† 
.
†† 
Model
†† 
=
†† 
	InitModel
†† "
(
††" #
)
††# $
;
††$ %
	ParseView
°° 
(
°° 
)
°° 
;
°° 
}
¢¢ 	
}
•• 
}¶¶ ˇá
XD:\Workspace\GitHub\Swastika-Heart\src\Swastika\UI\Core\Controllers\BaseApiController.cs
	namespace 	
Swastika
 
. 
Api 
. 
Controllers "
{ 
public 

class 
BaseApiController "
:# $

Controller% /
{ 
	protected 
string 
_domain  
;  !
	protected## 
string## 
_lang## 
;## 
public(( 
BaseApiController((  
(((  !
)((! "
{)) 	
}** 	
public,, 
const,, 
string,, '
CONST_ROUTE_DEFAULT_CULTURE,, 7
=,,8 9
$str,,: A
;,,A B
public66 
override66 "
BadRequestObjectResult66 .

BadRequest66/ 9
(669 : 
ModelStateDictionary66: N

modelState66O Y
)66Y Z
{77 	
List88 
<88 
string88 
>88 
errors88 
=88  !
new88" %
List88& *
<88* +
string88+ 1
>881 2
(882 3
)883 4
;884 5
foreach99 
(99 
ModelStateEntry99 $
state99% *
in99+ -
ViewData99. 6
.996 7

ModelState997 A
.99A B
Values99B H
)99H I
{:: 
foreach;; 
(;; 

ModelError;; #
error;;$ )
in;;* ,
state;;- 2
.;;2 3
Errors;;3 9
);;9 :
{<< 
errors== 
.== 
Add== 
(== 
error== $
.==$ %
ErrorMessage==% 1
)==1 2
;==2 3
}>> 
}?? 
return@@ 
base@@ 
.@@ 

BadRequest@@ "
(@@" #

modelState@@# -
)@@- .
;@@. /
}AA 	
publicKK 
overrideKK "
BadRequestObjectResultKK .

BadRequestKK/ 9
(KK9 :
objectKK: @
errorKKA F
)KKF G
{LL 	
returnMM 
baseMM 
.MM 

BadRequestMM "
(MM" #
errorMM# (
)MM( )
;MM) *
}NN 	
publicXX 
overrideXX  
NotFoundObjectResultXX ,
NotFoundXX- 5
(XX5 6
objectXX6 <
valueXX= B
)XXB C
{YY 	
returnZZ 
baseZZ 
.ZZ 
NotFoundZZ  
(ZZ  !
valueZZ! &
)ZZ& '
;ZZ' (
}[[ 	
publicaa 
overrideaa 
voidaa 
OnActionExecutingaa .
(aa. /"
ActionExecutingContextaa/ E
contextaaF M
)aaM N
{bb 	
GetLanguagecc 
(cc 
)cc 
;cc 
basedd 
.dd 
OnActionExecutingdd "
(dd" #
contextdd# *
)dd* +
;dd+ ,
}ee 	
	protectedmm 
IActionResultmm 
GetErrorResultmm  .
(mm. /
stringmm/ 5
responseKeymm6 A
,mmA B
stringmmC I
errorMsgmmJ R
)mmR S
{nn 	
varoo 
resultoo 
=oo 
	ApiHelperoo "
<oo" #
stringoo# )
>oo) *
.oo* +
	GetResultoo+ 4
(oo4 5
$numoo5 6
,oo6 7
stringoo8 >
.oo> ?
Emptyoo? D
,ooD E
responseKeyooF Q
,ooQ R
nullooS W
)ooW X
;ooX Y
returnpp 

BadRequestpp 
(pp 
resultpp $
)pp$ %
;pp% &
}qq 	
	protectedvv 
voidvv 
GetLanguagevv "
(vv" #
)vv# $
{ww 	
_langxx 
=xx 
	RouteDataxx 
?xx 
.xx 
Valuesxx %
[xx% &
$strxx& /
]xx/ 0
!=xx1 3
nullxx4 8
?xx9 :
	RouteDataxx; D
.xxD E
ValuesxxE K
[xxK L
$strxxL U
]xxU V
.xxV W
ToStringxxW _
(xx_ `
)xx` a
:xxb c'
CONST_ROUTE_DEFAULT_CULTURExxd 
;	xx Ä
ViewBagyy 
.yy 
cultureyy 
=yy 
_langyy #
;yy# $
_domain{{ 
={{ 
string{{ 
.{{ 
Format{{ #
({{# $
$str{{$ /
,{{/ 0
Request{{1 8
.{{8 9
Scheme{{9 ?
,{{? @
Request{{A H
.{{H I
Host{{I M
){{M N
;{{N O
} 	
	protected
éé 
IActionResult
éé 
GetSuccessResult
éé  0
<
éé0 1
TResult
éé1 8
>
éé8 9
(
éé9 :
TResult
éé: A
data
ééB F
)
ééF G
{
èè 	
var
êê 
result
êê 
=
êê 
	ApiHelper
êê "
<
êê" #
TResult
êê# *
>
êê* +
.
êê+ ,
	GetResult
êê, 5
(
êê5 6
$num
êê6 7
,
êê7 8
data
êê9 =
,
êê= >
nameof
êê? E
(
êêE F
Enums
êêF K
.
êêK L
ResponseKey
êêL W
.
êêW X
OK
êêX Z
)
êêZ [
,
êê[ \
null
êê] a
)
êêa b
;
êêb c
return
ëë 
Ok
ëë 
(
ëë 
result
ëë 
)
ëë 
;
ëë 
}
íí 	
	protected
öö 
async
öö 
Task
öö 
<
öö 
string
öö #
>
öö# $
UploadFileAsync
öö% 4
(
öö4 5
	IFormFile
öö5 >
file
öö? C
,
ööC D
string
ööE K

folderPath
ööL V
)
ööV W
{
õõ 	
if
úú 
(
úú 
file
úú 
?
úú 
.
úú 
Length
úú 
>
úú 
$num
úú  
)
úú  !
{
ùù 
string
ûû 
fileName
ûû 
=
ûû  !
await
ûû" '
CommonHelper
ûû( 4
.
ûû4 5
UploadFileAsync
ûû5 D
(
ûûD E

folderPath
ûûE O
,
ûûO P
file
ûûQ U
)
ûûU V
.
ûûV W
ConfigureAwait
ûûW e
(
ûûe f
false
ûûf k
)
ûûk l
;
ûûl m
if
üü 
(
üü 
!
üü 
string
üü 
.
üü 
IsNullOrEmpty
üü )
(
üü) *
fileName
üü* 2
)
üü2 3
)
üü3 4
{
†† 
string
°° 
filePath
°° #
=
°°$ %
string
°°& ,
.
°°, -
Format
°°- 3
(
°°3 4
$str
°°4 =
,
°°= >

folderPath
°°? I
,
°°I J
fileName
°°K S
)
°°S T
;
°°T U
return
¢¢ 
filePath
¢¢ #
;
¢¢# $
}
££ 
else
§§ 
{
•• 
return
¶¶ 
string
¶¶ !
.
¶¶! "
Empty
¶¶" '
;
¶¶' (
}
ßß 
}
®® 
else
©© 
{
™™ 
return
´´ 
string
´´ 
.
´´ 
Empty
´´ #
;
´´# $
}
¨¨ 
}
≠≠ 	
	protected
¥¥ 
async
¥¥ 
Task
¥¥ 
<
¥¥ 
List
¥¥ !
<
¥¥! "
string
¥¥" (
>
¥¥( )
>
¥¥) *!
UploadListFileAsync
¥¥+ >
(
¥¥> ?
string
¥¥? E

folderPath
¥¥F P
)
¥¥P Q
{
µµ 	
List
∂∂ 
<
∂∂ 
string
∂∂ 
>
∂∂ 
result
∂∂ 
=
∂∂  !
new
∂∂" %
List
∂∂& *
<
∂∂* +
string
∂∂+ 1
>
∂∂1 2
(
∂∂2 3
)
∂∂3 4
;
∂∂4 5
var
∑∑ 
files
∑∑ 
=
∑∑ 
HttpContext
∑∑ #
.
∑∑# $
Request
∑∑$ +
.
∑∑+ ,
Form
∑∑, 0
.
∑∑0 1
Files
∑∑1 6
;
∑∑6 7
foreach
∏∏ 
(
∏∏ 
var
∏∏ 
file
∏∏ 
in
∏∏  
files
∏∏! &
)
∏∏& '
{
ππ 
string
∫∫ 
fileName
∫∫ 
=
∫∫  !
await
∫∫" '
UploadFileAsync
∫∫( 7
(
∫∫7 8
file
∫∫8 <
,
∫∫< =

folderPath
∫∫> H
)
∫∫H I
.
∫∫I J
ConfigureAwait
∫∫J X
(
∫∫X Y
false
∫∫Y ^
)
∫∫^ _
;
∫∫_ `
if
ªª 
(
ªª 
!
ªª 
string
ªª 
.
ªª 
IsNullOrEmpty
ªª )
(
ªª) *
fileName
ªª* 2
)
ªª2 3
)
ªª3 4
{
ºº 
result
ΩΩ 
.
ΩΩ 
Add
ΩΩ 
(
ΩΩ 
fileName
ΩΩ '
)
ΩΩ' (
;
ΩΩ( )
}
ææ 
}
øø 
return
¿¿ 
result
¿¿ 
;
¿¿ 
}
¡¡ 	
}
¬¬ 
public
ÒÒ 

class
ÒÒ 
BaseApiController
ÒÒ "
<
ÒÒ" #

TDbContext
ÒÒ# -
,
ÒÒ- .
TModel
ÒÒ/ 5
,
ÒÒ5 6
TView
ÒÒ7 <
>
ÒÒ< =
:
ÒÒ> ?

Controller
ÒÒ@ J
where
ÚÚ 

TDbContext
ÚÚ 
:
ÚÚ 
	DbContext
ÚÚ $
where
ÛÛ 
TModel
ÛÛ 
:
ÛÛ 
class
ÛÛ 
where
ÙÙ 
TView
ÙÙ 
:
ÙÙ 
Swastika
ÙÙ 
.
ÙÙ 
Domain
ÙÙ %
.
ÙÙ% &
Data
ÙÙ& *
.
ÙÙ* +

ViewModels
ÙÙ+ 5
.
ÙÙ5 6
ViewModelBase
ÙÙ6 C
<
ÙÙC D

TDbContext
ÙÙD N
,
ÙÙN O
TModel
ÙÙP V
,
ÙÙV W
TView
ÙÙX ]
>
ÙÙ] ^
{
ıı 
	protected
˘˘ 
readonly
˘˘ 
DefaultRepository
˘˘ ,
<
˘˘, -

TDbContext
˘˘- 7
,
˘˘7 8
TModel
˘˘9 ?
,
˘˘? @
TView
˘˘A F
>
˘˘F G
_repo
˘˘H M
;
˘˘M N
	protected
˛˛ 
string
˛˛ 
_lang
˛˛ 
;
˛˛ 
public
ÑÑ 
BaseApiController
ÑÑ  
(
ÑÑ  !
)
ÑÑ! "
{
ÖÖ 	
_repo
ÜÜ 
=
ÜÜ 
DefaultRepository
ÜÜ %
<
ÜÜ% &

TDbContext
ÜÜ& 0
,
ÜÜ0 1
TModel
ÜÜ2 8
,
ÜÜ8 9
TView
ÜÜ: ?
>
ÜÜ? @
.
ÜÜ@ A
Instance
ÜÜA I
;
ÜÜI J
}
áá 	
public
ëë 
override
ëë $
BadRequestObjectResult
ëë .

BadRequest
ëë/ 9
(
ëë9 :"
ModelStateDictionary
ëë: N

modelState
ëëO Y
)
ëëY Z
{
íí 	
List
ìì 
<
ìì 
string
ìì 
>
ìì 
errors
ìì 
=
ìì  !
new
ìì" %
List
ìì& *
<
ìì* +
string
ìì+ 1
>
ìì1 2
(
ìì2 3
)
ìì3 4
;
ìì4 5
foreach
îî 
(
îî 
ModelStateEntry
îî $
state
îî% *
in
îî+ -
ViewData
îî. 6
.
îî6 7

ModelState
îî7 A
.
îîA B
Values
îîB H
)
îîH I
{
ïï 
foreach
ññ 
(
ññ 

ModelError
ññ #
error
ññ$ )
in
ññ* ,
state
ññ- 2
.
ññ2 3
Errors
ññ3 9
)
ññ9 :
{
óó 
errors
òò 
.
òò 
Add
òò 
(
òò 
error
òò $
.
òò$ %
ErrorMessage
òò% 1
)
òò1 2
;
òò2 3
}
ôô 
}
öö 
var
õõ 
result
õõ 
=
õõ 
	ApiHelper
õõ "
<
õõ" #
TView
õõ# (
>
õõ( )
.
õõ) *
	GetResult
õõ* 3
(
õõ3 4
$num
õõ4 5
,
õõ5 6
default
õõ7 >
(
õõ> ?
TView
õõ? D
)
õõD E
,
õõE F
nameof
õõG M
(
õõM N
Enums
õõN S
.
õõS T
ResponseKey
õõT _
.
õõ_ `

BadRequest
õõ` j
)
õõj k
,
õõk l
errors
õõm s
)
õõs t
;
õõt u
return
úú 
base
úú 
.
úú 

BadRequest
úú "
(
úú" #
result
úú# )
)
úú) *
;
úú* +
}
ùù 	
public
ßß 
override
ßß $
BadRequestObjectResult
ßß .

BadRequest
ßß/ 9
(
ßß9 :
object
ßß: @
error
ßßA F
)
ßßF G
{
®® 	
var
©© 
result
©© 
=
©© 
	ApiHelper
©© "
<
©©" #
TView
©©# (
>
©©( )
.
©©) *
	GetResult
©©* 3
(
©©3 4
$num
©©4 5
,
©©5 6
default
©©7 >
(
©©> ?
TView
©©? D
)
©©D E
,
©©E F
nameof
©©G M
(
©©M N
Enums
©©N S
.
©©S T
ResponseKey
©©T _
.
©©_ `

BadRequest
©©` j
)
©©j k
,
©©k l
null
©©m q
)
©©q r
;
©©r s
return
™™ 
base
™™ 
.
™™ 

BadRequest
™™ "
(
™™" #
result
™™# )
)
™™) *
;
™™* +
}
´´ 	
public
µµ 
override
µµ "
NotFoundObjectResult
µµ ,
NotFound
µµ- 5
(
µµ5 6
object
µµ6 <
value
µµ= B
)
µµB C
{
∂∂ 	
var
∑∑ 
result
∑∑ 
=
∑∑ 
	ApiHelper
∑∑ "
<
∑∑" #
TView
∑∑# (
>
∑∑( )
.
∑∑) *
	GetResult
∑∑* 3
(
∑∑3 4
$num
∑∑4 5
,
∑∑5 6
default
∑∑7 >
(
∑∑> ?
TView
∑∑? D
)
∑∑D E
,
∑∑E F
nameof
∑∑G M
(
∑∑M N
Enums
∑∑N S
.
∑∑S T
ResponseKey
∑∑T _
.
∑∑_ `
NotFound
∑∑` h
)
∑∑h i
,
∑∑i j
null
∑∑k o
)
∑∑o p
;
∑∑p q
return
∏∏ 
base
∏∏ 
.
∏∏ 
NotFound
∏∏  
(
∏∏  !
result
∏∏! '
)
∏∏' (
;
∏∏( )
}
ππ 	
public
øø 
override
øø 
void
øø 
OnActionExecuting
øø .
(
øø. /$
ActionExecutingContext
øø/ E
context
øøF M
)
øøM N
{
¿¿ 	
GetLanguage
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
base
¬¬ 
.
¬¬ 
OnActionExecuting
¬¬ "
(
¬¬" #
context
¬¬# *
)
¬¬* +
;
¬¬+ ,
}
√√ 	
	protected
ÀÀ 
IActionResult
ÀÀ 
GetErrorResult
ÀÀ  .
(
ÀÀ. /
string
ÀÀ/ 5
responseKey
ÀÀ6 A
,
ÀÀA B
string
ÀÀC I
errorMsg
ÀÀJ R
)
ÀÀR S
{
ÃÃ 	
var
ÕÕ 
result
ÕÕ 
=
ÕÕ 
	ApiHelper
ÕÕ "
<
ÕÕ" #
TView
ÕÕ# (
>
ÕÕ( )
.
ÕÕ) *
	GetResult
ÕÕ* 3
(
ÕÕ3 4
$num
ÕÕ4 5
,
ÕÕ5 6
default
ÕÕ7 >
(
ÕÕ> ?
TView
ÕÕ? D
)
ÕÕD E
,
ÕÕE F
responseKey
ÕÕG R
,
ÕÕR S
null
ÕÕT X
)
ÕÕX Y
;
ÕÕY Z
return
ŒŒ 

BadRequest
ŒŒ 
(
ŒŒ 
result
ŒŒ $
)
ŒŒ$ %
;
ŒŒ% &
}
œœ 	
	protected
‘‘ 
void
‘‘ 
GetLanguage
‘‘ "
(
‘‘" #
)
‘‘# $
{
’’ 	
_lang
÷÷ 
=
÷÷ 
	RouteData
÷÷ 
?
÷÷ 
.
÷÷ 
Values
÷÷ %
[
÷÷% &
$str
÷÷& /
]
÷÷/ 0
!=
÷÷1 3
null
÷÷4 8
?
◊◊ 
	RouteData
◊◊ 
.
◊◊ 
Values
◊◊ "
[
◊◊" #
$str
◊◊# ,
]
◊◊, -
.
◊◊- .
ToString
◊◊. 6
(
◊◊6 7
)
◊◊7 8
:
◊◊9 :
BaseApiController
◊◊; L
.
◊◊L M)
CONST_ROUTE_DEFAULT_CULTURE
◊◊M h
;
◊◊h i
ViewBag
ÿÿ 
.
ÿÿ 
culture
ÿÿ 
=
ÿÿ 
_lang
ÿÿ #
;
ÿÿ# $
}
ŸŸ 	
	protected
ÁÁ 
IActionResult
ÁÁ 
GetSuccessResult
ÁÁ  0
<
ÁÁ0 1
TResult
ÁÁ1 8
>
ÁÁ8 9
(
ÁÁ9 :
TResult
ÁÁ: A
data
ÁÁB F
)
ÁÁF G
{
ËË 	
var
ÈÈ 
result
ÈÈ 
=
ÈÈ 
	ApiHelper
ÈÈ "
<
ÈÈ" #
TResult
ÈÈ# *
>
ÈÈ* +
.
ÈÈ+ ,
	GetResult
ÈÈ, 5
(
ÈÈ5 6
$num
ÈÈ6 7
,
ÈÈ7 8
data
ÈÈ9 =
,
ÈÈ= >
nameof
ÈÈ? E
(
ÈÈE F
Enums
ÈÈF K
.
ÈÈK L
ResponseKey
ÈÈL W
.
ÈÈW X
OK
ÈÈX Z
)
ÈÈZ [
,
ÈÈ[ \
null
ÈÈ] a
)
ÈÈa b
;
ÈÈb c
return
ÍÍ 
Ok
ÍÍ 
(
ÍÍ 
result
ÍÍ 
)
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
}
ÏÏ 
}ÌÌ à
UD:\Workspace\GitHub\Swastika-Heart\src\Swastika\UI\Core\Controllers\BaseController.cs
	namespace 	
Swastika
 
. 
UI 
. 
Base 
. 
Controllers &
{ 
public 

class 
BaseController 
:  !

Controller" ,
{ 
public 
BaseController 
( 
) 
{ 	
} 	
public)) 
override)) 
NotFoundResult)) &
NotFound))' /
())/ 0
)))0 1
{** 	
return++ 
base++ 
.++ 
NotFound++  
(++  !
)++! "
;++" #
},, 	
}-- 
}.. æ"
QD:\Workspace\GitHub\Swastika-Heart\src\Swastika\UI\Core\SignalR\BaseSignalRHub.cs
	namespace 	
Swastika
 
. 
UI 
. 
Core 
. 
SignalR "
{ 
public 

abstract 
class 
BaseSignalRHub (
:) *
Hub+ .
{ 
	protected 
static 
readonly !
List" &
<& '
SignalRClient' 4
>4 5
Users6 ;
=< =
new> A
ListB F
<F G
SignalRClientG T
>T U
(U V
)V W
;W X
public 
override 
Task 
OnConnectedAsync -
(- .
). /
{ 	!
UpdateGroupConnection !
(! "
)" #
;# $
return   
base   
.   
OnConnectedAsync   (
(  ( )
)  ) *
;  * +
}!! 	
public(( 
override(( 
Task(( 
OnDisconnectedAsync(( 0
(((0 1
	Exception((1 :
	exception((; D
)((D E
{)) 	
Users++ 
.++ 
	RemoveAll++ 
(++ 
u++ 
=>++  
u++! "
.++" #
ConnectionId++# /
==++0 2
Context++3 :
.++: ;
ConnectionId++; G
)++G H
;++H I
return,, 
base,, 
.,, 
OnDisconnectedAsync,, +
(,,+ ,
	exception,,, 5
),,5 6
;,,6 7
}-- 	
public22 
virtual22 
void22 !
UpdateGroupConnection22 1
(221 2
)222 3
{33 	
var44 
user44 
=44 
Users44 
.44 
Find44 !
(44! "
p44" #
=>44$ &
p44' (
.44( )
ConnectionId44) 5
==446 8
Context449 @
.44@ A
ConnectionId44A M
)44M N
;44N O
if55 
(55 
user55 
!=55 
null55 
)55 
{66 
}99 
}:: 	
public@@ 
virtual@@ 
void@@ )
UpdatePlayerConnectionIdAsync@@ 9
(@@9 :
string@@: @
playerId@@A I
)@@I J
{AA 	
varCC 
playerCC 
=CC 
UsersCC 
.CC 
FindCC #
(CC# $
pCC$ %
=>CC& (
pCC) *
.CC* +
UserIdCC+ 1
==CC2 4
playerIdCC5 =
)CC= >
;CC> ?
ifDD 
(DD 
playerDD 
!=DD 
nullDD 
&&DD !
playerDD" (
.DD( )
ConnectionIdDD) 5
!=DD6 8
ContextDD9 @
.DD@ A
ConnectionIdDDA M
)DDM N
{EE 
playerHH 
.HH 
ConnectionIdHH #
=HH$ %
ContextHH& -
.HH- .
ConnectionIdHH. :
;HH: ;
}JJ 
}KK 	
privateRR 
voidRR 

FailResultRR 
(RR  
dynamicRR  '
objDataRR( /
,RR/ 0
stringRR1 7
errorMsgRR8 @
)RR@ A
{SS 	
constTT 
stringTT 
responseKeyTT $
=TT% &
$strTT' /
;TT/ 0
constUU 
intUU 
statusUU 
=UU 
$numUU  
;UU  !
	ApiResultVV 
<VV 
dynamicVV 
>VV 
resultVV %
=VV& '
newVV( +
	ApiResultVV, 5
<VV5 6
dynamicVV6 =
>VV= >
(VV> ?
)VV? @
{WW 
ResponseKeyXX 
=XX 
responseKeyXX )
,XX) *
StatusYY 
=YY 
statusYY 
,YY  
DataZZ 
=ZZ 
objDataZZ 
,ZZ 
}\\ 
;\\ 
Clients]] 
.]] 
Client]] 
(]] 
Context]] "
.]]" #
ConnectionId]]# /
)]]/ 0
.]]0 1
InvokeAsync]]1 <
(]]< =
$str]]= M
,]]M N
result]]O U
)]]U V
;]]V W
}^^ 	
}__ 
}`` 