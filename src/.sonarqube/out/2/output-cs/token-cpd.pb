Ôè
MD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Helper\CommonHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{ 
public 

class 
CommonHelper 
{ 
private 
static 
readonly 
char  $
[$ %
]% &
_base62chars' 3
=4 5
$str L
. 
ToCharArray 
( 
) 
; 
private"" 
static"" 
readonly"" 
Random""  &
_random""' .
=""/ 0
new""1 4
Random""5 ;
(""; <
)""< =
;""= >
public(( 
static(( 
RSAParameters(( #
GenerateKey(($ /
(((/ 0
)((0 1
{)) 	
using** 
(** 
var** 
key** 
=** 
new**  $
RSACryptoServiceProvider**! 9
(**9 :
$num**: >
)**> ?
)**? @
{++ 
return,, 
key,, 
.,, 
ExportParameters,, +
(,,+ ,
true,,, 0
),,0 1
;,,1 2
}-- 
}.. 	
public55 
static55 
string55 
	GetBase6255 &
(55& '
int55' *
length55+ 1
)551 2
{66 	
var77 
sb77 
=77 
new77 
StringBuilder77 &
(77& '
length77' -
)77- .
;77. /
for99 
(99 
int99 
i99 
=99 
$num99 
;99 
i99 
<99 
length99  &
;99& '
i99( )
++99) +
)99+ ,
sb:: 
.:: 
Append:: 
(:: 
_base62chars:: &
[::& '
_random::' .
.::. /
Next::/ 3
(::3 4
$num::4 6
)::6 7
]::7 8
)::8 9
;::9 :
return<< 
sb<< 
.<< 
ToString<< 
(<< 
)<<  
;<<  !
}== 	
publicDD 
staticDD 
stringDD 
GetFullPathDD (
(DD( )
stringDD) /
[DD/ 0
]DD0 1
subPathsDD2 :
)DD: ;
{EE 	
stringFF 
resultFF 
=FF 
stringFF "
.FF" #
EmptyFF# (
;FF( )
stringGG 
	strFormatGG 
=GG 
stringGG %
.GG% &
EmptyGG& +
;GG+ ,
forHH 
(HH 
intHH 
iHH 
=HH 
$numHH 
;HH 
iHH 
<HH 
subPathsHH  (
.HH( )
LengthHH) /
;HH/ 0
iHH1 2
++HH2 4
)HH4 5
{II 
	strFormatKK 
+=KK 
$strKK !
+KK" #
iKK$ %
+KK& '
$strKK( +
+KK, -
(KK. /
iKK/ 0
<KK1 2
subPathsKK3 ;
.KK; <
LengthKK< B
-KKC D
$numKKE F
?KKG H
$strKKI L
:KKM N
stringKKO U
.KKU V
EmptyKKV [
)KK[ \
;KK\ ]
}LL 
returnMM 
stringMM 
.MM 
FormatMM  
(MM  !
	strFormatMM! *
,MM* +
subPathsMM, 4
)MM4 5
.MM5 6
ReplaceMM6 =
(MM= >
$strMM> B
,MMB C
$strMMD G
)MMG H
;MMH I
}NN 	
publicUU 
staticUU 
stringUU 
GetRandomNameUU *
(UU* +
stringUU+ 1
filenameUU2 :
)UU: ;
{VV 	
stringWW 
extWW 
=WW 
filenameWW !
.WW! "
SplitWW" '
(WW' (
$charWW( +
)WW+ ,
[WW, -
$numWW- .
]WW. /
;WW/ 0
returnXX 
stringXX 
.XX 
FormatXX  
(XX  !
$strXX! *
,XX* +
GuidXX, 0
.XX0 1
NewGuidXX1 8
(XX8 9
)XX9 :
.XX: ;
ToStringXX; C
(XXC D
$strXXD G
)XXG H
,XXH I
extXXJ M
)XXM N
;XXN O
}YY 	
public`` 
static`` 
async`` 
System`` "
.``" #
	Threading``# ,
.``, -
Tasks``- 2
.``2 3
Task``3 7
<``7 8
string``8 >
>``> ?
GetWebResponseAsync``@ S
(``S T
string``T Z
url``[ ^
)``^ _
{aa 	
HttpWebRequestbb 

webRequestbb %
=bb& '
(bb( )
HttpWebRequestbb) 7
)bb7 8

WebRequestbb8 B
.bbB C
CreatebbC I
(bbI J
urlbbJ M
)bbM N
;bbN O
usingcc 
(cc 
WebResponsecc 
responsecc '
=cc( )
awaitcc* /

webRequestcc0 :
.cc: ;
GetResponseAsynccc; K
(ccK L
)ccL M
.ccM N
ConfigureAwaitccN \
(cc\ ]
falsecc] b
)ccb c
)ccc d
{dd 
usingee 
(ee 
Streamee 
	resStreamee '
=ee( )
responseee* 2
.ee2 3
GetResponseStreamee3 D
(eeD E
)eeE F
)eeF G
{ff 
StreamReadergg  
readergg! '
=gg( )
newgg* -
StreamReadergg. :
(gg: ;
	resStreamgg; D
,ggD E
EncodingggF N
.ggN O
UTF8ggO S
)ggS T
;ggT U
returnhh 
readerhh !
.hh! "
	ReadToEndhh" +
(hh+ ,
)hh, -
;hh- .
}ii 
}jj 
}kk 	
publicrr 
staticrr 
Streamrr 
	LoadImagerr &
(rr& '
stringrr' -

strImage64rr. 8
)rr8 9
{ss 	
tryvv 
{ww 
stringxx 
imgDataxx 
=xx  

strImage64xx! +
.xx+ ,
	Substringxx, 5
(xx5 6

strImage64xx6 @
.xx@ A
IndexOfxxA H
(xxH I
$charxxI L
)xxL M
+xxN O
$numxxP Q
)xxQ R
;xxR S
byte
ÇÇ 
[
ÇÇ 
]
ÇÇ 

imageBytes
ÇÇ !
=
ÇÇ" #
Convert
ÇÇ$ +
.
ÇÇ+ ,
FromBase64String
ÇÇ, <
(
ÇÇ< =
imgData
ÇÇ= D
)
ÇÇD E
;
ÇÇE F
return
ÑÑ 
new
ÑÑ 
MemoryStream
ÑÑ '
(
ÑÑ' (

imageBytes
ÑÑ( 2
,
ÑÑ2 3
$num
ÑÑ4 5
,
ÑÑ5 6

imageBytes
ÑÑ7 A
.
ÑÑA B
Length
ÑÑB H
)
ÑÑH I
;
ÑÑI J
}
ää 
catch
ãã 
{
åå 
return
çç 
null
çç 
;
çç 
}
éé 
}
èè 	
public
óó 
static
óó 
string
óó #
ParseJsonPropertyName
óó 2
(
óó2 3
string
óó3 9
input
óó: ?
)
óó? @
{
òò 	
if
ôô 
(
ôô 
!
ôô 
string
ôô 
.
ôô 
IsNullOrEmpty
ôô %
(
ôô% &
input
ôô& +
)
ôô+ ,
)
ôô, -
{
öö 
return
õõ 
Char
õõ 
.
õõ 
ToLower
õõ #
(
õõ# $
input
õõ$ )
[
õõ) *
$num
õõ* +
]
õõ+ ,
)
õõ, -
+
õõ. /
input
õõ0 5
.
õõ5 6
	Substring
õõ6 ?
(
õõ? @
$num
õõ@ A
)
õõA B
;
õõB C
}
úú 
else
ùù 
{
ûû 
return
üü 
string
üü 
.
üü 
Empty
üü #
;
üü# $
}
†† 
}
°° 	
public
®® 
static
®® 
string
®® 
ReadFromFile
®® )
(
®®) *
string
®®* 0
filename
®®1 9
)
®®9 :
{
©© 	
string
™™ 
s
™™ 
=
™™ 
$str
™™ 
;
™™ 
try
´´ 
{
¨¨ 

FileStream
≠≠ 
file
≠≠ 
=
≠≠  !
new
≠≠" %

FileStream
≠≠& 0
(
≠≠0 1
filename
≠≠1 9
,
≠≠9 :
FileMode
≠≠; C
.
≠≠C D
Open
≠≠D H
,
≠≠H I

FileAccess
≠≠J T
.
≠≠T U
Read
≠≠U Y
)
≠≠Y Z
;
≠≠Z [
StreamReader
ÆÆ 
sr
ÆÆ 
=
ÆÆ  !
new
ÆÆ" %
StreamReader
ÆÆ& 2
(
ÆÆ2 3
file
ÆÆ3 7
)
ÆÆ7 8
;
ÆÆ8 9
s
ØØ 
=
ØØ 
sr
ØØ 
.
ØØ 
	ReadToEnd
ØØ  
(
ØØ  !
)
ØØ! "
;
ØØ" #
sr
∞∞ 
.
∞∞ 
Dispose
∞∞ 
(
∞∞ 
)
∞∞ 
;
∞∞ 
file
±± 
.
±± 
Dispose
±± 
(
±± 
)
±± 
;
±± 
}
≤≤ 
catch
≥≥ 
{
¥¥ 
s
µµ 
=
µµ 
$str
µµ 
;
µµ 
}
∂∂ 
return
∑∑ 
s
∑∑ 
;
∑∑ 
}
∏∏ 	
public
øø 
static
øø 
bool
øø 

RemoveFile
øø %
(
øø% &
string
øø& ,
filePath
øø- 5
)
øø5 6
{
¿¿ 	
bool
¡¡ 
result
¡¡ 
=
¡¡ 
false
¡¡ 
;
¡¡  
try
¬¬ 
{
√√ 
if
ƒƒ 
(
ƒƒ 
File
ƒƒ 
.
ƒƒ 
Exists
ƒƒ 
(
ƒƒ  
filePath
ƒƒ  (
)
ƒƒ( )
)
ƒƒ) *
{
≈≈ 
File
∆∆ 
.
∆∆ 
Delete
∆∆ 
(
∆∆  
filePath
∆∆  (
)
∆∆( )
;
∆∆) *
result
«« 
=
«« 
true
«« !
;
««! "
}
»» 
}
…… 
catch
   
{
ÀÀ 
}
ÃÃ 
return
ÕÕ 
result
ÕÕ 
;
ÕÕ 
}
ŒŒ 	
public
◊◊ 
static
◊◊ 
bool
◊◊ 
SaveFileBase64
◊◊ )
(
◊◊) *
string
◊◊* 0
folder
◊◊1 7
,
◊◊7 8
string
◊◊9 ?
filename
◊◊@ H
,
◊◊H I
string
◊◊J P
	strBase64
◊◊Q Z
)
◊◊Z [
{
ÿÿ 	
try
€€ 
{
‹‹ 
string
›› 
fullPath
›› 
=
››  !
GetFullPath
››" -
(
››- .
new
››. 1
string
››2 8
[
››8 9
]
››9 :
{
ﬁﬁ 
folder
ﬂﬂ 
,
ﬂﬂ 
filename
‡‡ 
}
·· 
)
·· 
;
·· 
string
‚‚ 
fileData
‚‚ 
=
‚‚  !
	strBase64
‚‚" +
.
‚‚+ ,
	Substring
‚‚, 5
(
‚‚5 6
	strBase64
‚‚6 ?
.
‚‚? @
IndexOf
‚‚@ G
(
‚‚G H
$char
‚‚H K
)
‚‚K L
+
‚‚M N
$num
‚‚O P
)
‚‚P Q
;
‚‚Q R
byte
„„ 
[
„„ 
]
„„ 
bytes
„„ 
=
„„ 
Convert
„„ &
.
„„& '
FromBase64String
„„' 7
(
„„7 8
fileData
„„8 @
)
„„@ A
;
„„A B
if
ÂÂ 
(
ÂÂ 
!
ÂÂ 
	Directory
ÂÂ 
.
ÂÂ 
Exists
ÂÂ %
(
ÂÂ% &
folder
ÂÂ& ,
)
ÂÂ, -
)
ÂÂ- .
{
ÊÊ 
	Directory
ÁÁ 
.
ÁÁ 
CreateDirectory
ÁÁ -
(
ÁÁ- .
folder
ÁÁ. 4
)
ÁÁ4 5
;
ÁÁ5 6
}
ËË 
if
ÍÍ 
(
ÍÍ 
File
ÍÍ 
.
ÍÍ 
Exists
ÍÍ 
(
ÍÍ  
fullPath
ÍÍ  (
)
ÍÍ( )
)
ÍÍ) *
{
ÎÎ 
File
ÏÏ 
.
ÏÏ 
Delete
ÏÏ 
(
ÏÏ  
fullPath
ÏÏ  (
)
ÏÏ( )
;
ÏÏ) *
}
ÌÌ 

FileStream
ÔÔ 
fs
ÔÔ 
=
ÔÔ 
new
ÔÔ  #

FileStream
ÔÔ$ .
(
ÔÔ. /
fullPath
ÔÔ/ 7
,
ÔÔ7 8
FileMode
ÔÔ9 A
.
ÔÔA B
Create
ÔÔB H
)
ÔÔH I
;
ÔÔI J
BinaryWriter
 
w
 
=
  
new
! $
BinaryWriter
% 1
(
1 2
fs
2 4
)
4 5
;
5 6
try
ÒÒ 
{
ÚÚ 
w
ÛÛ 
.
ÛÛ 
Write
ÛÛ 
(
ÛÛ 
bytes
ÛÛ !
)
ÛÛ! "
;
ÛÛ" #
}
ÙÙ 
finally
ıı 
{
ˆˆ 
fs
˜˜ 
.
˜˜ 
Close
˜˜ 
(
˜˜ 
)
˜˜ 
;
˜˜ 
w
¯¯ 
.
¯¯ 
Close
¯¯ 
(
¯¯ 
)
¯¯ 
;
¯¯ 
}
˘˘ 
return
˙˙ 
true
˙˙ 
;
˙˙ 
}
˚˚ 
catch
¸¸ 
{
˝˝ 
return
˛˛ 
false
˛˛ 
;
˛˛ 
}
ˇˇ 
}
ÄÄ 	
public
àà 
static
àà 
async
àà 
System
àà "
.
àà" #
	Threading
àà# ,
.
àà, -
Tasks
àà- 2
.
àà2 3
Task
àà3 7
<
àà7 8
string
àà8 >
>
àà> ?
UploadFileAsync
àà@ O
(
ààO P
string
ààP V
fullPath
ààW _
,
àà_ `
	IFormFile
ààa j
file
ààk o
)
àào p
{
ââ 	
try
ää 
{
ãã 
if
åå 
(
åå 
!
åå 
	Directory
åå 
.
åå 
Exists
åå %
(
åå% &
fullPath
åå& .
)
åå. /
)
åå/ 0
{
çç 
	Directory
éé 
.
éé 
CreateDirectory
éé -
(
éé- .
fullPath
éé. 6
)
éé6 7
;
éé7 8
}
èè 
if
ëë 
(
ëë 
file
ëë 
!=
ëë 
null
ëë  
)
ëë  !
{
íí 
string
ïï 
fileName
ïï #
=
ïï$ %
string
ïï& ,
.
ïï, -
Format
ïï- 3
(
ïï3 4
$str
ïï4 =
,
ïï= >
Guid
ññ 
.
ññ 
NewGuid
ññ $
(
ññ$ %
)
ññ% &
.
ññ& '
ToString
ññ' /
(
ññ/ 0
$str
ññ0 3
)
ññ3 4
,
ññ4 5
file
óó 
.
óó 
FileName
óó %
.
óó% &
Split
óó& +
(
óó+ ,
$char
óó, /
)
óó/ 0
.
óó0 1
Last
óó1 5
(
óó5 6
)
óó6 7
)
óó7 8
;
óó8 9
using
òò 
(
òò 
var
òò 

fileStream
òò )
=
òò* +
new
òò, /

FileStream
òò0 :
(
òò: ;
Path
òò; ?
.
òò? @
Combine
òò@ G
(
òòG H
fullPath
òòH P
,
òòP Q
fileName
òòR Z
)
òòZ [
,
òò[ \
FileMode
òò] e
.
òòe f
Create
òòf l
,
òòl m

FileAccess
òòn x
.
òòx y
	ReadWriteòòy Ç
)òòÇ É
)òòÉ Ñ
{
ôô 
await
öö 
file
öö "
.
öö" #
CopyToAsync
öö# .
(
öö. /

fileStream
öö/ 9
)
öö9 :
.
öö: ;
ConfigureAwait
öö; I
(
ööI J
false
ööJ O
)
ööO P
;
ööP Q
return
õõ 
fileName
õõ '
;
õõ' (
}
úú 
}
ùù 
else
ûû 
{
üü 
return
†† 
string
†† !
.
††! "
Empty
††" '
;
††' (
}
°° 
}
¢¢ 
catch
££ 
{
§§ 
return
•• 
string
•• 
.
•• 
Empty
•• #
;
••# $
}
¶¶ 
}
ßß 	
public
ÆÆ 
static
ÆÆ 
void
ÆÆ 
WriteBytesToFile
ÆÆ +
(
ÆÆ+ ,
string
ÆÆ, 2
fullPath
ÆÆ3 ;
,
ÆÆ; <
string
ÆÆ= C
	strBase64
ÆÆD M
)
ÆÆM N
{
ØØ 	
string
∞∞ 
fileData
∞∞ 
=
∞∞ 
	strBase64
∞∞ '
.
∞∞' (
	Substring
∞∞( 1
(
∞∞1 2
	strBase64
∞∞2 ;
.
∞∞; <
IndexOf
∞∞< C
(
∞∞C D
$char
∞∞D G
)
∞∞G H
+
∞∞I J
$num
∞∞K L
)
∞∞L M
;
∞∞M N
byte
±± 
[
±± 
]
±± 
bytes
±± 
=
±± 
Convert
±± "
.
±±" #
FromBase64String
±±# 3
(
±±3 4
fileData
±±4 <
)
±±< =
;
±±= >
if
≤≤ 
(
≤≤ 
File
≤≤ 
.
≤≤ 
Exists
≤≤ 
(
≤≤ 
fullPath
≤≤ $
)
≤≤$ %
)
≤≤% &
{
≥≥ 
File
¥¥ 
.
¥¥ 
Delete
¥¥ 
(
¥¥ 
fullPath
¥¥ $
)
¥¥$ %
;
¥¥% &
}
µµ 

FileStream
∑∑ 
fs
∑∑ 
=
∑∑ 
new
∑∑ 

FileStream
∑∑  *
(
∑∑* +
fullPath
∑∑+ 3
,
∑∑3 4
FileMode
∑∑5 =
.
∑∑= >
Create
∑∑> D
)
∑∑D E
;
∑∑E F
BinaryWriter
∏∏ 
w
∏∏ 
=
∏∏ 
new
∏∏  
BinaryWriter
∏∏! -
(
∏∏- .
fs
∏∏. 0
)
∏∏0 1
;
∏∏1 2
try
ππ 
{
∫∫ 
w
ªª 
.
ªª 
Write
ªª 
(
ªª 
bytes
ªª 
)
ªª 
;
ªª 
}
ºº 
finally
ΩΩ 
{
ææ 
fs
øø 
.
øø 
Close
øø 
(
øø 
)
øø 
;
øø 
w
¿¿ 
.
¿¿ 
Close
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
}
¡¡ 
}
¬¬ 	
}
ﬁﬁ 
}ﬂﬂ Í

GD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Helper\Helper.cs
	namespace 	
Swastika
 
. 
UI 
. 
Base 
{		 
public 

class 
	ApiHelper 
< 
T 
> 
{ 
public 
static 
	ApiResult 
<  
T  !
>! "
	GetResult# ,
(, -
int- 0
status1 7
,7 8
T9 :
data; ?
,? @
stringA G
responseKeyH S
,S T
ListU Y
<Y Z
stringZ `
>` a
errorsb h
)h i
{ 	
	ApiResult 
< 
T 
> 
result 
=  !
new" %
	ApiResult& /
</ 0
T0 1
>1 2
(2 3
)3 4
{ 
Status 
= 
status 
,  
ResponseKey 
= 
responseKey )
,) *
Data 
= 
data 
, 
Errors 
= 
errors 
,  
}   
;   
return"" 
result"" 
;"" 
}## 	
}$$ 
}%% –;
JD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Helper\SEOHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{		 
public 

class 
	SEOHelper 
{ 
public 
static 
string "
DeleteSpecialCharaters 3
(3 4
string4 :
str; >
)> ?
{ 	
const 
string 
replaceChar $
=% &
$str' )
;) *
string 
[ 
] 
pattern 
= 
{  
$str! $
,$ %
$str& )
,) *
$str+ /
,/ 0
$str1 4
,4 5
$str6 9
,9 :
$str; >
}? @
;@ A
foreach 
( 
string 
item  
in! #
pattern$ +
)+ ,
{ 
str 
= 
str 
. 
Replace !
(! "
item" &
,& '
replaceChar( 3
)3 4
;4 5
} 
return 
str 
; 
} 	
public&& 
static&& 
string&& 
GetSEOString&& )
(&&) *
string&&* 0
s&&1 2
)&&2 3
{'' 	
return(( 
WhiteSpaceToHyphen(( %
(((% &
ConvertToUnSign((& 5
(((5 6"
DeleteSpecialCharaters((6 L
(((L M
s((M N
)((N O
)((O P
)((P Q
;((Q R
})) 	
public44 
static44 
string44 
ConvertToUnSign44 ,
(44, -
string44- 3
text444 8
)448 9
{55 	
if66 
(66 
text66 
!=66 
null66 
)66 
{77 
for88 
(88 
int88 
i88 
=88 
$num88 
;88  
i88! "
<88# $
$num88% '
;88' (
i88) *
++88* ,
)88, -
{99 
text:: 
=:: 
text:: 
.::  
Replace::  '
(::' (
(::( )
(::) *
char::* .
)::. /
i::/ 0
)::0 1
.::1 2
ToString::2 :
(::: ;
)::; <
,::< =
$str::> @
)::@ A
;::A B
};; 
for== 
(== 
int== 
i== 
=== 
$num== 
;==  
i==! "
<==# $
$num==% '
;==' (
i==) *
++==* ,
)==, -
{>> 
text?? 
=?? 
text?? 
.??  
Replace??  '
(??' (
(??( )
(??) *
char??* .
)??. /
i??/ 0
)??0 1
.??1 2
ToString??2 :
(??: ;
)??; <
,??< =
$str??> @
)??@ A
;??A B
}@@ 
forBB 
(BB 
intBB 
iBB 
=BB 
$numBB 
;BB  
iBB! "
<BB# $
$numBB% '
;BB' (
iBB) *
++BB* ,
)BB, -
{CC 
textDD 
=DD 
textDD 
.DD  
ReplaceDD  '
(DD' (
(DD( )
(DD) *
charDD* .
)DD. /
iDD/ 0
)DD0 1
.DD1 2
ToStringDD2 :
(DD: ;
)DD; <
,DD< =
$strDD> @
)DD@ A
;DDA B
}EE 
forGG 
(GG 
intGG 
iGG 
=GG 
$numGG  
;GG  !
iGG" #
<GG$ %
$numGG& )
;GG) *
iGG+ ,
++GG, .
)GG. /
{HH 
textII 
=II 
textII 
.II  
ReplaceII  '
(II' (
(II( )
(II) *
charII* .
)II. /
iII/ 0
)II0 1
.II1 2
ToStringII2 :
(II: ;
)II; <
,II< =
$strII> @
)II@ A
;IIA B
}JJ 
}KK 
elseLL 
{MM 
textNN 
=NN 
$strNN 
;NN 
}OO 
SystemRR 
.RR 
TextRR 
.RR 
RegularExpressionsRR *
.RR* +
RegexRR+ 0
regexRR1 6
=RR7 8
newRR9 <
SystemRR= C
.RRC D
TextRRD H
.RRH I
RegularExpressionsRRI [
.RR[ \
RegexRR\ a
(RRa b
$str	RRb Ö
)
RRÖ Ü
;
RRÜ á
stringTT 
strFormDTT 
=TT 
textTT "
.TT" #
	NormalizeTT# ,
(TT, -
SystemTT- 3
.TT3 4
TextTT4 8
.TT8 9
NormalizationFormTT9 J
.TTJ K
FormDTTK P
)TTP Q
;TTQ R
returnVV 
regexVV 
.VV 
ReplaceVV  
(VV  !
strFormDVV! )
,VV) *
StringVV+ 1
.VV1 2
EmptyVV2 7
)VV7 8
.VV8 9
ReplaceVV9 @
(VV@ A
$charVVA I
,VVI J
$charVVK N
)VVN O
.VVO P
ReplaceVVP W
(VVW X
$charVVX `
,VV` a
$charVVb e
)VVe f
;VVf g
}WW 	
publicaa 
staticaa 
stringaa 
WhiteSpaceToHyphenaa /
(aa/ 0
stringaa0 6
straa7 :
)aa: ;
{bb 	
charcc 
replaceCharcc 
=cc 
$charcc "
;cc" #
stringdd 
patterndd 
=dd 
$strdd "
;dd" #
MatchCollectionee 
matchsee "
=ee# $
Regexee% *
.ee* +
Matchesee+ 2
(ee2 3
stree3 6
,ee6 7
patternee8 ?
,ee? @
RegexOptionseeA M
.eeM N

IgnoreCaseeeN X
)eeX Y
;eeY Z
foreachff 
(ff 
Matchff 
mff 
inff 
matchsff  &
)ff& '
{gg 
strhh 
=hh 
strhh 
.hh 
Replacehh !
(hh! "
mhh" #
.hh# $
Valuehh$ )
[hh) *
$numhh* +
]hh+ ,
,hh, -
replaceCharhh. 9
)hh9 :
;hh: ;
}ii 
replaceCharjj 
=jj 
$charjj 
;jj 
patternkk 
=kk 
$strkk 
;kk 
matchsll 
=ll 
Regexll 
.ll 
Matchesll "
(ll" #
strll# &
,ll& '
patternll( /
,ll/ 0
RegexOptionsll1 =
.ll= >

IgnoreCasell> H
)llH I
;llI J
foreachmm 
(mm 
Matchmm 
mmm 
inmm 
matchsmm  &
)mm& '
{nn 
stroo 
=oo 
stroo 
.oo 
Replaceoo !
(oo! "
moo" #
.oo# $
Valueoo$ )
[oo) *
$numoo* +
]oo+ ,
,oo, -
replaceCharoo. 9
)oo9 :
;oo: ;
}pp 
returnqq 
strqq 
.qq 
ToLowerqq 
(qq 
)qq  
;qq  !
}rr 	
}ss 
}tt ´
GD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Utility\Const.cs
	namespace 	
Swastika
 
. 
Common 
. 
Utility !
{ 
public 

class 
Const 
{ 
public 
const 
string $
CONST_DEFAULT_CONNECTION 4
=5 6
$str7 J
;J K
public 
const 
string !
CONST_CHAT_CONNECTION 1
=2 3
$str4 D
;D E
public 
const 
string !
CONST_FILE_APPSETTING 1
=2 3
$str4 F
;F G
public 
const 
string )
CONST_PATH_HOME_ACCESS_DENIED 9
=: ;
$str< Q
;Q R
public   
const   
string   !
CONST_PATH_HOME_ERROR   1
=  2 3
$str  4 A
;  A B
public%% 
const%% 
string%% !
CONST_SECTION_LOGGING%% 1
=%%2 3
$str%%4 =
;%%= >
public** 
const** 
string** 
CONST_ROUTE_DEFAULT** /
=**0 1
$str**2 ;
;**; <
public// 
const// 
string// 
CONST_APPID// '
=//( )
$str//* ;
;//; <
public44 
const44 
string44 
CONST_APPSECRET44 +
=44, -
$str44. ?
;44? @
public99 
const99 
string99 0
$CONST_DOMAIN_NOTIFICATION_KEY_COMMIT99 @
=99A B
$str99C K
;99K L
public>> 
const>> 
string>> 6
*CONST_DOMAIN_NOTIFICATION_KEY_COMMIT_VALUE>> F
=>>G H
$str>>I t
;>>t u
publicCC 
constCC 
stringCC %
CONST_DOMAIN_NOTIFICATIONCC 5
=CC6 7
$strCC8 L
;CCL M
publicHH 
constHH 
stringHH .
"CONST_DEFAULT_EXTENSIONS_FILE_PATHHH >
=HH? @
$strHHA [
;HH[ \
publicMM 
constMM 
stringMM -
!CONST_DEFAULT_EXTENSION_FILE_NAMEMM =
=MM> ?
$strMM@ Q
;MMQ R
}NN 
}OO —
FD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Common\Utility\Enum.cs
	namespace 	
Swastika
 
. 
Common 
. 
Utility !
{ 
public 

class 
Enums 
{ 
public		 
enum		 
SWStatus		 
{

 	
Deleted 
= 
$num 
, 
Preview 
= 
$num 
, 
	Published 
= 
$num 
, 
Draft 
= 
$num 
, 
Schedule 
= 
$num 
} 	
} 
} Ç
ZD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Interfaces\IExpandViewModel.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

Interfaces )
{ 
public 

	interface 
IExpandViewModel %
<% &
TModel& ,
>, -
where. 3
TModel4 :
:; <
class= B
{ 
void 
ExpandModel 
( 
TModel 
model  %
)% &
;& '
void 

ExpandView 
( 
) 
; 
bool 
Validate 
( 
out 
List 
< 
string %
>% &
errors' -
)- .
;. /
}   
}!! –
RD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Interfaces\IService.cs
	namespace		 	
Swastika		
 
.		 
	Extension		 
.		 
Core		 !
.		! "

Interfaces		" ,
{

 
public 

	interface 
IService 
< 
T 
,  
TView! &
>& '
where 
T 
: 
class 
where 
TView 
: 
class 
{ 
IEnumerable 
< 
TView 
> 
GetAll !
(! "
)" #
;# $
IList 
< 
HistoryData 
< 
T 
> 
> 
GetAllHistory +
(+ ,
Guid, 0
id1 3
)3 4
;4 5
IList&& 
<&& 
HistoryData&& 
<&& 
T&& 
>&& 
>&& 
GetAllHistory&& +
(&&+ ,
int&&, /
id&&0 2
)&&2 3
;&&3 4
IList-- 
<-- 
HistoryData-- 
<-- 
T-- 
>-- 
>-- 
GetAllHistory-- +
(--+ ,
string--, 2
id--3 5
)--5 6
;--6 7
TView44 
GetById44 
(44 
Guid44 
id44 
)44 
;44 
void:: 
Register:: 
(:: 
TView:: 
TView:: !
)::! "
;::" #
void@@ 
Remove@@ 
(@@ 
Guid@@ 
id@@ 
)@@ 
;@@ 
voidFF 
UpdateFF 
(FF 
TViewFF 
TViewFF 
)FF  
;FF  !
}GG 
}HH ≥
OD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Interfaces\IUser.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

Interfaces )
{		 
public

 

	interface

 
IUser

 
{ 
string 
Name 
{ 
get 
; 
} 
bool 
IsAuthenticated 
( 
) 
; 
IEnumerable   
<   
Claim   
>   
GetClaimsIdentity   ,
(  , -
)  - .
;  . /
}!! 
}"" ã
LD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\Entity.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

abstract 
class 
Entity  
{ 
public 
Guid 
Id 
{ 
get 
; 
set !
;! "
}# $
public 
static 
bool 
operator #
!=$ &
(& '
Entity' -
a. /
,/ 0
Entity1 7
b8 9
)9 :
{ 	
return   
!   
(   
a   
==   
b   
)   
;   
}!! 	
public++ 
static++ 
bool++ 
operator++ #
==++$ &
(++& '
Entity++' -
a++. /
,++/ 0
Entity++1 7
b++8 9
)++9 :
{,, 	
if-- 
(-- 
a-- 
is-- 
null-- 
&&-- 
b-- 
is-- !
null--" &
)--& '
return.. 
true.. 
;.. 
if00 
(00 
a00 
is00 
null00 
||00 
b00 
is00 !
null00" &
)00& '
return11 
false11 
;11 
return33 
a33 
.33 
Equals33 
(33 
b33 
)33 
;33 
}44 	
public== 
override== 
bool== 
Equals== #
(==# $
object==$ *
obj==+ .
)==. /
{>> 	
var?? 
	compareTo?? 
=?? 
obj?? 
as??  "
Entity??# )
;??) *
ifAA 
(AA 
ReferenceEqualsAA 
(AA  
thisAA  $
,AA$ %
	compareToAA& /
)AA/ 0
)AA0 1
returnAA2 8
trueAA9 =
;AA= >
ifBB 
(BB 
	compareToBB 
isBB 
nullBB !
)BB! "
returnBB# )
falseBB* /
;BB/ 0
returnDD 
IdDD 
.DD 
EqualsDD 
(DD 
	compareToDD &
.DD& '
IdDD' )
)DD) *
;DD* +
}EE 	
publicMM 
overrideMM 
intMM 
GetHashCodeMM '
(MM' (
)MM( )
{NN 	
returnOO 
(OO 
GetTypeOO 
(OO 
)OO 
.OO 
GetHashCodeOO )
(OO) *
)OO* +
*OO, -
$numOO. 1
)OO1 2
+OO3 4
IdOO5 7
.OO7 8
GetHashCodeOO8 C
(OOC D
)OOD E
;OOE F
}PP 	
publicXX 
overrideXX 
stringXX 
ToStringXX '
(XX' (
)XX( )
{YY 	
returnZZ 
GetTypeZZ 
(ZZ 
)ZZ 
.ZZ 
NameZZ !
+ZZ" #
$strZZ$ +
+ZZ, -
IdZZ. 0
+ZZ1 2
$strZZ3 6
;ZZ6 7
}[[ 	
}\\ 
}]] Ì
KD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\Enums.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public

 

class

 
Enums

 
{ 
public 
enum 
ResponseKey 
{ 	

BadRequest 
= 
$num 
, 
NotFound 
= 
$num 
, 
OK 
= 
$num 
} 	
}   
}!! ´
QD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\HistoryData.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

class 
HistoryData 
< 
T 
> 
where  %
T& '
:( )
class* /
{ 
public 
string 
Action 
{ 
get "
;" #
set$ '
;' (
}) *
public 
T 
Model 
{ 
get 
; 
set !
;! "
}# $
public## 
string## 
When## 
{## 
get##  
;##  !
set##" %
;##% &
}##' (
public++ 
string++ 
Who++ 
{++ 
get++ 
;++  
set++! $
;++$ %
}++& '
},, 
}-- Z
XD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\RepositoryResponse.cs◊
SD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\SignalRModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

class 
SignalRClient 
{ 
public 
string 
UserId 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
NickName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public$$ 
string$$ 
ConnectionId$$ "
{$$# $
get$$% (
;$$( )
set$$* -
;$$- .
}$$/ 0
public,, 
DateTime,, 

JoinedDate,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
}-- 
}.. Ω
VD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\SupportedCulture.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public

 

class

 
SupportedCulture

 !
{ 
public 
int 
Id 
{ 
get 
; 
set  
;  !
}" #
public 
string 
Specificulture $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public"" 
string"" 
Lcid"" 
{"" 
get""  
;""  !
set""" %
;""% &
}""' (
public** 
string** 
Alias** 
{** 
get** !
;**! "
set**# &
;**& '
}**( )
public22 
string22 
FullName22 
{22  
get22! $
;22$ %
set22& )
;22) *
}22+ ,
public:: 
string:: 
Description:: !
{::" #
get::$ '
;::' (
set::) ,
;::, -
}::. /
publicBB 
stringBB 
IconBB 
{BB 
getBB  
;BB  !
setBB" %
;BB% &
}BB' (
publicJJ 
boolJJ 
IsSupportedJJ 
{JJ  !
getJJ" %
;JJ% &
setJJ' *
;JJ* +
}JJ, -
}KK 
}LL õ
QD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Models\ValueObject.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

abstract 
class 
ValueObject %
<% &
T& '
>' (
where) .
T/ 0
:1 2
ValueObject3 >
<> ?
T? @
>@ A
{ 
public 
static 
bool 
operator #
!=$ &
(& '
ValueObject' 2
<2 3
T3 4
>4 5
a6 7
,7 8
ValueObject9 D
<D E
TE F
>F G
bH I
)I J
{ 	
return 
! 
( 
a 
== 
b 
) 
; 
} 	
public"" 
static"" 
bool"" 
operator"" #
==""$ &
(""& '
ValueObject""' 2
<""2 3
T""3 4
>""4 5
a""6 7
,""7 8
ValueObject""9 D
<""D E
T""E F
>""F G
b""H I
)""I J
{## 	
if$$ 
($$ 
a$$ 
is$$ 
null$$ 
&&$$ 
b$$ 
is$$ !
null$$" &
)$$& '
return%% 
true%% 
;%% 
if'' 
('' 
a'' 
is'' 
null'' 
||'' 
b'' 
is'' !
null''" &
)''& '
return(( 
false(( 
;(( 
return** 
a** 
.** 
Equals** 
(** 
b** 
)** 
;** 
}++ 	
public44 
override44 
bool44 
Equals44 #
(44# $
object44$ *
obj44+ .
)44. /
{55 	
var66 
valueObject66 
=66 
obj66 !
as66" $
T66% &
;66& '
return77 
!77 
(77 
valueObject77  
is77! #
null77$ (
)77( )
&&77* ,

EqualsCore77- 7
(777 8
valueObject778 C
)77C D
;77D E
}88 	
public@@ 
override@@ 
int@@ 
GetHashCode@@ '
(@@' (
)@@( )
{AA 	
returnBB 
GetHashCodeCoreBB "
(BB" #
)BB# $
;BB$ %
}CC 	
	protectedJJ 
abstractJJ 
boolJJ 

EqualsCoreJJ  *
(JJ* +
TJJ+ ,
otherJJ- 2
)JJ2 3
;JJ3 4
	protectedPP 
abstractPP 
intPP 
GetHashCodeCorePP .
(PP. /
)PP/ 0
;PP0 1
}QQ 
}RR Õ$
]D:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Repository\DefaultRepositories.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{		 
public 

class 
DefaultRepository "
<" #
TContext# +
,+ ,
TModel- 3
>3 4
:5 6
ModelRepositoryBase7 J
<J K
TContextK S
,S T
TModelU [
>[ \
where 
TContext 
: 
	DbContext "
where 
TModel 
: 
class 
{ 
private 
static 
volatile 
DefaultRepository  1
<1 2
TContext2 :
,: ;
TModel< B
>B C
instanceD L
;L M
private 
static 
readonly 
object  &
syncRoot' /
=0 1
new2 5
Object6 <
(< =
)= >
;> ?
private!! 
DefaultRepository!! !
(!!! "
)!!" #
{"" 	
}## 	
public++ 
static++ 
DefaultRepository++ '
<++' (
TContext++( 0
,++0 1
TModel++2 8
>++8 9
Instance++: B
{++C D
get,, 
{,, 
if-- 
(-- 
instance-- 
==-- 
null--  $
)--$ %
{.. 
lock// 
(// 
syncRoot// "
)//" #
{00 
if11 
(11 
instance11 $
==11% '
null11( ,
)11, -
instance22 $
=22% &
new22' *
DefaultRepository22+ <
<22< =
TContext22= E
,22E F
TModel22G M
>22M N
(22N O
)22O P
;22P Q
}33 
}44 
return66 
instance66 
;66  
}77 
}88 	
}99 
publicBB 

classBB 
DefaultRepositoryBB "
<BB" #

TDbContextBB# -
,BB- .
TModelBB/ 5
,BB5 6
TViewBB7 <
>BB< =
:BB> ?
SwastikaCC 
.CC 
DomainCC 
.CC 
DataCC 
.CC 

RepositoryCC '
.CC' (
ViewRepositoryBaseCC( :
<CC: ;

TDbContextCC; E
,CCE F
TModelCCG M
,CCM N
TViewCCO T
>CCT U
whereDD 

TDbContextDD 
:DD 
	DbContextDD $
whereEE 
TModelEE 
:EE 
classEE 
whereFF 
TViewFF 
:FF 
SwastikaFF 
.FF 
DomainFF %
.FF% &
DataFF& *
.FF* +

ViewModelsFF+ 5
.FF5 6
ViewModelBaseFF6 C
<FFC D

TDbContextFFD N
,FFN O
TModelFFP V
,FFV W
TViewFFX ]
>FF] ^
{GG 
privateKK 
staticKK 
volatileKK 
DefaultRepositoryKK  1
<KK1 2

TDbContextKK2 <
,KK< =
TModelKK> D
,KKD E
TViewKKF K
>KKK L
instanceKKM U
;KKU V
privatePP 
staticPP 
readonlyPP 
objectPP  &
syncRootPP' /
=PP0 1
newPP2 5
ObjectPP6 <
(PP< =
)PP= >
;PP> ?
privateUU 
DefaultRepositoryUU !
(UU! "
)UU" #
{VV 	
}WW 	
public__ 
static__ 
DefaultRepository__ '
<__' (

TDbContext__( 2
,__2 3
TModel__4 :
,__: ;
TView__< A
>__A B
Instance__C K
{__L M
get`` 
{`` 
ifaa 
(aa 
instanceaa 
==aa 
nullaa  $
)aa$ %
{bb 
lockcc 
(cc 
syncRootcc "
)cc" #
{dd 
ifee 
(ee 
instanceee $
==ee% '
nullee( ,
)ee, -
instanceff $
=ff% &
newff' *
DefaultRepositoryff+ <
<ff< =

TDbContextff= G
,ffG H
TModelffI O
,ffO P
TViewffQ V
>ffV W
(ffW X
)ffX Y
;ffY Z
}gg 
}hh 
returnjj 
instancejj 
;jj  
}kk 
}ll 	
}mm 
}nn ‘†
]D:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Repository\ModelRepositoryBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{ 
public 

abstract 
class 
ModelRepositoryBase -
<- .

TDbContext. 8
,8 9
TModel: @
>@ A
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
{ 
	protected 
ModelRepositoryBase %
(% &
)& '
{ 	
}   	
public)) 
virtual)) 
bool)) 
CheckIsExists)) )
())) *
TModel))* 0
entity))1 7
,))7 8

TDbContext))9 C
_context))D L
=))M N
null))O S
,))S T!
IDbContextTransaction))U j
_transaction))k w
=))x y
null))z ~
)))~ 
{** 	

TDbContext++ 
context++ 
=++  
_context++! )
??++* ,
InitContext++- 8
(++8 9
)++9 :
;++: ;
var,, 
transaction,, 
=,, 
_transaction,, *
??,,+ -
context,,. 5
.,,5 6
Database,,6 >
.,,> ?
BeginTransaction,,? O
(,,O P
),,P Q
;,,Q R
try-- 
{.. 
return00 
context00 
.00 
Set00 "
<00" #
TModel00# )
>00) *
(00* +
)00+ ,
.00, -
Any00- 0
(000 1
e001 2
=>003 5
e006 7
==008 :
entity00; A
)00A B
;00B C
}44 
catch55 
(55 
	Exception55 
ex55 
)55  
{66 
LogErrorMessage77 
(77  
ex77  "
)77" #
;77# $
if88 
(88 
_transaction88  
==88! #
null88$ (
)88( )
{99 
transaction:: 
.::  
Rollback::  (
(::( )
)::) *
;::* +
};; 
return<< 
false<< 
;<< 
}== 
finally>> 
{?? 
if@@ 
(@@ 
_context@@ 
==@@ 
null@@  $
)@@$ %
{AA 
transactionCC 
.CC  
DisposeCC  '
(CC' (
)CC( )
;CC) *
contextDD 
.DD 
DisposeDD #
(DD# $
)DD$ %
;DD% &
}EE 
}FF 
}GG 	
publicPP 
boolPP 
CheckIsExistsPP !
(PP! "
SystemPP" (
.PP( )
FuncPP) -
<PP- .
TModelPP. 4
,PP4 5
boolPP6 :
>PP: ;
	predicatePP< E
,PPE F

TDbContextPPG Q
_contextPPR Z
=PP[ \
nullPP] a
,PPa b!
IDbContextTransactionPPc x
_transaction	PPy Ö
=
PPÜ á
null
PPà å
)
PPå ç
{QQ 	

TDbContextRR 
contextRR 
=RR  
_contextRR! )
??RR* ,
InitContextRR- 8
(RR8 9
)RR9 :
;RR: ;
varSS 
transactionSS 
=SS 
_transactionSS *
??SS+ -
contextSS. 5
.SS5 6
DatabaseSS6 >
.SS> ?
BeginTransactionSS? O
(SSO P
)SSP Q
;SSQ R
tryTT 
{UU 
returnWW 
contextWW 
.WW 
SetWW "
<WW" #
TModelWW# )
>WW) *
(WW* +
)WW+ ,
.WW, -
AnyWW- 0
(WW0 1
	predicateWW1 :
)WW: ;
;WW; <
}[[ 
catch\\ 
(\\ 
	Exception\\ 
ex\\ 
)\\  
{]] 
LogErrorMessage^^ 
(^^  
ex^^  "
)^^" #
;^^# $
if__ 
(__ 
_transaction__  
==__! #
null__$ (
)__( )
{`` 
transactionaa 
.aa  
Rollbackaa  (
(aa( )
)aa) *
;aa* +
}bb 
returncc 
falsecc 
;cc 
}dd 
finallyee 
{ff 
ifgg 
(gg 
_contextgg 
==gg 
nullgg  $
)gg$ %
{hh 
transactionjj 
.jj  
Disposejj  '
(jj' (
)jj( )
;jj) *
contextkk 
.kk 
Disposekk #
(kk# $
)kk$ %
;kk% &
}ll 
}mm 
}nn 	
publicxx 
virtualxx 
RepositoryResponsexx )
<xx) *
TModelxx* 0
>xx0 1
CreateModelxx2 =
(xx= >
TModelxx> D
modelxxE J
,xxJ K
boolxxL P
isSaveSubModelsxxQ `
=xxa b
falsexxc h
,yy 

TDbContextyy 
_contextyy !
=yy" #
nullyy$ (
,yy( )!
IDbContextTransactionyy* ?
_transactionyy@ L
=yyM N
nullyyO S
)yyS T
{zz 	

TDbContext{{ 
context{{ 
={{  
_context{{! )
??{{* ,
InitContext{{- 8
({{8 9
){{9 :
;{{: ;
var|| 
transaction|| 
=|| 
_transaction|| *
??||+ -
context||. 5
.||5 6
Database||6 >
.||> ?
BeginTransaction||? O
(||O P
)||P Q
;||Q R
try}} 
{~~ 
context 
. 
Entry 
( 
model #
)# $
.$ %
State% *
=+ ,
EntityState- 8
.8 9
Added9 >
;> ?
bool
ÄÄ 
result
ÄÄ 
=
ÄÄ 
context
ÄÄ %
.
ÄÄ% &
SaveChanges
ÄÄ& 1
(
ÄÄ1 2
)
ÄÄ2 3
>
ÄÄ4 5
$num
ÄÄ6 7
;
ÄÄ7 8
if
ÅÅ 
(
ÅÅ 
result
ÅÅ 
&&
ÅÅ 
isSaveSubModels
ÅÅ -
)
ÅÅ- .
{
ÇÇ 
result
ÉÉ 
=
ÉÉ 
SaveSubModel
ÉÉ )
(
ÉÉ) *
model
ÉÉ* /
,
ÉÉ/ 0
context
ÉÉ1 8
,
ÉÉ8 9
transaction
ÉÉ: E
)
ÉÉE F
;
ÉÉF G
}
ÑÑ 
if
ÜÜ 
(
ÜÜ 
result
ÜÜ 
)
ÜÜ 
{
áá 
if
àà 
(
àà 
_transaction
àà $
==
àà% '
null
àà( ,
)
àà, -
{
ââ 
transaction
ää #
.
ää# $
Commit
ää$ *
(
ää* +
)
ää+ ,
;
ää, -
}
ãã 
return
çç 
new
çç  
RepositoryResponse
çç 1
<
çç1 2
TModel
çç2 8
>
çç8 9
(
çç9 :
)
çç: ;
{
éé 
	IsSucceed
èè !
=
èè" #
true
èè$ (
,
èè( )
Data
êê 
=
êê 
model
êê $
}
ëë 
;
ëë 
}
íí 
else
ìì 
{
îî 
if
ïï 
(
ïï 
_transaction
ïï $
==
ïï% '
null
ïï( ,
)
ïï, -
{
ññ 
transaction
óó #
.
óó# $
Rollback
óó$ ,
(
óó, -
)
óó- .
;
óó. /
}
òò 
return
öö 
new
öö  
RepositoryResponse
öö 1
<
öö1 2
TModel
öö2 8
>
öö8 9
(
öö9 :
)
öö: ;
{
õõ 
	IsSucceed
úú !
=
úú" #
false
úú$ )
,
úú) *
Data
ùù 
=
ùù 
null
ùù #
}
ûû 
;
ûû 
}
üü 
}
†† 
catch
°° 
(
°° 
	Exception
°° 
ex
°° 
)
°°  
{
¢¢ 
LogErrorMessage
££ 
(
££  
ex
££  "
)
££" #
;
££# $
if
§§ 
(
§§ 
_transaction
§§  
==
§§! #
null
§§$ (
)
§§( )
{
•• 
transaction
¶¶ 
.
¶¶  
Rollback
¶¶  (
(
¶¶( )
)
¶¶) *
;
¶¶* +
}
ßß 
return
®® 
new
®®  
RepositoryResponse
®® -
<
®®- .
TModel
®®. 4
>
®®4 5
(
®®5 6
)
®®6 7
{
©© 
	IsSucceed
™™ 
=
™™ 
false
™™  %
,
™™% &
Data
´´ 
=
´´ 
null
´´ 
,
´´  
	Exception
¨¨ 
=
¨¨ 
ex
¨¨  "
}
≠≠ 
;
≠≠ 
}
ÆÆ 
finally
ØØ 
{
∞∞ 
if
±± 
(
±± 
_context
±± 
==
±± 
null
±±  $
)
±±$ %
{
≤≤ 
transaction
¥¥ 
.
¥¥  
Dispose
¥¥  '
(
¥¥' (
)
¥¥( )
;
¥¥) *
context
µµ 
.
µµ 
Dispose
µµ #
(
µµ# $
)
µµ$ %
;
µµ% &
}
∂∂ 
}
∑∑ 
}
∏∏ 	
public
¬¬ 
virtual
¬¬ 
async
¬¬ 
Task
¬¬ !
<
¬¬! " 
RepositoryResponse
¬¬" 4
<
¬¬4 5
TModel
¬¬5 ;
>
¬¬; <
>
¬¬< =
CreateModelAsync
¬¬> N
(
¬¬N O
TModel
¬¬O U
model
¬¬V [
,
¬¬[ \
bool
¬¬] a
isSaveSubModels
¬¬b q
=
¬¬r s
false
¬¬t y
,
√√ 

TDbContext
√√ 
_context
√√ !
=
√√" #
null
√√$ (
,
√√( )#
IDbContextTransaction
√√* ?
_transaction
√√@ L
=
√√M N
null
√√O S
)
√√S T
{
ƒƒ 	

TDbContext
≈≈ 
context
≈≈ 
=
≈≈  
_context
≈≈! )
??
≈≈* ,
InitContext
≈≈- 8
(
≈≈8 9
)
≈≈9 :
;
≈≈: ;
var
∆∆ 
transaction
∆∆ 
=
∆∆ 
_transaction
∆∆ *
??
∆∆+ -
context
∆∆. 5
.
∆∆5 6
Database
∆∆6 >
.
∆∆> ?
BeginTransaction
∆∆? O
(
∆∆O P
)
∆∆P Q
;
∆∆Q R
try
«« 
{
»» 
context
…… 
.
…… 
Entry
…… 
(
…… 
model
…… #
)
……# $
.
……$ %
State
……% *
=
……+ ,
EntityState
……- 8
.
……8 9
Added
……9 >
;
……> ?
bool
   
result
   
=
   
await
   #
context
  $ +
.
  + ,
SaveChangesAsync
  , <
(
  < =
)
  = >
.
  > ?
ConfigureAwait
  ? M
(
  M N
false
  N S
)
  S T
>
  U V
$num
  W X
;
  X Y
if
ÀÀ 
(
ÀÀ 
result
ÀÀ 
&&
ÀÀ 
isSaveSubModels
ÀÀ -
)
ÀÀ- .
{
ÃÃ 
result
ÕÕ 
=
ÕÕ 
await
ÕÕ "
SaveSubModelAsync
ÕÕ# 4
(
ÕÕ4 5
model
ÕÕ5 :
,
ÕÕ: ;
context
ÕÕ< C
,
ÕÕC D
transaction
ÕÕE P
)
ÕÕP Q
.
ÕÕQ R
ConfigureAwait
ÕÕR `
(
ÕÕ` a
false
ÕÕa f
)
ÕÕf g
;
ÕÕg h
}
ŒŒ 
if
–– 
(
–– 
result
–– 
)
–– 
{
—— 
if
““ 
(
““ 
_transaction
““ $
==
““% '
null
““( ,
)
““, -
{
”” 
transaction
’’ #
.
’’# $
Commit
’’$ *
(
’’* +
)
’’+ ,
;
’’, -
}
÷÷ 
return
ÿÿ 
new
ÿÿ  
RepositoryResponse
ÿÿ 1
<
ÿÿ1 2
TModel
ÿÿ2 8
>
ÿÿ8 9
(
ÿÿ9 :
)
ÿÿ: ;
{
ŸŸ 
	IsSucceed
⁄⁄ !
=
⁄⁄" #
true
⁄⁄$ (
,
⁄⁄( )
Data
€€ 
=
€€ 
model
€€ $
}
‹‹ 
;
‹‹ 
}
›› 
else
ﬁﬁ 
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
_transaction
‡‡ $
==
‡‡% '
null
‡‡( ,
)
‡‡, -
{
·· 
transaction
„„ #
.
„„# $
Rollback
„„$ ,
(
„„, -
)
„„- .
;
„„. /
}
‰‰ 
return
ÂÂ 
new
ÂÂ  
RepositoryResponse
ÂÂ 1
<
ÂÂ1 2
TModel
ÂÂ2 8
>
ÂÂ8 9
(
ÂÂ9 :
)
ÂÂ: ;
{
ÊÊ 
	IsSucceed
ÁÁ !
=
ÁÁ" #
false
ÁÁ$ )
,
ÁÁ) *
Data
ËË 
=
ËË 
null
ËË #
}
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ  
{
ÌÌ 
LogErrorMessage
ÓÓ 
(
ÓÓ  
ex
ÓÓ  "
)
ÓÓ" #
;
ÓÓ# $
if
ÔÔ 
(
ÔÔ 
_transaction
ÔÔ  
==
ÔÔ! #
null
ÔÔ$ (
)
ÔÔ( )
{
 
transaction
ÚÚ 
.
ÚÚ  
Rollback
ÚÚ  (
(
ÚÚ( )
)
ÚÚ) *
;
ÚÚ* +
}
ÛÛ 
return
ıı 
new
ıı  
RepositoryResponse
ıı -
<
ıı- .
TModel
ıı. 4
>
ıı4 5
(
ıı5 6
)
ıı6 7
{
ˆˆ 
	IsSucceed
˜˜ 
=
˜˜ 
false
˜˜  %
,
˜˜% &
Data
¯¯ 
=
¯¯ 
null
¯¯ 
}
˘˘ 
;
˘˘ 
}
˙˙ 
finally
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 
_context
˝˝ 
==
˝˝ 
null
˝˝  $
)
˝˝$ %
{
˛˛ 
transaction
ÄÄ 
.
ÄÄ  
Dispose
ÄÄ  '
(
ÄÄ' (
)
ÄÄ( )
;
ÄÄ) *
context
ÅÅ 
.
ÅÅ 
Dispose
ÅÅ #
(
ÅÅ# $
)
ÅÅ$ %
;
ÅÅ% &
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
éé 
virtual
éé  
RepositoryResponse
éé )
<
éé) *
TModel
éé* 0
>
éé0 1
	EditModel
éé2 ;
(
éé; <
TModel
éé< B
model
ééC H
,
ééH I
bool
ééJ N
isSaveSubModels
ééO ^
=
éé_ `
false
ééa f
,
èè 

TDbContext
èè 
_context
èè !
=
èè" #
null
èè$ (
,
èè( )#
IDbContextTransaction
èè* ?
_transaction
èè@ L
=
èèM N
null
èèO S
)
èèS T
{
êê 	

TDbContext
ëë 
context
ëë 
=
ëë  
_context
ëë! )
??
ëë* ,
InitContext
ëë- 8
(
ëë8 9
)
ëë9 :
;
ëë: ;
var
íí 
transaction
íí 
=
íí 
_transaction
íí *
??
íí+ -
context
íí. 5
.
íí5 6
Database
íí6 >
.
íí> ?
BeginTransaction
íí? O
(
ííO P
)
ííP Q
;
ííQ R
try
ìì 
{
îî 
context
ïï 
.
ïï 
Entry
ïï 
(
ïï 
model
ïï #
)
ïï# $
.
ïï$ %
State
ïï% *
=
ïï+ ,
EntityState
ïï- 8
.
ïï8 9
Modified
ïï9 A
;
ïïA B
bool
ññ 
result
ññ 
=
ññ 
context
ññ %
.
ññ% &
SaveChanges
ññ& 1
(
ññ1 2
)
ññ2 3
>
ññ4 5
$num
ññ6 7
;
ññ7 8
if
òò 
(
òò 
result
òò 
&&
òò 
isSaveSubModels
òò -
)
òò- .
{
ôô 
result
öö 
=
öö 
SaveSubModel
öö )
(
öö) *
model
öö* /
,
öö/ 0
context
öö1 8
,
öö8 9
transaction
öö: E
)
ööE F
;
ööF G
}
õõ 
if
ùù 
(
ùù 
result
ùù 
)
ùù 
{
ûû 
if
üü 
(
üü 
_transaction
üü $
==
üü% '
null
üü( ,
)
üü, -
{
†† 
transaction
¢¢ #
.
¢¢# $
Commit
¢¢$ *
(
¢¢* +
)
¢¢+ ,
;
¢¢, -
}
££ 
return
§§ 
new
§§  
RepositoryResponse
§§ 1
<
§§1 2
TModel
§§2 8
>
§§8 9
(
§§9 :
)
§§: ;
{
•• 
	IsSucceed
¶¶ !
=
¶¶" #
true
¶¶$ (
,
¶¶( )
Data
ßß 
=
ßß 
model
ßß $
}
®® 
;
®® 
}
©© 
else
™™ 
{
´´ 
if
¨¨ 
(
¨¨ 
_transaction
¨¨ $
==
¨¨% '
null
¨¨( ,
)
¨¨, -
{
≠≠ 
transaction
ØØ #
.
ØØ# $
Rollback
ØØ$ ,
(
ØØ, -
)
ØØ- .
;
ØØ. /
}
∞∞ 
return
±± 
new
±±  
RepositoryResponse
±± 1
<
±±1 2
TModel
±±2 8
>
±±8 9
(
±±9 :
)
±±: ;
{
≤≤ 
	IsSucceed
≥≥ !
=
≥≥" #
false
≥≥$ )
,
≥≥) *
Data
¥¥ 
=
¥¥ 
null
¥¥ #
}
µµ 
;
µµ 
}
∂∂ 
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏ 
ex
∏∏ 
)
∏∏  
{
ππ 
LogErrorMessage
∫∫ 
(
∫∫  
ex
∫∫  "
)
∫∫" #
;
∫∫# $
if
ºº 
(
ºº 
_transaction
ºº  
==
ºº! #
null
ºº$ (
)
ºº( )
{
ΩΩ 
transaction
øø 
.
øø  
Rollback
øø  (
(
øø( )
)
øø) *
;
øø* +
}
¿¿ 
return
¡¡ 
new
¡¡  
RepositoryResponse
¡¡ -
<
¡¡- .
TModel
¡¡. 4
>
¡¡4 5
(
¡¡5 6
)
¡¡6 7
{
¬¬ 
	IsSucceed
√√ 
=
√√ 
false
√√  %
,
√√% &
Data
ƒƒ 
=
ƒƒ 
null
ƒƒ 
,
ƒƒ  
	Exception
≈≈ 
=
≈≈ 
ex
≈≈  "
}
∆∆ 
;
∆∆ 
}
«« 
finally
»» 
{
…… 
if
   
(
   
_context
   
==
   
null
    $
)
  $ %
{
ÀÀ 
transaction
ÕÕ 
.
ÕÕ  
Dispose
ÕÕ  '
(
ÕÕ' (
)
ÕÕ( )
;
ÕÕ) *
context
ŒŒ 
.
ŒŒ 
Dispose
ŒŒ #
(
ŒŒ# $
)
ŒŒ$ %
;
ŒŒ% &
}
œœ 
}
–– 
}
—— 	
public
€€ 
virtual
€€ 
async
€€ 
Task
€€ !
<
€€! " 
RepositoryResponse
€€" 4
<
€€4 5
TModel
€€5 ;
>
€€; <
>
€€< =
EditModelAsync
€€> L
(
€€L M
TModel
€€M S
model
€€T Y
,
€€Y Z
bool
€€[ _
isSaveSubModels
€€` o
=
€€p q
false
€€r w
,
‹‹ 

TDbContext
‹‹ 
_context
‹‹ !
=
‹‹" #
null
‹‹$ (
,
‹‹( )#
IDbContextTransaction
‹‹* ?
_transaction
‹‹@ L
=
‹‹M N
null
‹‹O S
)
‹‹S T
{
›› 	

TDbContext
ﬁﬁ 
context
ﬁﬁ 
=
ﬁﬁ  
_context
ﬁﬁ! )
??
ﬁﬁ* ,
InitContext
ﬁﬁ- 8
(
ﬁﬁ8 9
)
ﬁﬁ9 :
;
ﬁﬁ: ;
var
ﬂﬂ 
transaction
ﬂﬂ 
=
ﬂﬂ 
_transaction
ﬂﬂ *
??
ﬂﬂ+ -
context
ﬂﬂ. 5
.
ﬂﬂ5 6
Database
ﬂﬂ6 >
.
ﬂﬂ> ?
BeginTransaction
ﬂﬂ? O
(
ﬂﬂO P
)
ﬂﬂP Q
;
ﬂﬂQ R
try
‡‡ 
{
·· 
context
‚‚ 
.
‚‚ 
Entry
‚‚ 
(
‚‚ 
model
‚‚ #
)
‚‚# $
.
‚‚$ %
State
‚‚% *
=
‚‚+ ,
EntityState
‚‚- 8
.
‚‚8 9
Modified
‚‚9 A
;
‚‚A B
bool
„„ 
result
„„ 
=
„„ 
await
„„ #
context
„„$ +
.
„„+ ,
SaveChangesAsync
„„, <
(
„„< =
)
„„= >
.
„„> ?
ConfigureAwait
„„? M
(
„„M N
false
„„N S
)
„„S T
>
„„U V
$num
„„W X
;
„„X Y
if
‰‰ 
(
‰‰ 
result
‰‰ 
&&
‰‰ 
isSaveSubModels
‰‰ -
)
‰‰- .
{
ÂÂ 
result
ÊÊ 
=
ÊÊ 
await
ÊÊ "
SaveSubModelAsync
ÊÊ# 4
(
ÊÊ4 5
model
ÊÊ5 :
,
ÊÊ: ;
context
ÊÊ< C
,
ÊÊC D
transaction
ÊÊE P
)
ÊÊP Q
.
ÊÊQ R
ConfigureAwait
ÊÊR `
(
ÊÊ` a
false
ÊÊa f
)
ÊÊf g
;
ÊÊg h
}
ÁÁ 
if
ÈÈ 
(
ÈÈ 
result
ÈÈ 
)
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
_transaction
ÎÎ $
==
ÎÎ% '
null
ÎÎ( ,
)
ÎÎ, -
{
ÏÏ 
transaction
ÓÓ #
.
ÓÓ# $
Commit
ÓÓ$ *
(
ÓÓ* +
)
ÓÓ+ ,
;
ÓÓ, -
}
ÔÔ 
return
 
new
  
RepositoryResponse
 1
<
1 2
TModel
2 8
>
8 9
(
9 :
)
: ;
{
ÒÒ 
	IsSucceed
ÚÚ !
=
ÚÚ" #
true
ÚÚ$ (
,
ÚÚ( )
Data
ÛÛ 
=
ÛÛ 
model
ÛÛ $
}
ÙÙ 
;
ÙÙ 
}
ıı 
else
ˆˆ 
{
˜˜ 
if
¯¯ 
(
¯¯ 
_transaction
¯¯ $
==
¯¯% '
null
¯¯( ,
)
¯¯, -
{
˘˘ 
transaction
˚˚ #
.
˚˚# $
Rollback
˚˚$ ,
(
˚˚, -
)
˚˚- .
;
˚˚. /
}
¸¸ 
return
˝˝ 
new
˝˝  
RepositoryResponse
˝˝ 1
<
˝˝1 2
TModel
˝˝2 8
>
˝˝8 9
(
˝˝9 :
)
˝˝: ;
{
˛˛ 
	IsSucceed
ˇˇ !
=
ˇˇ" #
false
ˇˇ$ )
,
ˇˇ) *
Data
ÄÄ 
=
ÄÄ 
null
ÄÄ #
}
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ 
LogErrorMessage
ÜÜ 
(
ÜÜ  
ex
ÜÜ  "
)
ÜÜ" #
;
ÜÜ# $
if
áá 
(
áá 
_transaction
áá  
==
áá! #
null
áá$ (
)
áá( )
{
àà 
transaction
ää 
.
ää  
Rollback
ää  (
(
ää( )
)
ää) *
;
ää* +
}
ãã 
return
çç 
new
çç  
RepositoryResponse
çç -
<
çç- .
TModel
çç. 4
>
çç4 5
(
çç5 6
)
çç6 7
{
éé 
	IsSucceed
èè 
=
èè 
false
èè  %
,
èè% &
Data
êê 
=
êê 
null
êê 
,
êê  
	Exception
ëë 
=
ëë 
ex
ëë  "
}
íí 
;
íí 
}
ìì 
finally
îî 
{
ïï 
if
ññ 
(
ññ 
_context
ññ 
==
ññ 
null
ññ  $
)
ññ$ %
{
óó 
context
ôô 
.
ôô 
Dispose
ôô #
(
ôô# $
)
ôô$ %
;
ôô% &
}
öö 
}
õõ 
}
úú 	
public
•• 
virtual
••  
RepositoryResponse
•• )
<
••) *
TModel
••* 0
>
••0 1
GetSingleModel
••2 @
(
••@ A

Expression
••A K
<
••K L
Func
••L P
<
••P Q
TModel
••Q W
,
••W X
bool
••Y ]
>
••] ^
>
••^ _
	predicate
••` i
,
¶¶ 

TDbContext
¶¶ 
_context
¶¶ !
=
¶¶" #
null
¶¶$ (
,
¶¶( )#
IDbContextTransaction
¶¶* ?
_transaction
¶¶@ L
=
¶¶M N
null
¶¶O S
)
¶¶S T
{
ßß 	
var
®® 
context
®® 
=
®® 
_context
®® "
??
®®# %
InitContext
®®& 1
(
®®1 2
)
®®2 3
;
®®3 4
var
©© 
transaction
©© 
=
©© 
_transaction
©© *
??
©©+ -
context
©©. 5
.
©©5 6
Database
©©6 >
.
©©> ?
BeginTransaction
©©? O
(
©©O P
)
©©P Q
;
©©Q R
try
™™ 
{
´´ 
TModel
¨¨ 
model
¨¨ 
=
¨¨ 
context
¨¨ &
.
¨¨& '
Set
¨¨' *
<
¨¨* +
TModel
¨¨+ 1
>
¨¨1 2
(
¨¨2 3
)
¨¨3 4
.
¨¨4 5
FirstOrDefault
¨¨5 C
(
¨¨C D
	predicate
¨¨D M
)
¨¨M N
;
¨¨N O
if
≠≠ 
(
≠≠ 
model
≠≠ 
!=
≠≠ 
null
≠≠ !
)
≠≠! "
{
ÆÆ 
context
ØØ 
.
ØØ 
Entry
ØØ !
(
ØØ! "
model
ØØ" '
)
ØØ' (
.
ØØ( )
State
ØØ) .
=
ØØ/ 0
EntityState
ØØ1 <
.
ØØ< =
Detached
ØØ= E
;
ØØE F
return
∞∞ 
new
∞∞  
RepositoryResponse
∞∞ 1
<
∞∞1 2
TModel
∞∞2 8
>
∞∞8 9
(
∞∞9 :
)
∞∞: ;
{
±± 
	IsSucceed
≤≤ !
=
≤≤" #
true
≤≤$ (
,
≤≤( )
Data
≥≥ 
=
≥≥ 
model
≥≥ $
}
¥¥ 
;
¥¥ 
}
µµ 
else
∂∂ 
{
∑∑ 
return
∏∏ 
new
∏∏  
RepositoryResponse
∏∏ 1
<
∏∏1 2
TModel
∏∏2 8
>
∏∏8 9
(
∏∏9 :
)
∏∏: ;
{
ππ 
	IsSucceed
∫∫ !
=
∫∫" #
false
∫∫$ )
,
∫∫) *
Data
ªª 
=
ªª 
model
ªª $
}
ºº 
;
ºº 
}
ΩΩ 
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
ex
øø 
)
øø  
{
¿¿ 
LogErrorMessage
¡¡ 
(
¡¡  
ex
¡¡  "
)
¡¡" #
;
¡¡# $
if
¬¬ 
(
¬¬ 
_transaction
¬¬  
==
¬¬! #
null
¬¬$ (
)
¬¬( )
{
√√ 
transaction
≈≈ 
.
≈≈  
Rollback
≈≈  (
(
≈≈( )
)
≈≈) *
;
≈≈* +
}
∆∆ 
return
«« 
new
««  
RepositoryResponse
«« -
<
««- .
TModel
««. 4
>
««4 5
(
««5 6
)
««6 7
{
»» 
	IsSucceed
…… 
=
…… 
false
……  %
,
……% &
Data
   
=
   
default
   "
(
  " #
TModel
  # )
)
  ) *
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
if
œœ 
(
œœ 
_context
œœ 
==
œœ 
null
œœ  $
)
œœ$ %
{
–– 
context
““ 
.
““ 
Dispose
““ #
(
““# $
)
““$ %
;
““% &
}
”” 
}
‘‘ 
}
’’ 	
public
ﬁﬁ 
virtual
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ !
<
ﬁﬁ! " 
RepositoryResponse
ﬁﬁ" 4
<
ﬁﬁ4 5
TModel
ﬁﬁ5 ;
>
ﬁﬁ; <
>
ﬁﬁ< =!
GetSingleModelAsync
ﬁﬁ> Q
(
ﬁﬁQ R

Expression
ﬁﬁR \
<
ﬁﬁ\ ]
Func
ﬁﬁ] a
<
ﬁﬁa b
TModel
ﬁﬁb h
,
ﬁﬁh i
bool
ﬁﬁj n
>
ﬁﬁn o
>
ﬁﬁo p
	predicate
ﬁﬁq z
,
ﬂﬂ 

TDbContext
ﬂﬂ 
_context
ﬂﬂ !
=
ﬂﬂ" #
null
ﬂﬂ$ (
,
ﬂﬂ( )#
IDbContextTransaction
ﬂﬂ* ?
_transaction
ﬂﬂ@ L
=
ﬂﬂM N
null
ﬂﬂO S
)
ﬂﬂS T
{
‡‡ 	
var
·· 
context
·· 
=
·· 
_context
·· "
??
··# %
InitContext
··& 1
(
··1 2
)
··2 3
;
··3 4
var
‚‚ 
transaction
‚‚ 
=
‚‚ 
_transaction
‚‚ *
??
‚‚+ -
context
‚‚. 5
.
‚‚5 6
Database
‚‚6 >
.
‚‚> ?
BeginTransaction
‚‚? O
(
‚‚O P
)
‚‚P Q
;
‚‚Q R
try
„„ 
{
‰‰ 
TModel
ÂÂ 
model
ÂÂ 
=
ÂÂ 
await
ÂÂ $
context
ÂÂ% ,
.
ÂÂ, -
Set
ÂÂ- 0
<
ÂÂ0 1
TModel
ÂÂ1 7
>
ÂÂ7 8
(
ÂÂ8 9
)
ÂÂ9 :
.
ÂÂ: ;!
FirstOrDefaultAsync
ÂÂ; N
(
ÂÂN O
	predicate
ÂÂO X
)
ÂÂX Y
.
ÂÂY Z
ConfigureAwait
ÂÂZ h
(
ÂÂh i
false
ÂÂi n
)
ÂÂn o
;
ÂÂo p
if
ÊÊ 
(
ÊÊ 
model
ÊÊ 
!=
ÊÊ 
null
ÊÊ !
)
ÊÊ! "
{
ÁÁ 
context
ËË 
.
ËË 
Entry
ËË !
(
ËË! "
model
ËË" '
)
ËË' (
.
ËË( )
State
ËË) .
=
ËË/ 0
EntityState
ËË1 <
.
ËË< =
Detached
ËË= E
;
ËËE F
return
ÍÍ 
new
ÍÍ  
RepositoryResponse
ÍÍ 1
<
ÍÍ1 2
TModel
ÍÍ2 8
>
ÍÍ8 9
(
ÍÍ9 :
)
ÍÍ: ;
{
ÎÎ 
	IsSucceed
ÏÏ !
=
ÏÏ" #
true
ÏÏ$ (
,
ÏÏ( )
Data
ÌÌ 
=
ÌÌ 
model
ÌÌ $
}
ÓÓ 
;
ÓÓ 
}
ÔÔ 
else
 
{
ÒÒ 
return
ÚÚ 
new
ÚÚ  
RepositoryResponse
ÚÚ 1
<
ÚÚ1 2
TModel
ÚÚ2 8
>
ÚÚ8 9
(
ÚÚ9 :
)
ÚÚ: ;
{
ÛÛ 
	IsSucceed
ÙÙ !
=
ÙÙ" #
false
ÙÙ$ )
,
ÙÙ) *
Data
ıı 
=
ıı 
model
ıı $
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
LogErrorMessage
˚˚ 
(
˚˚  
ex
˚˚  "
)
˚˚" #
;
˚˚# $
if
¸¸ 
(
¸¸ 
_transaction
¸¸  
==
¸¸! #
null
¸¸$ (
)
¸¸( )
{
˝˝ 
transaction
ˇˇ 
.
ˇˇ  
Rollback
ˇˇ  (
(
ˇˇ( )
)
ˇˇ) *
;
ˇˇ* +
}
ÄÄ 
return
ÇÇ 
new
ÇÇ  
RepositoryResponse
ÇÇ -
<
ÇÇ- .
TModel
ÇÇ. 4
>
ÇÇ4 5
(
ÇÇ5 6
)
ÇÇ6 7
{
ÉÉ 
	IsSucceed
ÑÑ 
=
ÑÑ 
false
ÑÑ  %
,
ÑÑ% &
Data
ÖÖ 
=
ÖÖ 
default
ÖÖ "
(
ÖÖ" #
TModel
ÖÖ# )
)
ÖÖ) *
}
ÜÜ 
;
ÜÜ 
}
áá 
finally
àà 
{
ââ 
if
ää 
(
ää 
_context
ää 
==
ää 
null
ää  $
)
ää$ %
{
ãã 
context
çç 
.
çç 
Dispose
çç #
(
çç# $
)
çç$ %
;
çç% &
}
éé 
}
èè 
}
êê 	
public
ññ 
virtual
ññ 

TDbContext
ññ !
InitContext
ññ" -
(
ññ- .
)
ññ. /
{
óó 	
Type
òò 
	classType
òò 
=
òò 
typeof
òò #
(
òò# $

TDbContext
òò$ .
)
òò. /
;
òò/ 0
ConstructorInfo
ôô 
classConstructor
ôô ,
=
ôô- .
	classType
ôô/ 8
.
ôô8 9
GetConstructor
ôô9 G
(
ôôG H
new
ôôH K
Type
ôôL P
[
ôôP Q
]
ôôQ R
{
ôôS T
}
ôôU V
)
ôôV W
;
ôôW X

TDbContext
öö 
context
öö 
=
öö  
(
öö! "

TDbContext
öö" ,
)
öö, -
classConstructor
öö- =
.
öö= >
Invoke
öö> D
(
ööD E
new
ööE H
object
ööI O
[
ööO P
]
ööP Q
{
ööR S
}
ööT U
)
ööU V
;
ööV W
return
úú 
context
úú 
;
úú 
}
ùù 	
public
ßß 
virtual
ßß  
RepositoryResponse
ßß )
<
ßß) *
List
ßß* .
<
ßß. /
TModel
ßß/ 5
>
ßß5 6
>
ßß6 7
GetModelList
ßß8 D
(
ßßD E

TDbContext
ßßE O
_context
ßßP X
=
ßßY Z
null
ßß[ _
,
ßß_ `#
IDbContextTransaction
ßßa v
_transactionßßw É
=ßßÑ Ö
nullßßÜ ä
)ßßä ã
{
®® 	
var
©© 
context
©© 
=
©© 
_context
©© "
??
©©# %
InitContext
©©& 1
(
©©1 2
)
©©2 3
;
©©3 4
var
™™ 
transaction
™™ 
=
™™ 
_transaction
™™ *
??
™™+ -
context
™™. 5
.
™™5 6
Database
™™6 >
.
™™> ?
BeginTransaction
™™? O
(
™™O P
)
™™P Q
;
™™Q R
try
´´ 
{
¨¨ 
var
≠≠ 
lstModel
≠≠ 
=
≠≠ 
context
≠≠ &
.
≠≠& '
Set
≠≠' *
<
≠≠* +
TModel
≠≠+ 1
>
≠≠1 2
(
≠≠2 3
)
≠≠3 4
.
≠≠4 5
ToList
≠≠5 ;
(
≠≠; <
)
≠≠< =
;
≠≠= >
lstModel
ØØ 
.
ØØ 
ForEach
ØØ  
(
ØØ  !
model
ØØ! &
=>
ØØ' )
context
ØØ* 1
.
ØØ1 2
Entry
ØØ2 7
(
ØØ7 8
model
ØØ8 =
)
ØØ= >
.
ØØ> ?
State
ØØ? D
=
ØØE F
EntityState
ØØG R
.
ØØR S
Detached
ØØS [
)
ØØ[ \
;
ØØ\ ]
return
∞∞ 
new
∞∞  
RepositoryResponse
∞∞ -
<
∞∞- .
List
∞∞. 2
<
∞∞2 3
TModel
∞∞3 9
>
∞∞9 :
>
∞∞: ;
(
∞∞; <
)
∞∞< =
{
±± 
	IsSucceed
≤≤ 
=
≤≤ 
true
≤≤  $
,
≤≤$ %
Data
≥≥ 
=
≥≥ 
lstModel
≥≥ #
}
¥¥ 
;
¥¥ 
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
ex
∂∂ 
)
∂∂  
{
∑∑ 
LogErrorMessage
∏∏ 
(
∏∏  
ex
∏∏  "
)
∏∏" #
;
∏∏# $
if
ππ 
(
ππ 
_transaction
ππ  
==
ππ! #
null
ππ$ (
)
ππ( )
{
∫∫ 
transaction
ºº 
.
ºº  
Rollback
ºº  (
(
ºº( )
)
ºº) *
;
ºº* +
}
ΩΩ 
return
ææ 
new
ææ  
RepositoryResponse
ææ -
<
ææ- .
List
ææ. 2
<
ææ2 3
TModel
ææ3 9
>
ææ9 :
>
ææ: ;
(
ææ; <
)
ææ< =
{
øø 
	IsSucceed
¿¿ 
=
¿¿ 
false
¿¿  %
,
¿¿% &
Data
¡¡ 
=
¡¡ 
null
¡¡ 
,
¡¡  
	Exception
¬¬ 
=
¬¬ 
ex
¬¬  "
}
√√ 
;
√√ 
}
ƒƒ 
finally
≈≈ 
{
∆∆ 
if
«« 
(
«« 
_context
«« 
==
«« 
null
««  $
)
««$ %
{
»» 
context
   
.
   
Dispose
   #
(
  # $
)
  $ %
;
  % &
}
ÀÀ 
}
ÃÃ 
}
ÕÕ 	
public
ŸŸ 
virtual
ŸŸ  
RepositoryResponse
ŸŸ )
<
ŸŸ) *
PaginationModel
ŸŸ* 9
<
ŸŸ9 :
TModel
ŸŸ: @
>
ŸŸ@ A
>
ŸŸA B
GetModelList
ŸŸC O
(
ŸŸO P
string
⁄⁄ !
orderByPropertyName
⁄⁄ &
,
⁄⁄& '
OrderByDirection
⁄⁄( 8
	direction
⁄⁄9 B
,
⁄⁄B C
int
⁄⁄D G
?
⁄⁄G H
pageSize
⁄⁄I Q
,
⁄⁄Q R
int
⁄⁄S V
?
⁄⁄V W
	pageIndex
⁄⁄X a
,
⁄⁄a b

TDbContext
€€ 
_context
€€ 
=
€€  !
null
€€" &
,
€€& '#
IDbContextTransaction
€€( =
_transaction
€€> J
=
€€K L
null
€€M Q
)
€€Q R
{
‹‹ 	
var
›› 
context
›› 
=
›› 
_context
›› "
??
››# %
InitContext
››& 1
(
››1 2
)
››2 3
;
››3 4
var
ﬁﬁ 
transaction
ﬁﬁ 
=
ﬁﬁ 
_transaction
ﬁﬁ *
??
ﬁﬁ+ -
context
ﬁﬁ. 5
.
ﬁﬁ5 6
Database
ﬁﬁ6 >
.
ﬁﬁ> ?
BeginTransaction
ﬁﬁ? O
(
ﬁﬁO P
)
ﬁﬁP Q
;
ﬁﬁQ R
try
ﬂﬂ 
{
‡‡ 
dynamic
·· 
orderBy
·· 
=
··  !
	GetLambda
··" +
(
··+ ,!
orderByPropertyName
··, ?
)
··? @
;
··@ A
List
‚‚ 
<
‚‚ 
TModel
‚‚ 
>
‚‚ 
lstModel
‚‚ %
=
‚‚& '
new
‚‚( +
List
‚‚, 0
<
‚‚0 1
TModel
‚‚1 7
>
‚‚7 8
(
‚‚8 9
)
‚‚9 :
;
‚‚: ;
var
„„ 
query
„„ 
=
„„ 
context
„„ #
.
„„# $
Set
„„$ '
<
„„' (
TModel
„„( .
>
„„. /
(
„„/ 0
)
„„0 1
;
„„1 2

IQueryable
‰‰ 
<
‰‰ 
TModel
‰‰ !
>
‰‰! "
sorted
‰‰# )
=
‰‰* +
null
‰‰, 0
;
‰‰0 1
PaginationModel
ÂÂ 
<
ÂÂ  
TModel
ÂÂ  &
>
ÂÂ& '
result
ÂÂ( .
=
ÂÂ/ 0
new
ÂÂ1 4
PaginationModel
ÂÂ5 D
<
ÂÂD E
TModel
ÂÂE K
>
ÂÂK L
(
ÂÂL M
)
ÂÂM N
{
ÊÊ 

TotalItems
ÁÁ 
=
ÁÁ  
query
ÁÁ! &
.
ÁÁ& '
Count
ÁÁ' ,
(
ÁÁ, -
)
ÁÁ- .
,
ÁÁ. /
	PageIndex
ËË 
=
ËË 
	pageIndex
ËË  )
??
ËË* ,
$num
ËË- .
}
ÈÈ 
;
ÈÈ 
result
ÍÍ 
.
ÍÍ 
PageSize
ÍÍ 
=
ÍÍ  !
pageSize
ÍÍ" *
??
ÍÍ+ -
result
ÍÍ. 4
.
ÍÍ4 5

TotalItems
ÍÍ5 ?
;
ÍÍ? @
if
ÏÏ 
(
ÏÏ 
pageSize
ÏÏ 
.
ÏÏ 
HasValue
ÏÏ %
)
ÏÏ% &
{
ÌÌ 
result
ÓÓ 
.
ÓÓ 
	TotalPage
ÓÓ $
=
ÓÓ% &
(
ÓÓ' (
result
ÓÓ( .
.
ÓÓ. /

TotalItems
ÓÓ/ 9
/
ÓÓ: ;
pageSize
ÓÓ< D
.
ÓÓD E
Value
ÓÓE J
)
ÓÓJ K
+
ÓÓL M
(
ÓÓN O
result
ÓÓO U
.
ÓÓU V

TotalItems
ÓÓV `
%
ÓÓa b
pageSize
ÓÓc k
.
ÓÓk l
Value
ÓÓl q
>
ÓÓr s
$num
ÓÓt u
?
ÓÓv w
$num
ÓÓx y
:
ÓÓz {
$num
ÓÓ| }
)
ÓÓ} ~
;
ÓÓ~ 
}
ÔÔ 
switch
ÒÒ 
(
ÒÒ 
	direction
ÒÒ !
)
ÒÒ! "
{
ÚÚ 
case
ÛÛ 
OrderByDirection
ÛÛ )
.
ÛÛ) *

Descending
ÛÛ* 4
:
ÛÛ4 5
sorted
ÙÙ 
=
ÙÙ  
	Queryable
ÙÙ! *
.
ÙÙ* +
OrderByDescending
ÙÙ+ <
(
ÙÙ< =
query
ÙÙ= B
,
ÙÙB C
orderBy
ÙÙD K
)
ÙÙK L
;
ÙÙL M
if
ıı 
(
ıı 
pageSize
ıı $
.
ıı$ %
HasValue
ıı% -
)
ıı- .
{
ˆˆ 
lstModel
˜˜ $
=
˜˜% &
sorted
˜˜' -
.
¯¯  !
Skip
¯¯! %
(
¯¯% &
	pageIndex
¯¯& /
.
¯¯/ 0
Value
¯¯0 5
*
¯¯6 7
pageSize
¯¯8 @
.
¯¯@ A
Value
¯¯A F
)
¯¯F G
.
˘˘  !
Take
˘˘! %
(
˘˘% &
pageSize
˘˘& .
.
˘˘. /
Value
˘˘/ 4
)
˘˘4 5
.
˙˙  !
ToList
˙˙! '
(
˙˙' (
)
˙˙( )
;
˙˙) *
}
˚˚ 
else
¸¸ 
{
˝˝ 
lstModel
˛˛ $
=
˛˛% &
sorted
˛˛' -
.
˛˛- .
ToList
˛˛. 4
(
˛˛4 5
)
˛˛5 6
;
˛˛6 7
}
ˇˇ 
break
ÄÄ 
;
ÄÄ 
default
ÇÇ 
:
ÇÇ 
sorted
ÉÉ 
=
ÉÉ  
	Queryable
ÉÉ! *
.
ÉÉ* +
OrderBy
ÉÉ+ 2
(
ÉÉ2 3
query
ÉÉ3 8
,
ÉÉ8 9
orderBy
ÉÉ: A
)
ÉÉA B
;
ÉÉB C
if
ÑÑ 
(
ÑÑ 
pageSize
ÑÑ $
.
ÑÑ$ %
HasValue
ÑÑ% -
)
ÑÑ- .
{
ÖÖ 
lstModel
ÜÜ $
=
ÜÜ% &
sorted
ÜÜ' -
.
ÜÜ- .
Skip
ÜÜ. 2
(
ÜÜ2 3
	pageIndex
ÜÜ3 <
.
ÜÜ< =
Value
ÜÜ= B
*
ÜÜC D
pageSize
ÜÜE M
.
ÜÜM N
Value
ÜÜN S
)
ÜÜS T
.
áá  !
Take
áá! %
(
áá% &
pageSize
áá& .
.
áá. /
Value
áá/ 4
)
áá4 5
.
áá5 6
ToList
áá6 <
(
áá< =
)
áá= >
;
áá> ?
}
àà 
else
ââ 
{
ää 
lstModel
ãã $
=
ãã% &
sorted
ãã' -
.
ãã- .
ToList
ãã. 4
(
ãã4 5
)
ãã5 6
;
ãã6 7
}
åå 
break
çç 
;
çç 
}
éé 
lstModel
êê 
.
êê 
ForEach
êê  
(
êê  !
model
êê! &
=>
êê' )
context
êê* 1
.
êê1 2
Entry
êê2 7
(
êê7 8
model
êê8 =
)
êê= >
.
êê> ?
State
êê? D
=
êêE F
EntityState
êêG R
.
êêR S
Detached
êêS [
)
êê[ \
;
êê\ ]
result
íí 
.
íí 
Items
íí 
=
íí 
lstModel
íí '
;
íí' (
return
îî 
new
îî  
RepositoryResponse
îî -
<
îî- .
PaginationModel
îî. =
<
îî= >
TModel
îî> D
>
îîD E
>
îîE F
(
îîF G
)
îîG H
{
ïï 
	IsSucceed
ññ 
=
ññ 
true
ññ  $
,
ññ$ %
Data
óó 
=
óó 
result
óó !
}
òò 
;
òò 
}
ôô 
catch
öö 
(
öö 
	Exception
öö 
ex
öö 
)
öö  
{
õõ 
LogErrorMessage
úú 
(
úú  
ex
úú  "
)
úú" #
;
úú# $
if
ùù 
(
ùù 
_transaction
ùù  
==
ùù! #
null
ùù$ (
)
ùù( )
{
ûû 
transaction
†† 
.
††  
Rollback
††  (
(
††( )
)
††) *
;
††* +
}
°° 
return
¢¢ 
new
¢¢  
RepositoryResponse
¢¢ -
<
¢¢- .
PaginationModel
¢¢. =
<
¢¢= >
TModel
¢¢> D
>
¢¢D E
>
¢¢E F
(
¢¢F G
)
¢¢G H
{
££ 
	IsSucceed
§§ 
=
§§ 
false
§§  %
,
§§% &
Data
•• 
=
•• 
null
•• 
,
••  
	Exception
¶¶ 
=
¶¶ 
ex
¶¶  "
}
ßß 
;
ßß 
}
®® 
finally
©© 
{
™™ 
if
´´ 
(
´´ 
_context
´´ 
==
´´ 
null
´´  $
)
´´$ %
{
¨¨ 
context
ÆÆ 
.
ÆÆ 
Dispose
ÆÆ #
(
ÆÆ# $
)
ÆÆ$ %
;
ÆÆ% &
}
ØØ 
}
∞∞ 
}
±± 	
public
ππ 
virtual
ππ 
async
ππ 
Task
ππ !
<
ππ! " 
RepositoryResponse
ππ" 4
<
ππ4 5
List
ππ5 9
<
ππ9 :
TModel
ππ: @
>
ππ@ A
>
ππA B
>
ππB C
GetModelListAsync
ππD U
(
ππU V

TDbContext
∫∫ 
_context
∫∫ 
=
∫∫  !
null
∫∫" &
,
∫∫& '#
IDbContextTransaction
∫∫( =
_transaction
∫∫> J
=
∫∫K L
null
∫∫M Q
)
∫∫Q R
{
ªª 	
var
ºº 
context
ºº 
=
ºº 
_context
ºº "
??
ºº# %
InitContext
ºº& 1
(
ºº1 2
)
ºº2 3
;
ºº3 4
var
ΩΩ 
transaction
ΩΩ 
=
ΩΩ 
_transaction
ΩΩ *
??
ΩΩ+ -
context
ΩΩ. 5
.
ΩΩ5 6
Database
ΩΩ6 >
.
ΩΩ> ?
BeginTransaction
ΩΩ? O
(
ΩΩO P
)
ΩΩP Q
;
ΩΩQ R
try
ææ 
{
øø 
var
¿¿ 
lstModel
¿¿ 
=
¿¿ 
await
¿¿ $
context
¿¿% ,
.
¿¿, -
Set
¿¿- 0
<
¿¿0 1
TModel
¿¿1 7
>
¿¿7 8
(
¿¿8 9
)
¿¿9 :
.
¿¿: ;
ToListAsync
¿¿; F
(
¿¿F G
)
¿¿G H
.
¿¿H I
ConfigureAwait
¿¿I W
(
¿¿W X
false
¿¿X ]
)
¿¿] ^
;
¿¿^ _
lstModel
¡¡ 
.
¡¡ 
ForEach
¡¡  
(
¡¡  !
model
¡¡! &
=>
¡¡' )
context
¡¡* 1
.
¡¡1 2
Entry
¡¡2 7
(
¡¡7 8
model
¡¡8 =
)
¡¡= >
.
¡¡> ?
State
¡¡? D
=
¡¡E F
EntityState
¡¡G R
.
¡¡R S
Detached
¡¡S [
)
¡¡[ \
;
¡¡\ ]
return
√√ 
new
√√  
RepositoryResponse
√√ -
<
√√- .
List
√√. 2
<
√√2 3
TModel
√√3 9
>
√√9 :
>
√√: ;
(
√√; <
)
√√< =
{
ƒƒ 
	IsSucceed
≈≈ 
=
≈≈ 
true
≈≈  $
,
≈≈$ %
Data
∆∆ 
=
∆∆ 
lstModel
∆∆ #
}
«« 
;
«« 
}
»» 
catch
…… 
(
…… 
	Exception
…… 
ex
…… 
)
……  
{
   
LogErrorMessage
ÀÀ 
(
ÀÀ  
ex
ÀÀ  "
)
ÀÀ" #
;
ÀÀ# $
if
ÃÃ 
(
ÃÃ 
_transaction
ÃÃ  
==
ÃÃ! #
null
ÃÃ$ (
)
ÃÃ( )
{
ÕÕ 
transaction
œœ 
.
œœ  
Rollback
œœ  (
(
œœ( )
)
œœ) *
;
œœ* +
}
–– 
return
—— 
new
——  
RepositoryResponse
—— -
<
——- .
List
——. 2
<
——2 3
TModel
——3 9
>
——9 :
>
——: ;
(
——; <
)
——< =
{
““ 
	IsSucceed
”” 
=
”” 
false
””  %
,
””% &
Data
‘‘ 
=
‘‘ 
null
‘‘ 
,
‘‘  
	Exception
’’ 
=
’’ 
ex
’’  "
}
÷÷ 
;
÷÷ 
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
_context
⁄⁄ 
==
⁄⁄ 
null
⁄⁄  $
)
⁄⁄$ %
{
€€ 
context
›› 
.
›› 
Dispose
›› #
(
››# $
)
››$ %
;
››% &
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 	
public
ÏÏ 
virtual
ÏÏ 
async
ÏÏ 
Task
ÏÏ !
<
ÏÏ! " 
RepositoryResponse
ÏÏ" 4
<
ÏÏ4 5
PaginationModel
ÏÏ5 D
<
ÏÏD E
TModel
ÏÏE K
>
ÏÏK L
>
ÏÏL M
>
ÏÏM N
GetModelListAsync
ÏÏO `
(
ÏÏ` a
string
ÌÌ !
orderByPropertyName
ÌÌ &
,
ÌÌ& '
OrderByDirection
ÌÌ( 8
	direction
ÌÌ9 B
,
ÌÌB C
int
ÌÌD G
?
ÌÌG H
pageSize
ÌÌI Q
,
ÌÌQ R
int
ÌÌS V
?
ÌÌV W
	pageIndex
ÌÌX a
,
ÌÌa b

TDbContext
ÓÓ 
_context
ÓÓ 
=
ÓÓ  !
null
ÓÓ" &
,
ÓÓ& '#
IDbContextTransaction
ÓÓ( =
_transaction
ÓÓ> J
=
ÓÓK L
null
ÓÓM Q
)
ÓÓQ R
{
ÔÔ 	
var
 
context
 
=
 
_context
 "
??
# %
InitContext
& 1
(
1 2
)
2 3
;
3 4
var
ÒÒ 
transaction
ÒÒ 
=
ÒÒ 
_transaction
ÒÒ *
??
ÒÒ+ -
context
ÒÒ. 5
.
ÒÒ5 6
Database
ÒÒ6 >
.
ÒÒ> ?
BeginTransaction
ÒÒ? O
(
ÒÒO P
)
ÒÒP Q
;
ÒÒQ R
try
ÚÚ 
{
ÛÛ 
dynamic
ÙÙ 
orderBy
ÙÙ 
=
ÙÙ  !
	GetLambda
ÙÙ" +
(
ÙÙ+ ,!
orderByPropertyName
ÙÙ, ?
)
ÙÙ? @
;
ÙÙ@ A
List
ıı 
<
ıı 
TModel
ıı 
>
ıı 
lstModel
ıı %
=
ıı& '
new
ıı( +
List
ıı, 0
<
ıı0 1
TModel
ıı1 7
>
ıı7 8
(
ıı8 9
)
ıı9 :
;
ıı: ;
var
ˆˆ 
query
ˆˆ 
=
ˆˆ 
context
ˆˆ #
.
ˆˆ# $
Set
ˆˆ$ '
<
ˆˆ' (
TModel
ˆˆ( .
>
ˆˆ. /
(
ˆˆ/ 0
)
ˆˆ0 1
;
ˆˆ1 2

IQueryable
˜˜ 
<
˜˜ 
TModel
˜˜ !
>
˜˜! "
sorted
˜˜# )
=
˜˜* +
null
˜˜, 0
;
˜˜0 1
PaginationModel
¯¯ 
<
¯¯  
TModel
¯¯  &
>
¯¯& '
result
¯¯( .
=
¯¯/ 0
new
¯¯1 4
PaginationModel
¯¯5 D
<
¯¯D E
TModel
¯¯E K
>
¯¯K L
(
¯¯L M
)
¯¯M N
{
˘˘ 

TotalItems
˙˙ 
=
˙˙  
query
˙˙! &
.
˙˙& '
Count
˙˙' ,
(
˙˙, -
)
˙˙- .
,
˙˙. /
	PageIndex
˚˚ 
=
˚˚ 
	pageIndex
˚˚  )
??
˚˚* ,
$num
˚˚- .
}
¸¸ 
;
¸¸ 
result
˝˝ 
.
˝˝ 
PageSize
˝˝ 
=
˝˝  !
pageSize
˝˝" *
??
˝˝+ -
result
˝˝. 4
.
˝˝4 5

TotalItems
˝˝5 ?
;
˝˝? @
if
ˇˇ 
(
ˇˇ 
pageSize
ˇˇ 
.
ˇˇ 
HasValue
ˇˇ %
)
ˇˇ% &
{
ÄÄ 
result
ÅÅ 
.
ÅÅ 
	TotalPage
ÅÅ $
=
ÅÅ% &
(
ÅÅ' (
result
ÅÅ( .
.
ÅÅ. /

TotalItems
ÅÅ/ 9
/
ÅÅ: ;
pageSize
ÅÅ< D
.
ÅÅD E
Value
ÅÅE J
)
ÅÅJ K
+
ÅÅL M
(
ÅÅN O
result
ÅÅO U
.
ÅÅU V

TotalItems
ÅÅV `
%
ÅÅa b
pageSize
ÅÅc k
.
ÅÅk l
Value
ÅÅl q
>
ÅÅr s
$num
ÅÅt u
?
ÅÅv w
$num
ÅÅx y
:
ÅÅz {
$num
ÅÅ| }
)
ÅÅ} ~
;
ÅÅ~ 
}
ÇÇ 
switch
ÑÑ 
(
ÑÑ 
	direction
ÑÑ !
)
ÑÑ! "
{
ÖÖ 
case
ÜÜ 
OrderByDirection
ÜÜ )
.
ÜÜ) *

Descending
ÜÜ* 4
:
ÜÜ4 5
sorted
áá 
=
áá  
	Queryable
áá! *
.
áá* +
OrderByDescending
áá+ <
(
áá< =
query
áá= B
,
ááB C
orderBy
ááD K
)
ááK L
;
ááL M
if
àà 
(
àà 
pageSize
àà $
.
àà$ %
HasValue
àà% -
)
àà- .
{
ââ 
lstModel
ää $
=
ää% &
await
ää' ,
sorted
ää- 3
.
ää3 4
Skip
ää4 8
(
ää8 9
	pageIndex
ää9 B
.
ääB C
Value
ääC H
*
ääI J
pageSize
ääK S
.
ääS T
Value
ääT Y
)
ääY Z
.
ãã  !
Take
ãã! %
(
ãã% &
pageSize
ãã& .
.
ãã. /
Value
ãã/ 4
)
ãã4 5
.
åå  !
ToListAsync
åå! ,
(
åå, -
)
åå- .
.
åå. /
ConfigureAwait
åå/ =
(
åå= >
false
åå> C
)
ååC D
;
ååD E
}
çç 
else
éé 
{
èè 
lstModel
êê $
=
êê% &
await
êê' ,
	Queryable
êê- 6
.
êê6 7
OrderByDescending
êê7 H
(
êêH I
query
êêI N
,
êêN O
orderBy
êêP W
)
êêW X
.
ëë  !
ToListAsync
ëë! ,
(
ëë, -
)
ëë- .
;
ëë. /
}
íí 
break
ìì 
;
ìì 
default
ïï 
:
ïï 
sorted
ññ 
=
ññ  
	Queryable
ññ! *
.
ññ* +
OrderBy
ññ+ 2
(
ññ2 3
query
ññ3 8
,
ññ8 9
orderBy
ññ: A
)
ññA B
;
ññB C
if
óó 
(
óó 
pageSize
óó $
.
óó$ %
HasValue
óó% -
)
óó- .
{
òò 
lstModel
ôô $
=
ôô% &
await
ôô' ,
sorted
ôô- 3
.
ôô3 4
Skip
ôô4 8
(
ôô8 9
	pageIndex
ôô9 B
.
ôôB C
Value
ôôC H
*
ôôI J
pageSize
ôôK S
.
ôôS T
Value
ôôT Y
)
ôôY Z
.
öö  !
Take
öö! %
(
öö% &
pageSize
öö& .
.
öö. /
Value
öö/ 4
)
öö4 5
.
õõ  !
ToListAsync
õõ! ,
(
õõ, -
)
õõ- .
.
õõ. /
ConfigureAwait
õõ/ =
(
õõ= >
false
õõ> C
)
õõC D
;
õõD E
}
úú 
else
ùù 
{
ûû 
lstModel
üü $
=
üü% &
await
üü' ,
sorted
üü- 3
.
üü3 4
ToListAsync
üü4 ?
(
üü? @
)
üü@ A
.
üüA B
ConfigureAwait
üüB P
(
üüP Q
false
üüQ V
)
üüV W
;
üüW X
}
†† 
break
°° 
;
°° 
}
¢¢ 
lstModel
££ 
.
££ 
ForEach
££  
(
££  !
model
££! &
=>
££' )
context
££* 1
.
££1 2
Entry
££2 7
(
££7 8
model
££8 =
)
££= >
.
££> ?
State
££? D
=
££E F
EntityState
££G R
.
££R S
Detached
££S [
)
££[ \
;
££\ ]
result
§§ 
.
§§ 
Items
§§ 
=
§§ 
lstModel
§§ '
;
§§' (
return
¶¶ 
new
¶¶  
RepositoryResponse
¶¶ -
<
¶¶- .
PaginationModel
¶¶. =
<
¶¶= >
TModel
¶¶> D
>
¶¶D E
>
¶¶E F
(
¶¶F G
)
¶¶G H
{
ßß 
	IsSucceed
®® 
=
®® 
true
®®  $
,
®®$ %
Data
©© 
=
©© 
result
©© !
}
™™ 
;
™™ 
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
LogErrorMessage
ÆÆ 
(
ÆÆ  
ex
ÆÆ  "
)
ÆÆ" #
;
ÆÆ# $
if
ØØ 
(
ØØ 
_transaction
ØØ  
==
ØØ! #
null
ØØ$ (
)
ØØ( )
{
∞∞ 
transaction
≤≤ 
.
≤≤  
Rollback
≤≤  (
(
≤≤( )
)
≤≤) *
;
≤≤* +
}
≥≥ 
return
¥¥ 
new
¥¥  
RepositoryResponse
¥¥ -
<
¥¥- .
PaginationModel
¥¥. =
<
¥¥= >
TModel
¥¥> D
>
¥¥D E
>
¥¥E F
(
¥¥F G
)
¥¥G H
{
µµ 
	IsSucceed
∂∂ 
=
∂∂ 
false
∂∂  %
,
∂∂% &
Data
∑∑ 
=
∑∑ 
null
∑∑ 
,
∑∑  
	Exception
∏∏ 
=
∏∏ 
ex
∏∏  "
}
ππ 
;
ππ 
}
∫∫ 
finally
ªª 
{
ºº 
if
ΩΩ 
(
ΩΩ 
_context
ΩΩ 
==
ΩΩ 
null
ΩΩ  $
)
ΩΩ$ %
{
ææ 
context
¿¿ 
.
¿¿ 
Dispose
¿¿ #
(
¿¿# $
)
¿¿$ %
;
¿¿% &
}
¡¡ 
}
¬¬ 
}
√√ 	
public
–– 
virtual
––  
RepositoryResponse
–– )
<
––) *
List
––* .
<
––. /
TModel
––/ 5
>
––5 6
>
––6 7
GetModelListBy
––8 F
(
––F G

Expression
––G Q
<
––Q R
Func
––R V
<
––V W
TModel
––W ]
,
––] ^
bool
––_ c
>
––c d
>
––d e
	predicate
––f o
,
––o p

TDbContext
—— 
_context
—— 
=
——  !
null
——" &
,
——& '#
IDbContextTransaction
——( =
_transaction
——> J
=
——K L
null
——M Q
)
——Q R
{
““ 	
var
”” 
context
”” 
=
”” 
_context
”” "
??
””# %
InitContext
””& 1
(
””1 2
)
””2 3
;
””3 4
var
‘‘ 
transaction
‘‘ 
=
‘‘ 
_transaction
‘‘ *
??
‘‘+ -
context
‘‘. 5
.
‘‘5 6
Database
‘‘6 >
.
‘‘> ?
BeginTransaction
‘‘? O
(
‘‘O P
)
‘‘P Q
;
‘‘Q R
try
’’ 
{
÷÷ 
var
◊◊ 
lstModel
◊◊ 
=
◊◊ 
context
◊◊ &
.
◊◊& '
Set
◊◊' *
<
◊◊* +
TModel
◊◊+ 1
>
◊◊1 2
(
◊◊2 3
)
◊◊3 4
.
◊◊4 5
Where
◊◊5 :
(
◊◊: ;
	predicate
◊◊; D
)
◊◊D E
.
◊◊E F
ToList
◊◊F L
(
◊◊L M
)
◊◊M N
;
◊◊N O
lstModel
ÿÿ 
.
ÿÿ 
ForEach
ÿÿ  
(
ÿÿ  !
model
ÿÿ! &
=>
ÿÿ' )
context
ÿÿ* 1
.
ÿÿ1 2
Entry
ÿÿ2 7
(
ÿÿ7 8
model
ÿÿ8 =
)
ÿÿ= >
.
ÿÿ> ?
State
ÿÿ? D
=
ÿÿE F
EntityState
ÿÿG R
.
ÿÿR S
Detached
ÿÿS [
)
ÿÿ[ \
;
ÿÿ\ ]
return
ŸŸ 
new
ŸŸ  
RepositoryResponse
ŸŸ -
<
ŸŸ- .
List
ŸŸ. 2
<
ŸŸ2 3
TModel
ŸŸ3 9
>
ŸŸ9 :
>
ŸŸ: ;
(
ŸŸ; <
)
ŸŸ< =
{
⁄⁄ 
	IsSucceed
€€ 
=
€€ 
true
€€  $
,
€€$ %
Data
‹‹ 
=
‹‹ 
lstModel
‹‹ #
}
›› 
;
›› 
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
LogErrorMessage
·· 
(
··  
ex
··  "
)
··" #
;
··# $
if
‚‚ 
(
‚‚ 
_transaction
‚‚  
==
‚‚! #
null
‚‚$ (
)
‚‚( )
{
„„ 
transaction
ÂÂ 
.
ÂÂ  
Rollback
ÂÂ  (
(
ÂÂ( )
)
ÂÂ) *
;
ÂÂ* +
}
ÊÊ 
return
ÁÁ 
new
ÁÁ  
RepositoryResponse
ÁÁ -
<
ÁÁ- .
List
ÁÁ. 2
<
ÁÁ2 3
TModel
ÁÁ3 9
>
ÁÁ9 :
>
ÁÁ: ;
(
ÁÁ; <
)
ÁÁ< =
{
ËË 
	IsSucceed
ÈÈ 
=
ÈÈ 
false
ÈÈ  %
,
ÈÈ% &
Data
ÍÍ 
=
ÍÍ 
null
ÍÍ 
,
ÍÍ  
	Exception
ÎÎ 
=
ÎÎ 
ex
ÎÎ  "
}
ÏÏ 
;
ÏÏ 
}
ÌÌ 
finally
ÓÓ 
{
ÔÔ 
if
 
(
 
_context
 
==
 
null
  $
)
$ %
{
ÒÒ 
context
ÛÛ 
.
ÛÛ 
Dispose
ÛÛ #
(
ÛÛ# $
)
ÛÛ$ %
;
ÛÛ% &
}
ÙÙ 
}
ıı 
}
ˆˆ 	
public
ÉÉ 
virtual
ÉÉ  
RepositoryResponse
ÉÉ )
<
ÉÉ) *
PaginationModel
ÉÉ* 9
<
ÉÉ9 :
TModel
ÉÉ: @
>
ÉÉ@ A
>
ÉÉA B
GetModelListBy
ÉÉC Q
(
ÉÉQ R

Expression
ÑÑ 
<
ÑÑ 
Func
ÑÑ 
<
ÑÑ 
TModel
ÑÑ "
,
ÑÑ" #
bool
ÑÑ$ (
>
ÑÑ( )
>
ÑÑ) *
	predicate
ÑÑ+ 4
,
ÑÑ4 5
string
ÑÑ6 <!
orderByPropertyName
ÑÑ= P
,
ÑÑP Q
OrderByDirection
ÑÑR b
	direction
ÑÑc l
,
ÑÑl m
int
ÑÑn q
?
ÑÑq r
pageSize
ÑÑs {
,
ÑÑ{ |
intÑÑ} Ä
?ÑÑÄ Å
	pageIndexÑÑÇ ã
,ÑÑã å

TDbContext
ÖÖ 
_context
ÖÖ 
=
ÖÖ  !
null
ÖÖ" &
,
ÖÖ& '#
IDbContextTransaction
ÖÖ( =
_transaction
ÖÖ> J
=
ÖÖK L
null
ÖÖM Q
)
ÖÖQ R
{
ÜÜ 	
var
áá 
context
áá 
=
áá 
_context
áá "
??
áá# %
InitContext
áá& 1
(
áá1 2
)
áá2 3
;
áá3 4
var
àà 
transaction
àà 
=
àà 
_transaction
àà *
??
àà+ -
context
àà. 5
.
àà5 6
Database
àà6 >
.
àà> ?
BeginTransaction
àà? O
(
ààO P
)
ààP Q
;
ààQ R
try
ââ 
{
ää 
dynamic
ãã 
orderBy
ãã 
=
ãã  !
	GetLambda
ãã" +
(
ãã+ ,!
orderByPropertyName
ãã, ?
)
ãã? @
;
ãã@ A
List
åå 
<
åå 
TModel
åå 
>
åå 
lstModel
åå %
=
åå& '
new
åå( +
List
åå, 0
<
åå0 1
TModel
åå1 7
>
åå7 8
(
åå8 9
)
åå9 :
;
åå: ;
var
çç 
query
çç 
=
çç 
context
çç #
.
çç# $
Set
çç$ '
<
çç' (
TModel
çç( .
>
çç. /
(
çç/ 0
)
çç0 1
.
çç1 2
Where
çç2 7
(
çç7 8
	predicate
çç8 A
)
ççA B
;
ççB C

IQueryable
éé 
<
éé 
TModel
éé !
>
éé! "
sorted
éé# )
=
éé* +
null
éé, 0
;
éé0 1
PaginationModel
èè 
<
èè  
TModel
èè  &
>
èè& '
result
èè( .
=
èè/ 0
new
èè1 4
PaginationModel
èè5 D
<
èèD E
TModel
èèE K
>
èèK L
(
èèL M
)
èèM N
{
êê 

TotalItems
ëë 
=
ëë  
query
ëë! &
.
ëë& '
Count
ëë' ,
(
ëë, -
)
ëë- .
,
ëë. /
	PageIndex
íí 
=
íí 
	pageIndex
íí  )
??
íí* ,
$num
íí- .
}
ìì 
;
ìì 
result
îî 
.
îî 
PageSize
îî 
=
îî  !
pageSize
îî" *
??
îî+ -
result
îî. 4
.
îî4 5

TotalItems
îî5 ?
;
îî? @
if
ññ 
(
ññ 
pageSize
ññ 
.
ññ 
HasValue
ññ %
)
ññ% &
{
óó 
result
òò 
.
òò 
	TotalPage
òò $
=
òò% &
(
òò' (
result
òò( .
.
òò. /

TotalItems
òò/ 9
/
òò: ;
pageSize
òò< D
.
òòD E
Value
òòE J
)
òòJ K
+
òòL M
(
òòN O
result
òòO U
.
òòU V

TotalItems
òòV `
%
òòa b
pageSize
òòc k
.
òòk l
Value
òòl q
>
òòr s
$num
òòt u
?
òòv w
$num
òòx y
:
òòz {
$num
òò| }
)
òò} ~
;
òò~ 
}
ôô 
switch
õõ 
(
õõ 
	direction
õõ !
)
õõ! "
{
úú 
case
ùù 
OrderByDirection
ùù )
.
ùù) *

Descending
ùù* 4
:
ùù4 5
sorted
ûû 
=
ûû  
	Queryable
ûû! *
.
ûû* +
OrderByDescending
ûû+ <
(
ûû< =
query
ûû= B
,
ûûB C
orderBy
ûûD K
)
ûûK L
;
ûûL M
if
üü 
(
üü 
pageSize
üü $
.
üü$ %
HasValue
üü% -
)
üü- .
{
†† 
lstModel
°° $
=
°°% &
sorted
°°' -
.
°°- .
Skip
°°. 2
(
°°2 3
	pageIndex
°°3 <
.
°°< =
Value
°°= B
*
°°C D
pageSize
°°E M
.
°°M N
Value
°°N S
)
°°S T
.
¢¢  !
Take
¢¢! %
(
¢¢% &
pageSize
¢¢& .
.
¢¢. /
Value
¢¢/ 4
)
¢¢4 5
.
££  !
ToList
££! '
(
££' (
)
££( )
;
££) *
}
§§ 
else
•• 
{
¶¶ 
lstModel
ßß $
=
ßß% &
sorted
ßß' -
.
ßß- .
ToList
ßß. 4
(
ßß4 5
)
ßß5 6
;
ßß6 7
}
®® 
break
©© 
;
©© 
default
´´ 
:
´´ 
sorted
¨¨ 
=
¨¨  
	Queryable
¨¨! *
.
¨¨* +
OrderBy
¨¨+ 2
(
¨¨2 3
query
¨¨3 8
,
¨¨8 9
orderBy
¨¨: A
)
¨¨A B
;
¨¨B C
if
≠≠ 
(
≠≠ 
pageSize
≠≠ $
.
≠≠$ %
HasValue
≠≠% -
)
≠≠- .
{
ÆÆ 
lstModel
ØØ $
=
ØØ% &
sorted
ØØ' -
.
ØØ- .
Skip
ØØ. 2
(
ØØ2 3
	pageIndex
ØØ3 <
.
ØØ< =
Value
ØØ= B
*
ØØC D
pageSize
ØØE M
.
ØØM N
Value
ØØN S
)
ØØS T
.
∞∞  !
Take
∞∞! %
(
∞∞% &
pageSize
∞∞& .
.
∞∞. /
Value
∞∞/ 4
)
∞∞4 5
.
±±  !
ToList
±±! '
(
±±' (
)
±±( )
;
±±) *
}
≤≤ 
else
≥≥ 
{
¥¥ 
lstModel
µµ $
=
µµ% &
sorted
µµ' -
.
µµ- .
ToList
µµ. 4
(
µµ4 5
)
µµ5 6
;
µµ6 7
}
∂∂ 
break
∑∑ 
;
∑∑ 
}
∏∏ 
lstModel
∫∫ 
.
∫∫ 
ForEach
∫∫  
(
∫∫  !
model
∫∫! &
=>
∫∫' )
context
∫∫* 1
.
∫∫1 2
Entry
∫∫2 7
(
∫∫7 8
model
∫∫8 =
)
∫∫= >
.
∫∫> ?
State
∫∫? D
=
∫∫E F
EntityState
∫∫G R
.
∫∫R S
Detached
∫∫S [
)
∫∫[ \
;
∫∫\ ]
result
ªª 
.
ªª 
Items
ªª 
=
ªª 
lstModel
ªª '
;
ªª' (
return
ΩΩ 
new
ΩΩ  
RepositoryResponse
ΩΩ -
<
ΩΩ- .
PaginationModel
ΩΩ. =
<
ΩΩ= >
TModel
ΩΩ> D
>
ΩΩD E
>
ΩΩE F
(
ΩΩF G
)
ΩΩG H
{
ææ 
	IsSucceed
øø 
=
øø 
true
øø  $
,
øø$ %
Data
¿¿ 
=
¿¿ 
result
¿¿ !
}
¡¡ 
;
¡¡ 
}
¬¬ 
catch
√√ 
(
√√ 
	Exception
√√ 
ex
√√ 
)
√√  
{
ƒƒ 
LogErrorMessage
≈≈ 
(
≈≈  
ex
≈≈  "
)
≈≈" #
;
≈≈# $
if
∆∆ 
(
∆∆ 
_transaction
∆∆  
==
∆∆! #
null
∆∆$ (
)
∆∆( )
{
«« 
transaction
…… 
.
……  
Rollback
……  (
(
……( )
)
……) *
;
……* +
}
   
return
ÀÀ 
new
ÀÀ  
RepositoryResponse
ÀÀ -
<
ÀÀ- .
PaginationModel
ÀÀ. =
<
ÀÀ= >
TModel
ÀÀ> D
>
ÀÀD E
>
ÀÀE F
(
ÀÀF G
)
ÀÀG H
{
ÃÃ 
	IsSucceed
ÕÕ 
=
ÕÕ 
false
ÕÕ  %
,
ÕÕ% &
Data
ŒŒ 
=
ŒŒ 
null
ŒŒ 
,
ŒŒ  
	Exception
œœ 
=
œœ 
ex
œœ  "
}
–– 
;
–– 
}
—— 
finally
““ 
{
”” 
if
‘‘ 
(
‘‘ 
_context
‘‘ 
==
‘‘ 
null
‘‘  $
)
‘‘$ %
{
’’ 
context
◊◊ 
.
◊◊ 
Dispose
◊◊ #
(
◊◊# $
)
◊◊$ %
;
◊◊% &
}
ÿÿ 
}
ŸŸ 
}
⁄⁄ 	
public
„„ 
virtual
„„ 
async
„„ 
Task
„„ !
<
„„! " 
RepositoryResponse
„„" 4
<
„„4 5
List
„„5 9
<
„„9 :
TModel
„„: @
>
„„@ A
>
„„A B
>
„„B C!
GetModelListByAsync
„„D W
(
„„W X

Expression
‰‰ 
<
‰‰ 
Func
‰‰ 
<
‰‰ 
TModel
‰‰ "
,
‰‰" #
bool
‰‰$ (
>
‰‰( )
>
‰‰) *
	predicate
‰‰+ 4
,
‰‰4 5

TDbContext
ÂÂ 
_context
ÂÂ 
=
ÂÂ  !
null
ÂÂ" &
,
ÂÂ& '#
IDbContextTransaction
ÂÂ( =
_transaction
ÂÂ> J
=
ÂÂK L
null
ÂÂM Q
)
ÂÂQ R
{
ÊÊ 	
var
ÁÁ 
context
ÁÁ 
=
ÁÁ 
_context
ÁÁ "
??
ÁÁ# %
InitContext
ÁÁ& 1
(
ÁÁ1 2
)
ÁÁ2 3
;
ÁÁ3 4
var
ËË 
transaction
ËË 
=
ËË 
_transaction
ËË *
??
ËË+ -
context
ËË. 5
.
ËË5 6
Database
ËË6 >
.
ËË> ?
BeginTransaction
ËË? O
(
ËËO P
)
ËËP Q
;
ËËQ R
try
ÈÈ 
{
ÍÍ 
var
ÎÎ 
lstModel
ÎÎ 
=
ÎÎ 
await
ÎÎ $
context
ÎÎ% ,
.
ÎÎ, -
Set
ÎÎ- 0
<
ÎÎ0 1
TModel
ÎÎ1 7
>
ÎÎ7 8
(
ÎÎ8 9
)
ÎÎ9 :
.
ÎÎ: ;
Where
ÎÎ; @
(
ÎÎ@ A
	predicate
ÎÎA J
)
ÎÎJ K
.
ÎÎK L
ToListAsync
ÎÎL W
(
ÎÎW X
)
ÎÎX Y
.
ÎÎY Z
ConfigureAwait
ÎÎZ h
(
ÎÎh i
false
ÎÎi n
)
ÎÎn o
;
ÎÎo p
lstModel
ÏÏ 
.
ÏÏ 
ForEach
ÏÏ  
(
ÏÏ  !
model
ÏÏ! &
=>
ÏÏ' )
context
ÏÏ* 1
.
ÏÏ1 2
Entry
ÏÏ2 7
(
ÏÏ7 8
model
ÏÏ8 =
)
ÏÏ= >
.
ÏÏ> ?
State
ÏÏ? D
=
ÏÏE F
EntityState
ÏÏG R
.
ÏÏR S
Detached
ÏÏS [
)
ÏÏ[ \
;
ÏÏ\ ]
return
ÌÌ 
new
ÌÌ  
RepositoryResponse
ÌÌ -
<
ÌÌ- .
List
ÌÌ. 2
<
ÌÌ2 3
TModel
ÌÌ3 9
>
ÌÌ9 :
>
ÌÌ: ;
(
ÌÌ; <
)
ÌÌ< =
{
ÓÓ 
	IsSucceed
ÔÔ 
=
ÔÔ 
true
ÔÔ  $
,
ÔÔ$ %
Data
 
=
 
lstModel
 #
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ 
ex
ÛÛ 
)
ÛÛ  
{
ÙÙ 
LogErrorMessage
ıı 
(
ıı  
ex
ıı  "
)
ıı" #
;
ıı# $
if
ˆˆ 
(
ˆˆ 
_transaction
ˆˆ  
==
ˆˆ! #
null
ˆˆ$ (
)
ˆˆ( )
{
˜˜ 
transaction
˘˘ 
.
˘˘  
Rollback
˘˘  (
(
˘˘( )
)
˘˘) *
;
˘˘* +
}
˙˙ 
return
˚˚ 
new
˚˚  
RepositoryResponse
˚˚ -
<
˚˚- .
List
˚˚. 2
<
˚˚2 3
TModel
˚˚3 9
>
˚˚9 :
>
˚˚: ;
(
˚˚; <
)
˚˚< =
{
¸¸ 
	IsSucceed
˝˝ 
=
˝˝ 
false
˝˝  %
,
˝˝% &
Data
˛˛ 
=
˛˛ 
null
˛˛ 
,
˛˛  
	Exception
ˇˇ 
=
ˇˇ 
ex
ˇˇ  "
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
_context
ÑÑ 
==
ÑÑ 
null
ÑÑ  $
)
ÑÑ$ %
{
ÖÖ 
context
áá 
.
áá 
Dispose
áá #
(
áá# $
)
áá$ %
;
áá% &
}
àà 
}
ââ 
}
ää 	
public
óó 
virtual
óó 
async
óó 
Task
óó !
<
óó! " 
RepositoryResponse
óó" 4
<
óó4 5
PaginationModel
óó5 D
<
óóD E
TModel
óóE K
>
óóK L
>
óóL M
>
óóM N!
GetModelListByAsync
óóO b
(
óób c

Expression
òò 
<
òò 
Func
òò 
<
òò 
TModel
òò "
,
òò" #
bool
òò$ (
>
òò( )
>
òò) *
	predicate
òò+ 4
,
òò4 5
string
òò6 <!
orderByPropertyName
òò= P
,
òòP Q
OrderByDirection
òòR b
	direction
òòc l
,
òòl m
int
ôô 
?
ôô 
pageSize
ôô 
,
ôô 
int
ôô 
?
ôô 
	pageIndex
ôô  )
,
ôô) *

TDbContext
öö 
_context
öö 
=
öö  !
null
öö" &
,
öö& '#
IDbContextTransaction
öö( =
_transaction
öö> J
=
ööK L
null
ööM Q
)
ööQ R
{
õõ 	
var
úú 
context
úú 
=
úú 
_context
úú "
??
úú# %
InitContext
úú& 1
(
úú1 2
)
úú2 3
;
úú3 4
var
ùù 
transaction
ùù 
=
ùù 
_transaction
ùù *
??
ùù+ -
context
ùù. 5
.
ùù5 6
Database
ùù6 >
.
ùù> ?
BeginTransaction
ùù? O
(
ùùO P
)
ùùP Q
;
ùùQ R
try
ûû 
{
üü 
dynamic
†† 
orderBy
†† 
=
††  !
	GetLambda
††" +
(
††+ ,!
orderByPropertyName
††, ?
)
††? @
;
††@ A
List
°° 
<
°° 
TModel
°° 
>
°° 
lstModel
°° %
=
°°& '
new
°°( +
List
°°, 0
<
°°0 1
TModel
°°1 7
>
°°7 8
(
°°8 9
)
°°9 :
;
°°: ;
var
¢¢ 
query
¢¢ 
=
¢¢ 
context
¢¢ #
.
¢¢# $
Set
¢¢$ '
<
¢¢' (
TModel
¢¢( .
>
¢¢. /
(
¢¢/ 0
)
¢¢0 1
.
¢¢1 2
Where
¢¢2 7
(
¢¢7 8
	predicate
¢¢8 A
)
¢¢A B
;
¢¢B C

IQueryable
££ 
<
££ 
TModel
££ !
>
££! "
sorted
££# )
=
££* +
null
££, 0
;
££0 1
PaginationModel
•• 
<
••  
TModel
••  &
>
••& '
result
••( .
=
••/ 0
new
••1 4
PaginationModel
••5 D
<
••D E
TModel
••E K
>
••K L
(
••L M
)
••M N
{
¶¶ 

TotalItems
ßß 
=
ßß  
query
ßß! &
.
ßß& '
Count
ßß' ,
(
ßß, -
)
ßß- .
,
ßß. /
	PageIndex
®® 
=
®® 
	pageIndex
®®  )
??
®®* ,
$num
®®- .
}
©© 
;
©© 
result
™™ 
.
™™ 
PageSize
™™ 
=
™™  !
pageSize
™™" *
??
™™+ -
result
™™. 4
.
™™4 5

TotalItems
™™5 ?
;
™™? @
if
¨¨ 
(
¨¨ 
pageSize
¨¨ 
.
¨¨ 
HasValue
¨¨ %
)
¨¨% &
{
≠≠ 
result
ÆÆ 
.
ÆÆ 
	TotalPage
ÆÆ $
=
ÆÆ% &
(
ÆÆ' (
result
ÆÆ( .
.
ÆÆ. /

TotalItems
ÆÆ/ 9
/
ÆÆ: ;
pageSize
ÆÆ< D
.
ÆÆD E
Value
ÆÆE J
)
ÆÆJ K
+
ÆÆL M
(
ÆÆN O
result
ÆÆO U
.
ÆÆU V

TotalItems
ÆÆV `
%
ÆÆa b
pageSize
ÆÆc k
.
ÆÆk l
Value
ÆÆl q
>
ÆÆr s
$num
ÆÆt u
?
ÆÆv w
$num
ÆÆx y
:
ÆÆz {
$num
ÆÆ| }
)
ÆÆ} ~
;
ÆÆ~ 
}
ØØ 
switch
∞∞ 
(
∞∞ 
	direction
∞∞ !
)
∞∞! "
{
±± 
case
≤≤ 
OrderByDirection
≤≤ )
.
≤≤) *

Descending
≤≤* 4
:
≤≤4 5
sorted
≥≥ 
=
≥≥  
	Queryable
≥≥! *
.
≥≥* +
OrderByDescending
≥≥+ <
(
≥≥< =
query
≥≥= B
,
≥≥B C
orderBy
≥≥D K
)
≥≥K L
;
≥≥L M
if
¥¥ 
(
¥¥ 
pageSize
¥¥ $
.
¥¥$ %
HasValue
¥¥% -
)
¥¥- .
{
µµ 
lstModel
∂∂ $
=
∂∂% &
await
∂∂' ,
sorted
∂∂- 3
.
∂∂3 4
Skip
∂∂4 8
(
∂∂8 9
	pageIndex
∂∂9 B
.
∂∂B C
Value
∂∂C H
*
∂∂I J
pageSize
∂∂K S
.
∂∂S T
Value
∂∂T Y
)
∂∂Y Z
.
∑∑  !
Take
∑∑! %
(
∑∑% &
pageSize
∑∑& .
.
∑∑. /
Value
∑∑/ 4
)
∑∑4 5
.
∏∏  !
ToListAsync
∏∏! ,
(
∏∏, -
)
∏∏- .
.
∏∏. /
ConfigureAwait
∏∏/ =
(
∏∏= >
false
∏∏> C
)
∏∏C D
;
∏∏D E
}
ππ 
else
∫∫ 
{
ªª 
lstModel
ºº $
=
ºº% &
await
ºº' ,
sorted
ºº- 3
.
ºº3 4
ToListAsync
ºº4 ?
(
ºº? @
)
ºº@ A
.
ººA B
ConfigureAwait
ººB P
(
ººP Q
false
ººQ V
)
ººV W
;
ººW X
}
ΩΩ 
break
ææ 
;
ææ 
default
¿¿ 
:
¿¿ 
sorted
¡¡ 
=
¡¡  
	Queryable
¡¡! *
.
¡¡* +
OrderBy
¡¡+ 2
(
¡¡2 3
query
¡¡3 8
,
¡¡8 9
orderBy
¡¡: A
)
¡¡A B
;
¡¡B C
if
¬¬ 
(
¬¬ 
pageSize
¬¬ $
.
¬¬$ %
HasValue
¬¬% -
)
¬¬- .
{
√√ 
lstModel
ƒƒ $
=
ƒƒ% &
await
ƒƒ' ,
sorted
ƒƒ- 3
.
≈≈  !
Skip
≈≈! %
(
≈≈% &
	pageIndex
≈≈& /
.
≈≈/ 0
Value
≈≈0 5
*
≈≈6 7
pageSize
≈≈8 @
.
≈≈@ A
Value
≈≈A F
)
≈≈F G
.
∆∆  !
Take
∆∆! %
(
∆∆% &
pageSize
∆∆& .
.
∆∆. /
Value
∆∆/ 4
)
∆∆4 5
.
««  !
ToListAsync
««! ,
(
««, -
)
««- .
.
««. /
ConfigureAwait
««/ =
(
««= >
false
««> C
)
««C D
;
««D E
}
»» 
else
…… 
{
   
lstModel
ÀÀ $
=
ÀÀ% &
await
ÀÀ' ,
sorted
ÀÀ- 3
.
ÀÀ3 4
ToListAsync
ÀÀ4 ?
(
ÀÀ? @
)
ÀÀ@ A
.
ÀÀA B
ConfigureAwait
ÀÀB P
(
ÀÀP Q
false
ÀÀQ V
)
ÀÀV W
;
ÀÀW X
}
ÃÃ 
break
ÕÕ 
;
ÕÕ 
}
ŒŒ 
lstModel
–– 
.
–– 
ForEach
––  
(
––  !
model
––! &
=>
––' )
context
––* 1
.
––1 2
Entry
––2 7
(
––7 8
model
––8 =
)
––= >
.
––> ?
State
––? D
=
––E F
EntityState
––G R
.
––R S
Detached
––S [
)
––[ \
;
––\ ]
result
—— 
.
—— 
Items
—— 
=
—— 
lstModel
—— '
;
——' (
return
”” 
new
””  
RepositoryResponse
”” -
<
””- .
PaginationModel
””. =
<
””= >
TModel
””> D
>
””D E
>
””E F
(
””F G
)
””G H
{
‘‘ 
	IsSucceed
’’ 
=
’’ 
true
’’  $
,
’’$ %
Data
÷÷ 
=
÷÷ 
result
÷÷ !
}
◊◊ 
;
◊◊ 
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ 
LogErrorMessage
€€ 
(
€€  
ex
€€  "
)
€€" #
;
€€# $
if
‹‹ 
(
‹‹ 
_transaction
‹‹  
==
‹‹! #
null
‹‹$ (
)
‹‹( )
{
›› 
transaction
ﬂﬂ 
.
ﬂﬂ  
Rollback
ﬂﬂ  (
(
ﬂﬂ( )
)
ﬂﬂ) *
;
ﬂﬂ* +
}
‡‡ 
return
·· 
new
··  
RepositoryResponse
·· -
<
··- .
PaginationModel
··. =
<
··= >
TModel
··> D
>
··D E
>
··E F
(
··F G
)
··G H
{
‚‚ 
	IsSucceed
„„ 
=
„„ 
false
„„  %
,
„„% &
Data
‰‰ 
=
‰‰ 
null
‰‰ 
,
‰‰  
	Exception
ÂÂ 
=
ÂÂ 
ex
ÂÂ  "
}
ÊÊ 
;
ÊÊ 
}
ÁÁ 
finally
ËË 
{
ÈÈ 
if
ÍÍ 
(
ÍÍ 
_context
ÍÍ 
==
ÍÍ 
null
ÍÍ  $
)
ÍÍ$ %
{
ÎÎ 
context
ÌÌ 
.
ÌÌ 
Dispose
ÌÌ #
(
ÌÌ# $
)
ÌÌ$ %
;
ÌÌ% &
}
ÓÓ 
}
ÔÔ 
}
 	
public
¯¯ 
virtual
¯¯ 
void
¯¯ 
LogErrorMessage
¯¯ +
(
¯¯+ ,
	Exception
¯¯, 5
ex
¯¯6 8
)
¯¯8 9
{
˘˘ 	
}
˙˙ 	
public
Ñ	Ñ	 
virtual
Ñ	Ñ	  
RepositoryResponse
Ñ	Ñ	 )
<
Ñ	Ñ	) *
bool
Ñ	Ñ	* .
>
Ñ	Ñ	. /
RemoveListModel
Ñ	Ñ	0 ?
(
Ñ	Ñ	? @

Expression
Ñ	Ñ	@ J
<
Ñ	Ñ	J K
Func
Ñ	Ñ	K O
<
Ñ	Ñ	O P
TModel
Ñ	Ñ	P V
,
Ñ	Ñ	V W
bool
Ñ	Ñ	X \
>
Ñ	Ñ	\ ]
>
Ñ	Ñ	] ^
	predicate
Ñ	Ñ	_ h
,
Ö	Ö	 

TDbContext
Ö	Ö	 
_context
Ö	Ö	 !
=
Ö	Ö	" #
null
Ö	Ö	$ (
,
Ö	Ö	( )#
IDbContextTransaction
Ö	Ö	* ?
_transaction
Ö	Ö	@ L
=
Ö	Ö	M N
null
Ö	Ö	O S
)
Ö	Ö	S T
{
Ü	Ü	 	

TDbContext
á	á	 
context
á	á	 
=
á	á	  
_context
á	á	! )
??
á	á	* ,
InitContext
á	á	- 8
(
á	á	8 9
)
á	á	9 :
;
á	á	: ;
var
à	à	 
transaction
à	à	 
=
à	à	 
_transaction
à	à	 *
??
à	à	+ -
context
à	à	. 5
.
à	à	5 6
Database
à	à	6 >
.
à	à	> ?
BeginTransaction
à	à	? O
(
à	à	O P
)
à	à	P Q
;
à	à	Q R
try
â	â	 
{
ä	ä	 
var
ã	ã	 
models
ã	ã	 
=
ã	ã	 
context
ã	ã	 $
.
ã	ã	$ %
Set
ã	ã	% (
<
ã	ã	( )
TModel
ã	ã	) /
>
ã	ã	/ 0
(
ã	ã	0 1
)
ã	ã	1 2
.
ã	ã	2 3
Where
ã	ã	3 8
(
ã	ã	8 9
	predicate
ã	ã	9 B
)
ã	ã	B C
.
ã	ã	C D
ToList
ã	ã	D J
(
ã	ã	J K
)
ã	ã	K L
;
ã	ã	L M
bool
å	å	 
result
å	å	 
=
å	å	 
true
å	å	 "
;
å	å	" #
if
ç	ç	 
(
ç	ç	 
models
ç	ç	 
!=
ç	ç	 
null
ç	ç	 "
)
ç	ç	" #
{
é	é	 
foreach
è	è	 
(
è	è	 
var
è	è	  
model
è	è	! &
in
è	è	' )
models
è	è	* 0
)
è	è	0 1
{
ê	ê	 
if
ë	ë	 
(
ë	ë	 
result
ë	ë	 "
)
ë	ë	" #
{
í	í	 
var
ì	ì	 
r
ì	ì	  !
=
ì	ì	" #
RemoveModel
ì	ì	$ /
(
ì	ì	/ 0
model
ì	ì	0 5
,
ì	ì	5 6
context
ì	ì	7 >
,
ì	ì	> ?
transaction
ì	ì	@ K
)
ì	ì	K L
;
ì	ì	L M
result
î	î	 "
=
î	î	# $
result
î	î	% +
&&
î	î	, .
r
î	î	/ 0
.
î	î	0 1
	IsSucceed
î	î	1 :
;
î	î	: ;
}
ï	ï	 
else
ñ	ñ	 
{
ó	ó	 
break
ò	ò	 !
;
ò	ò	! "
}
ô	ô	 
}
ö	ö	 
if
ú	ú	 
(
ú	ú	 
result
ú	ú	 
)
ú	ú	 
{
ù	ù	 
if
û	û	 
(
û	û	 
_transaction
û	û	 (
==
û	û	) +
null
û	û	, 0
)
û	û	0 1
{
ü	ü	 
transaction
°	°	 '
.
°	°	' (
Commit
°	°	( .
(
°	°	. /
)
°	°	/ 0
;
°	°	0 1
}
¢	¢	 
return
£	£	 
new
£	£	 " 
RepositoryResponse
£	£	# 5
<
£	£	5 6
bool
£	£	6 :
>
£	£	: ;
(
£	£	; <
)
£	£	< =
{
§	§	 
	IsSucceed
•	•	 %
=
•	•	& '
true
•	•	( ,
,
•	•	, -
Data
¶	¶	  
=
¶	¶	! "
true
¶	¶	# '
}
ß	ß	 
;
ß	ß	 
}
®	®	 
else
©	©	 
{
™	™	 
if
´	´	 
(
´	´	 
_transaction
´	´	 (
==
´	´	) +
null
´	´	, 0
)
´	´	0 1
{
¨	¨	 
transaction
Æ	Æ	 '
.
Æ	Æ	' (
Rollback
Æ	Æ	( 0
(
Æ	Æ	0 1
)
Æ	Æ	1 2
;
Æ	Æ	2 3
}
Ø	Ø	 
return
∞	∞	 
new
∞	∞	 " 
RepositoryResponse
∞	∞	# 5
<
∞	∞	5 6
bool
∞	∞	6 :
>
∞	∞	: ;
(
∞	∞	; <
)
∞	∞	< =
{
±	±	 
	IsSucceed
≤	≤	 %
=
≤	≤	& '
false
≤	≤	( -
,
≤	≤	- .
Data
≥	≥	  
=
≥	≥	! "
false
≥	≥	# (
}
¥	¥	 
;
¥	¥	 
}
µ	µ	 
}
∂	∂	 
else
∑	∑	 
{
∏	∏	 
return
π	π	 
new
π	π	  
RepositoryResponse
π	π	 1
<
π	π	1 2
bool
π	π	2 6
>
π	π	6 7
(
π	π	7 8
)
π	π	8 9
{
∫	∫	 
	IsSucceed
ª	ª	 !
=
ª	ª	" #
true
ª	ª	$ (
,
ª	ª	( )
Data
º	º	 
=
º	º	 
true
º	º	 #
}
Ω	Ω	 
;
Ω	Ω	 
}
æ	æ	 
}
ø	ø	 
catch
¿	¿	 
(
¿	¿	 
	Exception
¿	¿	 
ex
¿	¿	 
)
¿	¿	  
{
¡	¡	 
LogErrorMessage
¬	¬	 
(
¬	¬	  
ex
¬	¬	  "
)
¬	¬	" #
;
¬	¬	# $
if
√	√	 
(
√	√	 
_transaction
√	√	  
==
√	√	! #
null
√	√	$ (
)
√	√	( )
{
ƒ	ƒ	 
transaction
∆	∆	 
.
∆	∆	  
Rollback
∆	∆	  (
(
∆	∆	( )
)
∆	∆	) *
;
∆	∆	* +
}
«	«	 
return
…	…	 
new
…	…	  
RepositoryResponse
…	…	 -
<
…	…	- .
bool
…	…	. 2
>
…	…	2 3
(
…	…	3 4
)
…	…	4 5
{
 	 	 
	IsSucceed
À	À	 
=
À	À	 
false
À	À	  %
,
À	À	% &
Data
Ã	Ã	 
=
Ã	Ã	 
false
Ã	Ã	  
,
Ã	Ã	  !
	Exception
Õ	Õ	 
=
Õ	Õ	 
ex
Õ	Õ	  "
}
Œ	Œ	 
;
Œ	Œ	 
}
œ	œ	 
finally
–	–	 
{
—	—	 
if
“	“	 
(
“	“	 
_context
“	“	 
==
“	“	 
null
“	“	  $
)
“	“	$ %
{
”	”	 
context
’	’	 
.
’	’	 
Dispose
’	’	 #
(
’	’	# $
)
’	’	$ %
;
’	’	% &
}
÷	÷	 
}
◊	◊	 
}
ÿ	ÿ	 	
public
‚	‚	 
virtual
‚	‚	 
async
‚	‚	 
Task
‚	‚	 !
<
‚	‚	! " 
RepositoryResponse
‚	‚	" 4
<
‚	‚	4 5
bool
‚	‚	5 9
>
‚	‚	9 :
>
‚	‚	: ;"
RemoveListModelAsync
‚	‚	< P
(
‚	‚	P Q

Expression
‚	‚	Q [
<
‚	‚	[ \
Func
‚	‚	\ `
<
‚	‚	` a
TModel
‚	‚	a g
,
‚	‚	g h
bool
‚	‚	i m
>
‚	‚	m n
>
‚	‚	n o
	predicate
‚	‚	p y
,
„	„	 

TDbContext
„	„	 
_context
„	„	 !
=
„	„	" #
null
„	„	$ (
,
„	„	( )#
IDbContextTransaction
„	„	* ?
_transaction
„	„	@ L
=
„	„	M N
null
„	„	O S
)
„	„	S T
{
‰	‰	 	

TDbContext
Â	Â	 
context
Â	Â	 
=
Â	Â	  
_context
Â	Â	! )
??
Â	Â	* ,
InitContext
Â	Â	- 8
(
Â	Â	8 9
)
Â	Â	9 :
;
Â	Â	: ;
var
Ê	Ê	 
transaction
Ê	Ê	 
=
Ê	Ê	 
_transaction
Ê	Ê	 *
??
Ê	Ê	+ -
context
Ê	Ê	. 5
.
Ê	Ê	5 6
Database
Ê	Ê	6 >
.
Ê	Ê	> ?
BeginTransaction
Ê	Ê	? O
(
Ê	Ê	O P
)
Ê	Ê	P Q
;
Ê	Ê	Q R
try
Á	Á	 
{
Ë	Ë	 
var
È	È	 
models
È	È	 
=
È	È	 
await
È	È	 "
context
È	È	# *
.
È	È	* +
Set
È	È	+ .
<
È	È	. /
TModel
È	È	/ 5
>
È	È	5 6
(
È	È	6 7
)
È	È	7 8
.
È	È	8 9
Where
È	È	9 >
(
È	È	> ?
	predicate
È	È	? H
)
È	È	H I
.
È	È	I J
ToListAsync
È	È	J U
(
È	È	U V
)
È	È	V W
.
È	È	W X
ConfigureAwait
È	È	X f
(
È	È	f g
false
È	È	g l
)
È	È	l m
;
È	È	m n
bool
Í	Í	 
result
Í	Í	 
=
Í	Í	 
true
Í	Í	 "
;
Í	Í	" #
if
Î	Î	 
(
Î	Î	 
models
Î	Î	 
!=
Î	Î	 
null
Î	Î	 "
)
Î	Î	" #
{
Ï	Ï	 
foreach
Ì	Ì	 
(
Ì	Ì	 
var
Ì	Ì	  
model
Ì	Ì	! &
in
Ì	Ì	' )
models
Ì	Ì	* 0
)
Ì	Ì	0 1
{
Ó	Ó	 
if
Ô	Ô	 
(
Ô	Ô	 
result
Ô	Ô	 "
)
Ô	Ô	" #
{
		 
var
Ò	Ò	 
r
Ò	Ò	  !
=
Ò	Ò	" #
await
Ò	Ò	$ )
RemoveModelAsync
Ò	Ò	* :
(
Ò	Ò	: ;
model
Ò	Ò	; @
,
Ò	Ò	@ A
context
Ò	Ò	B I
,
Ò	Ò	I J
transaction
Ò	Ò	K V
)
Ò	Ò	V W
.
Ò	Ò	W X
ConfigureAwait
Ò	Ò	X f
(
Ò	Ò	f g
false
Ò	Ò	g l
)
Ò	Ò	l m
;
Ò	Ò	m n
result
Ú	Ú	 "
=
Ú	Ú	# $
result
Ú	Ú	% +
&&
Ú	Ú	, .
r
Ú	Ú	/ 0
.
Ú	Ú	0 1
	IsSucceed
Ú	Ú	1 :
;
Ú	Ú	: ;
}
Û	Û	 
else
Ù	Ù	 
{
ı	ı	 
break
ˆ	ˆ	 !
;
ˆ	ˆ	! "
}
˜	˜	 
}
¯	¯	 
if
˙	˙	 
(
˙	˙	 
result
˙	˙	 
)
˙	˙	 
{
˚	˚	 
if
¸	¸	 
(
¸	¸	 
_transaction
¸	¸	 (
==
¸	¸	) +
null
¸	¸	, 0
)
¸	¸	0 1
{
˝	˝	 
transaction
ˇ	ˇ	 '
.
ˇ	ˇ	' (
Commit
ˇ	ˇ	( .
(
ˇ	ˇ	. /
)
ˇ	ˇ	/ 0
;
ˇ	ˇ	0 1
}
Ä
Ä
 
return
Å
Å
 
new
Å
Å
 " 
RepositoryResponse
Å
Å
# 5
<
Å
Å
5 6
bool
Å
Å
6 :
>
Å
Å
: ;
(
Å
Å
; <
)
Å
Å
< =
{
Ç
Ç
 
	IsSucceed
É
É
 %
=
É
É
& '
true
É
É
( ,
,
É
É
, -
Data
Ñ
Ñ
  
=
Ñ
Ñ
! "
true
Ñ
Ñ
# '
}
Ö
Ö
 
;
Ö
Ö
 
}
Ü
Ü
 
else
á
á
 
{
à
à
 
if
â
â
 
(
â
â
 
_transaction
â
â
 (
==
â
â
) +
null
â
â
, 0
)
â
â
0 1
{
ä
ä
 
transaction
å
å
 '
.
å
å
' (
Rollback
å
å
( 0
(
å
å
0 1
)
å
å
1 2
;
å
å
2 3
}
ç
ç
 
return
é
é
 
new
é
é
 " 
RepositoryResponse
é
é
# 5
<
é
é
5 6
bool
é
é
6 :
>
é
é
: ;
(
é
é
; <
)
é
é
< =
{
è
è
 
	IsSucceed
ê
ê
 %
=
ê
ê
& '
false
ê
ê
( -
,
ê
ê
- .
Data
ë
ë
  
=
ë
ë
! "
false
ë
ë
# (
}
í
í
 
;
í
í
 
}
ì
ì
 
}
î
î
 
else
ï
ï
 
{
ñ
ñ
 
return
ó
ó
 
new
ó
ó
  
RepositoryResponse
ó
ó
 1
<
ó
ó
1 2
bool
ó
ó
2 6
>
ó
ó
6 7
(
ó
ó
7 8
)
ó
ó
8 9
{
ò
ò
 
	IsSucceed
ô
ô
 !
=
ô
ô
" #
true
ô
ô
$ (
,
ô
ô
( )
Data
ö
ö
 
=
ö
ö
 
true
ö
ö
 #
}
õ
õ
 
;
õ
õ
 
}
ú
ú
 
}
ù
ù
 
catch
û
û
 
(
û
û
 
	Exception
û
û
 
ex
û
û
 
)
û
û
  
{
ü
ü
 
LogErrorMessage
†
†
 
(
†
†
  
ex
†
†
  "
)
†
†
" #
;
†
†
# $
if
°
°
 
(
°
°
 
_transaction
°
°
  
==
°
°
! #
null
°
°
$ (
)
°
°
( )
{
¢
¢
 
transaction
§
§
 
.
§
§
  
Rollback
§
§
  (
(
§
§
( )
)
§
§
) *
;
§
§
* +
}
•
•
 
return
ß
ß
 
new
ß
ß
  
RepositoryResponse
ß
ß
 -
<
ß
ß
- .
bool
ß
ß
. 2
>
ß
ß
2 3
(
ß
ß
3 4
)
ß
ß
4 5
{
®
®
 
	IsSucceed
©
©
 
=
©
©
 
false
©
©
  %
,
©
©
% &
Data
™
™
 
=
™
™
 
false
™
™
  
,
™
™
  !
	Exception
´
´
 
=
´
´
 
ex
´
´
  "
}
¨
¨
 
;
¨
¨
 
}
≠
≠
 
finally
Æ
Æ
 
{
Ø
Ø
 
if
∞
∞
 
(
∞
∞
 
_context
∞
∞
 
==
∞
∞
 
null
∞
∞
  $
)
∞
∞
$ %
{
±
±
 
context
≥
≥
 
.
≥
≥
 
Dispose
≥
≥
 #
(
≥
≥
# $
)
≥
≥
$ %
;
≥
≥
% &
}
¥
¥
 
}
µ
µ
 
}
∂
∂
 	
public
¿
¿
 
virtual
¿
¿
  
RepositoryResponse
¿
¿
 )
<
¿
¿
) *
bool
¿
¿
* .
>
¿
¿
. /
RemoveModel
¿
¿
0 ;
(
¿
¿
; <

Expression
¿
¿
< F
<
¿
¿
F G
Func
¿
¿
G K
<
¿
¿
K L
TModel
¿
¿
L R
,
¿
¿
R S
bool
¿
¿
T X
>
¿
¿
X Y
>
¿
¿
Y Z
	predicate
¿
¿
[ d
,
¡
¡
 

TDbContext
¡
¡
 
_context
¡
¡
 !
=
¡
¡
" #
null
¡
¡
$ (
,
¡
¡
( )#
IDbContextTransaction
¡
¡
* ?
_transaction
¡
¡
@ L
=
¡
¡
M N
null
¡
¡
O S
)
¡
¡
S T
{
¬
¬
 	

TDbContext
√
√
 
context
√
√
 
=
√
√
  
_context
√
√
! )
??
√
√
* ,
InitContext
√
√
- 8
(
√
√
8 9
)
√
√
9 :
;
√
√
: ;
var
ƒ
ƒ
 
transaction
ƒ
ƒ
 
=
ƒ
ƒ
 
_transaction
ƒ
ƒ
 *
??
ƒ
ƒ
+ -
context
ƒ
ƒ
. 5
.
ƒ
ƒ
5 6
Database
ƒ
ƒ
6 >
.
ƒ
ƒ
> ?
BeginTransaction
ƒ
ƒ
? O
(
ƒ
ƒ
O P
)
ƒ
ƒ
P Q
;
ƒ
ƒ
Q R
try
≈
≈
 
{
∆
∆
 
TModel
«
«
 
model
«
«
 
=
«
«
 
context
«
«
 &
.
«
«
& '
Set
«
«
' *
<
«
«
* +
TModel
«
«
+ 1
>
«
«
1 2
(
«
«
2 3
)
«
«
3 4
.
«
«
4 5
FirstOrDefault
«
«
5 C
(
«
«
C D
	predicate
«
«
D M
)
«
«
M N
;
«
«
N O
bool
»
»
 
result
»
»
 
=
»
»
 
true
»
»
 "
;
»
»
" #
if
…
…
 
(
…
…
 
model
…
…
 
!=
…
…
 
null
…
…
 !
)
…
…
! "
{
 
 
 
context
À
À
 
.
À
À
 
Entry
À
À
 !
(
À
À
! "
model
À
À
" '
)
À
À
' (
.
À
À
( )
State
À
À
) .
=
À
À
/ 0
EntityState
À
À
1 <
.
À
À
< =
Deleted
À
À
= D
;
À
À
D E
result
Ã
Ã
 
=
Ã
Ã
 
context
Ã
Ã
 $
.
Ã
Ã
$ %
SaveChanges
Ã
Ã
% 0
(
Ã
Ã
0 1
)
Ã
Ã
1 2
>
Ã
Ã
3 4
$num
Ã
Ã
5 6
;
Ã
Ã
6 7
}
Õ
Õ
 
if
œ
œ
 
(
œ
œ
 
result
œ
œ
 
)
œ
œ
 
{
–
–
 
if
—
—
 
(
—
—
 
_transaction
—
—
 $
==
—
—
% '
null
—
—
( ,
)
—
—
, -
{
“
“
 
transaction
‘
‘
 #
.
‘
‘
# $
Commit
‘
‘
$ *
(
‘
‘
* +
)
‘
‘
+ ,
;
‘
‘
, -
}
’
’
 
return
÷
÷
 
new
÷
÷
  
RepositoryResponse
÷
÷
 1
<
÷
÷
1 2
bool
÷
÷
2 6
>
÷
÷
6 7
(
÷
÷
7 8
)
÷
÷
8 9
{
◊
◊
 
	IsSucceed
ÿ
ÿ
 !
=
ÿ
ÿ
" #
true
ÿ
ÿ
$ (
,
ÿ
ÿ
( )
Data
Ÿ
Ÿ
 
=
Ÿ
Ÿ
 
true
Ÿ
Ÿ
 #
}
⁄
⁄
 
;
⁄
⁄
 
}
€
€
 
else
‹
‹
 
{
›
›
 
if
ﬁ
ﬁ
 
(
ﬁ
ﬁ
 
_transaction
ﬁ
ﬁ
 $
==
ﬁ
ﬁ
% '
null
ﬁ
ﬁ
( ,
)
ﬁ
ﬁ
, -
{
ﬂ
ﬂ
 
transaction
·
·
 #
.
·
·
# $
Rollback
·
·
$ ,
(
·
·
, -
)
·
·
- .
;
·
·
. /
}
‚
‚
 
return
„
„
 
new
„
„
  
RepositoryResponse
„
„
 1
<
„
„
1 2
bool
„
„
2 6
>
„
„
6 7
(
„
„
7 8
)
„
„
8 9
{
‰
‰
 
	IsSucceed
Â
Â
 !
=
Â
Â
" #
false
Â
Â
$ )
,
Â
Â
) *
Data
Ê
Ê
 
=
Ê
Ê
 
false
Ê
Ê
 $
}
Á
Á
 
;
Á
Á
 
}
Ë
Ë
 
}
È
È
 
catch
Í
Í
 
(
Í
Í
 
	Exception
Í
Í
 
ex
Í
Í
 
)
Í
Í
  
{
Î
Î
 
LogErrorMessage
Ï
Ï
 
(
Ï
Ï
  
ex
Ï
Ï
  "
)
Ï
Ï
" #
;
Ï
Ï
# $
if
Ì
Ì
 
(
Ì
Ì
 
_transaction
Ì
Ì
  
==
Ì
Ì
! #
null
Ì
Ì
$ (
)
Ì
Ì
( )
{
Ó
Ó
 
transaction


 
.


  
Rollback


  (
(


( )
)


) *
;


* +
}
Ò
Ò
 
return
Û
Û
 
new
Û
Û
  
RepositoryResponse
Û
Û
 -
<
Û
Û
- .
bool
Û
Û
. 2
>
Û
Û
2 3
(
Û
Û
3 4
)
Û
Û
4 5
{
Ù
Ù
 
	IsSucceed
ı
ı
 
=
ı
ı
 
false
ı
ı
  %
,
ı
ı
% &
Data
ˆ
ˆ
 
=
ˆ
ˆ
 
false
ˆ
ˆ
  
,
ˆ
ˆ
  !
	Exception
˜
˜
 
=
˜
˜
 
ex
˜
˜
  "
}
¯
¯
 
;
¯
¯
 
}
˘
˘
 
finally
˙
˙
 
{
˚
˚
 
if
¸
¸
 
(
¸
¸
 
_context
¸
¸
 
==
¸
¸
 
null
¸
¸
  $
)
¸
¸
$ %
{
˝
˝
 
context
ˇ
ˇ
 
.
ˇ
ˇ
 
Dispose
ˇ
ˇ
 #
(
ˇ
ˇ
# $
)
ˇ
ˇ
$ %
;
ˇ
ˇ
% &
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
public
åå 
virtual
åå  
RepositoryResponse
åå )
<
åå) *
bool
åå* .
>
åå. /
RemoveModel
åå0 ;
(
åå; <
TModel
åå< B
model
ååC H
,
çç 

TDbContext
çç 
_context
çç !
=
çç" #
null
çç$ (
,
çç( )#
IDbContextTransaction
çç* ?
_transaction
çç@ L
=
ççM N
null
ççO S
)
ççS T
{
éé 	

TDbContext
èè 
context
èè 
=
èè  
_context
èè! )
??
èè* ,
InitContext
èè- 8
(
èè8 9
)
èè9 :
;
èè: ;
var
êê 
transaction
êê 
=
êê 
_transaction
êê *
??
êê+ -
context
êê. 5
.
êê5 6
Database
êê6 >
.
êê> ?
BeginTransaction
êê? O
(
êêO P
)
êêP Q
;
êêQ R
try
ëë 
{
íí 
bool
ìì 
result
ìì 
=
ìì 
true
ìì "
;
ìì" #
if
îî 
(
îî 
model
îî 
!=
îî 
null
îî !
)
îî! "
{
ïï 
context
ññ 
.
ññ 
Entry
ññ !
(
ññ! "
model
ññ" '
)
ññ' (
.
ññ( )
State
ññ) .
=
ññ/ 0
EntityState
ññ1 <
.
ññ< =
Deleted
ññ= D
;
ññD E
result
óó 
=
óó 
context
óó $
.
óó$ %
SaveChanges
óó% 0
(
óó0 1
)
óó1 2
>
óó3 4
$num
óó5 6
;
óó6 7
}
òò 
if
öö 
(
öö 
result
öö 
)
öö 
{
õõ 
if
úú 
(
úú 
_transaction
úú $
==
úú% '
null
úú( ,
)
úú, -
{
ùù 
transaction
üü #
.
üü# $
Commit
üü$ *
(
üü* +
)
üü+ ,
;
üü, -
}
†† 
return
°° 
new
°°  
RepositoryResponse
°° 1
<
°°1 2
bool
°°2 6
>
°°6 7
(
°°7 8
)
°°8 9
{
¢¢ 
	IsSucceed
££ !
=
££" #
true
££$ (
,
££( )
Data
§§ 
=
§§ 
true
§§ #
}
•• 
;
•• 
}
¶¶ 
else
ßß 
{
®® 
if
©© 
(
©© 
_transaction
©© $
==
©©% '
null
©©( ,
)
©©, -
{
™™ 
transaction
¨¨ #
.
¨¨# $
Rollback
¨¨$ ,
(
¨¨, -
)
¨¨- .
;
¨¨. /
}
≠≠ 
return
ÆÆ 
new
ÆÆ  
RepositoryResponse
ÆÆ 1
<
ÆÆ1 2
bool
ÆÆ2 6
>
ÆÆ6 7
(
ÆÆ7 8
)
ÆÆ8 9
{
ØØ 
	IsSucceed
∞∞ !
=
∞∞" #
false
∞∞$ )
,
∞∞) *
Data
±± 
=
±± 
false
±± $
}
≤≤ 
;
≤≤ 
}
≥≥ 
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ 
ex
µµ 
)
µµ  
{
∂∂ 
LogErrorMessage
∑∑ 
(
∑∑  
ex
∑∑  "
)
∑∑" #
;
∑∑# $
if
∏∏ 
(
∏∏ 
_transaction
∏∏  
==
∏∏! #
null
∏∏$ (
)
∏∏( )
{
ππ 
transaction
ªª 
.
ªª  
Rollback
ªª  (
(
ªª( )
)
ªª) *
;
ªª* +
}
ºº 
return
ææ 
new
ææ  
RepositoryResponse
ææ -
<
ææ- .
bool
ææ. 2
>
ææ2 3
(
ææ3 4
)
ææ4 5
{
øø 
	IsSucceed
¿¿ 
=
¿¿ 
false
¿¿  %
,
¿¿% &
Data
¡¡ 
=
¡¡ 
false
¡¡  
,
¡¡  !
	Exception
¬¬ 
=
¬¬ 
ex
¬¬  "
}
√√ 
;
√√ 
}
ƒƒ 
finally
≈≈ 
{
∆∆ 
if
«« 
(
«« 
_context
«« 
==
«« 
null
««  $
)
««$ %
{
»» 
context
   
.
   
Dispose
   #
(
  # $
)
  $ %
;
  % &
}
ÀÀ 
}
ÃÃ 
}
ÕÕ 	
public
◊◊ 
virtual
◊◊ 
async
◊◊ 
Task
◊◊ !
<
◊◊! " 
RepositoryResponse
◊◊" 4
<
◊◊4 5
bool
◊◊5 9
>
◊◊9 :
>
◊◊: ;
RemoveModelAsync
◊◊< L
(
◊◊L M

Expression
◊◊M W
<
◊◊W X
Func
◊◊X \
<
◊◊\ ]
TModel
◊◊] c
,
◊◊c d
bool
◊◊e i
>
◊◊i j
>
◊◊j k
	predicate
◊◊l u
,
ÿÿ 

TDbContext
ÿÿ 
_context
ÿÿ !
=
ÿÿ" #
null
ÿÿ$ (
,
ÿÿ( )#
IDbContextTransaction
ÿÿ* ?
_transaction
ÿÿ@ L
=
ÿÿM N
null
ÿÿO S
)
ÿÿS T
{
ŸŸ 	

TDbContext
⁄⁄ 
context
⁄⁄ 
=
⁄⁄  
_context
⁄⁄! )
??
⁄⁄* ,
InitContext
⁄⁄- 8
(
⁄⁄8 9
)
⁄⁄9 :
;
⁄⁄: ;
var
€€ 
transaction
€€ 
=
€€ 
_transaction
€€ *
??
€€+ -
context
€€. 5
.
€€5 6
Database
€€6 >
.
€€> ?
BeginTransaction
€€? O
(
€€O P
)
€€P Q
;
€€Q R
try
‹‹ 
{
›› 
TModel
ﬁﬁ 
model
ﬁﬁ 
=
ﬁﬁ 
await
ﬁﬁ $
context
ﬁﬁ% ,
.
ﬁﬁ, -
Set
ﬁﬁ- 0
<
ﬁﬁ0 1
TModel
ﬁﬁ1 7
>
ﬁﬁ7 8
(
ﬁﬁ8 9
)
ﬁﬁ9 :
.
ﬁﬁ: ;!
FirstOrDefaultAsync
ﬁﬁ; N
(
ﬁﬁN O
	predicate
ﬁﬁO X
)
ﬁﬁX Y
.
ﬁﬁY Z
ConfigureAwait
ﬁﬁZ h
(
ﬁﬁh i
false
ﬁﬁi n
)
ﬁﬁn o
;
ﬁﬁo p
bool
ﬂﬂ 
result
ﬂﬂ 
=
ﬂﬂ 
true
ﬂﬂ "
;
ﬂﬂ" #
if
‡‡ 
(
‡‡ 
model
‡‡ 
!=
‡‡ 
null
‡‡ !
)
‡‡! "
{
·· 
context
‚‚ 
.
‚‚ 
Entry
‚‚ !
(
‚‚! "
model
‚‚" '
)
‚‚' (
.
‚‚( )
State
‚‚) .
=
‚‚/ 0
EntityState
‚‚1 <
.
‚‚< =
Deleted
‚‚= D
;
‚‚D E
result
„„ 
=
„„ 
await
„„ "
context
„„# *
.
„„* +
SaveChangesAsync
„„+ ;
(
„„; <
)
„„< =
.
„„= >
ConfigureAwait
„„> L
(
„„L M
false
„„M R
)
„„R S
>
„„T U
$num
„„V W
;
„„W X
}
‰‰ 
if
ÊÊ 
(
ÊÊ 
result
ÊÊ 
)
ÊÊ 
{
ÁÁ 
if
ËË 
(
ËË 
_transaction
ËË $
==
ËË% '
null
ËË( ,
)
ËË, -
{
ÈÈ 
transaction
ÎÎ #
.
ÎÎ# $
Commit
ÎÎ$ *
(
ÎÎ* +
)
ÎÎ+ ,
;
ÎÎ, -
}
ÏÏ 
return
ÌÌ 
new
ÌÌ  
RepositoryResponse
ÌÌ 1
<
ÌÌ1 2
bool
ÌÌ2 6
>
ÌÌ6 7
(
ÌÌ7 8
)
ÌÌ8 9
{
ÓÓ 
	IsSucceed
ÔÔ !
=
ÔÔ" #
true
ÔÔ$ (
,
ÔÔ( )
Data
 
=
 
true
 #
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 
else
ÛÛ 
{
ÙÙ 
if
ıı 
(
ıı 
_transaction
ıı $
==
ıı% '
null
ıı( ,
)
ıı, -
{
ˆˆ 
transaction
¯¯ #
.
¯¯# $
Rollback
¯¯$ ,
(
¯¯, -
)
¯¯- .
;
¯¯. /
}
˘˘ 
return
˙˙ 
new
˙˙  
RepositoryResponse
˙˙ 1
<
˙˙1 2
bool
˙˙2 6
>
˙˙6 7
(
˙˙7 8
)
˙˙8 9
{
˚˚ 
	IsSucceed
¸¸ !
=
¸¸" #
false
¸¸$ )
,
¸¸) *
Data
˝˝ 
=
˝˝ 
false
˝˝ $
}
˛˛ 
;
˛˛ 
}
ˇˇ 
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
	Exception
ÅÅ 
ex
ÅÅ 
)
ÅÅ  
{
ÇÇ 
LogErrorMessage
ÉÉ 
(
ÉÉ  
ex
ÉÉ  "
)
ÉÉ" #
;
ÉÉ# $
if
ÑÑ 
(
ÑÑ 
_transaction
ÑÑ  
==
ÑÑ! #
null
ÑÑ$ (
)
ÑÑ( )
{
ÖÖ 
transaction
áá 
.
áá  
Rollback
áá  (
(
áá( )
)
áá) *
;
áá* +
}
àà 
return
ää 
new
ää  
RepositoryResponse
ää -
<
ää- .
bool
ää. 2
>
ää2 3
(
ää3 4
)
ää4 5
{
ãã 
	IsSucceed
åå 
=
åå 
false
åå  %
,
åå% &
Data
çç 
=
çç 
false
çç  
,
çç  !
	Exception
éé 
=
éé 
ex
éé  "
}
èè 
;
èè 
}
êê 
finally
ëë 
{
íí 
if
ìì 
(
ìì 
_context
ìì 
==
ìì 
null
ìì  $
)
ìì$ %
{
îî 
context
ññ 
.
ññ 
Dispose
ññ #
(
ññ# $
)
ññ$ %
;
ññ% &
}
óó 
}
òò 
}
ôô 	
public
££ 
virtual
££ 
async
££ 
Task
££ !
<
££! " 
RepositoryResponse
££" 4
<
££4 5
bool
££5 9
>
££9 :
>
££: ;
RemoveModelAsync
££< L
(
££L M
TModel
££M S
model
££T Y
,
§§ 

TDbContext
§§ 
_context
§§ !
=
§§" #
null
§§$ (
,
§§( )#
IDbContextTransaction
§§* ?
_transaction
§§@ L
=
§§M N
null
§§O S
)
§§S T
{
•• 	

TDbContext
¶¶ 
context
¶¶ 
=
¶¶  
_context
¶¶! )
??
¶¶* ,
InitContext
¶¶- 8
(
¶¶8 9
)
¶¶9 :
;
¶¶: ;
var
ßß 
transaction
ßß 
=
ßß 
_transaction
ßß *
??
ßß+ -
context
ßß. 5
.
ßß5 6
Database
ßß6 >
.
ßß> ?
BeginTransaction
ßß? O
(
ßßO P
)
ßßP Q
;
ßßQ R
try
®® 
{
©© 
bool
™™ 
result
™™ 
=
™™ 
true
™™ "
;
™™" #
if
´´ 
(
´´ 
model
´´ 
!=
´´ 
null
´´ !
)
´´! "
{
¨¨ 
context
≠≠ 
.
≠≠ 
Entry
≠≠ !
(
≠≠! "
model
≠≠" '
)
≠≠' (
.
≠≠( )
State
≠≠) .
=
≠≠/ 0
EntityState
≠≠1 <
.
≠≠< =
Deleted
≠≠= D
;
≠≠D E
result
ÆÆ 
=
ÆÆ 
await
ÆÆ "
context
ÆÆ# *
.
ÆÆ* +
SaveChangesAsync
ÆÆ+ ;
(
ÆÆ; <
)
ÆÆ< =
.
ÆÆ= >
ConfigureAwait
ÆÆ> L
(
ÆÆL M
false
ÆÆM R
)
ÆÆR S
>
ÆÆT U
$num
ÆÆV W
;
ÆÆW X
}
ØØ 
if
±± 
(
±± 
result
±± 
)
±± 
{
≤≤ 
if
≥≥ 
(
≥≥ 
_transaction
≥≥ $
==
≥≥% '
null
≥≥( ,
)
≥≥, -
{
¥¥ 
transaction
∂∂ #
.
∂∂# $
Commit
∂∂$ *
(
∂∂* +
)
∂∂+ ,
;
∂∂, -
}
∑∑ 
return
∏∏ 
new
∏∏  
RepositoryResponse
∏∏ 1
<
∏∏1 2
bool
∏∏2 6
>
∏∏6 7
(
∏∏7 8
)
∏∏8 9
{
ππ 
	IsSucceed
∫∫ !
=
∫∫" #
true
∫∫$ (
,
∫∫( )
Data
ªª 
=
ªª 
true
ªª #
}
ºº 
;
ºº 
}
ΩΩ 
else
ææ 
{
øø 
if
¿¿ 
(
¿¿ 
_transaction
¿¿ $
==
¿¿% '
null
¿¿( ,
)
¿¿, -
{
¡¡ 
transaction
√√ #
.
√√# $
Rollback
√√$ ,
(
√√, -
)
√√- .
;
√√. /
}
ƒƒ 
return
≈≈ 
new
≈≈  
RepositoryResponse
≈≈ 1
<
≈≈1 2
bool
≈≈2 6
>
≈≈6 7
(
≈≈7 8
)
≈≈8 9
{
∆∆ 
	IsSucceed
«« !
=
««" #
false
««$ )
,
««) *
Data
»» 
=
»» 
false
»» $
}
…… 
;
…… 
}
   
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
ex
ÃÃ 
)
ÃÃ  
{
ÕÕ 
LogErrorMessage
ŒŒ 
(
ŒŒ  
ex
ŒŒ  "
)
ŒŒ" #
;
ŒŒ# $
if
œœ 
(
œœ 
_transaction
œœ  
==
œœ! #
null
œœ$ (
)
œœ( )
{
–– 
transaction
““ 
.
““  
Rollback
““  (
(
““( )
)
““) *
;
““* +
}
”” 
return
’’ 
new
’’  
RepositoryResponse
’’ -
<
’’- .
bool
’’. 2
>
’’2 3
(
’’3 4
)
’’4 5
{
÷÷ 
	IsSucceed
◊◊ 
=
◊◊ 
false
◊◊  %
,
◊◊% &
Data
ÿÿ 
=
ÿÿ 
false
ÿÿ  
,
ÿÿ  !
	Exception
ŸŸ 
=
ŸŸ 
ex
ŸŸ  "
}
⁄⁄ 
;
⁄⁄ 
}
€€ 
finally
‹‹ 
{
›› 
if
ﬁﬁ 
(
ﬁﬁ 
_context
ﬁﬁ 
==
ﬁﬁ 
null
ﬁﬁ  $
)
ﬁﬁ$ %
{
ﬂﬂ 
context
·· 
.
·· 
Dispose
·· #
(
··# $
)
··$ %
;
··% &
}
‚‚ 
}
„„ 
}
‰‰ 	
public
ÓÓ 
virtual
ÓÓ  
RepositoryResponse
ÓÓ )
<
ÓÓ) *
TModel
ÓÓ* 0
>
ÓÓ0 1
	SaveModel
ÓÓ2 ;
(
ÓÓ; <
TModel
ÓÓ< B
model
ÓÓC H
,
ÓÓH I
bool
ÓÓJ N
isSaveSubModels
ÓÓO ^
=
ÓÓ_ `
false
ÓÓa f
,
ÔÔ 

TDbContext
ÔÔ 
_context
ÔÔ !
=
ÔÔ" #
null
ÔÔ$ (
,
ÔÔ( )#
IDbContextTransaction
ÔÔ* ?
_transaction
ÔÔ@ L
=
ÔÔM N
null
ÔÔO S
)
ÔÔS T
{
 	
if
ÒÒ 
(
ÒÒ 
CheckIsExists
ÒÒ 
(
ÒÒ 
model
ÒÒ #
,
ÒÒ# $
_context
ÒÒ% -
,
ÒÒ- .
_transaction
ÒÒ/ ;
)
ÒÒ; <
)
ÒÒ< =
{
ÚÚ 
return
ÛÛ 
	EditModel
ÛÛ  
(
ÛÛ  !
model
ÛÛ! &
,
ÛÛ& '
isSaveSubModels
ÛÛ( 7
,
ÛÛ7 8
_context
ÛÛ9 A
,
ÛÛA B
_transaction
ÛÛC O
)
ÛÛO P
;
ÛÛP Q
}
ÙÙ 
else
ıı 
{
ˆˆ 
return
˜˜ 
CreateModel
˜˜ "
(
˜˜" #
model
˜˜# (
,
˜˜( )
isSaveSubModels
˜˜* 9
,
˜˜9 :
_context
˜˜; C
,
˜˜C D
_transaction
˜˜E Q
)
˜˜Q R
;
˜˜R S
}
¯¯ 
}
˘˘ 	
public
ÉÉ 
virtual
ÉÉ 
Task
ÉÉ 
<
ÉÉ  
RepositoryResponse
ÉÉ .
<
ÉÉ. /
TModel
ÉÉ/ 5
>
ÉÉ5 6
>
ÉÉ6 7
SaveModelAsync
ÉÉ8 F
(
ÉÉF G
TModel
ÉÉG M
model
ÉÉN S
,
ÉÉS T
bool
ÉÉU Y
isSaveSubModels
ÉÉZ i
=
ÉÉj k
false
ÉÉl q
,
ÑÑ 

TDbContext
ÑÑ 
_context
ÑÑ !
=
ÑÑ" #
null
ÑÑ$ (
,
ÑÑ( )#
IDbContextTransaction
ÑÑ* ?
_transaction
ÑÑ@ L
=
ÑÑM N
null
ÑÑO S
)
ÑÑS T
{
ÖÖ 	
if
ÜÜ 
(
ÜÜ 
CheckIsExists
ÜÜ 
(
ÜÜ 
model
ÜÜ #
,
ÜÜ# $
_context
ÜÜ% -
,
ÜÜ- .
_transaction
ÜÜ/ ;
)
ÜÜ; <
)
ÜÜ< =
{
áá 
return
àà 
EditModelAsync
àà %
(
àà% &
model
àà& +
,
àà+ ,
isSaveSubModels
àà- <
,
àà< =
_context
àà> F
,
ààF G
_transaction
ààH T
)
ààT U
;
ààU V
}
ââ 
else
ää 
{
ãã 
return
åå 
CreateModelAsync
åå '
(
åå' (
model
åå( -
,
åå- .
isSaveSubModels
åå/ >
,
åå> ?
_context
åå@ H
,
ååH I
_transaction
ååJ V
)
ååV W
;
ååW X
}
çç 
}
éé 	
public
óó 
virtual
óó 
bool
óó 
SaveSubModel
óó (
(
óó( )
TModel
óó) /
model
óó0 5
,
óó5 6

TDbContext
óó7 A
context
óóB I
,
óóI J#
IDbContextTransaction
óóK `
_transaction
óóa m
)
óóm n
{
òò 	
return
ôô 
false
ôô 
;
ôô 
}
öö 	
public
££ 
virtual
££ 
Task
££ 
<
££ 
bool
££  
>
££  !
SaveSubModelAsync
££" 3
(
££3 4
TModel
££4 :
model
££; @
,
££@ A

TDbContext
££B L
context
££M T
,
££T U#
IDbContextTransaction
££V k
_transaction
££l x
)
££x y
{
§§ 	
return
•• 
default
•• 
(
•• 
Task
•• 
<
••  
bool
••  $
>
••$ %
)
••% &
;
••& '
}
¶¶ 	
	protected
≠≠ 
LambdaExpression
≠≠ "
	GetLambda
≠≠# ,
(
≠≠, -
string
≠≠- 3
propName
≠≠4 <
)
≠≠< =
{
ÆÆ 	
var
ØØ 
	parameter
ØØ 
=
ØØ 

Expression
ØØ &
.
ØØ& '
	Parameter
ØØ' 0
(
ØØ0 1
typeof
ØØ1 7
(
ØØ7 8
TModel
ØØ8 >
)
ØØ> ?
)
ØØ? @
;
ØØ@ A
var
∞∞ 
memberExpression
∞∞  
=
∞∞! "

Expression
∞∞# -
.
∞∞- .
Property
∞∞. 6
(
∞∞6 7
	parameter
∞∞7 @
,
∞∞@ A
propName
∞∞B J
)
∞∞J K
;
∞∞K L
return
±± 

Expression
±± 
.
±± 
Lambda
±± $
(
±±$ %
memberExpression
±±% 5
,
±±5 6
	parameter
±±7 @
)
±±@ A
;
±±A B
}
≤≤ 	
}
≥≥ 
}¥¥ ∫∑	
XD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Repository\RepositoryBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{ 
public 

abstract 
class 
RepositoryBase (
<( )
TModel) /
,/ 0
TView1 6
,6 7
TContext8 @
>@ A
where 
TModel 
: 
class 
where 
TView 
: 
ViewModelBase #
<# $
TModel$ *
,* +
TView, 1
>1 2
where 
TContext 
: 
	DbContext "
{ 
	protected   
RepositoryBase    
(    !
)  ! "
{!! 	
}## 	
public,, 
virtual,, 
bool,, 
CheckIsExists,, )
(,,) *
TView,,* /
entity,,0 6
,,,6 7
TContext,,8 @
_context,,A I
=,,J K
null,,L P
,,,P Q!
IDbContextTransaction,,R g
_transaction,,h t
=,,u v
null,,w {
),,{ |
{-- 	
TContext.. 
context.. 
=.. 
_context.. '
??..( *
InitContext..+ 6
(..6 7
)..7 8
;..8 9
var// 
transaction// 
=// 
_transaction// *
??//+ -
context//. 5
.//5 6
Database//6 >
.//> ?
BeginTransaction//? O
(//O P
)//P Q
;//Q R
try00 
{11 
var22 
model22 
=22 
entity22 "
.22" #

ParseModel22# -
(22- .
)22. /
;22/ 0
return44 
context44 
.44 
Set44 "
<44" #
TModel44# )
>44) *
(44* +
)44+ ,
.44, -
Any44- 0
(440 1
e441 2
=>443 5
e446 7
==448 :
model44; @
)44@ A
;44A B
}88 
catch99 
(99 
	Exception99 
ex99 
)99  
{:: 
LogErrorMessage;; 
(;;  
ex;;  "
);;" #
;;;# $
if<< 
(<< 
_transaction<<  
==<<! #
null<<$ (
)<<( )
{== 
transaction>> 
.>>  
Rollback>>  (
(>>( )
)>>) *
;>>* +
}?? 
return@@ 
false@@ 
;@@ 
}AA 
finallyBB 
{CC 
ifDD 
(DD 
_contextDD 
==DD 
nullDD  $
)DD$ %
{EE 
transactionGG 
.GG  
DisposeGG  '
(GG' (
)GG( )
;GG) *
contextHH 
.HH 
DisposeHH #
(HH# $
)HH$ %
;HH% &
}II 
}JJ 
}KK 	
publicTT 
boolTT 
CheckIsExistsTT !
(TT! "
SystemTT" (
.TT( )
FuncTT) -
<TT- .
TModelTT. 4
,TT4 5
boolTT6 :
>TT: ;
	predicateTT< E
,TTE F
TContextTTG O
_contextTTP X
=TTY Z
nullTT[ _
,TT_ `!
IDbContextTransactionTTa v
_transaction	TTw É
=
TTÑ Ö
null
TTÜ ä
)
TTä ã
{UU 	
TContextVV 
contextVV 
=VV 
_contextVV '
??VV( *
InitContextVV+ 6
(VV6 7
)VV7 8
;VV8 9
varWW 
transactionWW 
=WW 
_transactionWW *
??WW+ -
contextWW. 5
.WW5 6
DatabaseWW6 >
.WW> ?
BeginTransactionWW? O
(WWO P
)WWP Q
;WWQ R
tryXX 
{YY 
return[[ 
context[[ 
.[[ 
Set[[ "
<[[" #
TModel[[# )
>[[) *
([[* +
)[[+ ,
.[[, -
Any[[- 0
([[0 1
	predicate[[1 :
)[[: ;
;[[; <
}__ 
catch`` 
(`` 
	Exception`` 
ex`` 
)``  
{aa 
LogErrorMessagebb 
(bb  
exbb  "
)bb" #
;bb# $
ifcc 
(cc 
_transactioncc  
==cc! #
nullcc$ (
)cc( )
{dd 
transactionee 
.ee  
Rollbackee  (
(ee( )
)ee) *
;ee* +
}ff 
returngg 
falsegg 
;gg 
}hh 
finallyii 
{jj 
ifkk 
(kk 
_contextkk 
==kk 
nullkk  $
)kk$ %
{ll 
transactionnn 
.nn  
Disposenn  '
(nn' (
)nn( )
;nn) *
contextoo 
.oo 
Disposeoo #
(oo# $
)oo$ %
;oo% &
}pp 
}qq 
}rr 	
public|| 
virtual|| 
RepositoryResponse|| )
<||) *
TView||* /
>||/ 0
CreateModel||1 <
(||< =
TView||= B
view||C G
,||G H
bool||I M
isSaveSubModels||N ]
=||^ _
false||` e
,}} 
TContext}} 
_context}} 
=}}  !
null}}" &
,}}& '!
IDbContextTransaction}}( =
_transaction}}> J
=}}K L
null}}M Q
)}}Q R
{~~ 	
bool 
isRoot 
= 
_context "
==# %
null& *
;* +
TContext
ÄÄ 
context
ÄÄ 
=
ÄÄ 
_context
ÄÄ '
??
ÄÄ( *
InitContext
ÄÄ+ 6
(
ÄÄ6 7
)
ÄÄ7 8
;
ÄÄ8 9
var
ÅÅ 
transaction
ÅÅ 
=
ÅÅ 
_transaction
ÅÅ *
??
ÅÅ+ -
context
ÅÅ. 5
.
ÅÅ5 6
Database
ÅÅ6 >
.
ÅÅ> ?
BeginTransaction
ÅÅ? O
(
ÅÅO P
)
ÅÅP Q
;
ÅÅQ R
try
ÇÇ 
{
ÉÉ 
var
ÑÑ 
model
ÑÑ 
=
ÑÑ 
view
ÑÑ  
.
ÑÑ  !

ParseModel
ÑÑ! +
(
ÑÑ+ ,
)
ÑÑ, -
;
ÑÑ- .
context
ÜÜ 
.
ÜÜ 
Entry
ÜÜ 
(
ÜÜ 
model
ÜÜ #
)
ÜÜ# $
.
ÜÜ$ %
State
ÜÜ% *
=
ÜÜ+ ,
EntityState
ÜÜ- 8
.
ÜÜ8 9
Added
ÜÜ9 >
;
ÜÜ> ?
bool
áá 
result
áá 
=
áá 
context
áá %
.
áá% &
SaveChanges
áá& 1
(
áá1 2
)
áá2 3
>
áá4 5
$num
áá6 7
;
áá7 8
if
àà 
(
àà 
result
àà 
&&
àà 
isSaveSubModels
àà -
)
àà- .
{
ââ 
result
ää 
=
ää 
SaveSubModel
ää )
(
ää) *
view
ää* .
,
ää. /
context
ää0 7
,
ää7 8
transaction
ää9 D
)
ääD E
;
ääE F
}
ãã 
HandleTransaction
çç !
(
çç! "
result
çç" (
,
çç( )
isRoot
çç* 0
,
çç0 1
transaction
çç2 =
)
çç= >
;
çç> ?
return
èè 
new
èè  
RepositoryResponse
èè -
<
èè- .
TView
èè. 3
>
èè3 4
(
èè4 5
)
èè5 6
{
êê 
	IsSucceed
ëë 
=
ëë 
result
ëë  &
,
ëë& '
Data
íí 
=
íí 
view
íí 
}
ìì 
;
ìì 
}
îî 
catch
ïï 
(
ïï 
	Exception
ïï 
ex
ïï 
)
ïï  
{
ññ 
LogErrorMessage
óó 
(
óó  
ex
óó  "
)
óó" #
;
óó# $
if
òò 
(
òò 
_transaction
òò  
==
òò! #
null
òò$ (
)
òò( )
{
ôô 
transaction
öö 
.
öö  
Rollback
öö  (
(
öö( )
)
öö) *
;
öö* +
}
õõ 
return
úú 
new
úú  
RepositoryResponse
úú -
<
úú- .
TView
úú. 3
>
úú3 4
(
úú4 5
)
úú5 6
{
ùù 
	IsSucceed
ûû 
=
ûû 
false
ûû  %
,
ûû% &
Data
üü 
=
üü 
null
üü 
,
üü  
	Exception
†† 
=
†† 
ex
††  "
}
°° 
;
°° 
}
¢¢ 
finally
££ 
{
§§ 
if
•• 
(
•• 
_context
•• 
==
•• 
null
••  $
)
••$ %
{
¶¶ 
transaction
®® 
.
®®  
Dispose
®®  '
(
®®' (
)
®®( )
;
®®) *
context
©© 
.
©© 
Dispose
©© #
(
©©# $
)
©©$ %
;
©©% &
}
™™ 
}
´´ 
}
¨¨ 	
public
∂∂ 
virtual
∂∂ 
async
∂∂ 
Task
∂∂ !
<
∂∂! " 
RepositoryResponse
∂∂" 4
<
∂∂4 5
TView
∂∂5 :
>
∂∂: ;
>
∂∂; <
CreateModelAsync
∂∂= M
(
∂∂M N
TView
∂∂N S
view
∂∂T X
,
∂∂X Y
bool
∂∂Z ^
isSaveSubModels
∂∂_ n
=
∂∂o p
false
∂∂q v
,
∑∑ 
TContext
∑∑ 
_context
∑∑ 
=
∑∑  !
null
∑∑" &
,
∑∑& '#
IDbContextTransaction
∑∑( =
_transaction
∑∑> J
=
∑∑K L
null
∑∑M Q
)
∑∑Q R
{
∏∏ 	
bool
ππ 
isRoot
ππ 
=
ππ 
_context
ππ "
==
ππ# %
null
ππ& *
;
ππ* +
TContext
∫∫ 
context
∫∫ 
=
∫∫ 
_context
∫∫ '
??
∫∫( *
InitContext
∫∫+ 6
(
∫∫6 7
)
∫∫7 8
;
∫∫8 9
var
ªª 
transaction
ªª 
=
ªª 
_transaction
ªª *
??
ªª+ -
context
ªª. 5
.
ªª5 6
Database
ªª6 >
.
ªª> ?
BeginTransaction
ªª? O
(
ªªO P
)
ªªP Q
;
ªªQ R
try
ºº 
{
ΩΩ 
var
ææ 
model
ææ 
=
ææ 
view
ææ  
.
ææ  !

ParseModel
ææ! +
(
ææ+ ,
)
ææ, -
;
ææ- .
context
¿¿ 
.
¿¿ 
Entry
¿¿ 
(
¿¿ 
model
¿¿ #
)
¿¿# $
.
¿¿$ %
State
¿¿% *
=
¿¿+ ,
EntityState
¿¿- 8
.
¿¿8 9
Added
¿¿9 >
;
¿¿> ?
bool
¡¡ 
result
¡¡ 
=
¡¡ 
await
¡¡ #
context
¡¡$ +
.
¡¡+ ,
SaveChangesAsync
¡¡, <
(
¡¡< =
)
¡¡= >
.
¡¡> ?
ConfigureAwait
¡¡? M
(
¡¡M N
false
¡¡N S
)
¡¡S T
>
¡¡U V
$num
¡¡W X
;
¡¡X Y
if
¬¬ 
(
¬¬ 
result
¬¬ 
&&
¬¬ 
isSaveSubModels
¬¬ -
)
¬¬- .
{
√√ 
result
ƒƒ 
=
ƒƒ 
await
ƒƒ "
SaveSubModelAsync
ƒƒ# 4
(
ƒƒ4 5
view
ƒƒ5 9
,
ƒƒ9 :
context
ƒƒ; B
,
ƒƒB C
transaction
ƒƒD O
)
ƒƒO P
.
ƒƒP Q
ConfigureAwait
ƒƒQ _
(
ƒƒ_ `
false
ƒƒ` e
)
ƒƒe f
;
ƒƒf g
}
≈≈ 
HandleTransaction
«« !
(
««! "
result
««" (
,
««( )
isRoot
««* 0
,
««0 1
transaction
««2 =
)
««= >
;
««> ?
return
…… 
new
……  
RepositoryResponse
…… -
<
……- .
TView
……. 3
>
……3 4
(
……4 5
)
……5 6
{
   
	IsSucceed
ÀÀ 
=
ÀÀ 
result
ÀÀ  &
,
ÀÀ& '
Data
ÃÃ 
=
ÃÃ 
result
ÃÃ !
?
ÃÃ" #
view
ÃÃ$ (
:
ÃÃ) *
null
ÃÃ+ /
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ 
ex
œœ 
)
œœ  
{
–– 
LogErrorMessage
—— 
(
——  
ex
——  "
)
——" #
;
——# $
if
““ 
(
““ 
_transaction
““  
==
““! #
null
““$ (
)
““( )
{
”” 
transaction
’’ 
.
’’  
Rollback
’’  (
(
’’( )
)
’’) *
;
’’* +
}
÷÷ 
return
ÿÿ 
new
ÿÿ  
RepositoryResponse
ÿÿ -
<
ÿÿ- .
TView
ÿÿ. 3
>
ÿÿ3 4
(
ÿÿ4 5
)
ÿÿ5 6
{
ŸŸ 
	IsSucceed
⁄⁄ 
=
⁄⁄ 
false
⁄⁄  %
,
⁄⁄% &
Data
€€ 
=
€€ 
null
€€ 
}
‹‹ 
;
‹‹ 
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
_context
‡‡ 
==
‡‡ 
null
‡‡  $
)
‡‡$ %
{
·· 
transaction
„„ 
.
„„  
Dispose
„„  '
(
„„' (
)
„„( )
;
„„) *
context
‰‰ 
.
‰‰ 
Dispose
‰‰ #
(
‰‰# $
)
‰‰$ %
;
‰‰% &
}
ÂÂ 
}
ÊÊ 
}
ÁÁ 	
public
ÒÒ 
virtual
ÒÒ  
RepositoryResponse
ÒÒ )
<
ÒÒ) *
TView
ÒÒ* /
>
ÒÒ/ 0
	EditModel
ÒÒ1 :
(
ÒÒ: ;
TView
ÒÒ; @
view
ÒÒA E
,
ÒÒE F
bool
ÒÒG K
isSaveSubModels
ÒÒL [
=
ÒÒ\ ]
false
ÒÒ^ c
,
ÚÚ 
TContext
ÚÚ 
_context
ÚÚ 
=
ÚÚ  !
null
ÚÚ" &
,
ÚÚ& '#
IDbContextTransaction
ÚÚ( =
_transaction
ÚÚ> J
=
ÚÚK L
null
ÚÚM Q
)
ÚÚQ R
{
ÛÛ 	
bool
ÙÙ 
isRoot
ÙÙ 
=
ÙÙ 
_context
ÙÙ "
==
ÙÙ# %
null
ÙÙ& *
;
ÙÙ* +
TContext
ıı 
context
ıı 
=
ıı 
_context
ıı '
??
ıı( *
InitContext
ıı+ 6
(
ıı6 7
)
ıı7 8
;
ıı8 9
var
ˆˆ 
transaction
ˆˆ 
=
ˆˆ 
_transaction
ˆˆ *
??
ˆˆ+ -
context
ˆˆ. 5
.
ˆˆ5 6
Database
ˆˆ6 >
.
ˆˆ> ?
BeginTransaction
ˆˆ? O
(
ˆˆO P
)
ˆˆP Q
;
ˆˆQ R
try
˜˜ 
{
¯¯ 
var
˘˘ 
model
˘˘ 
=
˘˘ 
view
˘˘  
.
˘˘  !

ParseModel
˘˘! +
(
˘˘+ ,
)
˘˘, -
;
˘˘- .
context
˚˚ 
.
˚˚ 
Entry
˚˚ 
(
˚˚ 
model
˚˚ #
)
˚˚# $
.
˚˚$ %
State
˚˚% *
=
˚˚+ ,
EntityState
˚˚- 8
.
˚˚8 9
Modified
˚˚9 A
;
˚˚A B
bool
¸¸ 
result
¸¸ 
=
¸¸ 
context
¸¸ %
.
¸¸% &
SaveChanges
¸¸& 1
(
¸¸1 2
)
¸¸2 3
>
¸¸4 5
$num
¸¸6 7
;
¸¸7 8
if
˛˛ 
(
˛˛ 
result
˛˛ 
&&
˛˛ 
isSaveSubModels
˛˛ -
)
˛˛- .
{
ˇˇ 
result
ÄÄ 
=
ÄÄ 
SaveSubModel
ÄÄ )
(
ÄÄ) *
view
ÄÄ* .
,
ÄÄ. /
context
ÄÄ0 7
,
ÄÄ7 8
transaction
ÄÄ9 D
)
ÄÄD E
;
ÄÄE F
}
ÅÅ 
HandleTransaction
ÉÉ !
(
ÉÉ! "
result
ÉÉ" (
,
ÉÉ( )
isRoot
ÉÉ* 0
,
ÉÉ0 1
transaction
ÉÉ2 =
)
ÉÉ= >
;
ÉÉ> ?
return
ÖÖ 
new
ÖÖ  
RepositoryResponse
ÖÖ -
<
ÖÖ- .
TView
ÖÖ. 3
>
ÖÖ3 4
(
ÖÖ4 5
)
ÖÖ5 6
{
ÜÜ 
	IsSucceed
áá 
=
áá 
result
áá  &
,
áá& '
Data
àà 
=
àà 
result
àà !
?
àà" #
view
àà$ (
:
àà) *
null
àà+ /
}
ââ 
;
ââ 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
LogErrorMessage
çç 
(
çç  
ex
çç  "
)
çç" #
;
çç# $
if
éé 
(
éé 
_transaction
éé  
==
éé! #
null
éé$ (
)
éé( )
{
èè 
transaction
ëë 
.
ëë  
Rollback
ëë  (
(
ëë( )
)
ëë) *
;
ëë* +
}
íí 
return
ìì 
new
ìì  
RepositoryResponse
ìì -
<
ìì- .
TView
ìì. 3
>
ìì3 4
(
ìì4 5
)
ìì5 6
{
îî 
	IsSucceed
ïï 
=
ïï 
false
ïï  %
,
ïï% &
Data
ññ 
=
ññ 
null
ññ 
,
ññ  
	Exception
óó 
=
óó 
ex
óó  "
}
òò 
;
òò 
}
ôô 
finally
öö 
{
õõ 
if
úú 
(
úú 
_context
úú 
==
úú 
null
úú  $
)
úú$ %
{
ùù 
transaction
üü 
.
üü  
Dispose
üü  '
(
üü' (
)
üü( )
;
üü) *
context
†† 
.
†† 
Dispose
†† #
(
††# $
)
††$ %
;
††% &
}
°° 
}
¢¢ 
}
££ 	
public
≠≠ 
virtual
≠≠ 
async
≠≠ 
Task
≠≠ !
<
≠≠! " 
RepositoryResponse
≠≠" 4
<
≠≠4 5
TView
≠≠5 :
>
≠≠: ;
>
≠≠; <
EditModelAsync
≠≠= K
(
≠≠K L
TView
≠≠L Q
view
≠≠R V
,
≠≠V W
bool
≠≠X \
isSaveSubModels
≠≠] l
=
≠≠m n
false
≠≠o t
,
ÆÆ 
TContext
ÆÆ 
_context
ÆÆ 
=
ÆÆ  !
null
ÆÆ" &
,
ÆÆ& '#
IDbContextTransaction
ÆÆ( =
_transaction
ÆÆ> J
=
ÆÆK L
null
ÆÆM Q
)
ÆÆQ R
{
ØØ 	
bool
∞∞ 
isRoot
∞∞ 
=
∞∞ 
_context
∞∞ "
==
∞∞# %
null
∞∞& *
;
∞∞* +
TContext
±± 
context
±± 
=
±± 
_context
±± '
??
±±( *
InitContext
±±+ 6
(
±±6 7
)
±±7 8
;
±±8 9
var
≤≤ 
transaction
≤≤ 
=
≤≤ 
_transaction
≤≤ *
??
≤≤+ -
context
≤≤. 5
.
≤≤5 6
Database
≤≤6 >
.
≤≤> ?
BeginTransaction
≤≤? O
(
≤≤O P
)
≤≤P Q
;
≤≤Q R
try
≥≥ 
{
¥¥ 
var
µµ 
model
µµ 
=
µµ 
view
µµ  
.
µµ  !

ParseModel
µµ! +
(
µµ+ ,
)
µµ, -
;
µµ- .
context
∑∑ 
.
∑∑ 
Entry
∑∑ 
(
∑∑ 
model
∑∑ #
)
∑∑# $
.
∑∑$ %
State
∑∑% *
=
∑∑+ ,
EntityState
∑∑- 8
.
∑∑8 9
Modified
∑∑9 A
;
∑∑A B
bool
∏∏ 
result
∏∏ 
=
∏∏ 
await
∏∏ #
context
∏∏$ +
.
∏∏+ ,
SaveChangesAsync
∏∏, <
(
∏∏< =
)
∏∏= >
.
∏∏> ?
ConfigureAwait
∏∏? M
(
∏∏M N
false
∏∏N S
)
∏∏S T
>
∏∏U V
$num
∏∏W X
;
∏∏X Y
if
ππ 
(
ππ 
result
ππ 
&&
ππ 
isSaveSubModels
ππ -
)
ππ- .
{
∫∫ 
result
ªª 
=
ªª 
await
ªª "
SaveSubModelAsync
ªª# 4
(
ªª4 5
view
ªª5 9
,
ªª9 :
context
ªª; B
,
ªªB C
transaction
ªªD O
)
ªªO P
.
ªªP Q
ConfigureAwait
ªªQ _
(
ªª_ `
false
ªª` e
)
ªªe f
;
ªªf g
}
ºº 
HandleTransaction
ææ !
(
ææ! "
result
ææ" (
,
ææ( )
isRoot
ææ* 0
,
ææ0 1
transaction
ææ2 =
)
ææ= >
;
ææ> ?
return
¿¿ 
new
¿¿  
RepositoryResponse
¿¿ -
<
¿¿- .
TView
¿¿. 3
>
¿¿3 4
(
¿¿4 5
)
¿¿5 6
{
¡¡ 
	IsSucceed
¬¬ 
=
¬¬ 
result
¬¬  &
,
¬¬& '
Data
√√ 
=
√√ 
result
√√ !
?
√√" #
view
√√$ (
:
√√) *
null
√√+ /
}
ƒƒ 
;
ƒƒ 
}
≈≈ 
catch
∆∆ 
(
∆∆ 
	Exception
∆∆ 
ex
∆∆ 
)
∆∆  
{
«« 
LogErrorMessage
»» 
(
»»  
ex
»»  "
)
»»" #
;
»»# $
if
…… 
(
…… 
_transaction
……  
==
……! #
null
……$ (
)
……( )
{
   
transaction
ÃÃ 
.
ÃÃ  
Rollback
ÃÃ  (
(
ÃÃ( )
)
ÃÃ) *
;
ÃÃ* +
}
ÕÕ 
return
œœ 
new
œœ  
RepositoryResponse
œœ -
<
œœ- .
TView
œœ. 3
>
œœ3 4
(
œœ4 5
)
œœ5 6
{
–– 
	IsSucceed
—— 
=
—— 
false
——  %
,
——% &
Data
““ 
=
““ 
null
““ 
,
““  
	Exception
”” 
=
”” 
ex
””  "
}
‘‘ 
;
‘‘ 
}
’’ 
finally
÷÷ 
{
◊◊ 
if
ÿÿ 
(
ÿÿ 
_context
ÿÿ 
==
ÿÿ 
null
ÿÿ  $
)
ÿÿ$ %
{
ŸŸ 
context
€€ 
.
€€ 
Dispose
€€ #
(
€€# $
)
€€$ %
;
€€% &
}
‹‹ 
}
›› 
}
ﬁﬁ 	
public
ÂÂ 
virtual
ÂÂ 
TView
ÂÂ 
GetSingleModel
ÂÂ +
(
ÂÂ+ ,

Expression
ÂÂ, 6
<
ÂÂ6 7
Func
ÂÂ7 ;
<
ÂÂ; <
TModel
ÂÂ< B
,
ÂÂB C
bool
ÂÂD H
>
ÂÂH I
>
ÂÂI J
	predicate
ÂÂK T
)
ÂÂT U
{
ÊÊ 	
using
ÁÁ 
(
ÁÁ 
TContext
ÁÁ 
context
ÁÁ #
=
ÁÁ$ %
InitContext
ÁÁ& 1
(
ÁÁ1 2
)
ÁÁ2 3
)
ÁÁ3 4
{
ËË 
TModel
ÈÈ 
model
ÈÈ 
=
ÈÈ 
context
ÈÈ &
.
ÈÈ& '
Set
ÈÈ' *
<
ÈÈ* +
TModel
ÈÈ+ 1
>
ÈÈ1 2
(
ÈÈ2 3
)
ÈÈ3 4
.
ÈÈ4 5
FirstOrDefault
ÈÈ5 C
(
ÈÈC D
	predicate
ÈÈD M
)
ÈÈM N
;
ÈÈN O
if
ÍÍ 
(
ÍÍ 
model
ÍÍ 
!=
ÍÍ 
null
ÍÍ !
)
ÍÍ! "
{
ÎÎ 
context
ÏÏ 
.
ÏÏ 
Entry
ÏÏ !
(
ÏÏ! "
model
ÏÏ" '
)
ÏÏ' (
.
ÏÏ( )
State
ÏÏ) .
=
ÏÏ/ 0
EntityState
ÏÏ1 <
.
ÏÏ< =
Detached
ÏÏ= E
;
ÏÏE F
var
ÌÌ 

viewResult
ÌÌ "
=
ÌÌ# $
	ParseView
ÌÌ% .
(
ÌÌ. /
model
ÌÌ/ 4
)
ÌÌ4 5
;
ÌÌ5 6
return
ÔÔ 

viewResult
ÔÔ %
;
ÔÔ% &
}
 
else
ÒÒ 
{
ÚÚ 
return
ÛÛ 
null
ÛÛ 
;
ÛÛ  
}
ÙÙ 
}
ıı 
}
ˆˆ 	
public
˝˝ 
virtual
˝˝ 
async
˝˝ 
Task
˝˝ !
<
˝˝! "
TView
˝˝" '
>
˝˝' (!
GetSingleModelAsync
˝˝) <
(
˝˝< =

Expression
˝˝= G
<
˝˝G H
Func
˝˝H L
<
˝˝L M
TModel
˝˝M S
,
˝˝S T
bool
˝˝U Y
>
˝˝Y Z
>
˝˝Z [
	predicate
˝˝\ e
)
˝˝e f
{
˛˛ 	
using
ˇˇ 
(
ˇˇ 
TContext
ˇˇ 
context
ˇˇ #
=
ˇˇ$ %
InitContext
ˇˇ& 1
(
ˇˇ1 2
)
ˇˇ2 3
)
ˇˇ3 4
{
ÄÄ 
TModel
ÅÅ 
model
ÅÅ 
=
ÅÅ 
await
ÅÅ $
context
ÅÅ% ,
.
ÅÅ, -
Set
ÅÅ- 0
<
ÅÅ0 1
TModel
ÅÅ1 7
>
ÅÅ7 8
(
ÅÅ8 9
)
ÅÅ9 :
.
ÅÅ: ;!
FirstOrDefaultAsync
ÅÅ; N
(
ÅÅN O
	predicate
ÅÅO X
)
ÅÅX Y
.
ÅÅY Z
ConfigureAwait
ÅÅZ h
(
ÅÅh i
false
ÅÅi n
)
ÅÅn o
;
ÅÅo p
if
ÇÇ 
(
ÇÇ 
model
ÇÇ 
!=
ÇÇ 
null
ÇÇ !
)
ÇÇ! "
{
ÉÉ 
context
ÑÑ 
.
ÑÑ 
Entry
ÑÑ !
(
ÑÑ! "
model
ÑÑ" '
)
ÑÑ' (
.
ÑÑ( )
State
ÑÑ) .
=
ÑÑ/ 0
EntityState
ÑÑ1 <
.
ÑÑ< =
Detached
ÑÑ= E
;
ÑÑE F
var
ÜÜ 

viewResult
ÜÜ "
=
ÜÜ# $
	ParseView
ÜÜ% .
(
ÜÜ. /
model
ÜÜ/ 4
)
ÜÜ4 5
;
ÜÜ5 6
return
áá 

viewResult
áá %
;
áá% &
}
àà 
else
ââ 
{
ää 
return
ãã 
null
ãã 
;
ãã  
}
åå 
}
çç 
}
éé 	
public
îî 
virtual
îî 
TContext
îî 
InitContext
îî  +
(
îî+ ,
)
îî, -
{
ïï 	
Type
ññ 
	classType
ññ 
=
ññ 
typeof
ññ #
(
ññ# $
TContext
ññ$ ,
)
ññ, -
;
ññ- .
ConstructorInfo
óó 
classConstructor
óó ,
=
óó- .
	classType
óó/ 8
.
óó8 9
GetConstructor
óó9 G
(
óóG H
new
óóH K
Type
óóL P
[
óóP Q
]
óóQ R
{
óóS T
}
óóU V
)
óóV W
;
óóW X
TContext
òò 
context
òò 
=
òò 
(
òò  
TContext
òò  (
)
òò( )
classConstructor
òò) 9
.
òò9 :
Invoke
òò: @
(
òò@ A
new
òòA D
object
òòE K
[
òòK L
]
òòL M
{
òòN O
}
òòP Q
)
òòQ R
;
òòR S
return
öö 
context
öö 
;
öö 
}
õõ 	
public
°° 
virtual
°° 
void
°° 
LogErrorMessage
°° +
(
°°+ ,
	Exception
°°, 5
ex
°°6 8
)
°°8 9
{
¢¢ 	
}
££ 	
public
™™ 
virtual
™™ 
List
™™ 
<
™™ 
TView
™™ !
>
™™! "
	ParseView
™™# ,
(
™™, -
List
™™- 1
<
™™1 2
TModel
™™2 8
>
™™8 9
	lstModels
™™: C
)
™™C D
{
´´ 	
List
¨¨ 
<
¨¨ 
TView
¨¨ 
>
¨¨ 
lstView
¨¨ 
=
¨¨  !
new
¨¨" %
List
¨¨& *
<
¨¨* +
TView
¨¨+ 0
>
¨¨0 1
(
¨¨1 2
)
¨¨2 3
;
¨¨3 4
foreach
≠≠ 
(
≠≠ 
var
≠≠ 
model
≠≠ 
in
≠≠ !
	lstModels
≠≠" +
)
≠≠+ ,
{
ÆÆ 
lstView
ØØ 
.
ØØ 
Add
ØØ 
(
ØØ 
	ParseView
ØØ %
(
ØØ% &
model
ØØ& +
)
ØØ+ ,
)
ØØ, -
;
ØØ- .
}
∞∞ 
return
≤≤ 
lstView
≤≤ 
;
≤≤ 
}
≥≥ 	
public
∫∫ 
virtual
∫∫ 
TView
∫∫ 
	ParseView
∫∫ &
(
∫∫& '
TModel
∫∫' -
model
∫∫. 3
)
∫∫3 4
{
ªª 	
Type
ºº 
	classType
ºº 
=
ºº 
typeof
ºº #
(
ºº# $
TView
ºº$ )
)
ºº) *
;
ºº* +
ConstructorInfo
ΩΩ 
classConstructor
ΩΩ ,
=
ΩΩ- .
	classType
ΩΩ/ 8
.
ΩΩ8 9
GetConstructor
ΩΩ9 G
(
ΩΩG H
new
ΩΩH K
Type
ΩΩL P
[
ΩΩP Q
]
ΩΩQ R
{
ΩΩS T
model
ΩΩU Z
.
ΩΩZ [
GetType
ΩΩ[ b
(
ΩΩb c
)
ΩΩc d
.
ΩΩd e
GetType
ΩΩe l
(
ΩΩl m
)
ΩΩm n
}
ΩΩo p
)
ΩΩp q
;
ΩΩq r
if
ææ 
(
ææ 
classConstructor
ææ  
!=
ææ! #
null
ææ$ (
)
ææ( )
{
øø 
return
¿¿ 
(
¿¿ 
TView
¿¿ 
)
¿¿ 
classConstructor
¿¿ .
.
¿¿. /
Invoke
¿¿/ 5
(
¿¿5 6
new
¿¿6 9
object
¿¿: @
[
¿¿@ A
]
¿¿A B
{
¿¿C D
model
¿¿E J
}
¿¿K L
)
¿¿L M
;
¿¿M N
}
¡¡ 
else
¬¬ 
{
√√ 
classConstructor
ƒƒ  
=
ƒƒ! "
	classType
ƒƒ# ,
.
ƒƒ, -
GetConstructor
ƒƒ- ;
(
ƒƒ; <
new
ƒƒ< ?
Type
ƒƒ@ D
[
ƒƒD E
]
ƒƒE F
{
ƒƒG H
model
ƒƒI N
.
ƒƒN O
GetType
ƒƒO V
(
ƒƒV W
)
ƒƒW X
}
ƒƒY Z
)
ƒƒZ [
;
ƒƒ[ \
return
≈≈ 
(
≈≈ 
TView
≈≈ 
)
≈≈ 
classConstructor
≈≈ .
.
≈≈. /
Invoke
≈≈/ 5
(
≈≈5 6
new
≈≈6 9
object
≈≈: @
[
≈≈@ A
]
≈≈A B
{
≈≈C D
model
≈≈E J
}
≈≈K L
)
≈≈L M
;
≈≈M N
}
∆∆ 
}
«« 	
public
ÃÃ 
virtual
ÃÃ 
void
ÃÃ  
RegisterAutoMapper
ÃÃ .
(
ÃÃ. /
)
ÃÃ/ 0
{
ÕÕ 	
Mapper
ŒŒ 
.
ŒŒ 

Initialize
ŒŒ 
(
ŒŒ 
cfg
ŒŒ !
=>
ŒŒ" $
{
œœ 
cfg
–– 
.
–– 
	CreateMap
–– 
<
–– 
TModel
–– $
,
––$ %
TView
––& +
>
––+ ,
(
––, -
)
––- .
;
––. /
cfg
—— 
.
—— 
	CreateMap
—— 
<
—— 
TView
—— #
,
——# $
TModel
——% +
>
——+ ,
(
——, -
)
——- .
;
——. /
}
““ 
)
““ 
;
““ 
}
”” 	
public
€€ 
virtual
€€ 
List
€€ 
<
€€ 
TView
€€ !
>
€€! "
GetModelList
€€# /
(
€€/ 0
)
€€0 1
{
‹‹ 	
using
›› 
(
›› 
TContext
›› 
context
›› #
=
››$ %
InitContext
››& 1
(
››1 2
)
››2 3
)
››3 4
{
ﬁﬁ 
try
ﬂﬂ 
{
‡‡ 
List
·· 
<
·· 
TView
·· 
>
·· 
lstViewResult
··  -
=
··. /
new
··0 3
List
··4 8
<
··8 9
TView
··9 >
>
··> ?
(
··? @
)
··@ A
;
··A B
var
‚‚ 
lstModel
‚‚  
=
‚‚! "
context
‚‚# *
.
‚‚* +
Set
‚‚+ .
<
‚‚. /
TModel
‚‚/ 5
>
‚‚5 6
(
‚‚6 7
)
‚‚7 8
.
‚‚8 9
ToList
‚‚9 ?
(
‚‚? @
)
‚‚@ A
;
‚‚A B
lstModel
‰‰ 
.
‰‰ 
ForEach
‰‰ $
(
‰‰$ %
model
‰‰% *
=>
‰‰+ -
context
‰‰. 5
.
‰‰5 6
Entry
‰‰6 ;
(
‰‰; <
model
‰‰< A
)
‰‰A B
.
‰‰B C
State
‰‰C H
=
‰‰I J
EntityState
‰‰K V
.
‰‰V W
Detached
‰‰W _
)
‰‰_ `
;
‰‰` a
return
ÂÂ 
	ParseView
ÂÂ $
(
ÂÂ$ %
lstModel
ÂÂ% -
)
ÂÂ- .
;
ÂÂ. /
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ 
	Exception
ÁÁ  
ex
ÁÁ! #
)
ÁÁ# $
{
ËË 
LogErrorMessage
ÈÈ #
(
ÈÈ# $
ex
ÈÈ$ &
)
ÈÈ& '
;
ÈÈ' (
return
ÍÍ 
null
ÍÍ 
;
ÍÍ  
}
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
public
˜˜ 
virtual
˜˜ 
PaginationModel
˜˜ &
<
˜˜& '
TView
˜˜' ,
>
˜˜, -
GetModelList
˜˜. :
(
˜˜: ;

Expression
¯¯ 
<
¯¯ 
Func
¯¯ 
<
¯¯ 
TModel
¯¯ "
,
¯¯" #
int
¯¯$ '
>
¯¯' (
>
¯¯( )
orderBy
¯¯* 1
,
¯¯1 2
string
¯¯3 9
	direction
¯¯: C
,
¯¯C D
int
¯¯E H
?
¯¯H I
	pageIndex
¯¯J S
,
¯¯S T
int
¯¯U X
?
¯¯X Y
pageSize
¯¯Z b
)
¯¯b c
{
˘˘ 	
using
˙˙ 
(
˙˙ 
TContext
˙˙ 
context
˙˙ #
=
˙˙$ %
InitContext
˙˙& 1
(
˙˙1 2
)
˙˙2 3
)
˙˙3 4
{
˚˚ 
try
¸¸ 
{
˝˝ 
List
˛˛ 
<
˛˛ 
TModel
˛˛ 
>
˛˛  
lstModel
˛˛! )
=
˛˛* +
new
˛˛, /
List
˛˛0 4
<
˛˛4 5
TModel
˛˛5 ;
>
˛˛; <
(
˛˛< =
)
˛˛= >
;
˛˛> ?
var
ˇˇ 
query
ˇˇ 
=
ˇˇ 
context
ˇˇ  '
.
ˇˇ' (
Set
ˇˇ( +
<
ˇˇ+ ,
TModel
ˇˇ, 2
>
ˇˇ2 3
(
ˇˇ3 4
)
ˇˇ4 5
;
ˇˇ5 6
PaginationModel
ÅÅ #
<
ÅÅ# $
TView
ÅÅ$ )
>
ÅÅ) *
result
ÅÅ+ 1
=
ÅÅ2 3
new
ÅÅ4 7
PaginationModel
ÅÅ8 G
<
ÅÅG H
TView
ÅÅH M
>
ÅÅM N
(
ÅÅN O
)
ÅÅO P
{
ÇÇ 

TotalItems
ÉÉ "
=
ÉÉ# $
query
ÉÉ% *
.
ÉÉ* +
Count
ÉÉ+ 0
(
ÉÉ0 1
)
ÉÉ1 2
,
ÉÉ2 3
	PageIndex
ÑÑ !
=
ÑÑ" #
	pageIndex
ÑÑ$ -
??
ÑÑ. 0
$num
ÑÑ1 2
}
ÖÖ 
;
ÖÖ 
result
ÜÜ 
.
ÜÜ 
PageSize
ÜÜ #
=
ÜÜ$ %
pageSize
ÜÜ& .
??
ÜÜ/ 1
result
ÜÜ2 8
.
ÜÜ8 9

TotalItems
ÜÜ9 C
;
ÜÜC D
if
àà 
(
àà 
pageSize
àà  
.
àà  !
HasValue
àà! )
)
àà) *
{
ââ 
result
ää 
.
ää 
	TotalPage
ää (
=
ää) *
(
ää+ ,
result
ää, 2
.
ää2 3

TotalItems
ää3 =
/
ää> ?
pageSize
ää@ H
.
ääH I
Value
ääI N
)
ääN O
+
ääP Q
(
ääR S
result
ääS Y
.
ääY Z

TotalItems
ääZ d
%
ääe f
pageSize
ääg o
.
ääo p
Value
ääp u
>
ääv w
$num
ääx y
?
ääz {
$num
ää| }
:
ää~ 
$numääÄ Å
)ääÅ Ç
;ääÇ É
}
ãã 
switch
éé 
(
éé 
	direction
éé %
)
éé% &
{
èè 
case
êê 
$str
êê #
:
êê# $
if
ëë 
(
ëë  
pageSize
ëë  (
.
ëë( )
HasValue
ëë) 1
)
ëë1 2
{
íí 
lstModel
ìì  (
=
ìì) *
query
ìì+ 0
.
îî$ %
OrderByDescending
îî% 6
(
îî6 7
orderBy
îî7 >
)
îî> ?
.
ïï$ %
Skip
ïï% )
(
ïï) *
	pageIndex
ïï* 3
.
ïï3 4
Value
ïï4 9
*
ïï: ;
pageSize
ïï< D
.
ïïD E
Value
ïïE J
)
ïïJ K
.
ññ$ %
Take
ññ% )
(
ññ) *
pageSize
ññ* 2
.
ññ2 3
Value
ññ3 8
)
ññ8 9
.
óó$ %
ToList
óó% +
(
óó+ ,
)
óó, -
;
óó- .
}
òò 
else
ôô  
{
öö 
lstModel
õõ  (
=
õõ) *
query
õõ+ 0
.
úú$ %
OrderByDescending
úú% 6
(
úú6 7
orderBy
úú7 >
)
úú> ?
.
ùù$ %
ToList
ùù% +
(
ùù+ ,
)
ùù, -
;
ùù- .
}
ûû 
break
üü !
;
üü! "
default
°° 
:
°°  
if
¢¢ 
(
¢¢  
pageSize
¢¢  (
.
¢¢( )
HasValue
¢¢) 1
)
¢¢1 2
{
££ 
lstModel
§§  (
=
§§) *
query
§§+ 0
.
••$ %
OrderBy
••% ,
(
••, -
orderBy
••- 4
)
••4 5
.
¶¶$ %
Skip
¶¶% )
(
¶¶) *
	pageIndex
¶¶* 3
.
¶¶3 4
Value
¶¶4 9
*
¶¶: ;
pageSize
¶¶< D
.
¶¶D E
Value
¶¶E J
)
¶¶J K
.
ßß$ %
Take
ßß% )
(
ßß) *
pageSize
ßß* 2
.
ßß2 3
Value
ßß3 8
)
ßß8 9
.
®®$ %
ToList
®®% +
(
®®+ ,
)
®®, -
;
®®- .
}
©© 
else
™™  
{
´´ 
lstModel
¨¨  (
=
¨¨) *
query
¨¨+ 0
.
≠≠$ %
OrderBy
≠≠% ,
(
≠≠, -
orderBy
≠≠- 4
)
≠≠4 5
.
ÆÆ$ %
ToList
ÆÆ% +
(
ÆÆ+ ,
)
ÆÆ, -
;
ÆÆ- .
}
ØØ 
break
∞∞ !
;
∞∞! "
}
±± 
lstModel
≥≥ 
.
≥≥ 
ForEach
≥≥ $
(
≥≥$ %
model
≥≥% *
=>
≥≥+ -
context
≥≥. 5
.
≥≥5 6
Entry
≥≥6 ;
(
≥≥; <
model
≥≥< A
)
≥≥A B
.
≥≥B C
State
≥≥C H
=
≥≥I J
EntityState
≥≥K V
.
≥≥V W
Detached
≥≥W _
)
≥≥_ `
;
≥≥` a
var
¥¥ 
lstViewResult
¥¥ %
=
¥¥& '
	ParseView
¥¥( 1
(
¥¥1 2
lstModel
¥¥2 :
)
¥¥: ;
;
¥¥; <
result
∂∂ 
.
∂∂ 
Items
∂∂  
=
∂∂! "
lstViewResult
∂∂# 0
;
∂∂0 1
return
∑∑ 
result
∑∑ !
;
∑∑! "
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ  
ex
ππ! #
)
ππ# $
{
∫∫ 
LogErrorMessage
ªª #
(
ªª# $
ex
ªª$ &
)
ªª& '
;
ªª' (
return
ºº 
null
ºº 
;
ºº  
}
ΩΩ 
}
ææ 
}
øø 	
public
…… 
virtual
…… 
PaginationModel
…… &
<
……& '
TView
……' ,
>
……, -
GetModelList
……. :
(
……: ;

Expression
   
<
   
Func
   
<
   
TModel
   "
,
  " #
string
  $ *
>
  * +
>
  + ,
orderBy
  - 4
,
  4 5
string
  6 <
	direction
  = F
,
  F G
int
  H K
?
  K L
	pageIndex
  M V
,
  V W
int
  X [
?
  [ \
pageSize
  ] e
)
  e f
{
ÀÀ 	
using
ÃÃ 
(
ÃÃ 
TContext
ÃÃ 
context
ÃÃ #
=
ÃÃ$ %
InitContext
ÃÃ& 1
(
ÃÃ1 2
)
ÃÃ2 3
)
ÃÃ3 4
{
ÕÕ 
try
ŒŒ 
{
œœ 
List
–– 
<
–– 
TModel
–– 
>
––  
lstModel
––! )
=
––* +
new
––, /
List
––0 4
<
––4 5
TModel
––5 ;
>
––; <
(
––< =
)
––= >
;
––> ?
var
““ 
query
““ 
=
““ 
context
““  '
.
““' (
Set
““( +
<
““+ ,
TModel
““, 2
>
““2 3
(
““3 4
)
““4 5
;
““5 6
PaginationModel
”” #
<
””# $
TView
””$ )
>
””) *
result
””+ 1
=
””2 3
new
””4 7
PaginationModel
””8 G
<
””G H
TView
””H M
>
””M N
(
””N O
)
””O P
{
‘‘ 

TotalItems
’’ "
=
’’# $
query
’’% *
.
’’* +
Count
’’+ 0
(
’’0 1
)
’’1 2
,
’’2 3
	PageIndex
÷÷ !
=
÷÷" #
	pageIndex
÷÷$ -
??
÷÷. 0
$num
÷÷1 2
}
◊◊ 
;
◊◊ 
result
ÿÿ 
.
ÿÿ 
PageSize
ÿÿ #
=
ÿÿ$ %
pageSize
ÿÿ& .
??
ÿÿ/ 1
result
ÿÿ2 8
.
ÿÿ8 9

TotalItems
ÿÿ9 C
;
ÿÿC D
if
⁄⁄ 
(
⁄⁄ 
pageSize
⁄⁄  
.
⁄⁄  !
HasValue
⁄⁄! )
)
⁄⁄) *
{
€€ 
result
‹‹ 
.
‹‹ 
	TotalPage
‹‹ (
=
‹‹) *
(
‹‹+ ,
result
‹‹, 2
.
‹‹2 3

TotalItems
‹‹3 =
/
‹‹> ?
pageSize
‹‹@ H
.
‹‹H I
Value
‹‹I N
)
‹‹N O
+
‹‹P Q
(
‹‹R S
result
‹‹S Y
.
‹‹Y Z

TotalItems
‹‹Z d
%
‹‹e f
pageSize
‹‹g o
.
‹‹o p
Value
‹‹p u
>
‹‹v w
$num
‹‹x y
?
‹‹z {
$num
‹‹| }
:
‹‹~ 
$num‹‹Ä Å
)‹‹Å Ç
;‹‹Ç É
}
›› 
switch
‡‡ 
(
‡‡ 
	direction
‡‡ %
)
‡‡% &
{
·· 
case
‚‚ 
$str
‚‚ #
:
‚‚# $
if
„„ 
(
„„  
pageSize
„„  (
.
„„( )
HasValue
„„) 1
)
„„1 2
{
‰‰ 
lstModel
ÂÂ  (
=
ÂÂ) *
query
ÂÂ+ 0
.
ÊÊ$ %
OrderByDescending
ÊÊ% 6
(
ÊÊ6 7
orderBy
ÊÊ7 >
)
ÊÊ> ?
.
ÁÁ$ %
Skip
ÁÁ% )
(
ÁÁ) *
	pageIndex
ÁÁ* 3
.
ÁÁ3 4
Value
ÁÁ4 9
*
ÁÁ: ;
pageSize
ÁÁ< D
.
ÁÁD E
Value
ÁÁE J
)
ÁÁJ K
.
ËË$ %
Take
ËË% )
(
ËË) *
pageSize
ËË* 2
.
ËË2 3
Value
ËË3 8
)
ËË8 9
.
ÈÈ$ %
ToList
ÈÈ% +
(
ÈÈ+ ,
)
ÈÈ, -
;
ÈÈ- .
}
ÍÍ 
else
ÎÎ  
{
ÏÏ 
lstModel
ÌÌ  (
=
ÌÌ) *
query
ÌÌ+ 0
.
ÓÓ$ %
OrderByDescending
ÓÓ% 6
(
ÓÓ6 7
orderBy
ÓÓ7 >
)
ÓÓ> ?
.
ÔÔ$ %
ToList
ÔÔ% +
(
ÔÔ+ ,
)
ÔÔ, -
;
ÔÔ- .
}
 
break
ÒÒ !
;
ÒÒ! "
default
ÛÛ 
:
ÛÛ  
if
ÙÙ 
(
ÙÙ  
pageSize
ÙÙ  (
.
ÙÙ( )
HasValue
ÙÙ) 1
)
ÙÙ1 2
{
ıı 
lstModel
ˆˆ  (
=
ˆˆ) *
query
ˆˆ+ 0
.
˜˜$ %
OrderBy
˜˜% ,
(
˜˜, -
orderBy
˜˜- 4
)
˜˜4 5
.
¯¯$ %
Skip
¯¯% )
(
¯¯) *
	pageIndex
¯¯* 3
.
¯¯3 4
Value
¯¯4 9
*
¯¯: ;
pageSize
¯¯< D
.
¯¯D E
Value
¯¯E J
)
¯¯J K
.
˘˘$ %
Take
˘˘% )
(
˘˘) *
pageSize
˘˘* 2
.
˘˘2 3
Value
˘˘3 8
)
˘˘8 9
.
˙˙$ %
ToList
˙˙% +
(
˙˙+ ,
)
˙˙, -
;
˙˙- .
}
˚˚ 
else
¸¸  
{
˝˝ 
lstModel
˛˛  (
=
˛˛) *
query
˛˛+ 0
.
ˇˇ$ %
OrderBy
ˇˇ% ,
(
ˇˇ, -
orderBy
ˇˇ- 4
)
ˇˇ4 5
.
ÄÄ$ %
ToList
ÄÄ% +
(
ÄÄ+ ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
break
ÇÇ !
;
ÇÇ! "
}
ÉÉ 
lstModel
ÖÖ 
.
ÖÖ 
ForEach
ÖÖ $
(
ÖÖ$ %
model
ÖÖ% *
=>
ÖÖ+ -
context
ÖÖ. 5
.
ÖÖ5 6
Entry
ÖÖ6 ;
(
ÖÖ; <
model
ÖÖ< A
)
ÖÖA B
.
ÖÖB C
State
ÖÖC H
=
ÖÖI J
EntityState
ÖÖK V
.
ÖÖV W
Detached
ÖÖW _
)
ÖÖ_ `
;
ÖÖ` a
var
áá 
lstViewResult
áá %
=
áá& '
	ParseView
áá( 1
(
áá1 2
lstModel
áá2 :
)
áá: ;
;
áá; <
result
àà 
.
àà 
Items
àà  
=
àà! "
lstViewResult
àà# 0
;
àà0 1
return
ää 
result
ää !
;
ää! "
}
ãã 
catch
åå 
(
åå 
	Exception
åå  
ex
åå! #
)
åå# $
{
çç 
LogErrorMessage
éé #
(
éé# $
ex
éé$ &
)
éé& '
;
éé' (
return
èè 
null
èè 
;
èè  
}
êê 
}
ëë 
}
íí 	
public
úú 
virtual
úú 
PaginationModel
úú &
<
úú& '
TView
úú' ,
>
úú, -
GetModelList
úú. :
(
úú: ;

Expression
ùù 
<
ùù 
Func
ùù 
<
ùù 
TModel
ùù "
,
ùù" #
DateTime
ùù$ ,
>
ùù, -
>
ùù- .
orderBy
ùù/ 6
,
ùù6 7
string
ùù8 >
	direction
ùù? H
,
ùùH I
int
ùùJ M
?
ùùM N
	pageIndex
ùùO X
,
ùùX Y
int
ùùZ ]
?
ùù] ^
pageSize
ùù_ g
)
ùùg h
{
ûû 	
using
üü 
(
üü 
TContext
üü 
context
üü #
=
üü$ %
InitContext
üü& 1
(
üü1 2
)
üü2 3
)
üü3 4
{
†† 
try
°° 
{
¢¢ 
List
££ 
<
££ 
TModel
££ 
>
££  
lstModel
££! )
=
££* +
new
££, /
List
££0 4
<
££4 5
TModel
££5 ;
>
££; <
(
££< =
)
££= >
;
££> ?
var
§§ 
query
§§ 
=
§§ 
context
§§  '
.
§§' (
Set
§§( +
<
§§+ ,
TModel
§§, 2
>
§§2 3
(
§§3 4
)
§§4 5
;
§§5 6
PaginationModel
¶¶ #
<
¶¶# $
TView
¶¶$ )
>
¶¶) *
result
¶¶+ 1
=
¶¶2 3
new
¶¶4 7
PaginationModel
¶¶8 G
<
¶¶G H
TView
¶¶H M
>
¶¶M N
(
¶¶N O
)
¶¶O P
{
ßß 

TotalItems
®® "
=
®®# $
query
®®% *
.
®®* +
Count
®®+ 0
(
®®0 1
)
®®1 2
,
®®2 3
	PageIndex
©© !
=
©©" #
	pageIndex
©©$ -
??
©©. 0
$num
©©1 2
}
™™ 
;
™™ 
result
´´ 
.
´´ 
PageSize
´´ #
=
´´$ %
pageSize
´´& .
??
´´/ 1
result
´´2 8
.
´´8 9

TotalItems
´´9 C
;
´´C D
if
≠≠ 
(
≠≠ 
pageSize
≠≠  
.
≠≠  !
HasValue
≠≠! )
)
≠≠) *
{
ÆÆ 
result
ØØ 
.
ØØ 
	TotalPage
ØØ (
=
ØØ) *
(
ØØ+ ,
result
ØØ, 2
.
ØØ2 3

TotalItems
ØØ3 =
/
ØØ> ?
pageSize
ØØ@ H
.
ØØH I
Value
ØØI N
)
ØØN O
+
ØØP Q
(
ØØR S
result
ØØS Y
.
ØØY Z

TotalItems
ØØZ d
%
ØØe f
pageSize
ØØg o
.
ØØo p
Value
ØØp u
>
ØØv w
$num
ØØx y
?
ØØz {
$num
ØØ| }
:
ØØ~ 
$numØØÄ Å
)ØØÅ Ç
;ØØÇ É
}
∞∞ 
switch
≤≤ 
(
≤≤ 
	direction
≤≤ %
)
≤≤% &
{
≥≥ 
case
¥¥ 
$str
¥¥ #
:
¥¥# $
if
µµ 
(
µµ  
pageSize
µµ  (
.
µµ( )
HasValue
µµ) 1
)
µµ1 2
{
∂∂ 
lstModel
∑∑  (
=
∑∑) *
query
∑∑+ 0
.
∏∏$ %
OrderByDescending
∏∏% 6
(
∏∏6 7
orderBy
∏∏7 >
)
∏∏> ?
.
ππ$ %
Skip
ππ% )
(
ππ) *
	pageIndex
ππ* 3
.
ππ3 4
Value
ππ4 9
*
ππ: ;
pageSize
ππ< D
.
ππD E
Value
ππE J
)
ππJ K
.
∫∫$ %
Take
∫∫% )
(
∫∫) *
pageSize
∫∫* 2
.
∫∫2 3
Value
∫∫3 8
)
∫∫8 9
.
ªª$ %
ToList
ªª% +
(
ªª+ ,
)
ªª, -
;
ªª- .
}
ºº 
else
ΩΩ  
{
ææ 
lstModel
øø  (
=
øø) *
query
øø+ 0
.
¿¿$ %
OrderByDescending
¿¿% 6
(
¿¿6 7
orderBy
¿¿7 >
)
¿¿> ?
.
¡¡$ %
ToList
¡¡% +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
}
¬¬ 
break
√√ !
;
√√! "
default
≈≈ 
:
≈≈  
if
∆∆ 
(
∆∆  
pageSize
∆∆  (
.
∆∆( )
HasValue
∆∆) 1
)
∆∆1 2
{
«« 
lstModel
»»  (
=
»») *
query
»»+ 0
.
……$ %
OrderBy
……% ,
(
……, -
orderBy
……- 4
)
……4 5
.
  $ %
Skip
  % )
(
  ) *
	pageIndex
  * 3
.
  3 4
Value
  4 9
*
  : ;
pageSize
  < D
.
  D E
Value
  E J
)
  J K
.
ÀÀ$ %
Take
ÀÀ% )
(
ÀÀ) *
pageSize
ÀÀ* 2
.
ÀÀ2 3
Value
ÀÀ3 8
)
ÀÀ8 9
.
ÀÀ9 :
ToList
ÀÀ: @
(
ÀÀ@ A
)
ÀÀA B
;
ÀÀB C
}
ÃÃ 
else
ÕÕ  
{
ŒŒ 
lstModel
œœ  (
=
œœ) *
query
œœ+ 0
.
––$ %
OrderBy
––% ,
(
––, -
orderBy
––- 4
)
––4 5
.
——$ %
ToList
——% +
(
——+ ,
)
——, -
;
——- .
}
““ 
break
”” !
;
””! "
}
‘‘ 
lstModel
÷÷ 
.
÷÷ 
ForEach
÷÷ $
(
÷÷$ %
model
÷÷% *
=>
÷÷+ -
context
÷÷. 5
.
÷÷5 6
Entry
÷÷6 ;
(
÷÷; <
model
÷÷< A
)
÷÷A B
.
÷÷B C
State
÷÷C H
=
÷÷I J
EntityState
÷÷K V
.
÷÷V W
Detached
÷÷W _
)
÷÷_ `
;
÷÷` a
var
ÿÿ 
lstViewResult
ÿÿ %
=
ÿÿ& '
	ParseView
ÿÿ( 1
(
ÿÿ1 2
lstModel
ÿÿ2 :
)
ÿÿ: ;
;
ÿÿ; <
result
⁄⁄ 
.
⁄⁄ 
Items
⁄⁄  
=
⁄⁄! "
lstViewResult
⁄⁄# 0
;
⁄⁄0 1
return
€€ 
result
€€ !
;
€€! "
}
‹‹ 
catch
›› 
(
›› 
	Exception
››  
ex
››! #
)
››# $
{
ﬁﬁ 
LogErrorMessage
ﬂﬂ #
(
ﬂﬂ# $
ex
ﬂﬂ$ &
)
ﬂﬂ& '
;
ﬂﬂ' (
return
‡‡ 
null
‡‡ 
;
‡‡  
}
·· 
}
‚‚ 
}
„„ 	
public
ÌÌ 
virtual
ÌÌ 
async
ÌÌ 
Task
ÌÌ !
<
ÌÌ! "
PaginationModel
ÌÌ" 1
<
ÌÌ1 2
TView
ÌÌ2 7
>
ÌÌ7 8
>
ÌÌ8 9
GetModelListAsync
ÌÌ: K
(
ÌÌK L

Expression
ÓÓ 
<
ÓÓ 
Func
ÓÓ 
<
ÓÓ 
TModel
ÓÓ "
,
ÓÓ" #
string
ÓÓ$ *
>
ÓÓ* +
>
ÓÓ+ ,
orderBy
ÓÓ- 4
,
ÓÓ4 5
string
ÓÓ6 <
	direction
ÓÓ= F
,
ÓÓF G
int
ÓÓH K
?
ÓÓK L
	pageIndex
ÓÓM V
,
ÓÓV W
int
ÓÓX [
?
ÓÓ[ \
pageSize
ÓÓ] e
)
ÓÓe f
{
ÔÔ 	
using
 
(
 
TContext
 
context
 #
=
$ %
InitContext
& 1
(
1 2
)
2 3
)
3 4
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 
List
ÙÙ 
<
ÙÙ 
TModel
ÙÙ 
>
ÙÙ  
lstModel
ÙÙ! )
=
ÙÙ* +
new
ÙÙ, /
List
ÙÙ0 4
<
ÙÙ4 5
TModel
ÙÙ5 ;
>
ÙÙ; <
(
ÙÙ< =
)
ÙÙ= >
;
ÙÙ> ?
var
ıı 
query
ıı 
=
ıı 
context
ıı  '
.
ıı' (
Set
ıı( +
<
ıı+ ,
TModel
ıı, 2
>
ıı2 3
(
ıı3 4
)
ıı4 5
;
ıı5 6
PaginationModel
˜˜ #
<
˜˜# $
TView
˜˜$ )
>
˜˜) *
result
˜˜+ 1
=
˜˜2 3
new
˜˜4 7
PaginationModel
˜˜8 G
<
˜˜G H
TView
˜˜H M
>
˜˜M N
(
˜˜N O
)
˜˜O P
{
¯¯ 

TotalItems
˘˘ "
=
˘˘# $
query
˘˘% *
.
˘˘* +
Count
˘˘+ 0
(
˘˘0 1
)
˘˘1 2
,
˘˘2 3
	PageIndex
˙˙ !
=
˙˙" #
	pageIndex
˙˙$ -
??
˙˙. 0
$num
˙˙1 2
}
˚˚ 
;
˚˚ 
result
¸¸ 
.
¸¸ 
PageSize
¸¸ #
=
¸¸$ %
pageSize
¸¸& .
??
¸¸/ 1
result
¸¸2 8
.
¸¸8 9

TotalItems
¸¸9 C
;
¸¸C D
if
˛˛ 
(
˛˛ 
pageSize
˛˛  
.
˛˛  !
HasValue
˛˛! )
)
˛˛) *
{
ˇˇ 
result
ÄÄ 
.
ÄÄ 
	TotalPage
ÄÄ (
=
ÄÄ) *
(
ÄÄ+ ,
result
ÄÄ, 2
.
ÄÄ2 3

TotalItems
ÄÄ3 =
/
ÄÄ> ?
pageSize
ÄÄ@ H
.
ÄÄH I
Value
ÄÄI N
)
ÄÄN O
+
ÄÄP Q
(
ÄÄR S
result
ÄÄS Y
.
ÄÄY Z

TotalItems
ÄÄZ d
%
ÄÄe f
pageSize
ÄÄg o
.
ÄÄo p
Value
ÄÄp u
>
ÄÄv w
$num
ÄÄx y
?
ÄÄz {
$num
ÄÄ| }
:
ÄÄ~ 
$numÄÄÄ Å
)ÄÄÅ Ç
;ÄÄÇ É
}
ÅÅ 
switch
ÉÉ 
(
ÉÉ 
	direction
ÉÉ %
)
ÉÉ% &
{
ÑÑ 
case
ÖÖ 
$str
ÖÖ #
:
ÖÖ# $
if
ÜÜ 
(
ÜÜ  
pageSize
ÜÜ  (
.
ÜÜ( )
HasValue
ÜÜ) 1
)
ÜÜ1 2
{
áá 
lstModel
àà  (
=
àà) *
await
àà+ 0
query
àà1 6
.
ââ$ %
OrderByDescending
ââ% 6
(
ââ6 7
orderBy
ââ7 >
)
ââ> ?
.
ää$ %
Skip
ää% )
(
ää) *
	pageIndex
ää* 3
.
ää3 4
Value
ää4 9
*
ää: ;
pageSize
ää< D
.
ääD E
Value
ääE J
)
ääJ K
.
ãã$ %
Take
ãã% )
(
ãã) *
pageSize
ãã* 2
.
ãã2 3
Value
ãã3 8
)
ãã8 9
.
åå$ %
ToListAsync
åå% 0
(
åå0 1
)
åå1 2
.
åå2 3
ConfigureAwait
åå3 A
(
ååA B
false
ååB G
)
ååG H
;
ååH I
}
çç 
else
éé  
{
èè 
lstModel
êê  (
=
êê) *
await
êê+ 0
query
êê1 6
.
ëë$ %
OrderByDescending
ëë% 6
(
ëë6 7
orderBy
ëë7 >
)
ëë> ?
.
íí$ %
ToListAsync
íí% 0
(
íí0 1
)
íí1 2
.
íí2 3
ConfigureAwait
íí3 A
(
ííA B
false
ííB G
)
ííG H
;
ííH I
}
ìì 
break
îî !
;
îî! "
default
ññ 
:
ññ  
if
óó 
(
óó  
pageSize
óó  (
.
óó( )
HasValue
óó) 1
)
óó1 2
{
òò 
lstModel
ôô  (
=
ôô) *
await
ôô+ 0
query
ôô1 6
.
ôô6 7
OrderBy
ôô7 >
(
ôô> ?
orderBy
ôô? F
)
ôôF G
.
öö$ %
Skip
öö% )
(
öö) *
	pageIndex
öö* 3
.
öö3 4
Value
öö4 9
*
öö: ;
pageSize
öö< D
.
ööD E
Value
ööE J
)
ööJ K
.
õõ$ %
Take
õõ% )
(
õõ) *
pageSize
õõ* 2
.
õõ2 3
Value
õõ3 8
)
õõ8 9
.
õõ9 :
ToListAsync
õõ: E
(
õõE F
)
õõF G
.
õõG H
ConfigureAwait
õõH V
(
õõV W
false
õõW \
)
õõ\ ]
;
õõ] ^
}
úú 
else
ùù  
{
ûû 
lstModel
üü  (
=
üü) *
await
üü+ 0
query
üü1 6
.
üü6 7
OrderBy
üü7 >
(
üü> ?
orderBy
üü? F
)
üüF G
.
††$ %
ToListAsync
††% 0
(
††0 1
)
††1 2
.
††2 3
ConfigureAwait
††3 A
(
††A B
false
††B G
)
††G H
;
††H I
}
°° 
break
¢¢ !
;
¢¢! "
}
££ 
lstModel
•• 
.
•• 
ForEach
•• $
(
••$ %
model
••% *
=>
••+ -
context
••. 5
.
••5 6
Entry
••6 ;
(
••; <
model
••< A
)
••A B
.
••B C
State
••C H
=
••I J
EntityState
••K V
.
••V W
Detached
••W _
)
••_ `
;
••` a
var
ßß 
lstViewResult
ßß %
=
ßß& '
	ParseView
ßß( 1
(
ßß1 2
lstModel
ßß2 :
)
ßß: ;
;
ßß; <
result
©© 
.
©© 
Items
©©  
=
©©! "
lstViewResult
©©# 0
;
©©0 1
return
´´ 
result
´´ !
;
´´! "
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠  
ex
≠≠! #
)
≠≠# $
{
ÆÆ 
LogErrorMessage
ØØ #
(
ØØ# $
ex
ØØ$ &
)
ØØ& '
;
ØØ' (
return
∞∞ 
null
∞∞ 
;
∞∞  
}
±± 
}
≤≤ 
}
≥≥ 	
public
ππ 
virtual
ππ 
async
ππ 
Task
ππ !
<
ππ! "
List
ππ" &
<
ππ& '
TView
ππ' ,
>
ππ, -
>
ππ- .
GetModelListAsync
ππ/ @
(
ππ@ A
)
ππA B
{
∫∫ 	
using
ªª 
(
ªª 
TContext
ªª 
context
ªª #
=
ªª$ %
InitContext
ªª& 1
(
ªª1 2
)
ªª2 3
)
ªª3 4
{
ºº 
try
ΩΩ 
{
ææ 
var
øø 
lstModel
øø  
=
øø! "
await
øø# (
context
øø) 0
.
øø0 1
Set
øø1 4
<
øø4 5
TModel
øø5 ;
>
øø; <
(
øø< =
)
øø= >
.
øø> ?
ToListAsync
øø? J
(
øøJ K
)
øøK L
.
øøL M
ConfigureAwait
øøM [
(
øø[ \
false
øø\ a
)
øøa b
;
øøb c
lstModel
¿¿ 
.
¿¿ 
ForEach
¿¿ $
(
¿¿$ %
model
¿¿% *
=>
¿¿+ -
context
¿¿. 5
.
¿¿5 6
Entry
¿¿6 ;
(
¿¿; <
model
¿¿< A
)
¿¿A B
.
¿¿B C
State
¿¿C H
=
¿¿I J
EntityState
¿¿K V
.
¿¿V W
Detached
¿¿W _
)
¿¿_ `
;
¿¿` a
var
¡¡ 
lstViewResult
¡¡ %
=
¡¡& '
	ParseView
¡¡( 1
(
¡¡1 2
lstModel
¡¡2 :
)
¡¡: ;
;
¡¡; <
return
√√ 
lstViewResult
√√ (
;
√√( )
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
	Exception
≈≈  
ex
≈≈! #
)
≈≈# $
{
∆∆ 
LogErrorMessage
«« #
(
««# $
ex
««$ &
)
««& '
;
««' (
return
»» 
null
»» 
;
»»  
}
…… 
}
   
}
ÀÀ 	
public
’’ 
virtual
’’ 
async
’’ 
Task
’’ !
<
’’! "
PaginationModel
’’" 1
<
’’1 2
TView
’’2 7
>
’’7 8
>
’’8 9
GetModelListAsync
’’: K
(
’’K L

Expression
÷÷ 
<
÷÷ 
Func
÷÷ 
<
÷÷ 
TModel
÷÷ "
,
÷÷" #
DateTime
÷÷$ ,
>
÷÷, -
>
÷÷- .
orderBy
÷÷/ 6
,
÷÷6 7
string
÷÷8 >
	direction
÷÷? H
,
÷÷H I
int
÷÷J M
?
÷÷M N
	pageIndex
÷÷O X
,
÷÷X Y
int
÷÷Z ]
?
÷÷] ^
pageSize
÷÷_ g
)
÷÷g h
{
◊◊ 	
using
ÿÿ 
(
ÿÿ 
TContext
ÿÿ 
context
ÿÿ #
=
ÿÿ$ %
InitContext
ÿÿ& 1
(
ÿÿ1 2
)
ÿÿ2 3
)
ÿÿ3 4
{
ŸŸ 
try
⁄⁄ 
{
€€ 
List
‹‹ 
<
‹‹ 
TModel
‹‹ 
>
‹‹  
lstModel
‹‹! )
=
‹‹* +
new
‹‹, /
List
‹‹0 4
<
‹‹4 5
TModel
‹‹5 ;
>
‹‹; <
(
‹‹< =
)
‹‹= >
;
‹‹> ?
var
›› 
query
›› 
=
›› 
context
››  '
.
››' (
Set
››( +
<
››+ ,
TModel
››, 2
>
››2 3
(
››3 4
)
››4 5
;
››5 6
PaginationModel
ﬂﬂ #
<
ﬂﬂ# $
TView
ﬂﬂ$ )
>
ﬂﬂ) *
result
ﬂﬂ+ 1
=
ﬂﬂ2 3
new
ﬂﬂ4 7
PaginationModel
ﬂﬂ8 G
<
ﬂﬂG H
TView
ﬂﬂH M
>
ﬂﬂM N
(
ﬂﬂN O
)
ﬂﬂO P
{
‡‡ 

TotalItems
·· "
=
··# $
query
··% *
.
··* +
Count
··+ 0
(
··0 1
)
··1 2
,
··2 3
	PageIndex
‚‚ !
=
‚‚" #
	pageIndex
‚‚$ -
??
‚‚. 0
$num
‚‚1 2
}
„„ 
;
„„ 
result
‰‰ 
.
‰‰ 
PageSize
‰‰ #
=
‰‰$ %
pageSize
‰‰& .
??
‰‰/ 1
result
‰‰2 8
.
‰‰8 9

TotalItems
‰‰9 C
;
‰‰C D
if
ÊÊ 
(
ÊÊ 
pageSize
ÊÊ  
.
ÊÊ  !
HasValue
ÊÊ! )
)
ÊÊ) *
{
ÁÁ 
result
ËË 
.
ËË 
	TotalPage
ËË (
=
ËË) *
(
ËË+ ,
result
ËË, 2
.
ËË2 3

TotalItems
ËË3 =
/
ËË> ?
pageSize
ËË@ H
.
ËËH I
Value
ËËI N
)
ËËN O
+
ËËP Q
(
ËËR S
result
ËËS Y
.
ËËY Z

TotalItems
ËËZ d
%
ËËe f
pageSize
ËËg o
.
ËËo p
Value
ËËp u
>
ËËv w
$num
ËËx y
?
ËËz {
$num
ËË| }
:
ËË~ 
$numËËÄ Å
)ËËÅ Ç
;ËËÇ É
}
ÈÈ 
switch
ÎÎ 
(
ÎÎ 
	direction
ÎÎ %
)
ÎÎ% &
{
ÏÏ 
case
ÌÌ 
$str
ÌÌ #
:
ÌÌ# $
if
ÓÓ 
(
ÓÓ  
pageSize
ÓÓ  (
.
ÓÓ( )
HasValue
ÓÓ) 1
)
ÓÓ1 2
{
ÔÔ 
lstModel
  (
=
) *
await
+ 0
query
1 6
.
ÒÒ$ %
OrderByDescending
ÒÒ% 6
(
ÒÒ6 7
orderBy
ÒÒ7 >
)
ÒÒ> ?
.
ÚÚ$ %
Skip
ÚÚ% )
(
ÚÚ) *
	pageIndex
ÚÚ* 3
.
ÚÚ3 4
Value
ÚÚ4 9
*
ÚÚ: ;
pageSize
ÚÚ< D
.
ÚÚD E
Value
ÚÚE J
)
ÚÚJ K
.
ÛÛ$ %
Take
ÛÛ% )
(
ÛÛ) *
pageSize
ÛÛ* 2
.
ÛÛ2 3
Value
ÛÛ3 8
)
ÛÛ8 9
.
ÙÙ$ %
ToListAsync
ÙÙ% 0
(
ÙÙ0 1
)
ÙÙ1 2
.
ÙÙ2 3
ConfigureAwait
ÙÙ3 A
(
ÙÙA B
false
ÙÙB G
)
ÙÙG H
;
ÙÙH I
}
ıı 
else
ˆˆ  
{
˜˜ 
lstModel
¯¯  (
=
¯¯) *
await
¯¯+ 0
query
¯¯1 6
.
˘˘$ %
OrderByDescending
˘˘% 6
(
˘˘6 7
orderBy
˘˘7 >
)
˘˘> ?
.
˙˙$ %
ToListAsync
˙˙% 0
(
˙˙0 1
)
˙˙1 2
.
˙˙2 3
ConfigureAwait
˙˙3 A
(
˙˙A B
false
˙˙B G
)
˙˙G H
;
˙˙H I
}
˚˚ 
break
¸¸ !
;
¸¸! "
default
˛˛ 
:
˛˛  
if
ˇˇ 
(
ˇˇ  
pageSize
ˇˇ  (
.
ˇˇ( )
HasValue
ˇˇ) 1
)
ˇˇ1 2
{
ÄÄ 
lstModel
ÅÅ  (
=
ÅÅ) *
await
ÅÅ+ 0
query
ÅÅ1 6
.
ÇÇ$ %
OrderBy
ÇÇ% ,
(
ÇÇ, -
orderBy
ÇÇ- 4
)
ÇÇ4 5
.
ÉÉ$ %
Skip
ÉÉ% )
(
ÉÉ) *
	pageIndex
ÉÉ* 3
.
ÉÉ3 4
Value
ÉÉ4 9
*
ÉÉ: ;
pageSize
ÉÉ< D
.
ÉÉD E
Value
ÉÉE J
)
ÉÉJ K
.
ÑÑ$ %
Take
ÑÑ% )
(
ÑÑ) *
pageSize
ÑÑ* 2
.
ÑÑ2 3
Value
ÑÑ3 8
)
ÑÑ8 9
.
ÖÖ$ %
ToListAsync
ÖÖ% 0
(
ÖÖ0 1
)
ÖÖ1 2
.
ÖÖ2 3
ConfigureAwait
ÖÖ3 A
(
ÖÖA B
false
ÖÖB G
)
ÖÖG H
;
ÖÖH I
}
ÜÜ 
else
áá  
{
àà 
lstModel
ââ  (
=
ââ) *
await
ââ+ 0
query
ââ1 6
.
ää$ %
OrderBy
ää% ,
(
ää, -
orderBy
ää- 4
)
ää4 5
.
ãã$ %
ToListAsync
ãã% 0
(
ãã0 1
)
ãã1 2
.
ãã2 3
ConfigureAwait
ãã3 A
(
ããA B
false
ããB G
)
ããG H
;
ããH I
}
åå 
break
çç !
;
çç! "
}
éé 
lstModel
èè 
.
èè 
ForEach
èè $
(
èè$ %
model
èè% *
=>
èè+ -
context
èè. 5
.
èè5 6
Entry
èè6 ;
(
èè; <
model
èè< A
)
èèA B
.
èèB C
State
èèC H
=
èèI J
EntityState
èèK V
.
èèV W
Detached
èèW _
)
èè_ `
;
èè` a
var
êê 
lstViewResult
êê %
=
êê& '
	ParseView
êê( 1
(
êê1 2
lstModel
êê2 :
)
êê: ;
;
êê; <
result
ëë 
.
ëë 
Items
ëë  
=
ëë! "
lstViewResult
ëë# 0
;
ëë0 1
return
ìì 
result
ìì !
;
ìì! "
}
îî 
catch
ïï 
(
ïï 
	Exception
ïï  
ex
ïï! #
)
ïï# $
{
ññ 
LogErrorMessage
óó #
(
óó# $
ex
óó$ &
)
óó& '
;
óó' (
return
òò 
null
òò 
;
òò  
}
ôô 
}
öö 
}
õõ 	
public
•• 
virtual
•• 
async
•• 
Task
•• !
<
••! "
PaginationModel
••" 1
<
••1 2
TView
••2 7
>
••7 8
>
••8 9
GetModelListAsync
••: K
(
••K L

Expression
¶¶ 
<
¶¶ 
Func
¶¶ 
<
¶¶ 
TModel
¶¶ "
,
¶¶" #
int
¶¶$ '
>
¶¶' (
>
¶¶( )
orderBy
¶¶* 1
,
¶¶1 2
string
¶¶3 9
	direction
¶¶: C
,
¶¶C D
int
¶¶E H
?
¶¶H I
	pageIndex
¶¶J S
,
¶¶S T
int
¶¶U X
?
¶¶X Y
pageSize
¶¶Z b
)
¶¶b c
{
ßß 	
using
®® 
(
®® 
TContext
®® 
context
®® #
=
®®$ %
InitContext
®®& 1
(
®®1 2
)
®®2 3
)
®®3 4
{
©© 
try
™™ 
{
´´ 
List
¨¨ 
<
¨¨ 
TModel
¨¨ 
>
¨¨  
lstModel
¨¨! )
=
¨¨* +
new
¨¨, /
List
¨¨0 4
<
¨¨4 5
TModel
¨¨5 ;
>
¨¨; <
(
¨¨< =
)
¨¨= >
;
¨¨> ?
var
≠≠ 
query
≠≠ 
=
≠≠ 
context
≠≠  '
.
≠≠' (
Set
≠≠( +
<
≠≠+ ,
TModel
≠≠, 2
>
≠≠2 3
(
≠≠3 4
)
≠≠4 5
;
≠≠5 6
PaginationModel
ØØ #
<
ØØ# $
TView
ØØ$ )
>
ØØ) *
result
ØØ+ 1
=
ØØ2 3
new
ØØ4 7
PaginationModel
ØØ8 G
<
ØØG H
TView
ØØH M
>
ØØM N
(
ØØN O
)
ØØO P
{
∞∞ 

TotalItems
±± "
=
±±# $
query
±±% *
.
±±* +
Count
±±+ 0
(
±±0 1
)
±±1 2
,
±±2 3
	PageIndex
≤≤ !
=
≤≤" #
	pageIndex
≤≤$ -
??
≤≤. 0
$num
≤≤1 2
}
≥≥ 
;
≥≥ 
result
¥¥ 
.
¥¥ 
PageSize
¥¥ #
=
¥¥$ %
pageSize
¥¥& .
??
¥¥/ 1
result
¥¥2 8
.
¥¥8 9

TotalItems
¥¥9 C
;
¥¥C D
if
∂∂ 
(
∂∂ 
pageSize
∂∂  
.
∂∂  !
HasValue
∂∂! )
)
∂∂) *
{
∑∑ 
result
∏∏ 
.
∏∏ 
	TotalPage
∏∏ (
=
∏∏) *
(
∏∏+ ,
result
∏∏, 2
.
∏∏2 3

TotalItems
∏∏3 =
/
∏∏> ?
pageSize
∏∏@ H
.
∏∏H I
Value
∏∏I N
)
∏∏N O
+
∏∏P Q
(
∏∏R S
result
∏∏S Y
.
∏∏Y Z

TotalItems
∏∏Z d
%
∏∏e f
pageSize
∏∏g o
.
∏∏o p
Value
∏∏p u
>
∏∏v w
$num
∏∏x y
?
∏∏z {
$num
∏∏| }
:
∏∏~ 
$num∏∏Ä Å
)∏∏Å Ç
;∏∏Ç É
}
ππ 
switch
ªª 
(
ªª 
	direction
ªª %
)
ªª% &
{
ºº 
case
ΩΩ 
$str
ΩΩ #
:
ΩΩ# $
if
ææ 
(
ææ  
pageSize
ææ  (
.
ææ( )
HasValue
ææ) 1
)
ææ1 2
{
øø 
lstModel
¿¿  (
=
¿¿) *
await
¿¿+ 0
query
¿¿1 6
.
¡¡$ %
OrderByDescending
¡¡% 6
(
¡¡6 7
orderBy
¡¡7 >
)
¡¡> ?
.
¬¬$ %
Skip
¬¬% )
(
¬¬) *
	pageIndex
¬¬* 3
.
¬¬3 4
Value
¬¬4 9
*
¬¬: ;
pageSize
¬¬< D
.
¬¬D E
Value
¬¬E J
)
¬¬J K
.
√√$ %
Take
√√% )
(
√√) *
pageSize
√√* 2
.
√√2 3
Value
√√3 8
)
√√8 9
.
ƒƒ$ %
ToListAsync
ƒƒ% 0
(
ƒƒ0 1
)
ƒƒ1 2
.
ƒƒ2 3
ConfigureAwait
ƒƒ3 A
(
ƒƒA B
false
ƒƒB G
)
ƒƒG H
;
ƒƒH I
}
≈≈ 
else
∆∆  
{
«« 
lstModel
»»  (
=
»») *
await
»»+ 0
query
»»1 6
.
……$ %
OrderByDescending
……% 6
(
……6 7
orderBy
……7 >
)
……> ?
.
  $ %
ToListAsync
  % 0
(
  0 1
)
  1 2
.
  2 3
ConfigureAwait
  3 A
(
  A B
false
  B G
)
  G H
;
  H I
}
ÀÀ 
break
ÃÃ !
;
ÃÃ! "
default
ŒŒ 
:
ŒŒ  
if
œœ 
(
œœ  
pageSize
œœ  (
.
œœ( )
HasValue
œœ) 1
)
œœ1 2
{
–– 
lstModel
——  (
=
——) *
await
——+ 0
query
——1 6
.
““$ %
OrderBy
““% ,
(
““, -
orderBy
““- 4
)
““4 5
.
””$ %
Skip
””% )
(
””) *
	pageIndex
””* 3
.
””3 4
Value
””4 9
*
””: ;
pageSize
””< D
.
””D E
Value
””E J
)
””J K
.
‘‘$ %
Take
‘‘% )
(
‘‘) *
pageSize
‘‘* 2
.
‘‘2 3
Value
‘‘3 8
)
‘‘8 9
.
’’$ %
ToListAsync
’’% 0
(
’’0 1
)
’’1 2
.
’’2 3
ConfigureAwait
’’3 A
(
’’A B
false
’’B G
)
’’G H
;
’’H I
}
÷÷ 
else
◊◊  
{
ÿÿ 
lstModel
ŸŸ  (
=
ŸŸ) *
await
ŸŸ+ 0
query
ŸŸ1 6
.
⁄⁄$ %
OrderBy
⁄⁄% ,
(
⁄⁄, -
orderBy
⁄⁄- 4
)
⁄⁄4 5
.
€€$ %
ToListAsync
€€% 0
(
€€0 1
)
€€1 2
.
€€2 3
ConfigureAwait
€€3 A
(
€€A B
false
€€B G
)
€€G H
;
€€H I
}
‹‹ 
break
›› !
;
››! "
}
ﬁﬁ 
lstModel
‡‡ 
.
‡‡ 
ForEach
‡‡ $
(
‡‡$ %
model
‡‡% *
=>
‡‡+ -
context
‡‡. 5
.
‡‡5 6
Entry
‡‡6 ;
(
‡‡; <
model
‡‡< A
)
‡‡A B
.
‡‡B C
State
‡‡C H
=
‡‡I J
EntityState
‡‡K V
.
‡‡V W
Detached
‡‡W _
)
‡‡_ `
;
‡‡` a
var
‚‚ 
lstViewResult
‚‚ %
=
‚‚& '
	ParseView
‚‚( 1
(
‚‚1 2
lstModel
‚‚2 :
)
‚‚: ;
;
‚‚; <
result
‰‰ 
.
‰‰ 
Items
‰‰  
=
‰‰! "
lstViewResult
‰‰# 0
;
‰‰0 1
return
ÂÂ 
result
ÂÂ !
;
ÂÂ! "
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ 
	Exception
ÁÁ  
ex
ÁÁ! #
)
ÁÁ# $
{
ËË 
LogErrorMessage
ÈÈ #
(
ÈÈ# $
ex
ÈÈ$ &
)
ÈÈ& '
;
ÈÈ' (
return
ÍÍ 
null
ÍÍ 
;
ÍÍ  
}
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
public
ÛÛ 
virtual
ÛÛ 
async
ÛÛ 
Task
ÛÛ !
<
ÛÛ! "
List
ÛÛ" &
<
ÛÛ& '
TView
ÛÛ' ,
>
ÛÛ, -
>
ÛÛ- .#
GetViewModelListAsync
ÛÛ/ D
(
ÛÛD E
)
ÛÛE F
{
ÙÙ 	
using
ıı 
(
ıı 
TContext
ıı 
context
ıı #
=
ıı$ %
InitContext
ıı& 1
(
ıı1 2
)
ıı2 3
)
ıı3 4
{
ˆˆ 
try
˜˜ 
{
¯¯ 
List
˘˘ 
<
˘˘ 
TView
˘˘ 
>
˘˘ 
lstViewResult
˘˘  -
=
˘˘. /
new
˘˘0 3
List
˘˘4 8
<
˘˘8 9
TView
˘˘9 >
>
˘˘> ?
(
˘˘? @
)
˘˘@ A
;
˘˘A B
var
˙˙ 
lstModel
˙˙  
=
˙˙! "
await
˙˙# (
context
˙˙) 0
.
˙˙0 1
Set
˙˙1 4
<
˙˙4 5
TModel
˙˙5 ;
>
˙˙; <
(
˙˙< =
)
˙˙= >
.
˙˙> ?
ToListAsync
˙˙? J
(
˙˙J K
)
˙˙K L
.
˙˙L M
ConfigureAwait
˙˙M [
(
˙˙[ \
false
˙˙\ a
)
˙˙a b
;
˙˙b c
lstModel
˚˚ 
.
˚˚ 
ForEach
˚˚ $
(
˚˚$ %
model
˚˚% *
=>
˚˚+ -
context
˚˚. 5
.
˚˚5 6
Entry
˚˚6 ;
(
˚˚; <
model
˚˚< A
)
˚˚A B
.
˚˚B C
State
˚˚C H
=
˚˚I J
EntityState
˚˚K V
.
˚˚V W
Detached
˚˚W _
)
˚˚_ `
;
˚˚` a
return
¸¸ 
	ParseView
¸¸ $
(
¸¸$ %
lstModel
¸¸% -
)
¸¸- .
;
¸¸. /
}
˝˝ 
catch
˛˛ 
(
˛˛ 
	Exception
˛˛  
ex
˛˛! #
)
˛˛# $
{
ˇˇ 
LogErrorMessage
ÄÄ #
(
ÄÄ# $
ex
ÄÄ$ &
)
ÄÄ& '
;
ÄÄ' (
return
ÅÅ 
null
ÅÅ 
;
ÅÅ  
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
èè 
virtual
èè 
List
èè 
<
èè 
TView
èè !
>
èè! "
GetModelListBy
èè# 1
(
èè1 2

Expression
èè2 <
<
èè< =
Func
èè= A
<
èèA B
TModel
èèB H
,
èèH I
bool
èèJ N
>
èèN O
>
èèO P
	predicate
èèQ Z
)
èèZ [
{
êê 	
using
ëë 
(
ëë 
TContext
ëë 
context
ëë #
=
ëë$ %
InitContext
ëë& 1
(
ëë1 2
)
ëë2 3
)
ëë3 4
{
íí 
try
ìì 
{
îî 
var
ïï 
lstModel
ïï  
=
ïï! "
context
ïï# *
.
ïï* +
Set
ïï+ .
<
ïï. /
TModel
ïï/ 5
>
ïï5 6
(
ïï6 7
)
ïï7 8
.
ïï8 9
Where
ïï9 >
(
ïï> ?
	predicate
ïï? H
)
ïïH I
.
ïïI J
ToList
ïïJ P
(
ïïP Q
)
ïïQ R
;
ïïR S
lstModel
ññ 
.
ññ 
ForEach
ññ $
(
ññ$ %
model
ññ% *
=>
ññ+ -
context
ññ. 5
.
ññ5 6
Entry
ññ6 ;
(
ññ; <
model
ññ< A
)
ññA B
.
ññB C
State
ññC H
=
ññI J
EntityState
ññK V
.
ññV W
Detached
ññW _
)
ññ_ `
;
ññ` a
var
óó 
lstViewResult
óó %
=
óó& '
	ParseView
óó( 1
(
óó1 2
lstModel
óó2 :
)
óó: ;
;
óó; <
return
òò 
lstViewResult
òò (
;
òò( )
}
ôô 
catch
öö 
(
öö 
	Exception
öö  
ex
öö! #
)
öö# $
{
õõ 
LogErrorMessage
úú #
(
úú# $
ex
úú$ &
)
úú& '
;
úú' (
return
ùù 
null
ùù 
;
ùù  
}
ûû 
}
üü 
}
†† 	
public
´´ 
virtual
´´ 
PaginationModel
´´ &
<
´´& '
TView
´´' ,
>
´´, -
GetModelListBy
´´. <
(
´´< =

Expression
¨¨ 
<
¨¨ 
Func
¨¨ 
<
¨¨ 
TModel
¨¨ "
,
¨¨" #
bool
¨¨$ (
>
¨¨( )
>
¨¨) *
	predicate
¨¨+ 4
,
¨¨4 5

Expression
¨¨6 @
<
¨¨@ A
Func
¨¨A E
<
¨¨E F
TModel
¨¨F L
,
¨¨L M
string
¨¨N T
>
¨¨T U
>
¨¨U V
orderBy
¨¨W ^
,
¨¨^ _
string
¨¨` f
	direction
¨¨g p
,
¨¨p q
int
¨¨r u
?
¨¨u v
	pageIndex¨¨w Ä
,¨¨Ä Å
int¨¨Ç Ö
?¨¨Ö Ü
pageSize¨¨á è
)¨¨è ê
{
≠≠ 	
using
ÆÆ 
(
ÆÆ 
TContext
ÆÆ 
context
ÆÆ #
=
ÆÆ$ %
InitContext
ÆÆ& 1
(
ÆÆ1 2
)
ÆÆ2 3
)
ÆÆ3 4
{
ØØ 
try
∞∞ 
{
±± 
List
≤≤ 
<
≤≤ 
TModel
≤≤ 
>
≤≤  
lstModel
≤≤! )
=
≤≤* +
new
≤≤, /
List
≤≤0 4
<
≤≤4 5
TModel
≤≤5 ;
>
≤≤; <
(
≤≤< =
)
≤≤= >
;
≤≤> ?
var
≥≥ 
query
≥≥ 
=
≥≥ 
context
≥≥  '
.
≥≥' (
Set
≥≥( +
<
≥≥+ ,
TModel
≥≥, 2
>
≥≥2 3
(
≥≥3 4
)
≥≥4 5
.
≥≥5 6
Where
≥≥6 ;
(
≥≥; <
	predicate
≥≥< E
)
≥≥E F
;
≥≥F G
PaginationModel
µµ #
<
µµ# $
TView
µµ$ )
>
µµ) *
result
µµ+ 1
=
µµ2 3
new
µµ4 7
PaginationModel
µµ8 G
<
µµG H
TView
µµH M
>
µµM N
(
µµN O
)
µµO P
{
∂∂ 

TotalItems
∑∑ "
=
∑∑# $
query
∑∑% *
.
∑∑* +
Count
∑∑+ 0
(
∑∑0 1
)
∑∑1 2
,
∑∑2 3
	PageIndex
∏∏ !
=
∏∏" #
	pageIndex
∏∏$ -
??
∏∏. 0
$num
∏∏1 2
}
ππ 
;
ππ 
result
∫∫ 
.
∫∫ 
PageSize
∫∫ #
=
∫∫$ %
pageSize
∫∫& .
??
∫∫/ 1
result
∫∫2 8
.
∫∫8 9

TotalItems
∫∫9 C
;
∫∫C D
if
ºº 
(
ºº 
pageSize
ºº  
.
ºº  !
HasValue
ºº! )
)
ºº) *
{
ΩΩ 
result
ææ 
.
ææ 
	TotalPage
ææ (
=
ææ) *
(
ææ+ ,
result
ææ, 2
.
ææ2 3

TotalItems
ææ3 =
/
ææ> ?
pageSize
ææ@ H
.
ææH I
Value
ææI N
)
ææN O
+
ææP Q
(
ææR S
result
ææS Y
.
ææY Z

TotalItems
ææZ d
%
ææe f
pageSize
ææg o
.
ææo p
Value
ææp u
>
ææv w
$num
ææx y
?
ææz {
$num
ææ| }
:
ææ~ 
$numææÄ Å
)ææÅ Ç
;ææÇ É
}
øø 
switch
¡¡ 
(
¡¡ 
	direction
¡¡ %
)
¡¡% &
{
¬¬ 
case
√√ 
$str
√√ #
:
√√# $
if
ƒƒ 
(
ƒƒ  
pageSize
ƒƒ  (
.
ƒƒ( )
HasValue
ƒƒ) 1
)
ƒƒ1 2
{
≈≈ 
lstModel
∆∆  (
=
∆∆) *
query
∆∆+ 0
.
««$ %
OrderByDescending
««% 6
(
««6 7
orderBy
««7 >
)
««> ?
.
»»$ %
Skip
»»% )
(
»») *
	pageIndex
»»* 3
.
»»3 4
Value
»»4 9
*
»»: ;
pageSize
»»< D
.
»»D E
Value
»»E J
)
»»J K
.
……$ %
Take
……% )
(
……) *
pageSize
……* 2
.
……2 3
Value
……3 8
)
……8 9
.
  $ %
ToList
  % +
(
  + ,
)
  , -
;
  - .
}
ÀÀ 
else
ÃÃ  
{
ÕÕ 
lstModel
ŒŒ  (
=
ŒŒ) *
query
ŒŒ+ 0
.
œœ$ %
OrderByDescending
œœ% 6
(
œœ6 7
orderBy
œœ7 >
)
œœ> ?
.
––$ %
ToList
––% +
(
––+ ,
)
––, -
;
––- .
}
—— 
break
““ !
;
““! "
default
‘‘ 
:
‘‘  
if
’’ 
(
’’  
pageSize
’’  (
.
’’( )
HasValue
’’) 1
)
’’1 2
{
÷÷ 
lstModel
◊◊  (
=
◊◊) *
query
◊◊+ 0
.
ÿÿ$ %
OrderBy
ÿÿ% ,
(
ÿÿ, -
orderBy
ÿÿ- 4
)
ÿÿ4 5
.
ŸŸ$ %
Skip
ŸŸ% )
(
ŸŸ) *
	pageIndex
ŸŸ* 3
.
ŸŸ3 4
Value
ŸŸ4 9
*
ŸŸ: ;
pageSize
ŸŸ< D
.
ŸŸD E
Value
ŸŸE J
)
ŸŸJ K
.
⁄⁄$ %
Take
⁄⁄% )
(
⁄⁄) *
pageSize
⁄⁄* 2
.
⁄⁄2 3
Value
⁄⁄3 8
)
⁄⁄8 9
.
€€$ %
ToList
€€% +
(
€€+ ,
)
€€, -
;
€€- .
}
‹‹ 
else
››  
{
ﬁﬁ 
lstModel
ﬂﬂ  (
=
ﬂﬂ) *
query
ﬂﬂ+ 0
.
‡‡$ %
OrderBy
‡‡% ,
(
‡‡, -
orderBy
‡‡- 4
)
‡‡4 5
.
··$ %
ToList
··% +
(
··+ ,
)
··, -
;
··- .
}
‚‚ 
break
„„ !
;
„„! "
}
‰‰ 
lstModel
ÊÊ 
.
ÊÊ 
ForEach
ÊÊ $
(
ÊÊ$ %
model
ÊÊ% *
=>
ÊÊ+ -
context
ÊÊ. 5
.
ÊÊ5 6
Entry
ÊÊ6 ;
(
ÊÊ; <
model
ÊÊ< A
)
ÊÊA B
.
ÊÊB C
State
ÊÊC H
=
ÊÊI J
EntityState
ÊÊK V
.
ÊÊV W
Detached
ÊÊW _
)
ÊÊ_ `
;
ÊÊ` a
var
ÁÁ 
lstViewResult
ÁÁ %
=
ÁÁ& '
	ParseView
ÁÁ( 1
(
ÁÁ1 2
lstModel
ÁÁ2 :
)
ÁÁ: ;
;
ÁÁ; <
result
ËË 
.
ËË 
Items
ËË  
=
ËË! "
lstViewResult
ËË# 0
;
ËË0 1
return
ÈÈ 
result
ÈÈ !
;
ÈÈ! "
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ  
ex
ÎÎ! #
)
ÎÎ# $
{
ÏÏ 
LogErrorMessage
ÌÌ #
(
ÌÌ# $
ex
ÌÌ$ &
)
ÌÌ& '
;
ÌÌ' (
return
ÓÓ 
null
ÓÓ 
;
ÓÓ  
}
ÔÔ 
}
 
}
ÒÒ 	
public
¸¸ 
virtual
¸¸ 
PaginationModel
¸¸ &
<
¸¸& '
TView
¸¸' ,
>
¸¸, -
GetModelListBy
¸¸. <
(
¸¸< =

Expression
˝˝ 
<
˝˝ 
Func
˝˝ 
<
˝˝ 
TModel
˝˝ "
,
˝˝" #
bool
˝˝$ (
>
˝˝( )
>
˝˝) *
	predicate
˝˝+ 4
,
˝˝4 5

Expression
˝˝6 @
<
˝˝@ A
Func
˝˝A E
<
˝˝E F
TModel
˝˝F L
,
˝˝L M
int
˝˝N Q
>
˝˝Q R
>
˝˝R S
orderBy
˝˝T [
,
˝˝[ \
string
˝˝] c
	direction
˝˝d m
,
˝˝m n
int
˝˝o r
?
˝˝r s
	pageIndex
˝˝t }
,
˝˝} ~
int˝˝ Ç
?˝˝Ç É
pageSize˝˝Ñ å
)˝˝å ç
{
˛˛ 	
using
ˇˇ 
(
ˇˇ 
TContext
ˇˇ 
context
ˇˇ #
=
ˇˇ$ %
InitContext
ˇˇ& 1
(
ˇˇ1 2
)
ˇˇ2 3
)
ˇˇ3 4
{
Ä	Ä	 
try
Å	Å	 
{
Ç	Ç	 
List
É	É	 
<
É	É	 
TModel
É	É	 
>
É	É	  
lstModel
É	É	! )
=
É	É	* +
new
É	É	, /
List
É	É	0 4
<
É	É	4 5
TModel
É	É	5 ;
>
É	É	; <
(
É	É	< =
)
É	É	= >
;
É	É	> ?
var
Ñ	Ñ	 
query
Ñ	Ñ	 
=
Ñ	Ñ	 
context
Ñ	Ñ	  '
.
Ñ	Ñ	' (
Set
Ñ	Ñ	( +
<
Ñ	Ñ	+ ,
TModel
Ñ	Ñ	, 2
>
Ñ	Ñ	2 3
(
Ñ	Ñ	3 4
)
Ñ	Ñ	4 5
.
Ñ	Ñ	5 6
Where
Ñ	Ñ	6 ;
(
Ñ	Ñ	; <
	predicate
Ñ	Ñ	< E
)
Ñ	Ñ	E F
;
Ñ	Ñ	F G
PaginationModel
Ü	Ü	 #
<
Ü	Ü	# $
TView
Ü	Ü	$ )
>
Ü	Ü	) *
result
Ü	Ü	+ 1
=
Ü	Ü	2 3
new
Ü	Ü	4 7
PaginationModel
Ü	Ü	8 G
<
Ü	Ü	G H
TView
Ü	Ü	H M
>
Ü	Ü	M N
(
Ü	Ü	N O
)
Ü	Ü	O P
{
á	á	 

TotalItems
à	à	 "
=
à	à	# $
query
à	à	% *
.
à	à	* +
Count
à	à	+ 0
(
à	à	0 1
)
à	à	1 2
,
à	à	2 3
	PageIndex
â	â	 !
=
â	â	" #
	pageIndex
â	â	$ -
??
â	â	. 0
$num
â	â	1 2
}
ä	ä	 
;
ä	ä	 
result
ã	ã	 
.
ã	ã	 
PageSize
ã	ã	 #
=
ã	ã	$ %
pageSize
ã	ã	& .
??
ã	ã	/ 1
result
ã	ã	2 8
.
ã	ã	8 9

TotalItems
ã	ã	9 C
;
ã	ã	C D
if
ç	ç	 
(
ç	ç	 
pageSize
ç	ç	  
.
ç	ç	  !
HasValue
ç	ç	! )
)
ç	ç	) *
{
é	é	 
result
è	è	 
.
è	è	 
	TotalPage
è	è	 (
=
è	è	) *
(
è	è	+ ,
result
è	è	, 2
.
è	è	2 3

TotalItems
è	è	3 =
/
è	è	> ?
pageSize
è	è	@ H
.
è	è	H I
Value
è	è	I N
)
è	è	N O
+
è	è	P Q
(
è	è	R S
result
è	è	S Y
.
è	è	Y Z

TotalItems
è	è	Z d
%
è	è	e f
pageSize
è	è	g o
.
è	è	o p
Value
è	è	p u
>
è	è	v w
$num
è	è	x y
?
è	è	z {
$num
è	è	| }
:
è	è	~ 
$numè	è	Ä Å
)è	è	Å Ç
;è	è	Ç É
}
ê	ê	 
switch
ë	ë	 
(
ë	ë	 
	direction
ë	ë	 %
)
ë	ë	% &
{
í	í	 
case
ì	ì	 
$str
ì	ì	 #
:
ì	ì	# $
if
î	î	 
(
î	î	  
pageSize
î	î	  (
.
î	î	( )
HasValue
î	î	) 1
)
î	î	1 2
{
ï	ï	 
lstModel
ñ	ñ	  (
=
ñ	ñ	) *
query
ñ	ñ	+ 0
.
ó	ó	$ %
OrderByDescending
ó	ó	% 6
(
ó	ó	6 7
orderBy
ó	ó	7 >
)
ó	ó	> ?
.
ò	ò	$ %
Skip
ò	ò	% )
(
ò	ò	) *
	pageIndex
ò	ò	* 3
.
ò	ò	3 4
Value
ò	ò	4 9
*
ò	ò	: ;
pageSize
ò	ò	< D
.
ò	ò	D E
Value
ò	ò	E J
)
ò	ò	J K
.
ô	ô	$ %
Take
ô	ô	% )
(
ô	ô	) *
pageSize
ô	ô	* 2
.
ô	ô	2 3
Value
ô	ô	3 8
)
ô	ô	8 9
.
ö	ö	$ %
ToList
ö	ö	% +
(
ö	ö	+ ,
)
ö	ö	, -
;
ö	ö	- .
}
õ	õ	 
else
ú	ú	  
{
ù	ù	 
lstModel
û	û	  (
=
û	û	) *
query
û	û	+ 0
.
ü	ü	$ %
OrderByDescending
ü	ü	% 6
(
ü	ü	6 7
orderBy
ü	ü	7 >
)
ü	ü	> ?
.
†	†	$ %
ToList
†	†	% +
(
†	†	+ ,
)
†	†	, -
;
†	†	- .
}
°	°	 
break
¢	¢	 !
;
¢	¢	! "
default
§	§	 
:
§	§	  
if
•	•	 
(
•	•	  
pageSize
•	•	  (
.
•	•	( )
HasValue
•	•	) 1
)
•	•	1 2
{
¶	¶	 
lstModel
ß	ß	  (
=
ß	ß	) *
query
ß	ß	+ 0
.
®	®	$ %
OrderBy
®	®	% ,
(
®	®	, -
orderBy
®	®	- 4
)
®	®	4 5
.
©	©	$ %
Skip
©	©	% )
(
©	©	) *
	pageIndex
©	©	* 3
.
©	©	3 4
Value
©	©	4 9
*
©	©	: ;
pageSize
©	©	< D
.
©	©	D E
Value
©	©	E J
)
©	©	J K
.
™	™	$ %
Take
™	™	% )
(
™	™	) *
pageSize
™	™	* 2
.
™	™	2 3
Value
™	™	3 8
)
™	™	8 9
.
´	´	$ %
ToList
´	´	% +
(
´	´	+ ,
)
´	´	, -
;
´	´	- .
}
¨	¨	 
else
≠	≠	  
{
Æ	Æ	 
lstModel
Ø	Ø	  (
=
Ø	Ø	) *
query
Ø	Ø	+ 0
.
∞	∞	$ %
OrderBy
∞	∞	% ,
(
∞	∞	, -
orderBy
∞	∞	- 4
)
∞	∞	4 5
.
±	±	$ %
ToList
±	±	% +
(
±	±	+ ,
)
±	±	, -
;
±	±	- .
}
≤	≤	 
break
≥	≥	 !
;
≥	≥	! "
}
¥	¥	 
lstModel
∂	∂	 
.
∂	∂	 
ForEach
∂	∂	 $
(
∂	∂	$ %
model
∂	∂	% *
=>
∂	∂	+ -
context
∂	∂	. 5
.
∂	∂	5 6
Entry
∂	∂	6 ;
(
∂	∂	; <
model
∂	∂	< A
)
∂	∂	A B
.
∂	∂	B C
State
∂	∂	C H
=
∂	∂	I J
EntityState
∂	∂	K V
.
∂	∂	V W
Detached
∂	∂	W _
)
∂	∂	_ `
;
∂	∂	` a
var
∏	∏	 
lstViewResult
∏	∏	 %
=
∏	∏	& '
	ParseView
∏	∏	( 1
(
∏	∏	1 2
lstModel
∏	∏	2 :
)
∏	∏	: ;
;
∏	∏	; <
result
∫	∫	 
.
∫	∫	 
Items
∫	∫	  
=
∫	∫	! "
lstViewResult
∫	∫	# 0
;
∫	∫	0 1
return
ª	ª	 
result
ª	ª	 !
;
ª	ª	! "
}
º	º	 
catch
Ω	Ω	 
(
Ω	Ω	 
	Exception
Ω	Ω	  
ex
Ω	Ω	! #
)
Ω	Ω	# $
{
æ	æ	 
LogErrorMessage
ø	ø	 #
(
ø	ø	# $
ex
ø	ø	$ &
)
ø	ø	& '
;
ø	ø	' (
return
¿	¿	 
null
¿	¿	 
;
¿	¿	  
}
¡	¡	 
}
¬	¬	 
}
√	√	 	
public
Œ	Œ	 
virtual
Œ	Œ	 
PaginationModel
Œ	Œ	 &
<
Œ	Œ	& '
TView
Œ	Œ	' ,
>
Œ	Œ	, -
GetModelListBy
Œ	Œ	. <
(
Œ	Œ	< =

Expression
œ	œ	 
<
œ	œ	 
Func
œ	œ	 
<
œ	œ	 
TModel
œ	œ	 "
,
œ	œ	" #
bool
œ	œ	$ (
>
œ	œ	( )
>
œ	œ	) *
	predicate
œ	œ	+ 4
,
œ	œ	4 5

Expression
œ	œ	6 @
<
œ	œ	@ A
Func
œ	œ	A E
<
œ	œ	E F
TModel
œ	œ	F L
,
œ	œ	L M
DateTime
œ	œ	N V
>
œ	œ	V W
>
œ	œ	W X
orderBy
œ	œ	Y `
,
œ	œ	` a
string
œ	œ	b h
	direction
œ	œ	i r
,
œ	œ	r s
int
œ	œ	t w
?
œ	œ	w x
	pageIndexœ	œ	y Ç
,œ	œ	Ç É
intœ	œ	Ñ á
?œ	œ	á à
pageSizeœ	œ	â ë
)œ	œ	ë í
{
–	–	 	
using
—	—	 
(
—	—	 
TContext
—	—	 
context
—	—	 #
=
—	—	$ %
InitContext
—	—	& 1
(
—	—	1 2
)
—	—	2 3
)
—	—	3 4
{
“	“	 
try
”	”	 
{
‘	‘	 
List
’	’	 
<
’	’	 
TModel
’	’	 
>
’	’	  
lstModel
’	’	! )
=
’	’	* +
new
’	’	, /
List
’	’	0 4
<
’	’	4 5
TModel
’	’	5 ;
>
’	’	; <
(
’	’	< =
)
’	’	= >
;
’	’	> ?
var
÷	÷	 
query
÷	÷	 
=
÷	÷	 
context
÷	÷	  '
.
÷	÷	' (
Set
÷	÷	( +
<
÷	÷	+ ,
TModel
÷	÷	, 2
>
÷	÷	2 3
(
÷	÷	3 4
)
÷	÷	4 5
.
÷	÷	5 6
Where
÷	÷	6 ;
(
÷	÷	; <
	predicate
÷	÷	< E
)
÷	÷	E F
;
÷	÷	F G
PaginationModel
ÿ	ÿ	 #
<
ÿ	ÿ	# $
TView
ÿ	ÿ	$ )
>
ÿ	ÿ	) *
result
ÿ	ÿ	+ 1
=
ÿ	ÿ	2 3
new
ÿ	ÿ	4 7
PaginationModel
ÿ	ÿ	8 G
<
ÿ	ÿ	G H
TView
ÿ	ÿ	H M
>
ÿ	ÿ	M N
(
ÿ	ÿ	N O
)
ÿ	ÿ	O P
{
Ÿ	Ÿ	 

TotalItems
⁄	⁄	 "
=
⁄	⁄	# $
query
⁄	⁄	% *
.
⁄	⁄	* +
Count
⁄	⁄	+ 0
(
⁄	⁄	0 1
)
⁄	⁄	1 2
,
⁄	⁄	2 3
	PageIndex
€	€	 !
=
€	€	" #
	pageIndex
€	€	$ -
??
€	€	. 0
$num
€	€	1 2
}
‹	‹	 
;
‹	‹	 
result
›	›	 
.
›	›	 
PageSize
›	›	 #
=
›	›	$ %
pageSize
›	›	& .
??
›	›	/ 1
result
›	›	2 8
.
›	›	8 9

TotalItems
›	›	9 C
;
›	›	C D
if
ﬂ	ﬂ	 
(
ﬂ	ﬂ	 
pageSize
ﬂ	ﬂ	  
.
ﬂ	ﬂ	  !
HasValue
ﬂ	ﬂ	! )
)
ﬂ	ﬂ	) *
{
‡	‡	 
result
·	·	 
.
·	·	 
	TotalPage
·	·	 (
=
·	·	) *
(
·	·	+ ,
result
·	·	, 2
.
·	·	2 3

TotalItems
·	·	3 =
/
·	·	> ?
pageSize
·	·	@ H
.
·	·	H I
Value
·	·	I N
)
·	·	N O
+
·	·	P Q
(
·	·	R S
result
·	·	S Y
.
·	·	Y Z

TotalItems
·	·	Z d
%
·	·	e f
pageSize
·	·	g o
.
·	·	o p
Value
·	·	p u
>
·	·	v w
$num
·	·	x y
?
·	·	z {
$num
·	·	| }
:
·	·	~ 
$num·	·	Ä Å
)·	·	Å Ç
;·	·	Ç É
}
‚	‚	 
switch
„	„	 
(
„	„	 
	direction
„	„	 %
)
„	„	% &
{
‰	‰	 
case
Â	Â	 
$str
Â	Â	 #
:
Â	Â	# $
if
Ê	Ê	 
(
Ê	Ê	  
pageSize
Ê	Ê	  (
.
Ê	Ê	( )
HasValue
Ê	Ê	) 1
)
Ê	Ê	1 2
{
Á	Á	 
lstModel
Ë	Ë	  (
=
Ë	Ë	) *
query
Ë	Ë	+ 0
.
È	È	$ %
OrderByDescending
È	È	% 6
(
È	È	6 7
orderBy
È	È	7 >
)
È	È	> ?
.
Í	Í	$ %
Skip
Í	Í	% )
(
Í	Í	) *
	pageIndex
Í	Í	* 3
.
Í	Í	3 4
Value
Í	Í	4 9
*
Í	Í	: ;
pageSize
Í	Í	< D
.
Í	Í	D E
Value
Í	Í	E J
)
Í	Í	J K
.
Î	Î	$ %
Take
Î	Î	% )
(
Î	Î	) *
pageSize
Î	Î	* 2
.
Î	Î	2 3
Value
Î	Î	3 8
)
Î	Î	8 9
.
Ï	Ï	$ %
ToList
Ï	Ï	% +
(
Ï	Ï	+ ,
)
Ï	Ï	, -
;
Ï	Ï	- .
}
Ì	Ì	 
else
Ó	Ó	  
{
Ô	Ô	 
lstModel
		  (
=
		) *
query
		+ 0
.
Ò	Ò	$ %
OrderByDescending
Ò	Ò	% 6
(
Ò	Ò	6 7
orderBy
Ò	Ò	7 >
)
Ò	Ò	> ?
.
Ú	Ú	$ %
ToList
Ú	Ú	% +
(
Ú	Ú	+ ,
)
Ú	Ú	, -
;
Ú	Ú	- .
}
Û	Û	 
break
Ù	Ù	 !
;
Ù	Ù	! "
default
ˆ	ˆ	 
:
ˆ	ˆ	  
if
˜	˜	 
(
˜	˜	  
pageSize
˜	˜	  (
.
˜	˜	( )
HasValue
˜	˜	) 1
)
˜	˜	1 2
{
¯	¯	 
lstModel
˘	˘	  (
=
˘	˘	) *
query
˘	˘	+ 0
.
˙	˙	$ %
OrderBy
˙	˙	% ,
(
˙	˙	, -
orderBy
˙	˙	- 4
)
˙	˙	4 5
.
˚	˚	$ %
Skip
˚	˚	% )
(
˚	˚	) *
	pageIndex
˚	˚	* 3
.
˚	˚	3 4
Value
˚	˚	4 9
*
˚	˚	: ;
pageSize
˚	˚	< D
.
˚	˚	D E
Value
˚	˚	E J
)
˚	˚	J K
.
¸	¸	$ %
Take
¸	¸	% )
(
¸	¸	) *
pageSize
¸	¸	* 2
.
¸	¸	2 3
Value
¸	¸	3 8
)
¸	¸	8 9
.
˝	˝	$ %
ToList
˝	˝	% +
(
˝	˝	+ ,
)
˝	˝	, -
;
˝	˝	- .
}
˛	˛	 
else
ˇ	ˇ	  
{
Ä
Ä
 
lstModel
Å
Å
  (
=
Å
Å
) *
query
Å
Å
+ 0
.
Ç
Ç
$ %
OrderBy
Ç
Ç
% ,
(
Ç
Ç
, -
orderBy
Ç
Ç
- 4
)
Ç
Ç
4 5
.
É
É
$ %
ToList
É
É
% +
(
É
É
+ ,
)
É
É
, -
;
É
É
- .
}
Ñ
Ñ
 
break
Ö
Ö
 !
;
Ö
Ö
! "
}
Ü
Ü
 
lstModel
à
à
 
.
à
à
 
ForEach
à
à
 $
(
à
à
$ %
model
à
à
% *
=>
à
à
+ -
context
à
à
. 5
.
à
à
5 6
Entry
à
à
6 ;
(
à
à
; <
model
à
à
< A
)
à
à
A B
.
à
à
B C
State
à
à
C H
=
à
à
I J
EntityState
à
à
K V
.
à
à
V W
Detached
à
à
W _
)
à
à
_ `
;
à
à
` a
var
â
â
 
lstViewResult
â
â
 %
=
â
â
& '
	ParseView
â
â
( 1
(
â
â
1 2
lstModel
â
â
2 :
)
â
â
: ;
;
â
â
; <
result
ã
ã
 
.
ã
ã
 
Items
ã
ã
  
=
ã
ã
! "
lstViewResult
ã
ã
# 0
;
ã
ã
0 1
return
å
å
 
result
å
å
 !
;
å
å
! "
}
ç
ç
 
catch
é
é
 
(
é
é
 
	Exception
é
é
  
ex
é
é
! #
)
é
é
# $
{
è
è
 
LogErrorMessage
ê
ê
 #
(
ê
ê
# $
ex
ê
ê
$ &
)
ê
ê
& '
;
ê
ê
' (
return
ë
ë
 
null
ë
ë
 
;
ë
ë
  
}
í
í
 
}
ì
ì
 
}
î
î
 	
public
õ
õ
 
virtual
õ
õ
 
async
õ
õ
 
Task
õ
õ
 !
<
õ
õ
! "
List
õ
õ
" &
<
õ
õ
& '
TView
õ
õ
' ,
>
õ
õ
, -
>
õ
õ
- .!
GetModelListByAsync
õ
õ
/ B
(
õ
õ
B C

Expression
õ
õ
C M
<
õ
õ
M N
Func
õ
õ
N R
<
õ
õ
R S
TModel
õ
õ
S Y
,
õ
õ
Y Z
bool
õ
õ
[ _
>
õ
õ
_ `
>
õ
õ
` a
	predicate
õ
õ
b k
)
õ
õ
k l
{
ú
ú
 	
using
ù
ù
 
(
ù
ù
 
TContext
ù
ù
 
context
ù
ù
 #
=
ù
ù
$ %
InitContext
ù
ù
& 1
(
ù
ù
1 2
)
ù
ù
2 3
)
ù
ù
3 4
{
û
û
 
try
ü
ü
 
{
†
†
 
var
°
°
 
lstModel
°
°
  
=
°
°
! "
await
°
°
# (
context
°
°
) 0
.
°
°
0 1
Set
°
°
1 4
<
°
°
4 5
TModel
°
°
5 ;
>
°
°
; <
(
°
°
< =
)
°
°
= >
.
°
°
> ?
Where
°
°
? D
(
°
°
D E
	predicate
°
°
E N
)
°
°
N O
.
°
°
O P
ToListAsync
°
°
P [
(
°
°
[ \
)
°
°
\ ]
.
°
°
] ^
ConfigureAwait
°
°
^ l
(
°
°
l m
false
°
°
m r
)
°
°
r s
;
°
°
s t
lstModel
¢
¢
 
.
¢
¢
 
ForEach
¢
¢
 $
(
¢
¢
$ %
model
¢
¢
% *
=>
¢
¢
+ -
context
¢
¢
. 5
.
¢
¢
5 6
Entry
¢
¢
6 ;
(
¢
¢
; <
model
¢
¢
< A
)
¢
¢
A B
.
¢
¢
B C
State
¢
¢
C H
=
¢
¢
I J
EntityState
¢
¢
K V
.
¢
¢
V W
Detached
¢
¢
W _
)
¢
¢
_ `
;
¢
¢
` a
var
£
£
 
lstViewResult
£
£
 %
=
£
£
& '
	ParseView
£
£
( 1
(
£
£
1 2
lstModel
£
£
2 :
)
£
£
: ;
;
£
£
; <
return
§
§
 
lstViewResult
§
§
 (
;
§
§
( )
}
•
•
 
catch
¶
¶
 
(
¶
¶
 
	Exception
¶
¶
  
ex
¶
¶
! #
)
¶
¶
# $
{
ß
ß
 
LogErrorMessage
®
®
 #
(
®
®
# $
ex
®
®
$ &
)
®
®
& '
;
®
®
' (
return
©
©
 
null
©
©
 
;
©
©
  
}
™
™
 
}
´
´
 
}
¨
¨
 	
public
∑
∑
 
virtual
∑
∑
 
async
∑
∑
 
Task
∑
∑
 !
<
∑
∑
! "
PaginationModel
∑
∑
" 1
<
∑
∑
1 2
TView
∑
∑
2 7
>
∑
∑
7 8
>
∑
∑
8 9!
GetModelListByAsync
∑
∑
: M
(
∑
∑
M N

Expression
∏
∏
 
<
∏
∏
 
Func
∏
∏
 
<
∏
∏
 
TModel
∏
∏
 "
,
∏
∏
" #
bool
∏
∏
$ (
>
∏
∏
( )
>
∏
∏
) *
	predicate
∏
∏
+ 4
,
∏
∏
4 5

Expression
∏
∏
6 @
<
∏
∏
@ A
Func
∏
∏
A E
<
∏
∏
E F
TModel
∏
∏
F L
,
∏
∏
L M
int
∏
∏
N Q
>
∏
∏
Q R
>
∏
∏
R S
orderBy
∏
∏
T [
,
∏
∏
[ \
string
∏
∏
] c
	direction
∏
∏
d m
,
∏
∏
m n
int
π
π
 
?
π
π
 
	pageIndex
π
π
 
,
π
π
 
int
π
π
 
?
π
π
  
pageSize
π
π
! )
)
π
π
) *
{
∫
∫
 	
using
ª
ª
 
(
ª
ª
 
TContext
ª
ª
 
context
ª
ª
 #
=
ª
ª
$ %
InitContext
ª
ª
& 1
(
ª
ª
1 2
)
ª
ª
2 3
)
ª
ª
3 4
{
º
º
 
try
Ω
Ω
 
{
æ
æ
 
List
ø
ø
 
<
ø
ø
 
TModel
ø
ø
 
>
ø
ø
  
lstModel
ø
ø
! )
=
ø
ø
* +
new
ø
ø
, /
List
ø
ø
0 4
<
ø
ø
4 5
TModel
ø
ø
5 ;
>
ø
ø
; <
(
ø
ø
< =
)
ø
ø
= >
;
ø
ø
> ?
var
¿
¿
 
query
¿
¿
 
=
¿
¿
 
context
¿
¿
  '
.
¿
¿
' (
Set
¿
¿
( +
<
¿
¿
+ ,
TModel
¿
¿
, 2
>
¿
¿
2 3
(
¿
¿
3 4
)
¿
¿
4 5
.
¿
¿
5 6
Where
¿
¿
6 ;
(
¿
¿
; <
	predicate
¿
¿
< E
)
¿
¿
E F
;
¿
¿
F G
PaginationModel
¬
¬
 #
<
¬
¬
# $
TView
¬
¬
$ )
>
¬
¬
) *
result
¬
¬
+ 1
=
¬
¬
2 3
new
¬
¬
4 7
PaginationModel
¬
¬
8 G
<
¬
¬
G H
TView
¬
¬
H M
>
¬
¬
M N
(
¬
¬
N O
)
¬
¬
O P
{
√
√
 

TotalItems
ƒ
ƒ
 "
=
ƒ
ƒ
# $
query
ƒ
ƒ
% *
.
ƒ
ƒ
* +
Count
ƒ
ƒ
+ 0
(
ƒ
ƒ
0 1
)
ƒ
ƒ
1 2
,
ƒ
ƒ
2 3
	PageIndex
≈
≈
 !
=
≈
≈
" #
	pageIndex
≈
≈
$ -
??
≈
≈
. 0
$num
≈
≈
1 2
}
∆
∆
 
;
∆
∆
 
result
«
«
 
.
«
«
 
PageSize
«
«
 #
=
«
«
$ %
pageSize
«
«
& .
??
«
«
/ 1
result
«
«
2 8
.
«
«
8 9

TotalItems
«
«
9 C
;
«
«
C D
if
…
…
 
(
…
…
 
pageSize
…
…
  
.
…
…
  !
HasValue
…
…
! )
)
…
…
) *
{
 
 
 
result
À
À
 
.
À
À
 
	TotalPage
À
À
 (
=
À
À
) *
(
À
À
+ ,
result
À
À
, 2
.
À
À
2 3

TotalItems
À
À
3 =
/
À
À
> ?
pageSize
À
À
@ H
.
À
À
H I
Value
À
À
I N
)
À
À
N O
+
À
À
P Q
(
À
À
R S
result
À
À
S Y
.
À
À
Y Z

TotalItems
À
À
Z d
%
À
À
e f
pageSize
À
À
g o
.
À
À
o p
Value
À
À
p u
>
À
À
v w
$num
À
À
x y
?
À
À
z {
$num
À
À
| }
:
À
À
~ 
$numÀ
À
Ä Å
)À
À
Å Ç
;À
À
Ç É
}
Ã
Ã
 
switch
Õ
Õ
 
(
Õ
Õ
 
	direction
Õ
Õ
 %
)
Õ
Õ
% &
{
Œ
Œ
 
case
œ
œ
 
$str
œ
œ
 #
:
œ
œ
# $
if
–
–
 
(
–
–
  
pageSize
–
–
  (
.
–
–
( )
HasValue
–
–
) 1
)
–
–
1 2
{
—
—
 
lstModel
“
“
  (
=
“
“
) *
await
“
“
+ 0
query
“
“
1 6
.
”
”
$ %
OrderByDescending
”
”
% 6
(
”
”
6 7
orderBy
”
”
7 >
)
”
”
> ?
.
‘
‘
$ %
Skip
‘
‘
% )
(
‘
‘
) *
	pageIndex
‘
‘
* 3
.
‘
‘
3 4
Value
‘
‘
4 9
*
‘
‘
: ;
pageSize
‘
‘
< D
.
‘
‘
D E
Value
‘
‘
E J
)
‘
‘
J K
.
’
’
$ %
Take
’
’
% )
(
’
’
) *
pageSize
’
’
* 2
.
’
’
2 3
Value
’
’
3 8
)
’
’
8 9
.
÷
÷
$ %
ToListAsync
÷
÷
% 0
(
÷
÷
0 1
)
÷
÷
1 2
.
÷
÷
2 3
ConfigureAwait
÷
÷
3 A
(
÷
÷
A B
false
÷
÷
B G
)
÷
÷
G H
;
÷
÷
H I
}
◊
◊
 
else
ÿ
ÿ
  
{
Ÿ
Ÿ
 
lstModel
⁄
⁄
  (
=
⁄
⁄
) *
await
⁄
⁄
+ 0
query
⁄
⁄
1 6
.
€
€
$ %
OrderByDescending
€
€
% 6
(
€
€
6 7
orderBy
€
€
7 >
)
€
€
> ?
.
‹
‹
$ %
ToListAsync
‹
‹
% 0
(
‹
‹
0 1
)
‹
‹
1 2
.
‹
‹
2 3
ConfigureAwait
‹
‹
3 A
(
‹
‹
A B
false
‹
‹
B G
)
‹
‹
G H
;
‹
‹
H I
}
›
›
 
break
ﬁ
ﬁ
 !
;
ﬁ
ﬁ
! "
default
‡
‡
 
:
‡
‡
  
if
·
·
 
(
·
·
  
pageSize
·
·
  (
.
·
·
( )
HasValue
·
·
) 1
)
·
·
1 2
{
‚
‚
 
lstModel
„
„
  (
=
„
„
) *
await
„
„
+ 0
query
„
„
1 6
.
‰
‰
$ %
OrderBy
‰
‰
% ,
(
‰
‰
, -
orderBy
‰
‰
- 4
)
‰
‰
4 5
.
Â
Â
$ %
Skip
Â
Â
% )
(
Â
Â
) *
	pageIndex
Â
Â
* 3
.
Â
Â
3 4
Value
Â
Â
4 9
*
Â
Â
: ;
pageSize
Â
Â
< D
.
Â
Â
D E
Value
Â
Â
E J
)
Â
Â
J K
.
Ê
Ê
$ %
Take
Ê
Ê
% )
(
Ê
Ê
) *
pageSize
Ê
Ê
* 2
.
Ê
Ê
2 3
Value
Ê
Ê
3 8
)
Ê
Ê
8 9
.
Á
Á
$ %
ToListAsync
Á
Á
% 0
(
Á
Á
0 1
)
Á
Á
1 2
.
Á
Á
2 3
ConfigureAwait
Á
Á
3 A
(
Á
Á
A B
false
Á
Á
B G
)
Á
Á
G H
;
Á
Á
H I
}
Ë
Ë
 
else
È
È
  
{
Í
Í
 
lstModel
Î
Î
  (
=
Î
Î
) *
await
Î
Î
+ 0
query
Î
Î
1 6
.
Ï
Ï
$ %
OrderBy
Ï
Ï
% ,
(
Ï
Ï
, -
orderBy
Ï
Ï
- 4
)
Ï
Ï
4 5
.
Ì
Ì
$ %
ToListAsync
Ì
Ì
% 0
(
Ì
Ì
0 1
)
Ì
Ì
1 2
.
Ì
Ì
2 3
ConfigureAwait
Ì
Ì
3 A
(
Ì
Ì
A B
false
Ì
Ì
B G
)
Ì
Ì
G H
;
Ì
Ì
H I
}
Ó
Ó
 
break
Ô
Ô
 !
;
Ô
Ô
! "
}


 
lstModel
Ú
Ú
 
.
Ú
Ú
 
ForEach
Ú
Ú
 $
(
Ú
Ú
$ %
model
Ú
Ú
% *
=>
Ú
Ú
+ -
context
Ú
Ú
. 5
.
Ú
Ú
5 6
Entry
Ú
Ú
6 ;
(
Ú
Ú
; <
model
Ú
Ú
< A
)
Ú
Ú
A B
.
Ú
Ú
B C
State
Ú
Ú
C H
=
Ú
Ú
I J
EntityState
Ú
Ú
K V
.
Ú
Ú
V W
Detached
Ú
Ú
W _
)
Ú
Ú
_ `
;
Ú
Ú
` a
var
Û
Û
 
lstViewResult
Û
Û
 %
=
Û
Û
& '
	ParseView
Û
Û
( 1
(
Û
Û
1 2
lstModel
Û
Û
2 :
)
Û
Û
: ;
;
Û
Û
; <
result
ı
ı
 
.
ı
ı
 
Items
ı
ı
  
=
ı
ı
! "
lstViewResult
ı
ı
# 0
;
ı
ı
0 1
return
ˆ
ˆ
 
result
ˆ
ˆ
 !
;
ˆ
ˆ
! "
}
˜
˜
 
catch
¯
¯
 
(
¯
¯
 
	Exception
¯
¯
  
ex
¯
¯
! #
)
¯
¯
# $
{
˘
˘
 
LogErrorMessage
˙
˙
 #
(
˙
˙
# $
ex
˙
˙
$ &
)
˙
˙
& '
;
˙
˙
' (
return
˚
˚
 
null
˚
˚
 
;
˚
˚
  
}
¸
¸
 
}
˝
˝
 
}
˛
˛
 	
public
ââ 
virtual
ââ 
async
ââ 
Task
ââ !
<
ââ! "
PaginationModel
ââ" 1
<
ââ1 2
TView
ââ2 7
>
ââ7 8
>
ââ8 9!
GetModelListByAsync
ââ: M
(
ââM N

Expression
ää 
<
ää 
Func
ää 
<
ää 
TModel
ää "
,
ää" #
bool
ää$ (
>
ää( )
>
ää) *
	predicate
ää+ 4
,
ää4 5

Expression
ää6 @
<
ää@ A
Func
ääA E
<
ääE F
TModel
ääF L
,
ääL M
string
ääN T
>
ääT U
>
ääU V
orderBy
ääW ^
,
ää^ _
string
ää` f
	direction
ääg p
,
ääp q
int
äär u
?
ääu v
	pageIndexääw Ä
,ääÄ Å
intääÇ Ö
?ääÖ Ü
pageSizeääá è
)ääè ê
{
ãã 	
using
åå 
(
åå 
TContext
åå 
context
åå #
=
åå$ %
InitContext
åå& 1
(
åå1 2
)
åå2 3
)
åå3 4
{
çç 
try
éé 
{
èè 
List
êê 
<
êê 
TModel
êê 
>
êê  
lstModel
êê! )
=
êê* +
new
êê, /
List
êê0 4
<
êê4 5
TModel
êê5 ;
>
êê; <
(
êê< =
)
êê= >
;
êê> ?
var
ëë 
query
ëë 
=
ëë 
context
ëë  '
.
ëë' (
Set
ëë( +
<
ëë+ ,
TModel
ëë, 2
>
ëë2 3
(
ëë3 4
)
ëë4 5
.
ëë5 6
Where
ëë6 ;
(
ëë; <
	predicate
ëë< E
)
ëëE F
;
ëëF G
PaginationModel
ìì #
<
ìì# $
TView
ìì$ )
>
ìì) *
result
ìì+ 1
=
ìì2 3
new
ìì4 7
PaginationModel
ìì8 G
<
ììG H
TView
ììH M
>
ììM N
(
ììN O
)
ììO P
{
îî 

TotalItems
ïï "
=
ïï# $
query
ïï% *
.
ïï* +
Count
ïï+ 0
(
ïï0 1
)
ïï1 2
,
ïï2 3
	PageIndex
ññ !
=
ññ" #
	pageIndex
ññ$ -
??
ññ. 0
$num
ññ1 2
}
óó 
;
óó 
result
òò 
.
òò 
PageSize
òò #
=
òò$ %
pageSize
òò& .
??
òò/ 1
result
òò2 8
.
òò8 9

TotalItems
òò9 C
;
òòC D
if
öö 
(
öö 
pageSize
öö  
.
öö  !
HasValue
öö! )
)
öö) *
{
õõ 
result
úú 
.
úú 
	TotalPage
úú (
=
úú) *
(
úú+ ,
result
úú, 2
.
úú2 3

TotalItems
úú3 =
/
úú> ?
pageSize
úú@ H
.
úúH I
Value
úúI N
)
úúN O
+
úúP Q
(
úúR S
result
úúS Y
.
úúY Z

TotalItems
úúZ d
%
úúe f
pageSize
úúg o
.
úúo p
Value
úúp u
>
úúv w
$num
úúx y
?
úúz {
$num
úú| }
:
úú~ 
$numúúÄ Å
)úúÅ Ç
;úúÇ É
}
ùù 
switch
ûû 
(
ûû 
	direction
ûû %
)
ûû% &
{
üü 
case
†† 
$str
†† #
:
††# $
if
°° 
(
°°  
pageSize
°°  (
.
°°( )
HasValue
°°) 1
)
°°1 2
{
¢¢ 
lstModel
££  (
=
££) *
await
££+ 0
query
££1 6
.
§§$ %
OrderByDescending
§§% 6
(
§§6 7
orderBy
§§7 >
)
§§> ?
.
••$ %
Skip
••% )
(
••) *
	pageIndex
••* 3
.
••3 4
Value
••4 9
*
••: ;
pageSize
••< D
.
••D E
Value
••E J
)
••J K
.
¶¶$ %
Take
¶¶% )
(
¶¶) *
pageSize
¶¶* 2
.
¶¶2 3
Value
¶¶3 8
)
¶¶8 9
.
ßß$ %
ToListAsync
ßß% 0
(
ßß0 1
)
ßß1 2
.
ßß2 3
ConfigureAwait
ßß3 A
(
ßßA B
false
ßßB G
)
ßßG H
;
ßßH I
}
®® 
else
©©  
{
™™ 
lstModel
´´  (
=
´´) *
await
´´+ 0
query
´´1 6
.
¨¨$ %
OrderByDescending
¨¨% 6
(
¨¨6 7
orderBy
¨¨7 >
)
¨¨> ?
.
≠≠$ %
ToListAsync
≠≠% 0
(
≠≠0 1
)
≠≠1 2
.
≠≠2 3
ConfigureAwait
≠≠3 A
(
≠≠A B
false
≠≠B G
)
≠≠G H
;
≠≠H I
}
ÆÆ 
break
ØØ !
;
ØØ! "
default
±± 
:
±±  
if
≤≤ 
(
≤≤  
pageSize
≤≤  (
.
≤≤( )
HasValue
≤≤) 1
)
≤≤1 2
{
≥≥ 
lstModel
¥¥  (
=
¥¥) *
await
¥¥+ 0
query
¥¥1 6
.
µµ$ %
OrderBy
µµ% ,
(
µµ, -
orderBy
µµ- 4
)
µµ4 5
.
∂∂$ %
Skip
∂∂% )
(
∂∂) *
	pageIndex
∂∂* 3
.
∂∂3 4
Value
∂∂4 9
*
∂∂: ;
pageSize
∂∂< D
.
∂∂D E
Value
∂∂E J
)
∂∂J K
.
∑∑$ %
Take
∑∑% )
(
∑∑) *
pageSize
∑∑* 2
.
∑∑2 3
Value
∑∑3 8
)
∑∑8 9
.
∏∏$ %
ToListAsync
∏∏% 0
(
∏∏0 1
)
∏∏1 2
.
∏∏2 3
ConfigureAwait
∏∏3 A
(
∏∏A B
false
∏∏B G
)
∏∏G H
;
∏∏H I
}
ππ 
else
∫∫  
{
ªª 
lstModel
ºº  (
=
ºº) *
await
ºº+ 0
query
ºº1 6
.
ΩΩ$ %
OrderBy
ΩΩ% ,
(
ΩΩ, -
orderBy
ΩΩ- 4
)
ΩΩ4 5
.
ææ$ %
ToListAsync
ææ% 0
(
ææ0 1
)
ææ1 2
.
ææ2 3
ConfigureAwait
ææ3 A
(
ææA B
false
ææB G
)
ææG H
;
ææH I
}
øø 
break
¿¿ !
;
¿¿! "
}
¡¡ 
lstModel
¬¬ 
.
¬¬ 
ForEach
¬¬ $
(
¬¬$ %
model
¬¬% *
=>
¬¬+ -
context
¬¬. 5
.
¬¬5 6
Entry
¬¬6 ;
(
¬¬; <
model
¬¬< A
)
¬¬A B
.
¬¬B C
State
¬¬C H
=
¬¬I J
EntityState
¬¬K V
.
¬¬V W
Detached
¬¬W _
)
¬¬_ `
;
¬¬` a
var
ƒƒ 
lstViewResult
ƒƒ %
=
ƒƒ& '
	ParseView
ƒƒ( 1
(
ƒƒ1 2
lstModel
ƒƒ2 :
)
ƒƒ: ;
;
ƒƒ; <
result
∆∆ 
.
∆∆ 
Items
∆∆  
=
∆∆! "
lstViewResult
∆∆# 0
;
∆∆0 1
return
«« 
result
«« !
;
««! "
}
»» 
catch
…… 
(
…… 
	Exception
……  
ex
……! #
)
……# $
{
   
LogErrorMessage
ÀÀ #
(
ÀÀ# $
ex
ÀÀ$ &
)
ÀÀ& '
;
ÀÀ' (
return
ÃÃ 
null
ÃÃ 
;
ÃÃ  
}
ÕÕ 
}
ŒŒ 
}
œœ 	
public
⁄⁄ 
virtual
⁄⁄ 
async
⁄⁄ 
Task
⁄⁄ !
<
⁄⁄! "
PaginationModel
⁄⁄" 1
<
⁄⁄1 2
TView
⁄⁄2 7
>
⁄⁄7 8
>
⁄⁄8 9!
GetModelListByAsync
⁄⁄: M
(
⁄⁄M N

Expression
€€ 
<
€€ 
Func
€€ 
<
€€ 
TModel
€€ "
,
€€" #
bool
€€$ (
>
€€( )
>
€€) *
	predicate
€€+ 4
,
€€4 5

Expression
€€6 @
<
€€@ A
Func
€€A E
<
€€E F
TModel
€€F L
,
€€L M
DateTime
€€N V
>
€€V W
>
€€W X
orderBy
€€Y `
,
€€` a
string
€€b h
	direction
€€i r
,
€€r s
int
€€t w
?
€€w x
	pageIndex€€y Ç
,€€Ç É
int€€Ñ á
?€€á à
pageSize€€â ë
)€€ë í
{
‹‹ 	
using
›› 
(
›› 
TContext
›› 
context
›› #
=
››$ %
InitContext
››& 1
(
››1 2
)
››2 3
)
››3 4
{
ﬁﬁ 
try
ﬂﬂ 
{
‡‡ 
List
·· 
<
·· 
TModel
·· 
>
··  
lstModel
··! )
=
··* +
new
··, /
List
··0 4
<
··4 5
TModel
··5 ;
>
··; <
(
··< =
)
··= >
;
··> ?
var
‚‚ 
query
‚‚ 
=
‚‚ 
context
‚‚  '
.
‚‚' (
Set
‚‚( +
<
‚‚+ ,
TModel
‚‚, 2
>
‚‚2 3
(
‚‚3 4
)
‚‚4 5
.
‚‚5 6
Where
‚‚6 ;
(
‚‚; <
	predicate
‚‚< E
)
‚‚E F
;
‚‚F G
PaginationModel
‰‰ #
<
‰‰# $
TView
‰‰$ )
>
‰‰) *
result
‰‰+ 1
=
‰‰2 3
new
‰‰4 7
PaginationModel
‰‰8 G
<
‰‰G H
TView
‰‰H M
>
‰‰M N
(
‰‰N O
)
‰‰O P
{
ÂÂ 

TotalItems
ÊÊ "
=
ÊÊ# $
query
ÊÊ% *
.
ÊÊ* +
Count
ÊÊ+ 0
(
ÊÊ0 1
)
ÊÊ1 2
,
ÊÊ2 3
	PageIndex
ÁÁ !
=
ÁÁ" #
	pageIndex
ÁÁ$ -
??
ÁÁ. 0
$num
ÁÁ1 2
}
ËË 
;
ËË 
result
ÈÈ 
.
ÈÈ 
PageSize
ÈÈ #
=
ÈÈ$ %
pageSize
ÈÈ& .
??
ÈÈ/ 1
result
ÈÈ2 8
.
ÈÈ8 9

TotalItems
ÈÈ9 C
;
ÈÈC D
if
ÍÍ 
(
ÍÍ 
pageSize
ÍÍ  
.
ÍÍ  !
HasValue
ÍÍ! )
)
ÍÍ) *
{
ÎÎ 
result
ÏÏ 
.
ÏÏ 
	TotalPage
ÏÏ (
=
ÏÏ) *
(
ÏÏ+ ,
result
ÏÏ, 2
.
ÏÏ2 3

TotalItems
ÏÏ3 =
/
ÏÏ> ?
pageSize
ÏÏ@ H
.
ÏÏH I
Value
ÏÏI N
)
ÏÏN O
+
ÏÏP Q
(
ÏÏR S
result
ÏÏS Y
.
ÏÏY Z

TotalItems
ÏÏZ d
%
ÏÏe f
pageSize
ÏÏg o
.
ÏÏo p
Value
ÏÏp u
>
ÏÏv w
$num
ÏÏx y
?
ÏÏz {
$num
ÏÏ| }
:
ÏÏ~ 
$numÏÏÄ Å
)ÏÏÅ Ç
;ÏÏÇ É
}
ÌÌ 
switch
ÓÓ 
(
ÓÓ 
	direction
ÓÓ %
)
ÓÓ% &
{
ÔÔ 
case
 
$str
 #
:
# $
if
ÒÒ 
(
ÒÒ  
pageSize
ÒÒ  (
.
ÒÒ( )
HasValue
ÒÒ) 1
)
ÒÒ1 2
{
ÚÚ 
lstModel
ÛÛ  (
=
ÛÛ) *
await
ÛÛ+ 0
query
ÛÛ1 6
.
ÙÙ$ %
OrderByDescending
ÙÙ% 6
(
ÙÙ6 7
orderBy
ÙÙ7 >
)
ÙÙ> ?
.
ıı$ %
Skip
ıı% )
(
ıı) *
	pageIndex
ıı* 3
.
ıı3 4
Value
ıı4 9
*
ıı: ;
pageSize
ıı< D
.
ııD E
Value
ııE J
)
ııJ K
.
ˆˆ$ %
Take
ˆˆ% )
(
ˆˆ) *
pageSize
ˆˆ* 2
.
ˆˆ2 3
Value
ˆˆ3 8
)
ˆˆ8 9
.
˜˜$ %
ToListAsync
˜˜% 0
(
˜˜0 1
)
˜˜1 2
.
˜˜2 3
ConfigureAwait
˜˜3 A
(
˜˜A B
false
˜˜B G
)
˜˜G H
;
˜˜H I
}
¯¯ 
else
˘˘  
{
˙˙ 
lstModel
˚˚  (
=
˚˚) *
await
˚˚+ 0
query
˚˚1 6
.
¸¸$ %
OrderByDescending
¸¸% 6
(
¸¸6 7
orderBy
¸¸7 >
)
¸¸> ?
.
˝˝$ %
ToListAsync
˝˝% 0
(
˝˝0 1
)
˝˝1 2
.
˝˝2 3
ConfigureAwait
˝˝3 A
(
˝˝A B
false
˝˝B G
)
˝˝G H
;
˝˝H I
}
˛˛ 
break
ˇˇ !
;
ˇˇ! "
default
ÅÅ 
:
ÅÅ  
if
ÇÇ 
(
ÇÇ  
pageSize
ÇÇ  (
.
ÇÇ( )
HasValue
ÇÇ) 1
)
ÇÇ1 2
{
ÉÉ 
lstModel
ÑÑ  (
=
ÑÑ) *
await
ÑÑ+ 0
query
ÑÑ1 6
.
ÖÖ$ %
OrderBy
ÖÖ% ,
(
ÖÖ, -
orderBy
ÖÖ- 4
)
ÖÖ4 5
.
ÜÜ$ %
Skip
ÜÜ% )
(
ÜÜ) *
	pageIndex
ÜÜ* 3
.
ÜÜ3 4
Value
ÜÜ4 9
*
ÜÜ: ;
pageSize
ÜÜ< D
.
ÜÜD E
Value
ÜÜE J
)
ÜÜJ K
.
áá$ %
Take
áá% )
(
áá) *
pageSize
áá* 2
.
áá2 3
Value
áá3 8
)
áá8 9
.
àà$ %
ToListAsync
àà% 0
(
àà0 1
)
àà1 2
.
àà2 3
ConfigureAwait
àà3 A
(
ààA B
false
ààB G
)
ààG H
;
ààH I
}
ââ 
else
ää  
{
ãã 
lstModel
åå  (
=
åå) *
await
åå+ 0
query
åå1 6
.
çç$ %
OrderBy
çç% ,
(
çç, -
orderBy
çç- 4
)
çç4 5
.
éé$ %
ToListAsync
éé% 0
(
éé0 1
)
éé1 2
.
éé2 3
ConfigureAwait
éé3 A
(
ééA B
false
ééB G
)
ééG H
;
ééH I
}
èè 
break
êê !
;
êê! "
}
ëë 
lstModel
íí 
.
íí 
ForEach
íí $
(
íí$ %
model
íí% *
=>
íí+ -
context
íí. 5
.
íí5 6
Entry
íí6 ;
(
íí; <
model
íí< A
)
ííA B
.
ííB C
State
ííC H
=
ííI J
EntityState
ííK V
.
ííV W
Detached
ííW _
)
íí_ `
;
íí` a
var
ìì 
lstViewResult
ìì %
=
ìì& '
	ParseView
ìì( 1
(
ìì1 2
lstModel
ìì2 :
)
ìì: ;
;
ìì; <
result
ïï 
.
ïï 
Items
ïï  
=
ïï! "
lstViewResult
ïï# 0
;
ïï0 1
return
ññ 
result
ññ !
;
ññ! "
}
óó 
catch
òò 
(
òò 
	Exception
òò  
ex
òò! #
)
òò# $
{
ôô 
LogErrorMessage
öö #
(
öö# $
ex
öö$ &
)
öö& '
;
öö' (
return
õõ 
null
õõ 
;
õõ  
}
úú 
}
ùù 
}
ûû 	
public
™™ 
virtual
™™  
RepositoryResponse
™™ )
<
™™) *
bool
™™* .
>
™™. /
RemoveListModel
™™0 ?
(
™™? @

Expression
™™@ J
<
™™J K
Func
™™K O
<
™™O P
TModel
™™P V
,
™™V W
bool
™™X \
>
™™\ ]
>
™™] ^
	predicate
™™_ h
,
´´ 
TContext
´´ 
_context
´´ 
=
´´  !
null
´´" &
,
´´& '#
IDbContextTransaction
´´( =
_transaction
´´> J
=
´´K L
null
´´M Q
)
´´Q R
{
¨¨ 	
bool
≠≠ 
isRoot
≠≠ 
=
≠≠ 
_context
≠≠ "
==
≠≠# %
null
≠≠& *
;
≠≠* +
TContext
ÆÆ 
context
ÆÆ 
=
ÆÆ 
_context
ÆÆ '
??
ÆÆ( *
InitContext
ÆÆ+ 6
(
ÆÆ6 7
)
ÆÆ7 8
;
ÆÆ8 9
var
ØØ 
transaction
ØØ 
=
ØØ 
_transaction
ØØ *
??
ØØ+ -
context
ØØ. 5
.
ØØ5 6
Database
ØØ6 >
.
ØØ> ?
BeginTransaction
ØØ? O
(
ØØO P
)
ØØP Q
;
ØØQ R
try
∞∞ 
{
±± 
var
≤≤ 
models
≤≤ 
=
≤≤ 
context
≤≤ $
.
≤≤$ %
Set
≤≤% (
<
≤≤( )
TModel
≤≤) /
>
≤≤/ 0
(
≤≤0 1
)
≤≤1 2
.
≤≤2 3
Where
≤≤3 8
(
≤≤8 9
	predicate
≤≤9 B
)
≤≤B C
.
≤≤C D
ToList
≤≤D J
(
≤≤J K
)
≤≤K L
;
≤≤L M
bool
≥≥ 
result
≥≥ 
=
≥≥ 
true
≥≥ "
;
≥≥" #
if
¥¥ 
(
¥¥ 
models
¥¥ 
!=
¥¥ 
null
¥¥ "
)
¥¥" #
{
µµ 
foreach
∂∂ 
(
∂∂ 
var
∂∂  
model
∂∂! &
in
∂∂' )
models
∂∂* 0
)
∂∂0 1
{
∑∑ 
if
∏∏ 
(
∏∏ 
result
∏∏ "
)
∏∏" #
{
ππ 
var
∫∫ 
r
∫∫  !
=
∫∫" #
RemoveModel
∫∫$ /
(
∫∫/ 0
model
∫∫0 5
,
∫∫5 6
context
∫∫7 >
,
∫∫> ?
transaction
∫∫@ K
)
∫∫K L
;
∫∫L M
result
ªª "
=
ªª# $
result
ªª% +
&&
ªª, .
r
ªª/ 0
.
ªª0 1
	IsSucceed
ªª1 :
;
ªª: ;
}
ºº 
else
ΩΩ 
{
ææ 
break
øø !
;
øø! "
}
¿¿ 
}
¡¡ 
HandleTransaction
√√ %
(
√√% &
result
√√& ,
,
√√, -
isRoot
√√. 4
,
√√4 5
transaction
√√6 A
)
√√A B
;
√√B C
return
≈≈ 
new
≈≈  
RepositoryResponse
≈≈ 1
<
≈≈1 2
bool
≈≈2 6
>
≈≈6 7
(
≈≈7 8
)
≈≈8 9
{
∆∆ 
	IsSucceed
«« !
=
««" #
result
««$ *
,
««* +
Data
»» 
=
»» 
result
»» %
}
…… 
;
…… 
}
   
else
ÀÀ 
{
ÃÃ 
return
ÕÕ 
new
ÕÕ  
RepositoryResponse
ÕÕ 1
<
ÕÕ1 2
bool
ÕÕ2 6
>
ÕÕ6 7
(
ÕÕ7 8
)
ÕÕ8 9
{
ŒŒ 
	IsSucceed
œœ !
=
œœ" #
true
œœ$ (
,
œœ( )
Data
–– 
=
–– 
true
–– #
}
—— 
;
—— 
}
““ 
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
ex
‘‘ 
)
‘‘  
{
’’ 
LogErrorMessage
÷÷ 
(
÷÷  
ex
÷÷  "
)
÷÷" #
;
÷÷# $
if
◊◊ 
(
◊◊ 
_transaction
◊◊  
==
◊◊! #
null
◊◊$ (
)
◊◊( )
{
ÿÿ 
transaction
⁄⁄ 
.
⁄⁄  
Rollback
⁄⁄  (
(
⁄⁄( )
)
⁄⁄) *
;
⁄⁄* +
}
€€ 
return
›› 
new
››  
RepositoryResponse
›› -
<
››- .
bool
››. 2
>
››2 3
(
››3 4
)
››4 5
{
ﬁﬁ 
	IsSucceed
ﬂﬂ 
=
ﬂﬂ 
false
ﬂﬂ  %
,
ﬂﬂ% &
Data
‡‡ 
=
‡‡ 
false
‡‡  
,
‡‡  !
	Exception
·· 
=
·· 
ex
··  "
}
‚‚ 
;
‚‚ 
}
„„ 
finally
‰‰ 
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
_context
ÊÊ 
==
ÊÊ 
null
ÊÊ  $
)
ÊÊ$ %
{
ÁÁ 
context
ÈÈ 
.
ÈÈ 
Dispose
ÈÈ #
(
ÈÈ# $
)
ÈÈ$ %
;
ÈÈ% &
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
public
ˆˆ 
virtual
ˆˆ 
async
ˆˆ 
Task
ˆˆ !
<
ˆˆ! " 
RepositoryResponse
ˆˆ" 4
<
ˆˆ4 5
bool
ˆˆ5 9
>
ˆˆ9 :
>
ˆˆ: ;"
RemoveListModelAsync
ˆˆ< P
(
ˆˆP Q

Expression
ˆˆQ [
<
ˆˆ[ \
Func
ˆˆ\ `
<
ˆˆ` a
TModel
ˆˆa g
,
ˆˆg h
bool
ˆˆi m
>
ˆˆm n
>
ˆˆn o
	predicate
ˆˆp y
,
˜˜ 
TContext
˜˜ 
_context
˜˜ 
=
˜˜  !
null
˜˜" &
,
˜˜& '#
IDbContextTransaction
˜˜( =
_transaction
˜˜> J
=
˜˜K L
null
˜˜M Q
)
˜˜Q R
{
¯¯ 	
bool
˘˘ 
isRoot
˘˘ 
=
˘˘ 
_context
˘˘ "
==
˘˘# %
null
˘˘& *
;
˘˘* +
TContext
˙˙ 
context
˙˙ 
=
˙˙ 
_context
˙˙ '
??
˙˙( *
InitContext
˙˙+ 6
(
˙˙6 7
)
˙˙7 8
;
˙˙8 9
var
˚˚ 
transaction
˚˚ 
=
˚˚ 
_transaction
˚˚ *
??
˚˚+ -
context
˚˚. 5
.
˚˚5 6
Database
˚˚6 >
.
˚˚> ?
BeginTransaction
˚˚? O
(
˚˚O P
)
˚˚P Q
;
˚˚Q R
try
¸¸ 
{
˝˝ 
var
˛˛ 
models
˛˛ 
=
˛˛ 
await
˛˛ "
context
˛˛# *
.
˛˛* +
Set
˛˛+ .
<
˛˛. /
TModel
˛˛/ 5
>
˛˛5 6
(
˛˛6 7
)
˛˛7 8
.
˛˛8 9
Where
˛˛9 >
(
˛˛> ?
	predicate
˛˛? H
)
˛˛H I
.
˛˛I J
ToListAsync
˛˛J U
(
˛˛U V
)
˛˛V W
.
˛˛W X
ConfigureAwait
˛˛X f
(
˛˛f g
false
˛˛g l
)
˛˛l m
;
˛˛m n
bool
ˇˇ 
result
ˇˇ 
=
ˇˇ 
true
ˇˇ "
;
ˇˇ" #
if
ÄÄ 
(
ÄÄ 
models
ÄÄ 
!=
ÄÄ 
null
ÄÄ "
)
ÄÄ" #
{
ÅÅ 
foreach
ÇÇ 
(
ÇÇ 
var
ÇÇ  
model
ÇÇ! &
in
ÇÇ' )
models
ÇÇ* 0
)
ÇÇ0 1
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
result
ÑÑ "
)
ÑÑ" #
{
ÖÖ 
var
ÜÜ 
r
ÜÜ  !
=
ÜÜ" #
await
ÜÜ$ )
RemoveModelAsync
ÜÜ* :
(
ÜÜ: ;
model
ÜÜ; @
,
ÜÜ@ A
context
ÜÜB I
,
ÜÜI J
transaction
ÜÜK V
)
ÜÜV W
.
ÜÜW X
ConfigureAwait
ÜÜX f
(
ÜÜf g
false
ÜÜg l
)
ÜÜl m
;
ÜÜm n
result
áá "
=
áá# $
result
áá% +
&&
áá, .
r
áá/ 0
.
áá0 1
	IsSucceed
áá1 :
;
áá: ;
}
àà 
else
ââ 
{
ää 
break
ãã !
;
ãã! "
}
åå 
}
çç 
HandleTransaction
èè %
(
èè% &
result
èè& ,
,
èè, -
isRoot
èè. 4
,
èè4 5
transaction
èè6 A
)
èèA B
;
èèB C
return
ëë 
new
ëë  
RepositoryResponse
ëë 1
<
ëë1 2
bool
ëë2 6
>
ëë6 7
(
ëë7 8
)
ëë8 9
{
íí 
	IsSucceed
ìì !
=
ìì" #
result
ìì$ *
,
ìì* +
Data
îî 
=
îî 
result
îî %
}
ïï 
;
ïï 
}
ññ 
else
óó 
{
òò 
return
ôô 
new
ôô  
RepositoryResponse
ôô 1
<
ôô1 2
bool
ôô2 6
>
ôô6 7
(
ôô7 8
)
ôô8 9
{
öö 
	IsSucceed
õõ !
=
õõ" #
true
õõ$ (
,
õõ( )
Data
úú 
=
úú 
true
úú #
}
ùù 
;
ùù 
}
ûû 
}
üü 
catch
†† 
(
†† 
	Exception
†† 
ex
†† 
)
††  
{
°° 
LogErrorMessage
¢¢ 
(
¢¢  
ex
¢¢  "
)
¢¢" #
;
¢¢# $
if
££ 
(
££ 
_transaction
££  
==
££! #
null
££$ (
)
££( )
{
§§ 
transaction
¶¶ 
.
¶¶  
Rollback
¶¶  (
(
¶¶( )
)
¶¶) *
;
¶¶* +
}
ßß 
return
©© 
new
©©  
RepositoryResponse
©© -
<
©©- .
bool
©©. 2
>
©©2 3
(
©©3 4
)
©©4 5
{
™™ 
	IsSucceed
´´ 
=
´´ 
false
´´  %
,
´´% &
Data
¨¨ 
=
¨¨ 
false
¨¨  
,
¨¨  !
	Exception
≠≠ 
=
≠≠ 
ex
≠≠  "
}
ÆÆ 
;
ÆÆ 
}
ØØ 
finally
∞∞ 
{
±± 
if
≤≤ 
(
≤≤ 
_context
≤≤ 
==
≤≤ 
null
≤≤  $
)
≤≤$ %
{
≥≥ 
context
µµ 
.
µµ 
Dispose
µµ #
(
µµ# $
)
µµ$ %
;
µµ% &
}
∂∂ 
}
∑∑ 
}
∏∏ 	
public
¬¬ 
virtual
¬¬  
RepositoryResponse
¬¬ )
<
¬¬) *
bool
¬¬* .
>
¬¬. /
RemoveModel
¬¬0 ;
(
¬¬; <

Expression
¬¬< F
<
¬¬F G
Func
¬¬G K
<
¬¬K L
TModel
¬¬L R
,
¬¬R S
bool
¬¬T X
>
¬¬X Y
>
¬¬Y Z
	predicate
¬¬[ d
,
√√ 
TContext
√√ 
_context
√√ 
=
√√  !
null
√√" &
,
√√& '#
IDbContextTransaction
√√( =
_transaction
√√> J
=
√√K L
null
√√M Q
)
√√Q R
{
ƒƒ 	
TContext
≈≈ 
context
≈≈ 
=
≈≈ 
_context
≈≈ '
??
≈≈( *
InitContext
≈≈+ 6
(
≈≈6 7
)
≈≈7 8
;
≈≈8 9
var
∆∆ 
transaction
∆∆ 
=
∆∆ 
_transaction
∆∆ *
??
∆∆+ -
context
∆∆. 5
.
∆∆5 6
Database
∆∆6 >
.
∆∆> ?
BeginTransaction
∆∆? O
(
∆∆O P
)
∆∆P Q
;
∆∆Q R
try
«« 
{
»» 
TModel
…… 
model
…… 
=
…… 
context
…… &
.
……& '
Set
……' *
<
……* +
TModel
……+ 1
>
……1 2
(
……2 3
)
……3 4
.
……4 5
FirstOrDefault
……5 C
(
……C D
	predicate
……D M
)
……M N
;
……N O
bool
   
result
   
=
   
true
   "
;
  " #
if
ÀÀ 
(
ÀÀ 
model
ÀÀ 
!=
ÀÀ 
null
ÀÀ !
)
ÀÀ! "
{
ÃÃ 
context
ÕÕ 
.
ÕÕ 
Entry
ÕÕ !
(
ÕÕ! "
model
ÕÕ" '
)
ÕÕ' (
.
ÕÕ( )
State
ÕÕ) .
=
ÕÕ/ 0
EntityState
ÕÕ1 <
.
ÕÕ< =
Deleted
ÕÕ= D
;
ÕÕD E
result
ŒŒ 
=
ŒŒ 
context
ŒŒ $
.
ŒŒ$ %
SaveChanges
ŒŒ% 0
(
ŒŒ0 1
)
ŒŒ1 2
>
ŒŒ3 4
$num
ŒŒ5 6
;
ŒŒ6 7
}
œœ 
if
—— 
(
—— 
result
—— 
)
—— 
{
““ 
if
”” 
(
”” 
_transaction
”” $
==
””% '
null
””( ,
)
””, -
{
‘‘ 
transaction
÷÷ #
.
÷÷# $
Commit
÷÷$ *
(
÷÷* +
)
÷÷+ ,
;
÷÷, -
}
◊◊ 
return
ÿÿ 
new
ÿÿ  
RepositoryResponse
ÿÿ 1
<
ÿÿ1 2
bool
ÿÿ2 6
>
ÿÿ6 7
(
ÿÿ7 8
)
ÿÿ8 9
{
ŸŸ 
	IsSucceed
⁄⁄ !
=
⁄⁄" #
true
⁄⁄$ (
,
⁄⁄( )
Data
€€ 
=
€€ 
true
€€ #
}
‹‹ 
;
‹‹ 
}
›› 
else
ﬁﬁ 
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
_transaction
‡‡ $
==
‡‡% '
null
‡‡( ,
)
‡‡, -
{
·· 
transaction
„„ #
.
„„# $
Rollback
„„$ ,
(
„„, -
)
„„- .
;
„„. /
}
‰‰ 
return
ÂÂ 
new
ÂÂ  
RepositoryResponse
ÂÂ 1
<
ÂÂ1 2
bool
ÂÂ2 6
>
ÂÂ6 7
(
ÂÂ7 8
)
ÂÂ8 9
{
ÊÊ 
	IsSucceed
ÁÁ !
=
ÁÁ" #
false
ÁÁ$ )
,
ÁÁ) *
Data
ËË 
=
ËË 
false
ËË $
}
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ  
{
ÌÌ 
LogErrorMessage
ÓÓ 
(
ÓÓ  
ex
ÓÓ  "
)
ÓÓ" #
;
ÓÓ# $
if
ÔÔ 
(
ÔÔ 
_transaction
ÔÔ  
==
ÔÔ! #
null
ÔÔ$ (
)
ÔÔ( )
{
 
transaction
ÚÚ 
.
ÚÚ  
Rollback
ÚÚ  (
(
ÚÚ( )
)
ÚÚ) *
;
ÚÚ* +
}
ÛÛ 
return
ıı 
new
ıı  
RepositoryResponse
ıı -
<
ıı- .
bool
ıı. 2
>
ıı2 3
(
ıı3 4
)
ıı4 5
{
ˆˆ 
	IsSucceed
˜˜ 
=
˜˜ 
false
˜˜  %
,
˜˜% &
Data
¯¯ 
=
¯¯ 
false
¯¯  
,
¯¯  !
	Exception
˘˘ 
=
˘˘ 
ex
˘˘  "
}
˙˙ 
;
˙˙ 
}
˚˚ 
finally
¸¸ 
{
˝˝ 
if
˛˛ 
(
˛˛ 
_context
˛˛ 
==
˛˛ 
null
˛˛  $
)
˛˛$ %
{
ˇˇ 
context
ÅÅ 
.
ÅÅ 
Dispose
ÅÅ #
(
ÅÅ# $
)
ÅÅ$ %
;
ÅÅ% &
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
éé 
virtual
éé  
RepositoryResponse
éé )
<
éé) *
bool
éé* .
>
éé. /
RemoveModel
éé0 ;
(
éé; <
TModel
éé< B
model
ééC H
,
èè 
TContext
èè 
_context
èè 
=
èè  !
null
èè" &
,
èè& '#
IDbContextTransaction
èè( =
_transaction
èè> J
=
èèK L
null
èèM Q
)
èèQ R
{
êê 	
bool
ëë 
isRoot
ëë 
=
ëë 
_context
ëë "
==
ëë# %
null
ëë& *
;
ëë* +
TContext
íí 
context
íí 
=
íí 
_context
íí '
??
íí( *
InitContext
íí+ 6
(
íí6 7
)
íí7 8
;
íí8 9
var
ìì 
transaction
ìì 
=
ìì 
_transaction
ìì *
??
ìì+ -
context
ìì. 5
.
ìì5 6
Database
ìì6 >
.
ìì> ?
BeginTransaction
ìì? O
(
ììO P
)
ììP Q
;
ììQ R
try
îî 
{
ïï 
bool
ññ 
result
ññ 
=
ññ 
true
ññ "
;
ññ" #
if
óó 
(
óó 
model
óó 
!=
óó 
null
óó !
)
óó! "
{
òò 
context
ôô 
.
ôô 
Entry
ôô !
(
ôô! "
model
ôô" '
)
ôô' (
.
ôô( )
State
ôô) .
=
ôô/ 0
EntityState
ôô1 <
.
ôô< =
Deleted
ôô= D
;
ôôD E
result
öö 
=
öö 
context
öö $
.
öö$ %
SaveChanges
öö% 0
(
öö0 1
)
öö1 2
>
öö3 4
$num
öö5 6
;
öö6 7
}
õõ 
HandleTransaction
ùù !
(
ùù! "
result
ùù" (
,
ùù( )
isRoot
ùù* 0
,
ùù0 1
transaction
ùù2 =
)
ùù= >
;
ùù> ?
return
üü 
new
üü  
RepositoryResponse
üü -
<
üü- .
bool
üü. 2
>
üü2 3
(
üü3 4
)
üü4 5
{
†† 
	IsSucceed
°° 
=
°° 
result
°°  &
,
°°& '
Data
¢¢ 
=
¢¢ 
result
¢¢ !
}
££ 
;
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
LogErrorMessage
ßß 
(
ßß  
ex
ßß  "
)
ßß" #
;
ßß# $
if
®® 
(
®® 
_transaction
®®  
==
®®! #
null
®®$ (
)
®®( )
{
©© 
transaction
´´ 
.
´´  
Rollback
´´  (
(
´´( )
)
´´) *
;
´´* +
}
¨¨ 
return
ÆÆ 
new
ÆÆ  
RepositoryResponse
ÆÆ -
<
ÆÆ- .
bool
ÆÆ. 2
>
ÆÆ2 3
(
ÆÆ3 4
)
ÆÆ4 5
{
ØØ 
	IsSucceed
∞∞ 
=
∞∞ 
false
∞∞  %
,
∞∞% &
Data
±± 
=
±± 
false
±±  
,
±±  !
	Exception
≤≤ 
=
≤≤ 
ex
≤≤  "
}
≥≥ 
;
≥≥ 
}
¥¥ 
finally
µµ 
{
∂∂ 
if
∑∑ 
(
∑∑ 
_context
∑∑ 
==
∑∑ 
null
∑∑  $
)
∑∑$ %
{
∏∏ 
context
∫∫ 
.
∫∫ 
Dispose
∫∫ #
(
∫∫# $
)
∫∫$ %
;
∫∫% &
}
ªª 
}
ºº 
}
ΩΩ 	
public
«« 
virtual
«« 
async
«« 
Task
«« !
<
««! " 
RepositoryResponse
««" 4
<
««4 5
bool
««5 9
>
««9 :
>
««: ;
RemoveModelAsync
««< L
(
««L M

Expression
««M W
<
««W X
Func
««X \
<
««\ ]
TModel
««] c
,
««c d
bool
««e i
>
««i j
>
««j k
	predicate
««l u
,
»» 
TContext
»» 
_context
»» 
=
»»  !
null
»»" &
,
»»& '#
IDbContextTransaction
»»( =
_transaction
»»> J
=
»»K L
null
»»M Q
)
»»Q R
{
…… 	
bool
   
isRoot
   
=
   
_context
   "
==
  # %
null
  & *
;
  * +
TContext
ÀÀ 
context
ÀÀ 
=
ÀÀ 
_context
ÀÀ '
??
ÀÀ( *
InitContext
ÀÀ+ 6
(
ÀÀ6 7
)
ÀÀ7 8
;
ÀÀ8 9
var
ÃÃ 
transaction
ÃÃ 
=
ÃÃ 
_transaction
ÃÃ *
??
ÃÃ+ -
context
ÃÃ. 5
.
ÃÃ5 6
Database
ÃÃ6 >
.
ÃÃ> ?
BeginTransaction
ÃÃ? O
(
ÃÃO P
)
ÃÃP Q
;
ÃÃQ R
try
ÕÕ 
{
ŒŒ 
TModel
œœ 
model
œœ 
=
œœ 
await
œœ $
context
œœ% ,
.
œœ, -
Set
œœ- 0
<
œœ0 1
TModel
œœ1 7
>
œœ7 8
(
œœ8 9
)
œœ9 :
.
œœ: ;!
FirstOrDefaultAsync
œœ; N
(
œœN O
	predicate
œœO X
)
œœX Y
.
œœY Z
ConfigureAwait
œœZ h
(
œœh i
false
œœi n
)
œœn o
;
œœo p
bool
–– 
result
–– 
=
–– 
true
–– "
;
––" #
if
—— 
(
—— 
model
—— 
!=
—— 
null
—— !
)
——! "
{
““ 
context
”” 
.
”” 
Entry
”” !
(
””! "
model
””" '
)
””' (
.
””( )
State
””) .
=
””/ 0
EntityState
””1 <
.
””< =
Deleted
””= D
;
””D E
result
‘‘ 
=
‘‘ 
await
‘‘ "
context
‘‘# *
.
‘‘* +
SaveChangesAsync
‘‘+ ;
(
‘‘; <
)
‘‘< =
.
‘‘= >
ConfigureAwait
‘‘> L
(
‘‘L M
false
‘‘M R
)
‘‘R S
>
‘‘T U
$num
‘‘V W
;
‘‘W X
}
’’ 
HandleTransaction
◊◊ !
(
◊◊! "
result
◊◊" (
,
◊◊( )
isRoot
◊◊* 0
,
◊◊0 1
transaction
◊◊2 =
)
◊◊= >
;
◊◊> ?
return
ŸŸ 
new
ŸŸ  
RepositoryResponse
ŸŸ -
<
ŸŸ- .
bool
ŸŸ. 2
>
ŸŸ2 3
(
ŸŸ3 4
)
ŸŸ4 5
{
⁄⁄ 
	IsSucceed
€€ 
=
€€ 
result
€€  &
,
€€& '
Data
‹‹ 
=
‹‹ 
result
‹‹ !
}
›› 
;
›› 
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
LogErrorMessage
·· 
(
··  
ex
··  "
)
··" #
;
··# $
if
‚‚ 
(
‚‚ 
_transaction
‚‚  
==
‚‚! #
null
‚‚$ (
)
‚‚( )
{
„„ 
transaction
ÂÂ 
.
ÂÂ  
Rollback
ÂÂ  (
(
ÂÂ( )
)
ÂÂ) *
;
ÂÂ* +
}
ÊÊ 
return
ËË 
new
ËË  
RepositoryResponse
ËË -
<
ËË- .
bool
ËË. 2
>
ËË2 3
(
ËË3 4
)
ËË4 5
{
ÈÈ 
	IsSucceed
ÍÍ 
=
ÍÍ 
false
ÍÍ  %
,
ÍÍ% &
Data
ÎÎ 
=
ÎÎ 
false
ÎÎ  
,
ÎÎ  !
	Exception
ÏÏ 
=
ÏÏ 
ex
ÏÏ  "
}
ÌÌ 
;
ÌÌ 
}
ÓÓ 
finally
ÔÔ 
{
 
if
ÒÒ 
(
ÒÒ 
_context
ÒÒ 
==
ÒÒ 
null
ÒÒ  $
)
ÒÒ$ %
{
ÚÚ 
context
ÙÙ 
.
ÙÙ 
Dispose
ÙÙ #
(
ÙÙ# $
)
ÙÙ$ %
;
ÙÙ% &
}
ıı 
}
ˆˆ 
}
˜˜ 	
public
ÅÅ 
virtual
ÅÅ 
async
ÅÅ 
Task
ÅÅ !
<
ÅÅ! " 
RepositoryResponse
ÅÅ" 4
<
ÅÅ4 5
bool
ÅÅ5 9
>
ÅÅ9 :
>
ÅÅ: ;
RemoveModelAsync
ÅÅ< L
(
ÅÅL M
TModel
ÅÅM S
model
ÅÅT Y
,
ÇÇ 
TContext
ÇÇ 
_context
ÇÇ 
=
ÇÇ  !
null
ÇÇ" &
,
ÇÇ& '#
IDbContextTransaction
ÇÇ( =
_transaction
ÇÇ> J
=
ÇÇK L
null
ÇÇM Q
)
ÇÇQ R
{
ÉÉ 	
bool
ÑÑ 
isRoot
ÑÑ 
=
ÑÑ 
_context
ÑÑ "
==
ÑÑ# %
null
ÑÑ& *
;
ÑÑ* +
TContext
ÖÖ 
context
ÖÖ 
=
ÖÖ 
_context
ÖÖ '
??
ÖÖ( *
InitContext
ÖÖ+ 6
(
ÖÖ6 7
)
ÖÖ7 8
;
ÖÖ8 9
var
ÜÜ 
transaction
ÜÜ 
=
ÜÜ 
_transaction
ÜÜ *
??
ÜÜ+ -
context
ÜÜ. 5
.
ÜÜ5 6
Database
ÜÜ6 >
.
ÜÜ> ?
BeginTransaction
ÜÜ? O
(
ÜÜO P
)
ÜÜP Q
;
ÜÜQ R
try
áá 
{
àà 
bool
ââ 
result
ââ 
=
ââ 
true
ââ "
;
ââ" #
if
ää 
(
ää 
model
ää 
!=
ää 
null
ää !
)
ää! "
{
ãã 
context
åå 
.
åå 
Entry
åå !
(
åå! "
model
åå" '
)
åå' (
.
åå( )
State
åå) .
=
åå/ 0
EntityState
åå1 <
.
åå< =
Deleted
åå= D
;
ååD E
result
çç 
=
çç 
await
çç "
context
çç# *
.
çç* +
SaveChangesAsync
çç+ ;
(
çç; <
)
çç< =
.
çç= >
ConfigureAwait
çç> L
(
ççL M
false
ççM R
)
ççR S
>
ççT U
$num
ççV W
;
ççW X
}
éé 
HandleTransaction
êê !
(
êê! "
result
êê" (
,
êê( )
isRoot
êê* 0
,
êê0 1
transaction
êê2 =
)
êê= >
;
êê> ?
return
íí 
new
íí  
RepositoryResponse
íí -
<
íí- .
bool
íí. 2
>
íí2 3
(
íí3 4
)
íí4 5
{
ìì 
	IsSucceed
îî 
=
îî 
result
îî  &
,
îî& '
Data
ïï 
=
ïï 
result
ïï !
}
ññ 
;
ññ 
}
óó 
catch
òò 
(
òò 
	Exception
òò 
ex
òò 
)
òò  
{
ôô 
LogErrorMessage
öö 
(
öö  
ex
öö  "
)
öö" #
;
öö# $
if
õõ 
(
õõ 
_transaction
õõ  
==
õõ! #
null
õõ$ (
)
õõ( )
{
úú 
transaction
ûû 
.
ûû  
Rollback
ûû  (
(
ûû( )
)
ûû) *
;
ûû* +
}
üü 
return
°° 
new
°°  
RepositoryResponse
°° -
<
°°- .
bool
°°. 2
>
°°2 3
(
°°3 4
)
°°4 5
{
¢¢ 
	IsSucceed
££ 
=
££ 
false
££  %
,
££% &
Data
§§ 
=
§§ 
false
§§  
,
§§  !
	Exception
•• 
=
•• 
ex
••  "
}
¶¶ 
;
¶¶ 
}
ßß 
finally
®® 
{
©© 
if
™™ 
(
™™ 
_context
™™ 
==
™™ 
null
™™  $
)
™™$ %
{
´´ 
context
≠≠ 
.
≠≠ 
Dispose
≠≠ #
(
≠≠# $
)
≠≠$ %
;
≠≠% &
}
ÆÆ 
}
ØØ 
}
∞∞ 	
public
∫∫ 
virtual
∫∫  
RepositoryResponse
∫∫ )
<
∫∫) *
TView
∫∫* /
>
∫∫/ 0
	SaveModel
∫∫1 :
(
∫∫: ;
TView
∫∫; @
view
∫∫A E
,
∫∫E F
bool
∫∫G K
isSaveSubModels
∫∫L [
=
∫∫\ ]
false
∫∫^ c
,
ªª 
TContext
ªª 
_context
ªª 
=
ªª  !
null
ªª" &
,
ªª& '#
IDbContextTransaction
ªª( =
_transaction
ªª> J
=
ªªK L
null
ªªM Q
)
ªªQ R
{
ºº 	
if
ΩΩ 
(
ΩΩ 
CheckIsExists
ΩΩ 
(
ΩΩ 
view
ΩΩ "
,
ΩΩ" #
_context
ΩΩ$ ,
,
ΩΩ, -
_transaction
ΩΩ. :
)
ΩΩ: ;
)
ΩΩ; <
{
ææ 
return
øø 
	EditModel
øø  
(
øø  !
view
øø! %
,
øø% &
isSaveSubModels
øø' 6
,
øø6 7
_context
øø8 @
,
øø@ A
_transaction
øøB N
)
øøN O
;
øøO P
}
¿¿ 
else
¡¡ 
{
¬¬ 
return
√√ 
CreateModel
√√ "
(
√√" #
view
√√# '
,
√√' (
isSaveSubModels
√√) 8
,
√√8 9
_context
√√: B
,
√√B C
_transaction
√√D P
)
√√P Q
;
√√Q R
}
ƒƒ 
}
≈≈ 	
public
œœ 
virtual
œœ 
Task
œœ 
<
œœ  
RepositoryResponse
œœ .
<
œœ. /
TView
œœ/ 4
>
œœ4 5
>
œœ5 6
SaveModelAsync
œœ7 E
(
œœE F
TView
œœF K
view
œœL P
,
œœP Q
bool
œœR V
isSaveSubModels
œœW f
=
œœg h
false
œœi n
,
–– 
TContext
–– 
_context
–– 
=
––  !
null
––" &
,
––& '#
IDbContextTransaction
––( =
_transaction
––> J
=
––K L
null
––M Q
)
––Q R
{
—— 	
if
““ 
(
““ 
CheckIsExists
““ 
(
““ 
view
““ "
,
““" #
_context
““$ ,
,
““, -
_transaction
““. :
)
““: ;
)
““; <
{
”” 
return
‘‘ 
EditModelAsync
‘‘ %
(
‘‘% &
view
‘‘& *
,
‘‘* +
isSaveSubModels
‘‘, ;
,
‘‘; <
_context
‘‘= E
,
‘‘E F
_transaction
‘‘G S
)
‘‘S T
;
‘‘T U
}
’’ 
else
÷÷ 
{
◊◊ 
return
ÿÿ 
CreateModelAsync
ÿÿ '
(
ÿÿ' (
view
ÿÿ( ,
,
ÿÿ, -
isSaveSubModels
ÿÿ. =
,
ÿÿ= >
_context
ÿÿ? G
,
ÿÿG H
_transaction
ÿÿI U
)
ÿÿU V
;
ÿÿV W
}
ŸŸ 
}
⁄⁄ 	
public
„„ 
virtual
„„ 
bool
„„ 
SaveSubModel
„„ (
(
„„( )
TView
„„) .
view
„„/ 3
,
„„3 4
TContext
„„5 =
context
„„> E
,
„„E F#
IDbContextTransaction
„„G \
_transaction
„„] i
)
„„i j
{
‰‰ 	
return
ÂÂ 
false
ÂÂ 
;
ÂÂ 
}
ÊÊ 	
public
 
virtual
 
Task
 
<
 
bool
  
>
  !
SaveSubModelAsync
" 3
(
3 4
TView
4 9
view
: >
,
> ?
TContext
@ H
context
I P
,
P Q#
IDbContextTransaction
R g
_transaction
h t
)
t u
{
ÒÒ 	
throw
ÚÚ 
new
ÚÚ %
NotImplementedException
ÚÚ -
(
ÚÚ- .
)
ÚÚ. /
;
ÚÚ/ 0
}
ÛÛ 	
private
ıı 
void
ıı 
HandleTransaction
ıı &
(
ıı& '
bool
ıı' +
	isSucceed
ıı, 5
,
ıı5 6
bool
ıı7 ;
isRoot
ıı< B
,
ııB C#
IDbContextTransaction
ııD Y
transaction
ııZ e
)
ııe f
{
ˆˆ 	
if
˜˜ 
(
˜˜ 
	isSucceed
˜˜ 
)
˜˜ 
{
¯¯ 
if
˘˘ 
(
˘˘ 
isRoot
˘˘ 
)
˘˘ 
{
˙˙ 
transaction
¸¸ 
.
¸¸  
Commit
¸¸  &
(
¸¸& '
)
¸¸' (
;
¸¸( )
}
˝˝ 
}
˛˛ 
else
ˇˇ 
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
isRoot
ÅÅ 
)
ÅÅ 
{
ÇÇ 
transaction
ÑÑ 
.
ÑÑ  
Rollback
ÑÑ  (
(
ÑÑ( )
)
ÑÑ) *
;
ÑÑ* +
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
}ââ ô¯
\D:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\Repository\ViewRepositoryBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{ 
public 

abstract 
class 
ViewRepositoryBase ,
<, -

TDbContext- 7
,7 8
TModel9 ?
,? @
TViewA F
>F G
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 

ViewModels  
.  !
ViewModelBase! .
<. /

TDbContext/ 9
,9 :
TModel; A
,A B
TViewC H
>H I
{ 
	protected!! 
ViewRepositoryBase!! $
(!!$ %
)!!% &
{"" 	
}$$ 	
public-- 
virtual-- 
bool-- 
CheckIsExists-- )
(--) *
TModel--* 0
entity--1 7
,--7 8

TDbContext--9 C
_context--D L
=--M N
null--O S
,--S T!
IDbContextTransaction--U j
_transaction--k w
=--x y
null--z ~
)--~ 
{.. 	

TDbContext// 
context// 
=//  
_context//! )
??//* ,
InitContext//- 8
(//8 9
)//9 :
;//: ;
var00 
transaction00 
=00 
_transaction00 *
??00+ -
context00. 5
.005 6
Database006 >
.00> ?
BeginTransaction00? O
(00O P
)00P Q
;00Q R
try11 
{22 
return44 
context44 
.44 
Set44 "
<44" #
TModel44# )
>44) *
(44* +
)44+ ,
.44, -
Any44- 0
(440 1
e441 2
=>443 5
e446 7
==448 :
entity44; A
)44A B
;44B C
}88 
catch99 
(99 
	Exception99 
ex99 
)99  
{:: 
LogErrorMessage;; 
(;;  
ex;;  "
);;" #
;;;# $
if<< 
(<< 
_transaction<<  
==<<! #
null<<$ (
)<<( )
{== 
transaction>> 
.>>  
Rollback>>  (
(>>( )
)>>) *
;>>* +
}?? 
return@@ 
false@@ 
;@@ 
}AA 
finallyBB 
{CC 
ifDD 
(DD 
_contextDD 
==DD 
nullDD  $
)DD$ %
{EE 
transactionGG 
.GG  
DisposeGG  '
(GG' (
)GG( )
;GG) *
contextHH 
.HH 
DisposeHH #
(HH# $
)HH$ %
;HH% &
}II 
}JJ 
}KK 	
publicTT 
boolTT 
CheckIsExistsTT !
(TT! "
SystemTT" (
.TT( )
FuncTT) -
<TT- .
TModelTT. 4
,TT4 5
boolTT6 :
>TT: ;
	predicateTT< E
,TTE F

TDbContextTTG Q
_contextTTR Z
=TT[ \
nullTT] a
,TTa b!
IDbContextTransactionTTc x
_transaction	TTy Ö
=
TTÜ á
null
TTà å
)
TTå ç
{UU 	

TDbContextVV 
contextVV 
=VV  
_contextVV! )
??VV* ,
InitContextVV- 8
(VV8 9
)VV9 :
;VV: ;
varWW 
transactionWW 
=WW 
_transactionWW *
??WW+ -
contextWW. 5
.WW5 6
DatabaseWW6 >
.WW> ?
BeginTransactionWW? O
(WWO P
)WWP Q
;WWQ R
tryXX 
{YY 
return[[ 
context[[ 
.[[ 
Set[[ "
<[[" #
TModel[[# )
>[[) *
([[* +
)[[+ ,
.[[, -
Any[[- 0
([[0 1
	predicate[[1 :
)[[: ;
;[[; <
}__ 
catch`` 
(`` 
	Exception`` 
ex`` 
)``  
{aa 
LogErrorMessagebb 
(bb  
exbb  "
)bb" #
;bb# $
ifcc 
(cc 
_transactioncc  
==cc! #
nullcc$ (
)cc( )
{dd 
transactionee 
.ee  
Rollbackee  (
(ee( )
)ee) *
;ee* +
}ff 
returngg 
falsegg 
;gg 
}hh 
finallyii 
{jj 
ifkk 
(kk 
_contextkk 
==kk 
nullkk  $
)kk$ %
{ll 
transactionnn 
.nn  
Disposenn  '
(nn' (
)nn( )
;nn) *
contextoo 
.oo 
Disposeoo #
(oo# $
)oo$ %
;oo% &
}pp 
}qq 
}rr 	
public{{ 
virtual{{ 
RepositoryResponse{{ )
<{{) *
TView{{* /
>{{/ 0
CreateModel{{1 <
({{< =
TView{{= B
view{{C G
,|| 	

TDbContext||
 
_context|| 
=|| 
null||  $
,||$ %!
IDbContextTransaction||& ;
_transaction||< H
=||I J
null||K O
)||O P
{}} 	

TDbContext~~ 
context~~ 
=~~  
_context~~! )
??~~* ,
InitContext~~- 8
(~~8 9
)~~9 :
;~~: ;
var 
transaction 
= 
_transaction *
??+ -
context. 5
.5 6
Database6 >
.> ?
BeginTransaction? O
(O P
)P Q
;Q R 
RepositoryResponse
ÄÄ 
<
ÄÄ 
TView
ÄÄ $
>
ÄÄ$ %
result
ÄÄ& ,
=
ÄÄ- .
new
ÄÄ/ 2 
RepositoryResponse
ÄÄ3 E
<
ÄÄE F
TView
ÄÄF K
>
ÄÄK L
(
ÄÄL M
)
ÄÄM N
{
ÄÄO P
	IsSucceed
ÄÄQ Z
=
ÄÄ[ \
true
ÄÄ] a
}
ÄÄb c
;
ÄÄc d
try
ÅÅ 
{
ÇÇ 
context
ÉÉ 
.
ÉÉ 
Entry
ÉÉ 
(
ÉÉ 
view
ÉÉ "
.
ÉÉ" #
Model
ÉÉ# (
)
ÉÉ( )
.
ÉÉ) *
State
ÉÉ* /
=
ÉÉ0 1
EntityState
ÉÉ2 =
.
ÉÉ= >
Added
ÉÉ> C
;
ÉÉC D
context
ÑÑ 
.
ÑÑ 
SaveChanges
ÑÑ #
(
ÑÑ# $
)
ÑÑ$ %
;
ÑÑ% &
if
ÖÖ 
(
ÖÖ 
result
ÖÖ 
.
ÖÖ 
	IsSucceed
ÖÖ $
)
ÖÖ$ %
{
ÜÜ 
result
áá 
.
áá 
Data
áá 
=
áá  !
view
áá" &
;
áá& '
if
àà 
(
àà 
_transaction
àà $
==
àà% '
null
àà( ,
)
àà, -
{
ââ 
transaction
ää #
.
ää# $
Commit
ää$ *
(
ää* +
)
ää+ ,
;
ää, -
}
ãã 
return
çç 
result
çç !
;
çç! "
}
éé 
else
èè 
{
êê 
if
ëë 
(
ëë 
_transaction
ëë $
==
ëë% '
null
ëë( ,
)
ëë, -
{
íí 
transaction
ìì #
.
ìì# $
Rollback
ìì$ ,
(
ìì, -
)
ìì- .
;
ìì. /
}
îî 
return
ññ 
result
ññ !
;
ññ! "
}
óó 
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô 
ex
ôô 
)
ôô  
{
öö 
LogErrorMessage
õõ 
(
õõ  
ex
õõ  "
)
õõ" #
;
õõ# $
result
úú 
.
úú 
	IsSucceed
úú  
=
úú! "
false
úú# (
;
úú( )
result
ùù 
.
ùù 
	Exception
ùù  
=
ùù! "
ex
ùù# %
;
ùù% &
if
ûû 
(
ûû 
_transaction
ûû  
==
ûû! #
null
ûû$ (
)
ûû( )
{
üü 
transaction
†† 
.
††  
Rollback
††  (
(
††( )
)
††) *
;
††* +
}
°° 
return
¢¢ 
result
¢¢ 
;
¢¢ 
}
££ 
finally
§§ 
{
•• 
if
¶¶ 
(
¶¶ 
_context
¶¶ 
==
¶¶ 
null
¶¶  $
)
¶¶$ %
{
ßß 
transaction
©© 
.
©©  
Dispose
©©  '
(
©©' (
)
©©( )
;
©©) *
context
™™ 
.
™™ 
Dispose
™™ #
(
™™# $
)
™™$ %
;
™™% &
}
´´ 
}
¨¨ 
}
≠≠ 	
public
∂∂ 
virtual
∂∂ 
async
∂∂ 
Task
∂∂ !
<
∂∂! " 
RepositoryResponse
∂∂" 4
<
∂∂4 5
TView
∂∂5 :
>
∂∂: ;
>
∂∂; <
CreateModelAsync
∂∂= M
(
∂∂M N
TView
∂∂N S
view
∂∂T X
,
∑∑ 	

TDbContext
∑∑
 
_context
∑∑ 
=
∑∑ 
null
∑∑  $
,
∑∑$ %#
IDbContextTransaction
∑∑& ;
_transaction
∑∑< H
=
∑∑I J
null
∑∑K O
)
∑∑O P
{
∏∏ 	

TDbContext
ππ 
context
ππ 
=
ππ  
_context
ππ! )
??
ππ* ,
InitContext
ππ- 8
(
ππ8 9
)
ππ9 :
;
ππ: ;
var
∫∫ 
transaction
∫∫ 
=
∫∫ 
_transaction
∫∫ *
??
∫∫+ -
context
∫∫. 5
.
∫∫5 6
Database
∫∫6 >
.
∫∫> ?
BeginTransaction
∫∫? O
(
∫∫O P
)
∫∫P Q
;
∫∫Q R 
RepositoryResponse
ªª 
<
ªª 
TView
ªª $
>
ªª$ %
result
ªª& ,
=
ªª- .
new
ªª/ 2 
RepositoryResponse
ªª3 E
<
ªªE F
TView
ªªF K
>
ªªK L
(
ªªL M
)
ªªM N
{
ªªO P
	IsSucceed
ªªQ Z
=
ªª[ \
true
ªª] a
}
ªªb c
;
ªªc d
try
ºº 
{
ΩΩ 
context
ææ 
.
ææ 
Entry
ææ 
(
ææ 
view
ææ "
.
ææ" #
Model
ææ# (
)
ææ( )
.
ææ) *
State
ææ* /
=
ææ0 1
EntityState
ææ2 =
.
ææ= >
Added
ææ> C
;
ææC D
await
øø 
context
øø 
.
øø 
SaveChangesAsync
øø .
(
øø. /
)
øø/ 0
.
øø0 1
ConfigureAwait
øø1 ?
(
øø? @
false
øø@ E
)
øøE F
;
øøF G
if
…… 
(
…… 
result
…… 
.
…… 
	IsSucceed
…… $
)
……$ %
{
   
result
ÃÃ 
.
ÃÃ 
Data
ÃÃ 
=
ÃÃ  !
view
ÃÃ" &
;
ÃÃ& '
if
ÕÕ 
(
ÕÕ 
_transaction
ÕÕ $
==
ÕÕ% '
null
ÕÕ( ,
)
ÕÕ, -
{
ŒŒ 
transaction
–– #
.
––# $
Commit
––$ *
(
––* +
)
––+ ,
;
––, -
}
—— 
return
”” 
result
”” !
;
””! "
}
‘‘ 
else
’’ 
{
÷÷ 
if
◊◊ 
(
◊◊ 
_transaction
◊◊ $
==
◊◊% '
null
◊◊( ,
)
◊◊, -
{
ÿÿ 
transaction
⁄⁄ #
.
⁄⁄# $
Rollback
⁄⁄$ ,
(
⁄⁄, -
)
⁄⁄- .
;
⁄⁄. /
}
€€ 
return
‹‹ 
result
‹‹ !
;
‹‹! "
}
›› 
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
LogErrorMessage
·· 
(
··  
ex
··  "
)
··" #
;
··# $
result
‚‚ 
.
‚‚ 
	IsSucceed
‚‚  
=
‚‚! "
false
‚‚# (
;
‚‚( )
result
„„ 
.
„„ 
	Exception
„„  
=
„„! "
ex
„„# %
;
„„% &
if
‰‰ 
(
‰‰ 
_transaction
‰‰  
==
‰‰! #
null
‰‰$ (
)
‰‰( )
{
ÂÂ 
transaction
ÁÁ 
.
ÁÁ  
Rollback
ÁÁ  (
(
ÁÁ( )
)
ÁÁ) *
;
ÁÁ* +
}
ËË 
return
ÍÍ 
result
ÍÍ 
;
ÍÍ 
}
ÎÎ 
finally
ÏÏ 
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 
_context
ÓÓ 
==
ÓÓ 
null
ÓÓ  $
)
ÓÓ$ %
{
ÔÔ 
transaction
ÒÒ 
.
ÒÒ  
Dispose
ÒÒ  '
(
ÒÒ' (
)
ÒÒ( )
;
ÒÒ) *
context
ÚÚ 
.
ÚÚ 
Dispose
ÚÚ #
(
ÚÚ# $
)
ÚÚ$ %
;
ÚÚ% &
}
ÛÛ 
}
ÙÙ 
}
ıı 	
public
˛˛ 
virtual
˛˛  
RepositoryResponse
˛˛ )
<
˛˛) *
TView
˛˛* /
>
˛˛/ 0
	EditModel
˛˛1 :
(
˛˛: ;
TView
˛˛; @
view
˛˛A E
,
ˇˇ 	

TDbContext
ˇˇ
 
_context
ˇˇ 
=
ˇˇ 
null
ˇˇ  $
,
ˇˇ$ %#
IDbContextTransaction
ˇˇ& ;
_transaction
ˇˇ< H
=
ˇˇI J
null
ˇˇK O
)
ˇˇO P
{
ÄÄ 	

TDbContext
ÅÅ 
context
ÅÅ 
=
ÅÅ  
_context
ÅÅ! )
??
ÅÅ* ,
InitContext
ÅÅ- 8
(
ÅÅ8 9
)
ÅÅ9 :
;
ÅÅ: ;
var
ÇÇ 
transaction
ÇÇ 
=
ÇÇ 
_transaction
ÇÇ *
??
ÇÇ+ -
context
ÇÇ. 5
.
ÇÇ5 6
Database
ÇÇ6 >
.
ÇÇ> ?
BeginTransaction
ÇÇ? O
(
ÇÇO P
)
ÇÇP Q
;
ÇÇQ R 
RepositoryResponse
ÉÉ 
<
ÉÉ 
TView
ÉÉ $
>
ÉÉ$ %
result
ÉÉ& ,
=
ÉÉ- .
new
ÉÉ/ 2 
RepositoryResponse
ÉÉ3 E
<
ÉÉE F
TView
ÉÉF K
>
ÉÉK L
(
ÉÉL M
)
ÉÉM N
{
ÉÉO P
	IsSucceed
ÉÉQ Z
=
ÉÉ[ \
true
ÉÉ] a
}
ÉÉb c
;
ÉÉc d
try
ÑÑ 
{
ÖÖ 
context
áá 
.
áá 
Set
áá 
<
áá 
TModel
áá "
>
áá" #
(
áá# $
)
áá$ %
.
áá% &
Update
áá& ,
(
áá, -
view
áá- 1
.
áá1 2
Model
áá2 7
)
áá7 8
;
áá8 9
context
àà 
.
àà 
SaveChanges
àà #
(
àà# $
)
àà$ %
;
àà% &
if
íí 
(
íí 
result
íí 
.
íí 
	IsSucceed
íí $
)
íí$ %
{
ìì 
result
îî 
.
îî 
Data
îî 
=
îî  !
view
îî" &
;
îî& '
if
ïï 
(
ïï 
_transaction
ïï $
==
ïï% '
null
ïï( ,
)
ïï, -
{
ññ 
transaction
òò #
.
òò# $
Commit
òò$ *
(
òò* +
)
òò+ ,
;
òò, -
}
ôô 
return
öö 
result
öö !
;
öö! "
}
õõ 
else
úú 
{
ùù 
if
ûû 
(
ûû 
_transaction
ûû $
==
ûû% '
null
ûû( ,
)
ûû, -
{
üü 
transaction
°° #
.
°°# $
Rollback
°°$ ,
(
°°, -
)
°°- .
;
°°. /
}
¢¢ 
return
££ 
result
££ !
;
££! "
}
§§ 
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß 
LogErrorMessage
®® 
(
®®  
ex
®®  "
)
®®" #
;
®®# $
result
©© 
.
©© 
	IsSucceed
©©  
=
©©! "
false
©©# (
;
©©( )
result
™™ 
.
™™ 
	Exception
™™  
=
™™! "
ex
™™# %
;
™™% &
if
´´ 
(
´´ 
_transaction
´´  
==
´´! #
null
´´$ (
)
´´( )
{
¨¨ 
transaction
ÆÆ 
.
ÆÆ  
Rollback
ÆÆ  (
(
ÆÆ( )
)
ÆÆ) *
;
ÆÆ* +
}
ØØ 
return
∞∞ 
result
∞∞ 
;
∞∞ 
}
±± 
finally
≤≤ 
{
≥≥ 
if
¥¥ 
(
¥¥ 
_context
¥¥ 
==
¥¥ 
null
¥¥  $
)
¥¥$ %
{
µµ 
transaction
∑∑ 
.
∑∑  
Dispose
∑∑  '
(
∑∑' (
)
∑∑( )
;
∑∑) *
context
∏∏ 
.
∏∏ 
Dispose
∏∏ #
(
∏∏# $
)
∏∏$ %
;
∏∏% &
}
ππ 
}
∫∫ 
}
ªª 	
public
ƒƒ 
virtual
ƒƒ 
async
ƒƒ 
Task
ƒƒ !
<
ƒƒ! " 
RepositoryResponse
ƒƒ" 4
<
ƒƒ4 5
TView
ƒƒ5 :
>
ƒƒ: ;
>
ƒƒ; <
EditModelAsync
ƒƒ= K
(
ƒƒK L
TView
ƒƒL Q
view
ƒƒR V
,
ƒƒV W

TDbContext
ƒƒX b
_context
ƒƒc k
=
ƒƒl m
null
ƒƒn r
,
ƒƒr s$
IDbContextTransactionƒƒt â
_transactionƒƒä ñ
=ƒƒó ò
nullƒƒô ù
)ƒƒù û
{
≈≈ 	
var
∆∆ 
context
∆∆ 
=
∆∆ 
_context
∆∆ "
??
∆∆# %
InitContext
∆∆& 1
(
∆∆1 2
)
∆∆2 3
;
∆∆3 4
var
«« 
transaction
«« 
=
«« 
_transaction
«« *
??
««+ -
context
««. 5
.
««5 6
Database
««6 >
.
««> ?
BeginTransaction
««? O
(
««O P
)
««P Q
;
««Q R 
RepositoryResponse
»» 
<
»» 
TView
»» $
>
»»$ %
result
»»& ,
=
»»- .
new
»»/ 2 
RepositoryResponse
»»3 E
<
»»E F
TView
»»F K
>
»»K L
(
»»L M
)
»»M N
{
»»O P
	IsSucceed
»»Q Z
=
»»[ \
true
»»] a
}
»»b c
;
»»c d
try
…… 
{
   
context
ÃÃ 
.
ÃÃ 
Set
ÃÃ 
<
ÃÃ 
TModel
ÃÃ "
>
ÃÃ" #
(
ÃÃ# $
)
ÃÃ$ %
.
ÃÃ% &
Update
ÃÃ& ,
(
ÃÃ, -
view
ÃÃ- 1
.
ÃÃ1 2
Model
ÃÃ2 7
)
ÃÃ7 8
;
ÃÃ8 9
await
ÕÕ 
context
ÕÕ 
.
ÕÕ 
SaveChangesAsync
ÕÕ .
(
ÕÕ. /
)
ÕÕ/ 0
.
ÕÕ0 1
ConfigureAwait
ÕÕ1 ?
(
ÕÕ? @
false
ÕÕ@ E
)
ÕÕE F
;
ÕÕF G
if
◊◊ 
(
◊◊ 
result
◊◊ 
.
◊◊ 
	IsSucceed
◊◊ $
)
◊◊$ %
{
ÿÿ 
result
ŸŸ 
.
ŸŸ 
Data
ŸŸ 
=
ŸŸ  !
view
ŸŸ" &
;
ŸŸ& '
if
⁄⁄ 
(
⁄⁄ 
_transaction
⁄⁄ $
==
⁄⁄% '
null
⁄⁄( ,
)
⁄⁄, -
{
€€ 
transaction
›› #
.
››# $
Commit
››$ *
(
››* +
)
››+ ,
;
››, -
}
ﬁﬁ 
return
ﬂﬂ 
result
ﬂﬂ !
;
ﬂﬂ! "
}
‡‡ 
else
·· 
{
‚‚ 
if
„„ 
(
„„ 
_transaction
„„ $
==
„„% '
null
„„( ,
)
„„, -
{
‰‰ 
transaction
ÊÊ #
.
ÊÊ# $
Rollback
ÊÊ$ ,
(
ÊÊ, -
)
ÊÊ- .
;
ÊÊ. /
}
ÁÁ 
return
ËË 
result
ËË !
;
ËË! "
}
ÈÈ 
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ 
ex
ÎÎ 
)
ÎÎ  
{
ÏÏ 
LogErrorMessage
ÌÌ 
(
ÌÌ  
ex
ÌÌ  "
)
ÌÌ" #
;
ÌÌ# $
result
ÓÓ 
.
ÓÓ 
	IsSucceed
ÓÓ  
=
ÓÓ! "
false
ÓÓ# (
;
ÓÓ( )
result
ÔÔ 
.
ÔÔ 
	Exception
ÔÔ  
=
ÔÔ! "
ex
ÔÔ# %
;
ÔÔ% &
if
 
(
 
_transaction
  
==
! #
null
$ (
)
( )
{
ÒÒ 
transaction
ÛÛ 
.
ÛÛ  
Rollback
ÛÛ  (
(
ÛÛ( )
)
ÛÛ) *
;
ÛÛ* +
}
ÙÙ 
return
ˆˆ 
result
ˆˆ 
;
ˆˆ 
}
˜˜ 
finally
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ 
_context
˙˙ 
==
˙˙ 
null
˙˙  $
)
˙˙$ %
{
˚˚ 
context
˝˝ 
.
˝˝ 
Dispose
˝˝ #
(
˝˝# $
)
˝˝$ %
;
˝˝% &
}
˛˛ 
}
ˇˇ 
}
ÄÄ 	
public
ââ 
virtual
ââ  
RepositoryResponse
ââ )
<
ââ) *
TView
ââ* /
>
ââ/ 0
GetSingleModel
ââ1 ?
(
ââ? @

Expression
ää 
<
ää 
Func
ää 
<
ää 
TModel
ää 
,
ää 
bool
ää  $
>
ää$ %
>
ää% &
	predicate
ää' 0
,
ãã 	

TDbContext
ãã
 
_context
ãã 
=
ãã 
null
ãã  $
,
ãã$ %#
IDbContextTransaction
ãã& ;
_transaction
ãã< H
=
ããI J
null
ããK O
)
ããO P
{
åå 	
var
çç 
context
çç 
=
çç 
_context
çç "
??
çç# %
InitContext
çç& 1
(
çç1 2
)
çç2 3
;
çç3 4
var
éé 
transaction
éé 
=
éé 
_transaction
éé *
??
éé+ -
context
éé. 5
.
éé5 6
Database
éé6 >
.
éé> ?
BeginTransaction
éé? O
(
ééO P
)
ééP Q
;
ééQ R
try
èè 
{
êê 
TModel
ëë 
model
ëë 
=
ëë 
context
ëë &
.
ëë& '
Set
ëë' *
<
ëë* +
TModel
ëë+ 1
>
ëë1 2
(
ëë2 3
)
ëë3 4
.
ëë4 5
FirstOrDefault
ëë5 C
(
ëëC D
	predicate
ëëD M
)
ëëM N
;
ëëN O
if
íí 
(
íí 
model
íí 
!=
íí 
null
íí !
)
íí! "
{
ìì 
context
îî 
.
îî 
Entry
îî !
(
îî! "
model
îî" '
)
îî' (
.
îî( )
State
îî) .
=
îî/ 0
EntityState
îî1 <
.
îî< =
Detached
îî= E
;
îîE F
var
ïï 

viewResult
ïï "
=
ïï# $
	ParseView
ïï% .
(
ïï. /
model
ïï/ 4
,
ïï4 5
context
ïï6 =
,
ïï= >
transaction
ïï? J
)
ïïJ K
;
ïïK L
return
ññ 
new
ññ  
RepositoryResponse
ññ 1
<
ññ1 2
TView
ññ2 7
>
ññ7 8
(
ññ8 9
)
ññ9 :
{
óó 
	IsSucceed
òò !
=
òò" #
true
òò$ (
,
òò( )
Data
ôô 
=
ôô 

viewResult
ôô )
}
öö 
;
öö 
}
õõ 
else
úú 
{
ùù 
return
ûû 
new
ûû  
RepositoryResponse
ûû 1
<
ûû1 2
TView
ûû2 7
>
ûû7 8
(
ûû8 9
)
ûû9 :
{
üü 
	IsSucceed
†† !
=
††" #
false
††$ )
,
††) *
Data
°° 
=
°° 
default
°° &
(
°°& '
TView
°°' ,
)
°°, -
}
¢¢ 
;
¢¢ 
}
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
LogErrorMessage
ßß 
(
ßß  
ex
ßß  "
)
ßß" #
;
ßß# $
if
®® 
(
®® 
_transaction
®®  
==
®®! #
null
®®$ (
)
®®( )
{
©© 
transaction
´´ 
.
´´  
Rollback
´´  (
(
´´( )
)
´´) *
;
´´* +
}
¨¨ 
return
ÆÆ 
new
ÆÆ  
RepositoryResponse
ÆÆ -
<
ÆÆ- .
TView
ÆÆ. 3
>
ÆÆ3 4
(
ÆÆ4 5
)
ÆÆ5 6
{
ØØ 
	IsSucceed
∞∞ 
=
∞∞ 
false
∞∞  %
,
∞∞% &
Data
±± 
=
±± 
default
±± "
(
±±" #
TView
±±# (
)
±±( )
}
≤≤ 
;
≤≤ 
}
≥≥ 
finally
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 
_context
∂∂ 
==
∂∂ 
null
∂∂  $
)
∂∂$ %
{
∑∑ 
context
ππ 
.
ππ 
Dispose
ππ #
(
ππ# $
)
ππ$ %
;
ππ% &
}
∫∫ 
}
ªª 
}
ºº 	
public
≈≈ 
virtual
≈≈ 
async
≈≈ 
Task
≈≈ !
<
≈≈! " 
RepositoryResponse
≈≈" 4
<
≈≈4 5
TView
≈≈5 :
>
≈≈: ;
>
≈≈; <!
GetSingleModelAsync
≈≈= P
(
≈≈P Q

Expression
∆∆ 
<
∆∆ 
Func
∆∆ 
<
∆∆ 
TModel
∆∆ 
,
∆∆ 
bool
∆∆  $
>
∆∆$ %
>
∆∆% &
	predicate
∆∆' 0
,
«« 	

TDbContext
««
 
_context
«« 
=
«« 
null
««  $
,
««$ %#
IDbContextTransaction
««& ;
_transaction
««< H
=
««I J
null
««K O
)
««O P
{
»» 	
var
…… 
context
…… 
=
…… 
_context
…… "
??
……# %
InitContext
……& 1
(
……1 2
)
……2 3
;
……3 4
var
   
transaction
   
=
   
_transaction
   *
??
  + -
context
  . 5
.
  5 6
Database
  6 >
.
  > ?
BeginTransaction
  ? O
(
  O P
)
  P Q
;
  Q R
try
ÃÃ 
{
ÕÕ 
TModel
ŒŒ 
model
ŒŒ 
=
ŒŒ 
await
ŒŒ $
context
ŒŒ% ,
.
ŒŒ, -
Set
ŒŒ- 0
<
ŒŒ0 1
TModel
ŒŒ1 7
>
ŒŒ7 8
(
ŒŒ8 9
)
ŒŒ9 :
.
ŒŒ: ;!
FirstOrDefaultAsync
ŒŒ; N
(
ŒŒN O
	predicate
ŒŒO X
)
ŒŒX Y
.
ŒŒY Z
ConfigureAwait
ŒŒZ h
(
ŒŒh i
false
ŒŒi n
)
ŒŒn o
;
ŒŒo p
if
œœ 
(
œœ 
model
œœ 
!=
œœ 
null
œœ !
)
œœ! "
{
–– 
context
—— 
.
—— 
Entry
—— !
(
——! "
model
——" '
)
——' (
.
——( )
State
——) .
=
——/ 0
EntityState
——1 <
.
——< =
Detached
——= E
;
——E F
var
”” 

viewResult
”” "
=
””# $
	ParseView
””% .
(
””. /
model
””/ 4
,
””4 5
context
””6 =
,
””= >
transaction
””? J
)
””J K
;
””K L
return
‘‘ 
new
‘‘  
RepositoryResponse
‘‘ 1
<
‘‘1 2
TView
‘‘2 7
>
‘‘7 8
(
‘‘8 9
)
‘‘9 :
{
’’ 
	IsSucceed
÷÷ !
=
÷÷" #
true
÷÷$ (
,
÷÷( )
Data
◊◊ 
=
◊◊ 

viewResult
◊◊ )
}
ÿÿ 
;
ÿÿ 
}
ŸŸ 
else
⁄⁄ 
{
€€ 
return
‹‹ 
new
‹‹  
RepositoryResponse
‹‹ 1
<
‹‹1 2
TView
‹‹2 7
>
‹‹7 8
(
‹‹8 9
)
‹‹9 :
{
›› 
	IsSucceed
ﬁﬁ !
=
ﬁﬁ" #
false
ﬁﬁ$ )
,
ﬁﬁ) *
Data
ﬂﬂ 
=
ﬂﬂ 
default
ﬂﬂ &
(
ﬂﬂ& '
TView
ﬂﬂ' ,
)
ﬂﬂ, -
}
‡‡ 
;
‡‡ 
}
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
LogErrorMessage
ÂÂ 
(
ÂÂ  
ex
ÂÂ  "
)
ÂÂ" #
;
ÂÂ# $
if
ÊÊ 
(
ÊÊ 
_transaction
ÊÊ  
==
ÊÊ! #
null
ÊÊ$ (
)
ÊÊ( )
{
ÁÁ 
transaction
ÈÈ 
.
ÈÈ  
Rollback
ÈÈ  (
(
ÈÈ( )
)
ÈÈ) *
;
ÈÈ* +
}
ÍÍ 
return
ÏÏ 
new
ÏÏ  
RepositoryResponse
ÏÏ -
<
ÏÏ- .
TView
ÏÏ. 3
>
ÏÏ3 4
(
ÏÏ4 5
)
ÏÏ5 6
{
ÌÌ 
	IsSucceed
ÓÓ 
=
ÓÓ 
false
ÓÓ  %
,
ÓÓ% &
Data
ÔÔ 
=
ÔÔ 
default
ÔÔ "
(
ÔÔ" #
TView
ÔÔ# (
)
ÔÔ( )
}
 
;
 
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
_context
ÙÙ 
==
ÙÙ 
null
ÙÙ  $
)
ÙÙ$ %
{
ıı 
context
˜˜ 
.
˜˜ 
Dispose
˜˜ #
(
˜˜# $
)
˜˜$ %
;
˜˜% &
}
¯¯ 
}
˘˘ 
}
˙˙ 	
public
ÄÄ 
virtual
ÄÄ 

TDbContext
ÄÄ !
InitContext
ÄÄ" -
(
ÄÄ- .
)
ÄÄ. /
{
ÅÅ 	
Type
ÇÇ 
	classType
ÇÇ 
=
ÇÇ 
typeof
ÇÇ #
(
ÇÇ# $

TDbContext
ÇÇ$ .
)
ÇÇ. /
;
ÇÇ/ 0
ConstructorInfo
ÉÉ 
classConstructor
ÉÉ ,
=
ÉÉ- .
	classType
ÉÉ/ 8
.
ÉÉ8 9
GetConstructor
ÉÉ9 G
(
ÉÉG H
new
ÉÉH K
Type
ÉÉL P
[
ÉÉP Q
]
ÉÉQ R
{
ÉÉS T
}
ÉÉU V
)
ÉÉV W
;
ÉÉW X

TDbContext
ÑÑ 
context
ÑÑ 
=
ÑÑ  
(
ÑÑ! "

TDbContext
ÑÑ" ,
)
ÑÑ, -
classConstructor
ÑÑ- =
.
ÑÑ= >
Invoke
ÑÑ> D
(
ÑÑD E
new
ÑÑE H
object
ÑÑI O
[
ÑÑO P
]
ÑÑP Q
{
ÑÑR S
}
ÑÑT U
)
ÑÑU V
;
ÑÑV W
return
ÜÜ 
context
ÜÜ 
;
ÜÜ 
}
áá 	
public
çç 
virtual
çç 
void
çç 
LogErrorMessage
çç +
(
çç+ ,
	Exception
çç, 5
ex
çç6 8
)
çç8 9
{
éé 	
}
èè 	
public
úú 
virtual
úú 
PaginationModel
úú &
<
úú& '
TView
úú' ,
>
úú, -
ParsePagingQuery
úú. >
(
úú> ?

IQueryable
úú? I
<
úúI J
TModel
úúJ P
>
úúP Q
query
úúR W
,
ùù 	
string
ùù
 !
orderByPropertyName
ùù $
,
ùù$ %
OrderByDirection
ùù& 6
	direction
ùù7 @
,
ûû 	
int
ûû
 
?
ûû 
pageSize
ûû 
,
ûû 
int
ûû 
?
ûû 
	pageIndex
ûû '
,
üü 	

TDbContext
üü
 
context
üü 
,
üü #
IDbContextTransaction
üü 3
transaction
üü4 ?
)
üü? @
{
†† 	
List
°° 
<
°° 
TModel
°° 
>
°° 
lstModel
°° !
=
°°" #
new
°°$ '
List
°°( ,
<
°°, -
TModel
°°- 3
>
°°3 4
(
°°4 5
)
°°5 6
;
°°6 7
PaginationModel
££ 
<
££ 
TView
££ !
>
££! "
result
££# )
=
££* +
new
££, /
PaginationModel
££0 ?
<
££? @
TView
££@ E
>
££E F
(
££F G
)
££G H
{
§§ 

TotalItems
•• 
=
•• 
query
•• "
.
••" #
Count
••# (
(
••( )
)
••) *
,
••* +
	PageIndex
¶¶ 
=
¶¶ 
	pageIndex
¶¶ %
??
¶¶& (
$num
¶¶) *
}
ßß 
;
ßß 
dynamic
®® 
orderBy
®® 
=
®® 
	GetLambda
®® '
(
®®' (!
orderByPropertyName
®®( ;
)
®®; <
;
®®< =

IQueryable
©© 
<
©© 
TModel
©© 
>
©© 
sorted
©© %
=
©©& '
null
©©( ,
;
©©, -
try
™™ 
{
´´ 
result
¨¨ 
.
¨¨ 
PageSize
¨¨ 
=
¨¨  !
pageSize
¨¨" *
??
¨¨+ -
result
¨¨. 4
.
¨¨4 5

TotalItems
¨¨5 ?
;
¨¨? @
if
ÆÆ 
(
ÆÆ 
pageSize
ÆÆ 
.
ÆÆ 
HasValue
ÆÆ %
)
ÆÆ% &
{
ØØ 
result
∞∞ 
.
∞∞ 
	TotalPage
∞∞ $
=
∞∞% &
(
∞∞' (
result
∞∞( .
.
∞∞. /

TotalItems
∞∞/ 9
/
∞∞: ;
pageSize
∞∞< D
.
∞∞D E
Value
∞∞E J
)
∞∞J K
+
∞∞L M
(
∞∞N O
result
∞∞O U
.
∞∞U V

TotalItems
∞∞V `
%
∞∞a b
pageSize
∞∞c k
.
∞∞k l
Value
∞∞l q
>
∞∞r s
$num
∞∞t u
?
∞∞v w
$num
∞∞x y
:
∞∞z {
$num
∞∞| }
)
∞∞} ~
;
∞∞~ 
}
±± 
switch
≥≥ 
(
≥≥ 
	direction
≥≥ !
)
≥≥! "
{
¥¥ 
case
µµ 
OrderByDirection
µµ )
.
µµ) *

Descending
µµ* 4
:
µµ4 5
sorted
∂∂ 
=
∂∂  
	Queryable
∂∂! *
.
∂∂* +
OrderByDescending
∂∂+ <
(
∂∂< =
query
∂∂= B
,
∂∂B C
orderBy
∂∂D K
)
∂∂K L
;
∂∂L M
if
∑∑ 
(
∑∑ 
pageSize
∑∑ $
.
∑∑$ %
HasValue
∑∑% -
)
∑∑- .
{
∏∏ 
lstModel
ππ $
=
ππ% &
sorted
ππ' -
.
ππ- .
Skip
ππ. 2
(
ππ2 3
	pageIndex
ππ3 <
.
ππ< =
Value
ππ= B
*
ππC D
pageSize
ππE M
.
ππM N
Value
ππN S
)
ππS T
.
∫∫ 
Take
∫∫ !
(
∫∫! "
pageSize
∫∫" *
.
∫∫* +
Value
∫∫+ 0
)
∫∫0 1
.
ªª 
ToList
ªª #
(
ªª# $
)
ªª$ %
;
ªª% &
}
ºº 
else
ΩΩ 
{
ææ 
lstModel
øø $
=
øø% &
sorted
øø' -
.
øø- .
ToList
øø. 4
(
øø4 5
)
øø5 6
;
øø6 7
}
¿¿ 
break
¡¡ 
;
¡¡ 
default
√√ 
:
√√ 
sorted
ƒƒ 
=
ƒƒ  
	Queryable
ƒƒ! *
.
ƒƒ* +
OrderBy
ƒƒ+ 2
(
ƒƒ2 3
query
ƒƒ3 8
,
ƒƒ8 9
orderBy
ƒƒ: A
)
ƒƒA B
;
ƒƒB C
if
≈≈ 
(
≈≈ 
pageSize
≈≈ $
.
≈≈$ %
HasValue
≈≈% -
)
≈≈- .
{
∆∆ 
lstModel
«« $
=
««% &
sorted
««' -
.
»» 
Skip
»» !
(
»»! "
	pageIndex
»»" +
.
»»+ ,
Value
»», 1
*
»»2 3
pageSize
»»4 <
.
»»< =
Value
»»= B
)
»»B C
.
…… 
Take
…… !
(
……! "
pageSize
……" *
.
……* +
Value
……+ 0
)
……0 1
.
   
ToList
   #
(
  # $
)
  $ %
;
  % &
}
ÀÀ 
else
ÃÃ 
{
ÕÕ 
lstModel
ŒŒ $
=
ŒŒ% &
sorted
ŒŒ' -
.
ŒŒ- .
ToList
ŒŒ. 4
(
ŒŒ4 5
)
ŒŒ5 6
;
ŒŒ6 7
}
œœ 
break
–– 
;
–– 
}
—— 
lstModel
““ 
.
““ 
ForEach
““  
(
““  !
model
““! &
=>
““' )
context
““* 1
.
““1 2
Entry
““2 7
(
““7 8
model
““8 =
)
““= >
.
““> ?
State
““? D
=
““E F
EntityState
““G R
.
““R S
Detached
““S [
)
““[ \
;
““\ ]
var
”” 
lstView
”” 
=
”” 
	ParseView
”” '
(
””' (
lstModel
””( 0
,
””0 1
context
””2 9
,
””9 :
transaction
””; F
)
””F G
;
””G H
result
‘‘ 
.
‘‘ 
Items
‘‘ 
=
‘‘ 
lstView
‘‘ &
;
‘‘& '
return
’’ 
result
’’ 
;
’’ 
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊ 
ex
◊◊ 
)
◊◊  
{
ÿÿ 
LogErrorMessage
ŸŸ 
(
ŸŸ  
ex
ŸŸ  "
)
ŸŸ" #
;
ŸŸ# $
return
⁄⁄ 
null
⁄⁄ 
;
⁄⁄ 
}
€€ 
}
‹‹ 	
public
ÈÈ 
virtual
ÈÈ 
async
ÈÈ 
Task
ÈÈ !
<
ÈÈ! "
PaginationModel
ÈÈ" 1
<
ÈÈ1 2
TView
ÈÈ2 7
>
ÈÈ7 8
>
ÈÈ8 9#
ParsePagingQueryAsync
ÈÈ: O
(
ÈÈO P

IQueryable
ÈÈP Z
<
ÈÈZ [
TModel
ÈÈ[ a
>
ÈÈa b
query
ÈÈc h
,
ÍÍ 	
string
ÍÍ
 !
orderByPropertyName
ÍÍ $
,
ÍÍ$ %
OrderByDirection
ÍÍ& 6
	direction
ÍÍ7 @
,
ÎÎ 	
int
ÎÎ
 
?
ÎÎ 
pageSize
ÎÎ 
,
ÎÎ 
int
ÎÎ 
?
ÎÎ 
	pageIndex
ÎÎ '
,
ÏÏ 	

TDbContext
ÏÏ
 
context
ÏÏ 
,
ÏÏ #
IDbContextTransaction
ÏÏ 3
transaction
ÏÏ4 ?
)
ÏÏ? @
{
ÌÌ 	
List
ÓÓ 
<
ÓÓ 
TModel
ÓÓ 
>
ÓÓ 
lstModel
ÓÓ !
=
ÓÓ" #
new
ÓÓ$ '
List
ÓÓ( ,
<
ÓÓ, -
TModel
ÓÓ- 3
>
ÓÓ3 4
(
ÓÓ4 5
)
ÓÓ5 6
;
ÓÓ6 7
PaginationModel
 
<
 
TView
 !
>
! "
result
# )
=
* +
new
, /
PaginationModel
0 ?
<
? @
TView
@ E
>
E F
(
F G
)
G H
{
ÒÒ 

TotalItems
ÚÚ 
=
ÚÚ 
query
ÚÚ "
.
ÚÚ" #
Count
ÚÚ# (
(
ÚÚ( )
)
ÚÚ) *
,
ÚÚ* +
	PageIndex
ÛÛ 
=
ÛÛ 
	pageIndex
ÛÛ %
??
ÛÛ& (
$num
ÛÛ) *
}
ÙÙ 
;
ÙÙ 
dynamic
ıı 
orderBy
ıı 
=
ıı 
	GetLambda
ıı '
(
ıı' (!
orderByPropertyName
ıı( ;
)
ıı; <
;
ıı< =

IQueryable
ˆˆ 
<
ˆˆ 
TModel
ˆˆ 
>
ˆˆ 
sorted
ˆˆ %
=
ˆˆ& '
null
ˆˆ( ,
;
ˆˆ, -
try
˜˜ 
{
¯¯ 
result
˘˘ 
.
˘˘ 
PageSize
˘˘ 
=
˘˘  !
pageSize
˘˘" *
??
˘˘+ -
result
˘˘. 4
.
˘˘4 5

TotalItems
˘˘5 ?
;
˘˘? @
if
˚˚ 
(
˚˚ 
pageSize
˚˚ 
.
˚˚ 
HasValue
˚˚ %
)
˚˚% &
{
¸¸ 
result
˝˝ 
.
˝˝ 
	TotalPage
˝˝ $
=
˝˝% &
(
˝˝' (
result
˝˝( .
.
˝˝. /

TotalItems
˝˝/ 9
/
˝˝: ;
pageSize
˝˝< D
.
˝˝D E
Value
˝˝E J
)
˝˝J K
+
˝˝L M
(
˝˝N O
result
˝˝O U
.
˝˝U V

TotalItems
˝˝V `
%
˝˝a b
pageSize
˝˝c k
.
˝˝k l
Value
˝˝l q
>
˝˝r s
$num
˝˝t u
?
˝˝v w
$num
˝˝x y
:
˝˝z {
$num
˝˝| }
)
˝˝} ~
;
˝˝~ 
}
˛˛ 
switch
ÄÄ 
(
ÄÄ 
	direction
ÄÄ !
)
ÄÄ! "
{
ÅÅ 
case
ÇÇ 
OrderByDirection
ÇÇ )
.
ÇÇ) *

Descending
ÇÇ* 4
:
ÇÇ4 5
sorted
ÉÉ 
=
ÉÉ  
	Queryable
ÉÉ! *
.
ÉÉ* +
OrderByDescending
ÉÉ+ <
(
ÉÉ< =
query
ÉÉ= B
,
ÉÉB C
orderBy
ÉÉD K
)
ÉÉK L
;
ÉÉL M
if
ÑÑ 
(
ÑÑ 
pageSize
ÑÑ $
.
ÑÑ$ %
HasValue
ÑÑ% -
)
ÑÑ- .
{
ÖÖ 
lstModel
ÜÜ $
=
ÜÜ% &
await
ÜÜ' ,
sorted
ÜÜ- 3
.
ÜÜ3 4
Skip
ÜÜ4 8
(
ÜÜ8 9
	pageIndex
ÜÜ9 B
.
ÜÜB C
Value
ÜÜC H
*
ÜÜI J
pageSize
ÜÜK S
.
ÜÜS T
Value
ÜÜT Y
)
ÜÜY Z
.
áá 
Take
áá !
(
áá! "
pageSize
áá" *
.
áá* +
Value
áá+ 0
)
áá0 1
.
àà 
ToListAsync
àà (
(
àà( )
)
àà) *
.
àà* +
ConfigureAwait
àà+ 9
(
àà9 :
false
àà: ?
)
àà? @
;
àà@ A
}
ââ 
else
ää 
{
ãã 
lstModel
åå $
=
åå% &
sorted
åå' -
.
åå- .
ToList
åå. 4
(
åå4 5
)
åå5 6
;
åå6 7
}
çç 
break
éé 
;
éé 
default
êê 
:
êê 
sorted
ëë 
=
ëë  
	Queryable
ëë! *
.
ëë* +
OrderBy
ëë+ 2
(
ëë2 3
query
ëë3 8
,
ëë8 9
orderBy
ëë: A
)
ëëA B
;
ëëB C
if
íí 
(
íí 
pageSize
íí $
.
íí$ %
HasValue
íí% -
)
íí- .
{
ìì 
lstModel
îî $
=
îî% &
await
îî' ,
sorted
îî- 3
.
ïï 
Skip
ïï !
(
ïï! "
	pageIndex
ïï" +
.
ïï+ ,
Value
ïï, 1
*
ïï2 3
pageSize
ïï4 <
.
ïï< =
Value
ïï= B
)
ïïB C
.
ññ 
Take
ññ !
(
ññ! "
pageSize
ññ" *
.
ññ* +
Value
ññ+ 0
)
ññ0 1
.
óó 
ToListAsync
óó (
(
óó( )
)
óó) *
.
óó* +
ConfigureAwait
óó+ 9
(
óó9 :
false
óó: ?
)
óó? @
;
óó@ A
}
òò 
else
ôô 
{
öö 
lstModel
õõ $
=
õõ% &
await
õõ' ,
sorted
õõ- 3
.
õõ3 4
ToListAsync
õõ4 ?
(
õõ? @
)
õõ@ A
.
õõA B
ConfigureAwait
õõB P
(
õõP Q
false
õõQ V
)
õõV W
;
õõW X
}
úú 
break
ùù 
;
ùù 
}
ûû 
lstModel
üü 
.
üü 
ForEach
üü  
(
üü  !
model
üü! &
=>
üü' )
context
üü* 1
.
üü1 2
Entry
üü2 7
(
üü7 8
model
üü8 =
)
üü= >
.
üü> ?
State
üü? D
=
üüE F
EntityState
üüG R
.
üüR S
Detached
üüS [
)
üü[ \
;
üü\ ]
var
†† 
lstView
†† 
=
†† 
	ParseView
†† '
(
††' (
lstModel
††( 0
,
††0 1
context
††2 9
,
††9 :
transaction
††; F
)
††F G
;
††G H
result
°° 
.
°° 
Items
°° 
=
°° 
lstView
°° &
;
°°& '
return
¢¢ 
result
¢¢ 
;
¢¢ 
}
££ 
catch
§§ 
(
§§ 
	Exception
§§ 
ex
§§ 
)
§§  
{
•• 
LogErrorMessage
¶¶ 
(
¶¶  
ex
¶¶  "
)
¶¶" #
;
¶¶# $
return
ßß 
null
ßß 
;
ßß 
}
®® 
}
©© 	
public
≤≤ 
virtual
≤≤ 
List
≤≤ 
<
≤≤ 
TView
≤≤ !
>
≤≤! "
	ParseView
≤≤# ,
(
≤≤, -
List
≤≤- 1
<
≤≤1 2
TModel
≤≤2 8
>
≤≤8 9
	lstModels
≤≤: C
,
≤≤C D

TDbContext
≤≤E O
_context
≤≤P X
=
≤≤Y Z
null
≤≤[ _
,
≤≤_ `#
IDbContextTransaction
≤≤a v
_transaction≤≤w É
=≤≤Ñ Ö
null≤≤Ü ä
)≤≤ä ã
{
≥≥ 	
List
¥¥ 
<
¥¥ 
TView
¥¥ 
>
¥¥ 
lstView
¥¥ 
=
¥¥  !
new
¥¥" %
List
¥¥& *
<
¥¥* +
TView
¥¥+ 0
>
¥¥0 1
(
¥¥1 2
)
¥¥2 3
;
¥¥3 4
foreach
µµ 
(
µµ 
var
µµ 
model
µµ 
in
µµ !
	lstModels
µµ" +
)
µµ+ ,
{
∂∂ 
lstView
∑∑ 
.
∑∑ 
Add
∑∑ 
(
∑∑ 
	ParseView
∑∑ %
(
∑∑% &
model
∑∑& +
,
∑∑+ ,
_context
∑∑- 5
,
∑∑5 6
_transaction
∑∑7 C
)
∑∑C D
)
∑∑D E
;
∑∑E F
}
∏∏ 
return
∫∫ 
lstView
∫∫ 
;
∫∫ 
}
ªª 	
public
ƒƒ 
virtual
ƒƒ 
TView
ƒƒ 
	ParseView
ƒƒ &
(
ƒƒ& '
TModel
ƒƒ' -
model
ƒƒ. 3
,
ƒƒ3 4

TDbContext
ƒƒ5 ?
_context
ƒƒ@ H
=
ƒƒI J
null
ƒƒK O
,
ƒƒO P#
IDbContextTransaction
ƒƒQ f
_transaction
ƒƒg s
=
ƒƒt u
null
ƒƒv z
)
ƒƒz {
{
≈≈ 	
Type
∆∆ 
	classType
∆∆ 
=
∆∆ 
typeof
∆∆ #
(
∆∆# $
TView
∆∆$ )
)
∆∆) *
;
∆∆* +
ConstructorInfo
«« 
classConstructor
«« ,
=
««- .
	classType
««/ 8
.
««8 9
GetConstructor
««9 G
(
««G H
new
««H K
Type
««L P
[
««P Q
]
««Q R
{
««S T
model
««U Z
.
««Z [
GetType
««[ b
(
««b c
)
««c d
,
««d e
typeof
««f l
(
««l m

TDbContext
««m w
)
««w x
,
««x y
typeof««z Ä
(««Ä Å%
IDbContextTransaction««Å ñ
)««ñ ó
}««ò ô
)««ô ö
;««ö õ
if
»» 
(
»» 
classConstructor
»»  
!=
»»! #
null
»»$ (
)
»»( )
{
…… 
return
   
(
   
TView
   
)
   
classConstructor
   .
.
  . /
Invoke
  / 5
(
  5 6
new
  6 9
object
  : @
[
  @ A
]
  A B
{
  C D
model
  E J
,
  J K
_context
  L T
,
  T U
_transaction
  V b
}
  c d
)
  d e
;
  e f
}
ÀÀ 
else
ÃÃ 
{
ÕÕ 
classConstructor
ŒŒ  
=
ŒŒ! "
	classType
ŒŒ# ,
.
ŒŒ, -
GetConstructor
ŒŒ- ;
(
ŒŒ; <
new
ŒŒ< ?
Type
ŒŒ@ D
[
ŒŒD E
]
ŒŒE F
{
ŒŒG H
model
ŒŒI N
.
ŒŒN O
GetType
ŒŒO V
(
ŒŒV W
)
ŒŒW X
}
ŒŒY Z
)
ŒŒZ [
;
ŒŒ[ \
return
œœ 
(
œœ 
TView
œœ 
)
œœ 
classConstructor
œœ .
.
œœ. /
Invoke
œœ/ 5
(
œœ5 6
new
œœ6 9
object
œœ: @
[
œœ@ A
]
œœA B
{
œœC D
model
œœE J
}
œœK L
)
œœL M
;
œœM N
}
–– 
}
—— 	
public
÷÷ 
virtual
÷÷ 
void
÷÷  
RegisterAutoMapper
÷÷ .
(
÷÷. /
)
÷÷/ 0
{
◊◊ 	
Mapper
ÿÿ 
.
ÿÿ 

Initialize
ÿÿ 
(
ÿÿ 
cfg
ÿÿ !
=>
ÿÿ" $
{
ŸŸ 
cfg
⁄⁄ 
.
⁄⁄ 
	CreateMap
⁄⁄ 
<
⁄⁄ 
TModel
⁄⁄ $
,
⁄⁄$ %
TView
⁄⁄& +
>
⁄⁄+ ,
(
⁄⁄, -
)
⁄⁄- .
;
⁄⁄. /
cfg
€€ 
.
€€ 
	CreateMap
€€ 
<
€€ 
TView
€€ #
,
€€# $
TModel
€€% +
>
€€+ ,
(
€€, -
)
€€- .
;
€€. /
}
‹‹ 
)
‹‹ 
;
‹‹ 
}
›› 	
public
ÁÁ 
virtual
ÁÁ  
RepositoryResponse
ÁÁ )
<
ÁÁ) *
List
ÁÁ* .
<
ÁÁ. /
TView
ÁÁ/ 4
>
ÁÁ4 5
>
ÁÁ5 6
GetModelList
ÁÁ7 C
(
ÁÁC D

TDbContext
ÁÁD N
_context
ÁÁO W
=
ÁÁX Y
null
ÁÁZ ^
,
ÁÁ^ _#
IDbContextTransaction
ÁÁ` u
_transactionÁÁv Ç
=ÁÁÉ Ñ
nullÁÁÖ â
)ÁÁâ ä
{
ËË 	
var
ÈÈ 
context
ÈÈ 
=
ÈÈ 
_context
ÈÈ "
??
ÈÈ# %
InitContext
ÈÈ& 1
(
ÈÈ1 2
)
ÈÈ2 3
;
ÈÈ3 4
var
ÍÍ 
transaction
ÍÍ 
=
ÍÍ 
_transaction
ÍÍ *
??
ÍÍ+ -
context
ÍÍ. 5
.
ÍÍ5 6
Database
ÍÍ6 >
.
ÍÍ> ?
BeginTransaction
ÍÍ? O
(
ÍÍO P
)
ÍÍP Q
;
ÍÍQ R
List
ÎÎ 
<
ÎÎ 
TView
ÎÎ 
>
ÎÎ 
result
ÎÎ 
=
ÎÎ  
new
ÎÎ! $
List
ÎÎ% )
<
ÎÎ) *
TView
ÎÎ* /
>
ÎÎ/ 0
(
ÎÎ0 1
)
ÎÎ1 2
;
ÎÎ2 3
try
ÏÏ 
{
ÌÌ 
var
ÓÓ 
lstModel
ÓÓ 
=
ÓÓ 
context
ÓÓ &
.
ÓÓ& '
Set
ÓÓ' *
<
ÓÓ* +
TModel
ÓÓ+ 1
>
ÓÓ1 2
(
ÓÓ2 3
)
ÓÓ3 4
.
ÓÓ4 5
ToList
ÓÓ5 ;
(
ÓÓ; <
)
ÓÓ< =
;
ÓÓ= >
lstModel
 
.
 
ForEach
  
(
  !
model
! &
=>
' )
context
* 1
.
1 2
Entry
2 7
(
7 8
model
8 =
)
= >
.
> ?
State
? D
=
E F
EntityState
G R
.
R S
Detached
S [
)
[ \
;
\ ]
result
ÒÒ 
=
ÒÒ 
	ParseView
ÒÒ "
(
ÒÒ" #
lstModel
ÒÒ# +
,
ÒÒ+ ,
context
ÒÒ- 4
,
ÒÒ4 5
transaction
ÒÒ6 A
)
ÒÒA B
;
ÒÒB C
return
ÚÚ 
new
ÚÚ  
RepositoryResponse
ÚÚ -
<
ÚÚ- .
List
ÚÚ. 2
<
ÚÚ2 3
TView
ÚÚ3 8
>
ÚÚ8 9
>
ÚÚ9 :
(
ÚÚ: ;
)
ÚÚ; <
{
ÛÛ 
	IsSucceed
ÙÙ 
=
ÙÙ 
true
ÙÙ  $
,
ÙÙ$ %
Data
ıı 
=
ıı 
result
ıı !
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯ 
ex
¯¯ 
)
¯¯  
{
˘˘ 
LogErrorMessage
˙˙ 
(
˙˙  
ex
˙˙  "
)
˙˙" #
;
˙˙# $
if
˚˚ 
(
˚˚ 
_transaction
˚˚  
==
˚˚! #
null
˚˚$ (
)
˚˚( )
{
¸¸ 
transaction
˛˛ 
.
˛˛  
Rollback
˛˛  (
(
˛˛( )
)
˛˛) *
;
˛˛* +
}
ˇˇ 
return
ÅÅ 
new
ÅÅ  
RepositoryResponse
ÅÅ -
<
ÅÅ- .
List
ÅÅ. 2
<
ÅÅ2 3
TView
ÅÅ3 8
>
ÅÅ8 9
>
ÅÅ9 :
(
ÅÅ: ;
)
ÅÅ; <
{
ÇÇ 
	IsSucceed
ÉÉ 
=
ÉÉ 
false
ÉÉ  %
,
ÉÉ% &
Data
ÑÑ 
=
ÑÑ 
null
ÑÑ 
,
ÑÑ  
	Exception
ÖÖ 
=
ÖÖ 
ex
ÖÖ  "
}
ÜÜ 
;
ÜÜ 
}
áá 
finally
àà 
{
ââ 
if
ää 
(
ää 
_context
ää 
==
ää 
null
ää  $
)
ää$ %
{
ãã 
context
çç 
.
çç 
Dispose
çç #
(
çç# $
)
çç$ %
;
çç% &
}
éé 
}
èè 
}
êê 	
public
úú 
virtual
úú  
RepositoryResponse
úú )
<
úú) *
PaginationModel
úú* 9
<
úú9 :
TView
úú: ?
>
úú? @
>
úú@ A
GetModelList
úúB N
(
úúN O
string
ùù !
orderByPropertyName
ùù "
,
ùù" #
OrderByDirection
ùù$ 4
	direction
ùù5 >
,
ùù> ?
int
ùù@ C
?
ùùC D
pageSize
ùùE M
,
ùùM N
int
ùùO R
?
ùùR S
	pageIndex
ùùT ]
,
ûû 	

TDbContext
ûû
 
_context
ûû 
=
ûû 
null
ûû  $
,
ûû$ %#
IDbContextTransaction
ûû& ;
_transaction
ûû< H
=
ûûI J
null
ûûK O
)
ûûO P
{
üü 	
var
†† 
context
†† 
=
†† 
_context
†† "
??
††# %
InitContext
††& 1
(
††1 2
)
††2 3
;
††3 4
var
°° 
transaction
°° 
=
°° 
_transaction
°° *
??
°°+ -
context
°°. 5
.
°°5 6
Database
°°6 >
.
°°> ?
BeginTransaction
°°? O
(
°°O P
)
°°P Q
;
°°Q R
try
££ 
{
§§ 
var
•• 
query
•• 
=
•• 
context
•• #
.
••# $
Set
••$ '
<
••' (
TModel
••( .
>
••. /
(
••/ 0
)
••0 1
;
••1 2
var
ßß 
result
ßß 
=
ßß 
ParsePagingQuery
ßß -
(
ßß- .
query
ßß. 3
,
ßß3 4!
orderByPropertyName
ßß5 H
,
ßßH I
	direction
ßßJ S
,
ßßS T
pageSize
ßßU ]
,
ßß] ^
	pageIndex
ßß_ h
,
®® 
context
®® 
,
®® 
transaction
®® &
)
®®& '
;
®®' (
return
™™ 
new
™™  
RepositoryResponse
™™ -
<
™™- .
PaginationModel
™™. =
<
™™= >
TView
™™> C
>
™™C D
>
™™D E
(
™™E F
)
™™F G
{
´´ 
	IsSucceed
¨¨ 
=
¨¨ 
true
¨¨  $
,
¨¨$ %
Data
≠≠ 
=
≠≠ 
result
≠≠ !
}
ÆÆ 
;
ÆÆ 
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± 
LogErrorMessage
≤≤ 
(
≤≤  
ex
≤≤  "
)
≤≤" #
;
≤≤# $
if
≥≥ 
(
≥≥ 
_transaction
≥≥  
==
≥≥! #
null
≥≥$ (
)
≥≥( )
{
¥¥ 
transaction
∂∂ 
.
∂∂  
Rollback
∂∂  (
(
∂∂( )
)
∂∂) *
;
∂∂* +
}
∑∑ 
return
ππ 
new
ππ  
RepositoryResponse
ππ -
<
ππ- .
PaginationModel
ππ. =
<
ππ= >
TView
ππ> C
>
ππC D
>
ππD E
(
ππE F
)
ππF G
{
∫∫ 
	IsSucceed
ªª 
=
ªª 
false
ªª  %
,
ªª% &
Data
ºº 
=
ºº 
null
ºº 
,
ºº  
	Exception
ΩΩ 
=
ΩΩ 
ex
ΩΩ  "
}
ææ 
;
ææ 
}
øø 
finally
¿¿ 
{
¡¡ 
if
¬¬ 
(
¬¬ 
_context
¬¬ 
==
¬¬ 
null
¬¬  $
)
¬¬$ %
{
√√ 
context
≈≈ 
.
≈≈ 
Dispose
≈≈ #
(
≈≈# $
)
≈≈$ %
;
≈≈% &
}
∆∆ 
}
«« 
}
»» 	
public
–– 
virtual
–– 
async
–– 
Task
–– !
<
––! " 
RepositoryResponse
––" 4
<
––4 5
List
––5 9
<
––9 :
TView
––: ?
>
––? @
>
––@ A
>
––A B
GetModelListAsync
––C T
(
––T U

TDbContext
––U _
_context
––` h
=
––i j
null
––k o
,
––o p$
IDbContextTransaction––q Ü
_transaction––á ì
=––î ï
null––ñ ö
)––ö õ
{
—— 	
var
““ 
context
““ 
=
““ 
_context
““ "
??
““# %
InitContext
““& 1
(
““1 2
)
““2 3
;
““3 4
var
”” 
transaction
”” 
=
”” 
_transaction
”” *
??
””+ -
context
””. 5
.
””5 6
Database
””6 >
.
””> ?
BeginTransaction
””? O
(
””O P
)
””P Q
;
””Q R
List
‘‘ 
<
‘‘ 
TView
‘‘ 
>
‘‘ 
result
‘‘ 
=
‘‘  
new
‘‘! $
List
‘‘% )
<
‘‘) *
TView
‘‘* /
>
‘‘/ 0
(
‘‘0 1
)
‘‘1 2
;
‘‘2 3
try
’’ 
{
÷÷ 
var
◊◊ 
lstModel
◊◊ 
=
◊◊ 
await
◊◊ $
context
◊◊% ,
.
◊◊, -
Set
◊◊- 0
<
◊◊0 1
TModel
◊◊1 7
>
◊◊7 8
(
◊◊8 9
)
◊◊9 :
.
◊◊: ;
ToListAsync
◊◊; F
(
◊◊F G
)
◊◊G H
.
◊◊H I
ConfigureAwait
◊◊I W
(
◊◊W X
false
◊◊X ]
)
◊◊] ^
;
◊◊^ _
lstModel
ŸŸ 
.
ŸŸ 
ForEach
ŸŸ  
(
ŸŸ  !
model
ŸŸ! &
=>
ŸŸ' )
context
ŸŸ* 1
.
ŸŸ1 2
Entry
ŸŸ2 7
(
ŸŸ7 8
model
ŸŸ8 =
)
ŸŸ= >
.
ŸŸ> ?
State
ŸŸ? D
=
ŸŸE F
EntityState
ŸŸG R
.
ŸŸR S
Detached
ŸŸS [
)
ŸŸ[ \
;
ŸŸ\ ]
result
⁄⁄ 
=
⁄⁄ 
	ParseView
⁄⁄ "
(
⁄⁄" #
lstModel
⁄⁄# +
,
⁄⁄+ ,
_context
⁄⁄- 5
,
⁄⁄5 6
_transaction
⁄⁄7 C
)
⁄⁄C D
;
⁄⁄D E
return
€€ 
new
€€  
RepositoryResponse
€€ -
<
€€- .
List
€€. 2
<
€€2 3
TView
€€3 8
>
€€8 9
>
€€9 :
(
€€: ;
)
€€; <
{
‹‹ 
	IsSucceed
›› 
=
›› 
true
››  $
,
››$ %
Data
ﬁﬁ 
=
ﬁﬁ 
result
ﬁﬁ !
}
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
··  
{
‚‚ 
LogErrorMessage
„„ 
(
„„  
ex
„„  "
)
„„" #
;
„„# $
if
‰‰ 
(
‰‰ 
_transaction
‰‰  
==
‰‰! #
null
‰‰$ (
)
‰‰( )
{
ÂÂ 
transaction
ÁÁ 
.
ÁÁ  
Rollback
ÁÁ  (
(
ÁÁ( )
)
ÁÁ) *
;
ÁÁ* +
}
ËË 
return
ÍÍ 
new
ÍÍ  
RepositoryResponse
ÍÍ -
<
ÍÍ- .
List
ÍÍ. 2
<
ÍÍ2 3
TView
ÍÍ3 8
>
ÍÍ8 9
>
ÍÍ9 :
(
ÍÍ: ;
)
ÍÍ; <
{
ÎÎ 
	IsSucceed
ÏÏ 
=
ÏÏ 
false
ÏÏ  %
,
ÏÏ% &
Data
ÌÌ 
=
ÌÌ 
null
ÌÌ 
,
ÌÌ  
	Exception
ÓÓ 
=
ÓÓ 
ex
ÓÓ  "
}
ÔÔ 
;
ÔÔ 
}
 
finally
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
_context
ÛÛ 
==
ÛÛ 
null
ÛÛ  $
)
ÛÛ$ %
{
ÙÙ 
context
ˆˆ 
.
ˆˆ 
Dispose
ˆˆ #
(
ˆˆ# $
)
ˆˆ$ %
;
ˆˆ% &
}
˜˜ 
}
¯¯ 
}
˘˘ 	
public
ÖÖ 
virtual
ÖÖ 
async
ÖÖ 
Task
ÖÖ !
<
ÖÖ! " 
RepositoryResponse
ÖÖ" 4
<
ÖÖ4 5
PaginationModel
ÖÖ5 D
<
ÖÖD E
TView
ÖÖE J
>
ÖÖJ K
>
ÖÖK L
>
ÖÖL M
GetModelListAsync
ÖÖN _
(
ÖÖ_ `
string
ÜÜ !
orderByPropertyName
ÜÜ "
,
ÜÜ" #
OrderByDirection
ÜÜ$ 4
	direction
ÜÜ5 >
,
ÜÜ> ?
int
ÜÜ@ C
?
ÜÜC D
pageSize
ÜÜE M
,
ÜÜM N
int
ÜÜO R
?
ÜÜR S
	pageIndex
ÜÜT ]
,
áá 	

TDbContext
áá
 
_context
áá 
=
áá 
null
áá  $
,
áá$ %#
IDbContextTransaction
áá& ;
_transaction
áá< H
=
ááI J
null
ááK O
)
ááO P
{
àà 	
var
ââ 
context
ââ 
=
ââ 
_context
ââ "
??
ââ# %
InitContext
ââ& 1
(
ââ1 2
)
ââ2 3
;
ââ3 4
var
ää 
transaction
ää 
=
ää 
_transaction
ää *
??
ää+ -
context
ää. 5
.
ää5 6
Database
ää6 >
.
ää> ?
BeginTransaction
ää? O
(
ääO P
)
ääP Q
;
ääQ R
try
åå 
{
çç 
var
éé 
query
éé 
=
éé 
context
éé #
.
éé# $
Set
éé$ '
<
éé' (
TModel
éé( .
>
éé. /
(
éé/ 0
)
éé0 1
;
éé1 2
var
êê 
result
êê 
=
êê 
await
êê "#
ParsePagingQueryAsync
êê# 8
(
êê8 9
query
êê9 >
,
êê> ?!
orderByPropertyName
êê@ S
,
êêS T
	direction
êêU ^
,
êê^ _
pageSize
êê` h
,
êêh i
	pageIndex
êêj s
,
êês t
context
êêu |
,
êê| }
transactionêê~ â
)êêâ ä
.êêä ã
ConfigureAwaitêêã ô
(êêô ö
falseêêö ü
)êêü †
;êê† °
return
ëë 
new
ëë  
RepositoryResponse
ëë -
<
ëë- .
PaginationModel
ëë. =
<
ëë= >
TView
ëë> C
>
ëëC D
>
ëëD E
(
ëëE F
)
ëëF G
{
íí 
	IsSucceed
ìì 
=
ìì 
true
ìì  $
,
ìì$ %
Data
îî 
=
îî 
result
îî !
}
ïï 
;
ïï 
}
ññ 
catch
óó 
(
óó 
	Exception
óó 
ex
óó 
)
óó  
{
òò 
LogErrorMessage
ôô 
(
ôô  
ex
ôô  "
)
ôô" #
;
ôô# $
if
öö 
(
öö 
_transaction
öö  
==
öö! #
null
öö$ (
)
öö( )
{
õõ 
transaction
ùù 
.
ùù  
Rollback
ùù  (
(
ùù( )
)
ùù) *
;
ùù* +
}
ûû 
return
†† 
new
††  
RepositoryResponse
†† -
<
††- .
PaginationModel
††. =
<
††= >
TView
††> C
>
††C D
>
††D E
(
††E F
)
††F G
{
°° 
	IsSucceed
¢¢ 
=
¢¢ 
false
¢¢  %
,
¢¢% &
Data
££ 
=
££ 
null
££ 
,
££  
	Exception
§§ 
=
§§ 
ex
§§  "
}
•• 
;
•• 
}
¶¶ 
finally
ßß 
{
®® 
if
©© 
(
©© 
_context
©© 
==
©© 
null
©©  $
)
©©$ %
{
™™ 
context
¨¨ 
.
¨¨ 
Dispose
¨¨ #
(
¨¨# $
)
¨¨$ %
;
¨¨% &
}
≠≠ 
}
ÆÆ 
}
ØØ 	
public
ºº 
virtual
ºº  
RepositoryResponse
ºº )
<
ºº) *
List
ºº* .
<
ºº. /
TView
ºº/ 4
>
ºº4 5
>
ºº5 6
GetModelListBy
ºº7 E
(
ººE F

Expression
ººF P
<
ººP Q
Func
ººQ U
<
ººU V
TModel
ººV \
,
ºº\ ]
bool
ºº^ b
>
ººb c
>
ººc d
	predicate
ººe n
,
ΩΩ 	

TDbContext
ΩΩ
 
_context
ΩΩ 
=
ΩΩ 
null
ΩΩ  $
,
ΩΩ$ %#
IDbContextTransaction
ΩΩ& ;
_transaction
ΩΩ< H
=
ΩΩI J
null
ΩΩK O
)
ΩΩO P
{
ææ 	
var
øø 
context
øø 
=
øø 
_context
øø "
??
øø# %
InitContext
øø& 1
(
øø1 2
)
øø2 3
;
øø3 4
var
¿¿ 
transaction
¿¿ 
=
¿¿ 
_transaction
¿¿ *
??
¿¿+ -
context
¿¿. 5
.
¿¿5 6
Database
¿¿6 >
.
¿¿> ?
BeginTransaction
¿¿? O
(
¿¿O P
)
¿¿P Q
;
¿¿Q R
try
¬¬ 
{
√√ 
var
ƒƒ 
lstModel
ƒƒ 
=
ƒƒ 
context
ƒƒ &
.
ƒƒ& '
Set
ƒƒ' *
<
ƒƒ* +
TModel
ƒƒ+ 1
>
ƒƒ1 2
(
ƒƒ2 3
)
ƒƒ3 4
.
ƒƒ4 5
Where
ƒƒ5 :
(
ƒƒ: ;
	predicate
ƒƒ; D
)
ƒƒD E
.
ƒƒE F
ToList
ƒƒF L
(
ƒƒL M
)
ƒƒM N
;
ƒƒN O
lstModel
≈≈ 
.
≈≈ 
ForEach
≈≈  
(
≈≈  !
model
≈≈! &
=>
≈≈' )
context
≈≈* 1
.
≈≈1 2
Entry
≈≈2 7
(
≈≈7 8
model
≈≈8 =
)
≈≈= >
.
≈≈> ?
State
≈≈? D
=
≈≈E F
EntityState
≈≈G R
.
≈≈R S
Detached
≈≈S [
)
≈≈[ \
;
≈≈\ ]
var
∆∆ 
lstViewResult
∆∆ !
=
∆∆" #
	ParseView
∆∆$ -
(
∆∆- .
lstModel
∆∆. 6
,
∆∆6 7
_context
∆∆8 @
,
∆∆@ A
_transaction
∆∆B N
)
∆∆N O
;
∆∆O P
return
«« 
new
««  
RepositoryResponse
«« -
<
««- .
List
««. 2
<
««2 3
TView
««3 8
>
««8 9
>
««9 :
(
««: ;
)
««; <
{
»» 
	IsSucceed
…… 
=
…… 
true
……  $
,
……$ %
Data
   
=
   
lstViewResult
   (
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ 
LogErrorMessage
œœ 
(
œœ  
ex
œœ  "
)
œœ" #
;
œœ# $
if
–– 
(
–– 
_transaction
––  
==
––! #
null
––$ (
)
––( )
{
—— 
transaction
”” 
.
””  
Rollback
””  (
(
””( )
)
””) *
;
””* +
}
‘‘ 
return
÷÷ 
new
÷÷  
RepositoryResponse
÷÷ -
<
÷÷- .
List
÷÷. 2
<
÷÷2 3
TView
÷÷3 8
>
÷÷8 9
>
÷÷9 :
(
÷÷: ;
)
÷÷; <
{
◊◊ 
	IsSucceed
ÿÿ 
=
ÿÿ 
false
ÿÿ  %
,
ÿÿ% &
Data
ŸŸ 
=
ŸŸ 
null
ŸŸ 
,
ŸŸ  
	Exception
⁄⁄ 
=
⁄⁄ 
ex
⁄⁄  "
}
€€ 
;
€€ 
}
‹‹ 
finally
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
_context
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ  $
)
ﬂﬂ$ %
{
‡‡ 
context
‚‚ 
.
‚‚ 
Dispose
‚‚ #
(
‚‚# $
)
‚‚$ %
;
‚‚% &
}
„„ 
}
‰‰ 
}
ÂÂ 	
public
ÚÚ 
virtual
ÚÚ  
RepositoryResponse
ÚÚ )
<
ÚÚ) *
PaginationModel
ÚÚ* 9
<
ÚÚ9 :
TView
ÚÚ: ?
>
ÚÚ? @
>
ÚÚ@ A
GetModelListBy
ÚÚB P
(
ÚÚP Q

Expression
ÛÛ 
<
ÛÛ 
Func
ÛÛ 
<
ÛÛ 
TModel
ÛÛ 
,
ÛÛ 
bool
ÛÛ  $
>
ÛÛ$ %
>
ÛÛ% &
	predicate
ÛÛ' 0
,
ÛÛ0 1
string
ÛÛ2 8!
orderByPropertyName
ÛÛ9 L
,
ÛÛL M
OrderByDirection
ÛÛN ^
	direction
ÛÛ_ h
,
ÛÛh i
int
ÛÛj m
?
ÛÛm n
pageSize
ÛÛo w
,
ÛÛw x
int
ÛÛy |
?
ÛÛ| }
	pageIndexÛÛ~ á
,
ÙÙ 	

TDbContext
ÙÙ
 
_context
ÙÙ 
=
ÙÙ 
null
ÙÙ  $
,
ÙÙ$ %#
IDbContextTransaction
ÙÙ& ;
_transaction
ÙÙ< H
=
ÙÙI J
null
ÙÙK O
)
ÙÙO P
{
ıı 	
var
ˆˆ 
context
ˆˆ 
=
ˆˆ 
_context
ˆˆ "
??
ˆˆ# %
InitContext
ˆˆ& 1
(
ˆˆ1 2
)
ˆˆ2 3
;
ˆˆ3 4
var
˜˜ 
transaction
˜˜ 
=
˜˜ 
_transaction
˜˜ *
??
˜˜+ -
context
˜˜. 5
.
˜˜5 6
Database
˜˜6 >
.
˜˜> ?
BeginTransaction
˜˜? O
(
˜˜O P
)
˜˜P Q
;
˜˜Q R
try
˘˘ 
{
˙˙ 
var
˚˚ 
query
˚˚ 
=
˚˚ 
context
˚˚ #
.
˚˚# $
Set
˚˚$ '
<
˚˚' (
TModel
˚˚( .
>
˚˚. /
(
˚˚/ 0
)
˚˚0 1
.
˚˚1 2
Where
˚˚2 7
(
˚˚7 8
	predicate
˚˚8 A
)
˚˚A B
;
˚˚B C
var
¸¸ 
result
¸¸ 
=
¸¸ 
ParsePagingQuery
¸¸ -
(
¸¸- .
query
¸¸. 3
,
˝˝ !
orderByPropertyName
˝˝ %
,
˝˝% &
	direction
˝˝' 0
,
˛˛ 
pageSize
˛˛ 
,
˛˛ 
	pageIndex
˛˛ %
,
ˇˇ 
context
ˇˇ 
,
ˇˇ 
transaction
ˇˇ &
)
ˇˇ& '
;
ˇˇ' (
return
ÄÄ 
new
ÄÄ  
RepositoryResponse
ÄÄ -
<
ÄÄ- .
PaginationModel
ÄÄ. =
<
ÄÄ= >
TView
ÄÄ> C
>
ÄÄC D
>
ÄÄD E
(
ÄÄE F
)
ÄÄF G
{
ÅÅ 
	IsSucceed
ÇÇ 
=
ÇÇ 
true
ÇÇ  $
,
ÇÇ$ %
Data
ÉÉ 
=
ÉÉ 
result
ÉÉ !
}
ÑÑ 
;
ÑÑ 
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
LogErrorMessage
àà 
(
àà  
ex
àà  "
)
àà" #
;
àà# $
if
ââ 
(
ââ 
_transaction
ââ  
==
ââ! #
null
ââ$ (
)
ââ( )
{
ää 
transaction
åå 
.
åå  
Rollback
åå  (
(
åå( )
)
åå) *
;
åå* +
}
çç 
return
èè 
new
èè  
RepositoryResponse
èè -
<
èè- .
PaginationModel
èè. =
<
èè= >
TView
èè> C
>
èèC D
>
èèD E
(
èèE F
)
èèF G
{
êê 
	IsSucceed
ëë 
=
ëë 
false
ëë  %
,
ëë% &
Data
íí 
=
íí 
null
íí 
,
íí  
	Exception
ìì 
=
ìì 
ex
ìì  "
}
îî 
;
îî 
}
ïï 
finally
ññ 
{
óó 
if
òò 
(
òò 
_context
òò 
==
òò 
null
òò  $
)
òò$ %
{
ôô 
context
õõ 
.
õõ 
Dispose
õõ #
(
õõ# $
)
õõ$ %
;
õõ% &
}
úú 
}
ùù 
}
ûû 	
public
ßß 
virtual
ßß 
async
ßß 
Task
ßß !
<
ßß! " 
RepositoryResponse
ßß" 4
<
ßß4 5
List
ßß5 9
<
ßß9 :
TView
ßß: ?
>
ßß? @
>
ßß@ A
>
ßßA B!
GetModelListByAsync
ßßC V
(
ßßV W

Expression
ßßW a
<
ßßa b
Func
ßßb f
<
ßßf g
TModel
ßßg m
,
ßßm n
bool
ßßo s
>
ßßs t
>
ßßt u
	predicate
ßßv 
,
®® 	

TDbContext
®®
 
_context
®® 
=
®® 
null
®®  $
,
®®$ %#
IDbContextTransaction
®®& ;
_transaction
®®< H
=
®®I J
null
®®K O
)
®®O P
{
©© 	
var
™™ 
context
™™ 
=
™™ 
_context
™™ "
??
™™# %
InitContext
™™& 1
(
™™1 2
)
™™2 3
;
™™3 4
var
´´ 
transaction
´´ 
=
´´ 
_transaction
´´ *
??
´´+ -
context
´´. 5
.
´´5 6
Database
´´6 >
.
´´> ?
BeginTransaction
´´? O
(
´´O P
)
´´P Q
;
´´Q R
try
≠≠ 
{
ÆÆ 
var
ØØ 
query
ØØ 
=
ØØ 
context
ØØ #
.
ØØ# $
Set
ØØ$ '
<
ØØ' (
TModel
ØØ( .
>
ØØ. /
(
ØØ/ 0
)
ØØ0 1
.
ØØ1 2
Where
ØØ2 7
(
ØØ7 8
	predicate
ØØ8 A
)
ØØA B
;
ØØB C
var
∞∞ 
lstModel
∞∞ 
=
∞∞ 
await
∞∞ $
query
∞∞% *
.
∞∞* +
ToListAsync
∞∞+ 6
(
∞∞6 7
)
∞∞7 8
.
∞∞8 9
ConfigureAwait
∞∞9 G
(
∞∞G H
false
∞∞H M
)
∞∞M N
;
∞∞N O
lstModel
±± 
.
±± 
ForEach
±±  
(
±±  !
model
±±! &
=>
±±' )
context
±±* 1
.
±±1 2
Entry
±±2 7
(
±±7 8
model
±±8 =
)
±±= >
.
±±> ?
State
±±? D
=
±±E F
EntityState
±±G R
.
±±R S
Detached
±±S [
)
±±[ \
;
±±\ ]
var
≤≤ 
result
≤≤ 
=
≤≤ 
	ParseView
≤≤ &
(
≤≤& '
lstModel
≤≤' /
,
≤≤/ 0
_context
≤≤1 9
,
≤≤9 :
_transaction
≤≤; G
)
≤≤G H
;
≤≤H I
return
≥≥ 
new
≥≥  
RepositoryResponse
≥≥ -
<
≥≥- .
List
≥≥. 2
<
≥≥2 3
TView
≥≥3 8
>
≥≥8 9
>
≥≥9 :
(
≥≥: ;
)
≥≥; <
{
¥¥ 
	IsSucceed
µµ 
=
µµ 
true
µµ  $
,
µµ$ %
Data
∂∂ 
=
∂∂ 
result
∂∂ !
}
∑∑ 
;
∑∑ 
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ 
ex
ππ 
)
ππ  
{
∫∫ 
LogErrorMessage
ªª 
(
ªª  
ex
ªª  "
)
ªª" #
;
ªª# $
if
ºº 
(
ºº 
_transaction
ºº  
==
ºº! #
null
ºº$ (
)
ºº( )
{
ΩΩ 
transaction
øø 
.
øø  
Rollback
øø  (
(
øø( )
)
øø) *
;
øø* +
}
¿¿ 
return
¬¬ 
new
¬¬  
RepositoryResponse
¬¬ -
<
¬¬- .
List
¬¬. 2
<
¬¬2 3
TView
¬¬3 8
>
¬¬8 9
>
¬¬9 :
(
¬¬: ;
)
¬¬; <
{
√√ 
	IsSucceed
ƒƒ 
=
ƒƒ 
false
ƒƒ  %
,
ƒƒ% &
Data
≈≈ 
=
≈≈ 
null
≈≈ 
,
≈≈  
	Exception
∆∆ 
=
∆∆ 
ex
∆∆  "
}
«« 
;
«« 
}
»» 
finally
…… 
{
   
if
ÀÀ 
(
ÀÀ 
_context
ÀÀ 
==
ÀÀ 
null
ÀÀ  $
)
ÀÀ$ %
{
ÃÃ 
context
ŒŒ 
.
ŒŒ 
Dispose
ŒŒ #
(
ŒŒ# $
)
ŒŒ$ %
;
ŒŒ% &
}
œœ 
}
–– 
}
—— 	
public
ﬁﬁ 
virtual
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ !
<
ﬁﬁ! " 
RepositoryResponse
ﬁﬁ" 4
<
ﬁﬁ4 5
PaginationModel
ﬁﬁ5 D
<
ﬁﬁD E
TView
ﬁﬁE J
>
ﬁﬁJ K
>
ﬁﬁK L
>
ﬁﬁL M!
GetModelListByAsync
ﬁﬁN a
(
ﬁﬁa b

Expression
ﬂﬂ 
<
ﬂﬂ 
Func
ﬂﬂ 
<
ﬂﬂ 
TModel
ﬂﬂ 
,
ﬂﬂ 
bool
ﬂﬂ  $
>
ﬂﬂ$ %
>
ﬂﬂ% &
	predicate
ﬂﬂ' 0
,
ﬂﬂ0 1
string
ﬂﬂ2 8!
orderByPropertyName
ﬂﬂ9 L
,
‡‡ 	
OrderByDirection
‡‡
 
	direction
‡‡ $
,
‡‡$ %
int
‡‡& )
?
‡‡) *
pageSize
‡‡+ 3
,
‡‡3 4
int
‡‡5 8
?
‡‡8 9
	pageIndex
‡‡: C
,
·· 	

TDbContext
··
 
_context
·· 
=
·· 
null
··  $
,
··$ %#
IDbContextTransaction
··& ;
_transaction
··< H
=
··I J
null
··K O
)
··O P
{
‚‚ 	
var
„„ 
context
„„ 
=
„„ 
_context
„„ "
??
„„# %
InitContext
„„& 1
(
„„1 2
)
„„2 3
;
„„3 4
var
‰‰ 
transaction
‰‰ 
=
‰‰ 
_transaction
‰‰ *
??
‰‰+ -
context
‰‰. 5
.
‰‰5 6
Database
‰‰6 >
.
‰‰> ?
BeginTransaction
‰‰? O
(
‰‰O P
)
‰‰P Q
;
‰‰Q R
try
ÊÊ 
{
ÁÁ 
var
ËË 
query
ËË 
=
ËË 
context
ËË #
.
ËË# $
Set
ËË$ '
<
ËË' (
TModel
ËË( .
>
ËË. /
(
ËË/ 0
)
ËË0 1
.
ËË1 2
Where
ËË2 7
(
ËË7 8
	predicate
ËË8 A
)
ËËA B
;
ËËB C
var
ÍÍ 
result
ÍÍ 
=
ÍÍ 
await
ÍÍ "#
ParsePagingQueryAsync
ÍÍ# 8
(
ÍÍ8 9
query
ÍÍ9 >
,
ÎÎ !
orderByPropertyName
ÎÎ %
,
ÎÎ% &
	direction
ÎÎ' 0
,
ÏÏ 
pageSize
ÏÏ 
,
ÏÏ 
	pageIndex
ÏÏ %
,
ÌÌ 
context
ÌÌ 
,
ÌÌ 
transaction
ÌÌ &
)
ÌÌ& '
.
ÌÌ' (
ConfigureAwait
ÌÌ( 6
(
ÌÌ6 7
false
ÌÌ7 <
)
ÌÌ< =
;
ÌÌ= >
return
ÓÓ 
new
ÓÓ  
RepositoryResponse
ÓÓ -
<
ÓÓ- .
PaginationModel
ÓÓ. =
<
ÓÓ= >
TView
ÓÓ> C
>
ÓÓC D
>
ÓÓD E
(
ÓÓE F
)
ÓÓF G
{
ÔÔ 
	IsSucceed
 
=
 
true
  $
,
$ %
Data
ÒÒ 
=
ÒÒ 
result
ÒÒ !
}
ÚÚ 
;
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
LogErrorMessage
ˆˆ 
(
ˆˆ  
ex
ˆˆ  "
)
ˆˆ" #
;
ˆˆ# $
if
˜˜ 
(
˜˜ 
_transaction
˜˜  
==
˜˜! #
null
˜˜$ (
)
˜˜( )
{
¯¯ 
transaction
˙˙ 
.
˙˙  
Rollback
˙˙  (
(
˙˙( )
)
˙˙) *
;
˙˙* +
}
˚˚ 
return
˝˝ 
new
˝˝  
RepositoryResponse
˝˝ -
<
˝˝- .
PaginationModel
˝˝. =
<
˝˝= >
TView
˝˝> C
>
˝˝C D
>
˝˝D E
(
˝˝E F
)
˝˝F G
{
˛˛ 
	IsSucceed
ˇˇ 
=
ˇˇ 
false
ˇˇ  %
,
ˇˇ% &
Data
Ä	Ä	 
=
Ä	Ä	 
null
Ä	Ä	 
,
Ä	Ä	  
	Exception
Å	Å	 
=
Å	Å	 
ex
Å	Å	  "
}
Ç	Ç	 
;
Ç	Ç	 
}
É	É	 
finally
Ñ	Ñ	 
{
Ö	Ö	 
if
Ü	Ü	 
(
Ü	Ü	 
_context
Ü	Ü	 
==
Ü	Ü	 
null
Ü	Ü	  $
)
Ü	Ü	$ %
{
á	á	 
context
â	â	 
.
â	â	 
Dispose
â	â	 #
(
â	â	# $
)
â	â	$ %
;
â	â	% &
}
ä	ä	 
}
ã	ã	 
}
å	å	 	
public
ò	ò	 
virtual
ò	ò	  
RepositoryResponse
ò	ò	 )
<
ò	ò	) *
bool
ò	ò	* .
>
ò	ò	. /
RemoveListModel
ò	ò	0 ?
(
ò	ò	? @

Expression
ò	ò	@ J
<
ò	ò	J K
Func
ò	ò	K O
<
ò	ò	O P
TModel
ò	ò	P V
,
ò	ò	V W
bool
ò	ò	X \
>
ò	ò	\ ]
>
ò	ò	] ^
	predicate
ò	ò	_ h
,
ô	ô	 	

TDbContext
ô	ô	
 
_context
ô	ô	 
=
ô	ô	 
null
ô	ô	  $
,
ô	ô	$ %#
IDbContextTransaction
ô	ô	& ;
_transaction
ô	ô	< H
=
ô	ô	I J
null
ô	ô	K O
)
ô	ô	O P
{
ö	ö	 	
bool
õ	õ	 
isRoot
õ	õ	 
=
õ	õ	 
_context
õ	õ	 "
==
õ	õ	# %
null
õ	õ	& *
;
õ	õ	* +

TDbContext
ú	ú	 
context
ú	ú	 
=
ú	ú	  
_context
ú	ú	! )
??
ú	ú	* ,
InitContext
ú	ú	- 8
(
ú	ú	8 9
)
ú	ú	9 :
;
ú	ú	: ;
var
ù	ù	 
transaction
ù	ù	 
=
ù	ù	 
_transaction
ù	ù	 *
??
ù	ù	+ -
context
ù	ù	. 5
.
ù	ù	5 6
Database
ù	ù	6 >
.
ù	ù	> ?
BeginTransaction
ù	ù	? O
(
ù	ù	O P
)
ù	ù	P Q
;
ù	ù	Q R
try
û	û	 
{
ü	ü	 
var
†	†	 
Items
†	†	 
=
†	†	 
context
†	†	 #
.
†	†	# $
Set
†	†	$ '
<
†	†	' (
TModel
†	†	( .
>
†	†	. /
(
†	†	/ 0
)
†	†	0 1
.
†	†	1 2
Where
†	†	2 7
(
†	†	7 8
	predicate
†	†	8 A
)
†	†	A B
.
†	†	B C
ToList
†	†	C I
(
†	†	I J
)
†	†	J K
;
†	†	K L
bool
°	°	 
result
°	°	 
=
°	°	 
true
°	°	 "
;
°	°	" #
if
¢	¢	 
(
¢	¢	 
Items
¢	¢	 
!=
¢	¢	 
null
¢	¢	 !
)
¢	¢	! "
{
£	£	 
foreach
§	§	 
(
§	§	 
var
§	§	  
model
§	§	! &
in
§	§	' )
Items
§	§	* /
)
§	§	/ 0
{
•	•	 
if
¶	¶	 
(
¶	¶	 
result
¶	¶	 "
)
¶	¶	" #
{
ß	ß	 
var
®	®	 
r
®	®	  !
=
®	®	" #
RemoveModel
®	®	$ /
(
®	®	/ 0
model
®	®	0 5
,
®	®	5 6
context
®	®	7 >
,
®	®	> ?
transaction
®	®	@ K
)
®	®	K L
;
®	®	L M
result
©	©	 "
=
©	©	# $
result
©	©	% +
&&
©	©	, .
r
©	©	/ 0
.
©	©	0 1
	IsSucceed
©	©	1 :
;
©	©	: ;
}
™	™	 
else
´	´	 
{
¨	¨	 
break
≠	≠	 !
;
≠	≠	! "
}
Æ	Æ	 
}
Ø	Ø	 
HandleTransaction
±	±	 %
(
±	±	% &
result
±	±	& ,
,
±	±	, -
isRoot
±	±	. 4
,
±	±	4 5
transaction
±	±	6 A
)
±	±	A B
;
±	±	B C
return
≥	≥	 
new
≥	≥	  
RepositoryResponse
≥	≥	 1
<
≥	≥	1 2
bool
≥	≥	2 6
>
≥	≥	6 7
(
≥	≥	7 8
)
≥	≥	8 9
{
¥	¥	 
	IsSucceed
µ	µ	 !
=
µ	µ	" #
result
µ	µ	$ *
,
µ	µ	* +
Data
∂	∂	 
=
∂	∂	 
result
∂	∂	 %
}
∑	∑	 
;
∑	∑	 
}
∏	∏	 
else
π	π	 
{
∫	∫	 
return
ª	ª	 
new
ª	ª	  
RepositoryResponse
ª	ª	 1
<
ª	ª	1 2
bool
ª	ª	2 6
>
ª	ª	6 7
(
ª	ª	7 8
)
ª	ª	8 9
{
º	º	 
	IsSucceed
Ω	Ω	 !
=
Ω	Ω	" #
true
Ω	Ω	$ (
,
Ω	Ω	( )
Data
æ	æ	 
=
æ	æ	 
true
æ	æ	 #
}
ø	ø	 
;
ø	ø	 
}
¿	¿	 
}
¡	¡	 
catch
¬	¬	 
(
¬	¬	 
	Exception
¬	¬	 
ex
¬	¬	 
)
¬	¬	  
{
√	√	 
LogErrorMessage
ƒ	ƒ	 
(
ƒ	ƒ	  
ex
ƒ	ƒ	  "
)
ƒ	ƒ	" #
;
ƒ	ƒ	# $
if
≈	≈	 
(
≈	≈	 
_transaction
≈	≈	  
==
≈	≈	! #
null
≈	≈	$ (
)
≈	≈	( )
{
∆	∆	 
transaction
»	»	 
.
»	»	  
Rollback
»	»	  (
(
»	»	( )
)
»	»	) *
;
»	»	* +
}
…	…	 
return
À	À	 
new
À	À	  
RepositoryResponse
À	À	 -
<
À	À	- .
bool
À	À	. 2
>
À	À	2 3
(
À	À	3 4
)
À	À	4 5
{
Ã	Ã	 
	IsSucceed
Õ	Õ	 
=
Õ	Õ	 
false
Õ	Õ	  %
,
Õ	Õ	% &
Data
Œ	Œ	 
=
Œ	Œ	 
false
Œ	Œ	  
,
Œ	Œ	  !
	Exception
œ	œ	 
=
œ	œ	 
ex
œ	œ	  "
}
–	–	 
;
–	–	 
}
—	—	 
finally
“	“	 
{
”	”	 
if
‘	‘	 
(
‘	‘	 
_context
‘	‘	 
==
‘	‘	 
null
‘	‘	  $
)
‘	‘	$ %
{
’	’	 
context
◊	◊	 
.
◊	◊	 
Dispose
◊	◊	 #
(
◊	◊	# $
)
◊	◊	$ %
;
◊	◊	% &
}
ÿ	ÿ	 
}
Ÿ	Ÿ	 
}
⁄	⁄	 	
public
‰	‰	 
virtual
‰	‰	 
async
‰	‰	 
Task
‰	‰	 !
<
‰	‰	! " 
RepositoryResponse
‰	‰	" 4
<
‰	‰	4 5
bool
‰	‰	5 9
>
‰	‰	9 :
>
‰	‰	: ;"
RemoveListModelAsync
‰	‰	< P
(
‰	‰	P Q

Expression
‰	‰	Q [
<
‰	‰	[ \
Func
‰	‰	\ `
<
‰	‰	` a
TModel
‰	‰	a g
,
‰	‰	g h
bool
‰	‰	i m
>
‰	‰	m n
>
‰	‰	n o
	predicate
‰	‰	p y
,
Â	Â	 	

TDbContext
Â	Â	
 
_context
Â	Â	 
=
Â	Â	 
null
Â	Â	  $
,
Â	Â	$ %#
IDbContextTransaction
Â	Â	& ;
_transaction
Â	Â	< H
=
Â	Â	I J
null
Â	Â	K O
)
Â	Â	O P
{
Ê	Ê	 	
bool
Á	Á	 
isRoot
Á	Á	 
=
Á	Á	 
_context
Á	Á	 "
==
Á	Á	# %
null
Á	Á	& *
;
Á	Á	* +

TDbContext
Ë	Ë	 
context
Ë	Ë	 
=
Ë	Ë	  
_context
Ë	Ë	! )
??
Ë	Ë	* ,
InitContext
Ë	Ë	- 8
(
Ë	Ë	8 9
)
Ë	Ë	9 :
;
Ë	Ë	: ;
var
È	È	 
transaction
È	È	 
=
È	È	 
_transaction
È	È	 *
??
È	È	+ -
context
È	È	. 5
.
È	È	5 6
Database
È	È	6 >
.
È	È	> ?
BeginTransaction
È	È	? O
(
È	È	O P
)
È	È	P Q
;
È	È	Q R
try
Í	Í	 
{
Î	Î	 
var
Ï	Ï	 
Items
Ï	Ï	 
=
Ï	Ï	 
await
Ï	Ï	 !
context
Ï	Ï	" )
.
Ï	Ï	) *
Set
Ï	Ï	* -
<
Ï	Ï	- .
TModel
Ï	Ï	. 4
>
Ï	Ï	4 5
(
Ï	Ï	5 6
)
Ï	Ï	6 7
.
Ï	Ï	7 8
Where
Ï	Ï	8 =
(
Ï	Ï	= >
	predicate
Ï	Ï	> G
)
Ï	Ï	G H
.
Ï	Ï	H I
ToListAsync
Ï	Ï	I T
(
Ï	Ï	T U
)
Ï	Ï	U V
.
Ï	Ï	V W
ConfigureAwait
Ï	Ï	W e
(
Ï	Ï	e f
false
Ï	Ï	f k
)
Ï	Ï	k l
;
Ï	Ï	l m
bool
Ì	Ì	 
result
Ì	Ì	 
=
Ì	Ì	 
true
Ì	Ì	 "
;
Ì	Ì	" #
if
Ó	Ó	 
(
Ó	Ó	 
Items
Ó	Ó	 
!=
Ó	Ó	 
null
Ó	Ó	 !
)
Ó	Ó	! "
{
Ô	Ô	 
foreach
		 
(
		 
var
		  
model
		! &
in
		' )
Items
		* /
)
		/ 0
{
Ò	Ò	 
if
Ú	Ú	 
(
Ú	Ú	 
result
Ú	Ú	 "
)
Ú	Ú	" #
{
Û	Û	 
var
Ù	Ù	 
r
Ù	Ù	  !
=
Ù	Ù	" #
await
Ù	Ù	$ )
RemoveModelAsync
Ù	Ù	* :
(
Ù	Ù	: ;
model
Ù	Ù	; @
,
Ù	Ù	@ A
context
Ù	Ù	B I
,
Ù	Ù	I J
transaction
Ù	Ù	K V
)
Ù	Ù	V W
.
Ù	Ù	W X
ConfigureAwait
Ù	Ù	X f
(
Ù	Ù	f g
false
Ù	Ù	g l
)
Ù	Ù	l m
;
Ù	Ù	m n
result
ı	ı	 "
=
ı	ı	# $
result
ı	ı	% +
&&
ı	ı	, .
r
ı	ı	/ 0
.
ı	ı	0 1
	IsSucceed
ı	ı	1 :
;
ı	ı	: ;
}
ˆ	ˆ	 
else
˜	˜	 
{
¯	¯	 
break
˘	˘	 !
;
˘	˘	! "
}
˙	˙	 
}
˚	˚	 
HandleTransaction
˝	˝	 %
(
˝	˝	% &
result
˝	˝	& ,
,
˝	˝	, -
isRoot
˝	˝	. 4
,
˝	˝	4 5
transaction
˝	˝	6 A
)
˝	˝	A B
;
˝	˝	B C
return
ˇ	ˇ	 
new
ˇ	ˇ	  
RepositoryResponse
ˇ	ˇ	 1
<
ˇ	ˇ	1 2
bool
ˇ	ˇ	2 6
>
ˇ	ˇ	6 7
(
ˇ	ˇ	7 8
)
ˇ	ˇ	8 9
{
Ä
Ä
 
	IsSucceed
Å
Å
 !
=
Å
Å
" #
result
Å
Å
$ *
,
Å
Å
* +
Data
Ç
Ç
 
=
Ç
Ç
 
result
Ç
Ç
 %
}
É
É
 
;
É
É
 
}
Ñ
Ñ
 
else
Ö
Ö
 
{
Ü
Ü
 
return
á
á
 
new
á
á
  
RepositoryResponse
á
á
 1
<
á
á
1 2
bool
á
á
2 6
>
á
á
6 7
(
á
á
7 8
)
á
á
8 9
{
à
à
 
	IsSucceed
â
â
 !
=
â
â
" #
true
â
â
$ (
,
â
â
( )
Data
ä
ä
 
=
ä
ä
 
true
ä
ä
 #
}
ã
ã
 
;
ã
ã
 
}
å
å
 
}
ç
ç
 
catch
é
é
 
(
é
é
 
	Exception
é
é
 
ex
é
é
 
)
é
é
  
{
è
è
 
LogErrorMessage
ê
ê
 
(
ê
ê
  
ex
ê
ê
  "
)
ê
ê
" #
;
ê
ê
# $
if
ë
ë
 
(
ë
ë
 
_transaction
ë
ë
  
==
ë
ë
! #
null
ë
ë
$ (
)
ë
ë
( )
{
í
í
 
transaction
î
î
 
.
î
î
  
Rollback
î
î
  (
(
î
î
( )
)
î
î
) *
;
î
î
* +
}
ï
ï
 
return
ó
ó
 
new
ó
ó
  
RepositoryResponse
ó
ó
 -
<
ó
ó
- .
bool
ó
ó
. 2
>
ó
ó
2 3
(
ó
ó
3 4
)
ó
ó
4 5
{
ò
ò
 
	IsSucceed
ô
ô
 
=
ô
ô
 
false
ô
ô
  %
,
ô
ô
% &
Data
ö
ö
 
=
ö
ö
 
false
ö
ö
  
,
ö
ö
  !
	Exception
õ
õ
 
=
õ
õ
 
ex
õ
õ
  "
}
ú
ú
 
;
ú
ú
 
}
ù
ù
 
finally
û
û
 
{
ü
ü
 
if
†
†
 
(
†
†
 
_context
†
†
 
==
†
†
 
null
†
†
  $
)
†
†
$ %
{
°
°
 
context
£
£
 
.
£
£
 
Dispose
£
£
 #
(
£
£
# $
)
£
£
$ %
;
£
£
% &
}
§
§
 
}
•
•
 
}
¶
¶
 	
public
∞
∞
 
virtual
∞
∞
  
RepositoryResponse
∞
∞
 )
<
∞
∞
) *
bool
∞
∞
* .
>
∞
∞
. /
RemoveModel
∞
∞
0 ;
(
∞
∞
; <

Expression
∞
∞
< F
<
∞
∞
F G
Func
∞
∞
G K
<
∞
∞
K L
TModel
∞
∞
L R
,
∞
∞
R S
bool
∞
∞
T X
>
∞
∞
X Y
>
∞
∞
Y Z
	predicate
∞
∞
[ d
,
∞
∞
d e

TDbContext
∞
∞
f p
_context
∞
∞
q y
=
∞
∞
z {
null∞
∞
| Ä
,∞
∞
Ä Å%
IDbContextTransaction∞
∞
Ç ó
_transaction∞
∞
ò §
=∞
∞
• ¶
null∞
∞
ß ´
)∞
∞
´ ¨
{
±
±
 	
bool
≤
≤
 
isRoot
≤
≤
 
=
≤
≤
 
_context
≤
≤
 "
==
≤
≤
# %
null
≤
≤
& *
;
≤
≤
* +

TDbContext
≥
≥
 
context
≥
≥
 
=
≥
≥
  
_context
≥
≥
! )
??
≥
≥
* ,
InitContext
≥
≥
- 8
(
≥
≥
8 9
)
≥
≥
9 :
;
≥
≥
: ;
var
¥
¥
 
transaction
¥
¥
 
=
¥
¥
 
_transaction
¥
¥
 *
??
¥
¥
+ -
context
¥
¥
. 5
.
¥
¥
5 6
Database
¥
¥
6 >
.
¥
¥
> ?
BeginTransaction
¥
¥
? O
(
¥
¥
O P
)
¥
¥
P Q
;
¥
¥
Q R
try
µ
µ
 
{
∂
∂
 
TModel
∑
∑
 
model
∑
∑
 
=
∑
∑
 
context
∑
∑
 &
.
∑
∑
& '
Set
∑
∑
' *
<
∑
∑
* +
TModel
∑
∑
+ 1
>
∑
∑
1 2
(
∑
∑
2 3
)
∑
∑
3 4
.
∑
∑
4 5
FirstOrDefault
∑
∑
5 C
(
∑
∑
C D
	predicate
∑
∑
D M
)
∑
∑
M N
;
∑
∑
N O
bool
∏
∏
 
result
∏
∏
 
=
∏
∏
 
true
∏
∏
 "
;
∏
∏
" #
if
π
π
 
(
π
π
 
model
π
π
 
!=
π
π
 
null
π
π
 !
&&
π
π
" $
CheckIsExists
π
π
% 2
(
π
π
2 3
model
π
π
3 8
,
π
π
8 9
context
π
π
: A
,
π
π
A B
transaction
π
π
C N
)
π
π
N O
)
π
π
O P
{
∫
∫
 
context
ª
ª
 
.
ª
ª
 
Entry
ª
ª
 !
(
ª
ª
! "
model
ª
ª
" '
)
ª
ª
' (
.
ª
ª
( )
State
ª
ª
) .
=
ª
ª
/ 0
EntityState
ª
ª
1 <
.
ª
ª
< =
Deleted
ª
ª
= D
;
ª
ª
D E
result
º
º
 
=
º
º
 
context
º
º
 $
.
º
º
$ %
SaveChanges
º
º
% 0
(
º
º
0 1
)
º
º
1 2
>
º
º
3 4
$num
º
º
5 6
;
º
º
6 7
}
Ω
Ω
 
HandleTransaction
ø
ø
 !
(
ø
ø
! "
result
ø
ø
" (
,
ø
ø
( )
isRoot
ø
ø
* 0
,
ø
ø
0 1
transaction
ø
ø
2 =
)
ø
ø
= >
;
ø
ø
> ?
return
¡
¡
 
new
¡
¡
  
RepositoryResponse
¡
¡
 -
<
¡
¡
- .
bool
¡
¡
. 2
>
¡
¡
2 3
(
¡
¡
3 4
)
¡
¡
4 5
{
¬
¬
 
	IsSucceed
√
√
 
=
√
√
 
result
√
√
  &
,
√
√
& '
Data
ƒ
ƒ
 
=
ƒ
ƒ
 
result
ƒ
ƒ
 !
}
≈
≈
 
;
≈
≈
 
}
∆
∆
 
catch
«
«
 
(
«
«
 
	Exception
«
«
 
ex
«
«
 
)
«
«
  
{
»
»
 
LogErrorMessage
…
…
 
(
…
…
  
ex
…
…
  "
)
…
…
" #
;
…
…
# $
if
 
 
 
(
 
 
 
_transaction
 
 
  
==
 
 
! #
null
 
 
$ (
)
 
 
( )
{
À
À
 
transaction
Õ
Õ
 
.
Õ
Õ
  
Rollback
Õ
Õ
  (
(
Õ
Õ
( )
)
Õ
Õ
) *
;
Õ
Õ
* +
}
Œ
Œ
 
return
–
–
 
new
–
–
  
RepositoryResponse
–
–
 -
<
–
–
- .
bool
–
–
. 2
>
–
–
2 3
(
–
–
3 4
)
–
–
4 5
{
—
—
 
	IsSucceed
“
“
 
=
“
“
 
false
“
“
  %
,
“
“
% &
Data
”
”
 
=
”
”
 
false
”
”
  
,
”
”
  !
	Exception
‘
‘
 
=
‘
‘
 
ex
‘
‘
  "
}
’
’
 
;
’
’
 
}
÷
÷
 
finally
◊
◊
 
{
ÿ
ÿ
 
if
Ÿ
Ÿ
 
(
Ÿ
Ÿ
 
_context
Ÿ
Ÿ
 
==
Ÿ
Ÿ
 
null
Ÿ
Ÿ
  $
)
Ÿ
Ÿ
$ %
{
⁄
⁄
 
context
‹
‹
 
.
‹
‹
 
Dispose
‹
‹
 #
(
‹
‹
# $
)
‹
‹
$ %
;
‹
‹
% &
}
›
›
 
}
ﬁ
ﬁ
 
}
ﬂ
ﬂ
 	
public
È
È
 
virtual
È
È
  
RepositoryResponse
È
È
 )
<
È
È
) *
bool
È
È
* .
>
È
È
. /
RemoveModel
È
È
0 ;
(
È
È
; <
TModel
È
È
< B
model
È
È
C H
,
È
È
H I

TDbContext
È
È
J T
_context
È
È
U ]
=
È
È
^ _
null
È
È
` d
,
È
È
d e#
IDbContextTransaction
È
È
f {
_transactionÈ
È
| à
=È
È
â ä
nullÈ
È
ã è
)È
È
è ê
{
Í
Í
 	
bool
Î
Î
 
isRoot
Î
Î
 
=
Î
Î
 
_context
Î
Î
 "
==
Î
Î
# %
null
Î
Î
& *
;
Î
Î
* +

TDbContext
Ï
Ï
 
context
Ï
Ï
 
=
Ï
Ï
  
_context
Ï
Ï
! )
??
Ï
Ï
* ,
InitContext
Ï
Ï
- 8
(
Ï
Ï
8 9
)
Ï
Ï
9 :
;
Ï
Ï
: ;
var
Ì
Ì
 
transaction
Ì
Ì
 
=
Ì
Ì
 
_transaction
Ì
Ì
 *
??
Ì
Ì
+ -
context
Ì
Ì
. 5
.
Ì
Ì
5 6
Database
Ì
Ì
6 >
.
Ì
Ì
> ?
BeginTransaction
Ì
Ì
? O
(
Ì
Ì
O P
)
Ì
Ì
P Q
;
Ì
Ì
Q R
try
Ó
Ó
 
{
Ô
Ô
 
bool


 
result


 
=


 
true


 "
;


" #
if
Ò
Ò
 
(
Ò
Ò
 
model
Ò
Ò
 
!=
Ò
Ò
 
null
Ò
Ò
 !
&&
Ò
Ò
" $
CheckIsExists
Ò
Ò
% 2
(
Ò
Ò
2 3
model
Ò
Ò
3 8
,
Ò
Ò
8 9
context
Ò
Ò
: A
,
Ò
Ò
A B
transaction
Ò
Ò
C N
)
Ò
Ò
N O
)
Ò
Ò
O P
{
Ú
Ú
 
context
Û
Û
 
.
Û
Û
 
Entry
Û
Û
 !
(
Û
Û
! "
model
Û
Û
" '
)
Û
Û
' (
.
Û
Û
( )
State
Û
Û
) .
=
Û
Û
/ 0
EntityState
Û
Û
1 <
.
Û
Û
< =
Deleted
Û
Û
= D
;
Û
Û
D E
result
Ù
Ù
 
=
Ù
Ù
 
context
Ù
Ù
 $
.
Ù
Ù
$ %
SaveChanges
Ù
Ù
% 0
(
Ù
Ù
0 1
)
Ù
Ù
1 2
>
Ù
Ù
3 4
$num
Ù
Ù
5 6
;
Ù
Ù
6 7
}
ı
ı
 
HandleTransaction
˜
˜
 !
(
˜
˜
! "
result
˜
˜
" (
,
˜
˜
( )
isRoot
˜
˜
* 0
,
˜
˜
0 1
transaction
˜
˜
2 =
)
˜
˜
= >
;
˜
˜
> ?
return
˘
˘
 
new
˘
˘
  
RepositoryResponse
˘
˘
 -
<
˘
˘
- .
bool
˘
˘
. 2
>
˘
˘
2 3
(
˘
˘
3 4
)
˘
˘
4 5
{
˙
˙
 
	IsSucceed
˚
˚
 
=
˚
˚
 
result
˚
˚
  &
,
˚
˚
& '
Data
¸
¸
 
=
¸
¸
 
result
¸
¸
 !
}
˝
˝
 
;
˝
˝
 
}
˛
˛
 
catch
ˇ
ˇ
 
(
ˇ
ˇ
 
	Exception
ˇ
ˇ
 
ex
ˇ
ˇ
 
)
ˇ
ˇ
  
{
ÄÄ 
LogErrorMessage
ÅÅ 
(
ÅÅ  
ex
ÅÅ  "
)
ÅÅ" #
;
ÅÅ# $
if
ÇÇ 
(
ÇÇ 
_transaction
ÇÇ  
==
ÇÇ! #
null
ÇÇ$ (
)
ÇÇ( )
{
ÉÉ 
transaction
ÖÖ 
.
ÖÖ  
Rollback
ÖÖ  (
(
ÖÖ( )
)
ÖÖ) *
;
ÖÖ* +
}
ÜÜ 
return
àà 
new
àà  
RepositoryResponse
àà -
<
àà- .
bool
àà. 2
>
àà2 3
(
àà3 4
)
àà4 5
{
ââ 
	IsSucceed
ää 
=
ää 
false
ää  %
,
ää% &
Data
ãã 
=
ãã 
false
ãã  
,
ãã  !
	Exception
åå 
=
åå 
ex
åå  "
}
çç 
;
çç 
}
éé 
finally
èè 
{
êê 
if
ëë 
(
ëë 
_context
ëë 
==
ëë 
null
ëë  $
)
ëë$ %
{
íí 
context
îî 
.
îî 
Dispose
îî #
(
îî# $
)
îî$ %
;
îî% &
}
ïï 
}
ññ 
}
óó 	
public
°° 
virtual
°° 
async
°° 
Task
°° !
<
°°! " 
RepositoryResponse
°°" 4
<
°°4 5
bool
°°5 9
>
°°9 :
>
°°: ;
RemoveModelAsync
°°< L
(
°°L M

Expression
°°M W
<
°°W X
Func
°°X \
<
°°\ ]
TModel
°°] c
,
°°c d
bool
°°e i
>
°°i j
>
°°j k
	predicate
°°l u
,
°°u v

TDbContext°°w Å
_context°°Ç ä
=°°ã å
null°°ç ë
,°°ë í%
IDbContextTransaction°°ì ®
_transaction°°© µ
=°°∂ ∑
null°°∏ º
)°°º Ω
{
¢¢ 	
bool
££ 
isRoot
££ 
=
££ 
_context
££ "
==
££# %
null
££& *
;
££* +

TDbContext
§§ 
context
§§ 
=
§§  
_context
§§! )
??
§§* ,
InitContext
§§- 8
(
§§8 9
)
§§9 :
;
§§: ;
var
•• 
transaction
•• 
=
•• 
_transaction
•• *
??
••+ -
context
••. 5
.
••5 6
Database
••6 >
.
••> ?
BeginTransaction
••? O
(
••O P
)
••P Q
;
••Q R
try
¶¶ 
{
ßß 
TModel
®® 
model
®® 
=
®® 
await
®® $
context
®®% ,
.
®®, -
Set
®®- 0
<
®®0 1
TModel
®®1 7
>
®®7 8
(
®®8 9
)
®®9 :
.
®®: ;!
FirstOrDefaultAsync
®®; N
(
®®N O
	predicate
®®O X
)
®®X Y
.
®®Y Z
ConfigureAwait
®®Z h
(
®®h i
false
®®i n
)
®®n o
;
®®o p
bool
©© 
result
©© 
=
©© 
true
©© "
;
©©" #
if
™™ 
(
™™ 
model
™™ 
!=
™™ 
null
™™ !
&&
™™" $
CheckIsExists
™™% 2
(
™™2 3
model
™™3 8
,
™™8 9
context
™™: A
,
™™A B
transaction
™™C N
)
™™N O
)
™™O P
{
´´ 
context
¨¨ 
.
¨¨ 
Entry
¨¨ !
(
¨¨! "
model
¨¨" '
)
¨¨' (
.
¨¨( )
State
¨¨) .
=
¨¨/ 0
EntityState
¨¨1 <
.
¨¨< =
Deleted
¨¨= D
;
¨¨D E
result
≠≠ 
=
≠≠ 
await
≠≠ "
context
≠≠# *
.
≠≠* +
SaveChangesAsync
≠≠+ ;
(
≠≠; <
)
≠≠< =
.
≠≠= >
ConfigureAwait
≠≠> L
(
≠≠L M
false
≠≠M R
)
≠≠R S
>
≠≠T U
$num
≠≠V W
;
≠≠W X
}
ÆÆ 
HandleTransaction
∞∞ !
(
∞∞! "
result
∞∞" (
,
∞∞( )
isRoot
∞∞* 0
,
∞∞0 1
transaction
∞∞2 =
)
∞∞= >
;
∞∞> ?
return
≤≤ 
new
≤≤  
RepositoryResponse
≤≤ -
<
≤≤- .
bool
≤≤. 2
>
≤≤2 3
(
≤≤3 4
)
≤≤4 5
{
≥≥ 
	IsSucceed
¥¥ 
=
¥¥ 
result
¥¥  &
,
¥¥& '
Data
µµ 
=
µµ 
result
µµ !
}
∂∂ 
;
∂∂ 
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏ 
ex
∏∏ 
)
∏∏  
{
ππ 
LogErrorMessage
∫∫ 
(
∫∫  
ex
∫∫  "
)
∫∫" #
;
∫∫# $
if
ªª 
(
ªª 
_transaction
ªª  
==
ªª! #
null
ªª$ (
)
ªª( )
{
ºº 
transaction
ææ 
.
ææ  
Rollback
ææ  (
(
ææ( )
)
ææ) *
;
ææ* +
}
øø 
return
¡¡ 
new
¡¡  
RepositoryResponse
¡¡ -
<
¡¡- .
bool
¡¡. 2
>
¡¡2 3
(
¡¡3 4
)
¡¡4 5
{
¬¬ 
	IsSucceed
√√ 
=
√√ 
false
√√  %
,
√√% &
Data
ƒƒ 
=
ƒƒ 
false
ƒƒ  
,
ƒƒ  !
	Exception
≈≈ 
=
≈≈ 
ex
≈≈  "
}
∆∆ 
;
∆∆ 
}
«« 
finally
»» 
{
…… 
if
   
(
   
_context
   
==
   
null
    $
)
  $ %
{
ÀÀ 
context
ÕÕ 
.
ÕÕ 
Dispose
ÕÕ #
(
ÕÕ# $
)
ÕÕ$ %
;
ÕÕ% &
}
ŒŒ 
}
œœ 
}
–– 	
public
⁄⁄ 
virtual
⁄⁄ 
async
⁄⁄ 
Task
⁄⁄ !
<
⁄⁄! " 
RepositoryResponse
⁄⁄" 4
<
⁄⁄4 5
bool
⁄⁄5 9
>
⁄⁄9 :
>
⁄⁄: ;
RemoveModelAsync
⁄⁄< L
(
⁄⁄L M
TModel
⁄⁄M S
model
⁄⁄T Y
,
⁄⁄Y Z

TDbContext
⁄⁄[ e
_context
⁄⁄f n
=
⁄⁄o p
null
⁄⁄q u
,
⁄⁄u v$
IDbContextTransaction⁄⁄w å
_transaction⁄⁄ç ô
=⁄⁄ö õ
null⁄⁄ú †
)⁄⁄† °
{
€€ 	
bool
‹‹ 
isRoot
‹‹ 
=
‹‹ 
_context
‹‹ "
==
‹‹# %
null
‹‹& *
;
‹‹* +

TDbContext
›› 
context
›› 
=
››  
_context
››! )
??
››* ,
InitContext
››- 8
(
››8 9
)
››9 :
;
››: ;
var
ﬁﬁ 
transaction
ﬁﬁ 
=
ﬁﬁ 
_transaction
ﬁﬁ *
??
ﬁﬁ+ -
context
ﬁﬁ. 5
.
ﬁﬁ5 6
Database
ﬁﬁ6 >
.
ﬁﬁ> ?
BeginTransaction
ﬁﬁ? O
(
ﬁﬁO P
)
ﬁﬁP Q
;
ﬁﬁQ R
try
ﬂﬂ 
{
‡‡ 
bool
·· 
result
·· 
=
·· 
true
·· "
;
··" #
if
‚‚ 
(
‚‚ 
model
‚‚ 
!=
‚‚ 
null
‚‚ !
&&
‚‚" $
CheckIsExists
‚‚% 2
(
‚‚2 3
model
‚‚3 8
,
‚‚8 9
context
‚‚: A
,
‚‚A B
transaction
‚‚C N
)
‚‚N O
)
‚‚O P
{
„„ 
context
‰‰ 
.
‰‰ 
Entry
‰‰ !
(
‰‰! "
model
‰‰" '
)
‰‰' (
.
‰‰( )
State
‰‰) .
=
‰‰/ 0
EntityState
‰‰1 <
.
‰‰< =
Deleted
‰‰= D
;
‰‰D E
result
ÂÂ 
=
ÂÂ 
await
ÂÂ "
context
ÂÂ# *
.
ÂÂ* +
SaveChangesAsync
ÂÂ+ ;
(
ÂÂ; <
)
ÂÂ< =
.
ÂÂ= >
ConfigureAwait
ÂÂ> L
(
ÂÂL M
false
ÂÂM R
)
ÂÂR S
>
ÂÂT U
$num
ÂÂV W
;
ÂÂW X
}
ÊÊ 
HandleTransaction
ËË !
(
ËË! "
result
ËË" (
,
ËË( )
isRoot
ËË* 0
,
ËË0 1
transaction
ËË2 =
)
ËË= >
;
ËË> ?
return
ÍÍ 
new
ÍÍ  
RepositoryResponse
ÍÍ -
<
ÍÍ- .
bool
ÍÍ. 2
>
ÍÍ2 3
(
ÍÍ3 4
)
ÍÍ4 5
{
ÎÎ 
	IsSucceed
ÏÏ 
=
ÏÏ 
result
ÏÏ  &
,
ÏÏ& '
Data
ÌÌ 
=
ÌÌ 
result
ÌÌ !
}
ÓÓ 
;
ÓÓ 
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
LogErrorMessage
ÚÚ 
(
ÚÚ  
ex
ÚÚ  "
)
ÚÚ" #
;
ÚÚ# $
if
ÛÛ 
(
ÛÛ 
_transaction
ÛÛ  
==
ÛÛ! #
null
ÛÛ$ (
)
ÛÛ( )
{
ÙÙ 
transaction
ˆˆ 
.
ˆˆ  
Rollback
ˆˆ  (
(
ˆˆ( )
)
ˆˆ) *
;
ˆˆ* +
}
˜˜ 
return
˘˘ 
new
˘˘  
RepositoryResponse
˘˘ -
<
˘˘- .
bool
˘˘. 2
>
˘˘2 3
(
˘˘3 4
)
˘˘4 5
{
˙˙ 
	IsSucceed
˚˚ 
=
˚˚ 
false
˚˚  %
,
˚˚% &
Data
¸¸ 
=
¸¸ 
false
¸¸  
,
¸¸  !
	Exception
˝˝ 
=
˝˝ 
ex
˝˝  "
}
˛˛ 
;
˛˛ 
}
ˇˇ 
finally
ÄÄ 
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
_context
ÇÇ 
==
ÇÇ 
null
ÇÇ  $
)
ÇÇ$ %
{
ÉÉ 
context
ÖÖ 
.
ÖÖ 
Dispose
ÖÖ #
(
ÖÖ# $
)
ÖÖ$ %
;
ÖÖ% &
}
ÜÜ 
}
áá 
}
àà 	
public
íí 
virtual
íí  
RepositoryResponse
íí )
<
íí) *
TView
íí* /
>
íí/ 0
	SaveModel
íí1 :
(
íí: ;
TView
íí; @
view
ííA E
,
ííE F
bool
ííG K
isSaveSubModels
ííL [
=
íí\ ]
false
íí^ c
,
ìì 	

TDbContext
ìì
 
_context
ìì 
=
ìì 
null
ìì  $
,
ìì$ %#
IDbContextTransaction
ìì& ;
_transaction
ìì< H
=
ììI J
null
ììK O
)
ììO P
{
îî 	
if
ïï 
(
ïï 
CheckIsExists
ïï 
(
ïï 
view
ïï "
.
ïï" #
Model
ïï# (
,
ïï( )
_context
ïï* 2
,
ïï2 3
_transaction
ïï4 @
)
ïï@ A
)
ïïA B
{
ññ 
return
óó 
	EditModel
óó  
(
óó  !
view
óó! %
,
óó% &
_context
óó' /
,
óó/ 0
_transaction
óó1 =
)
óó= >
;
óó> ?
}
òò 
else
ôô 
{
öö 
return
õõ 
CreateModel
õõ "
(
õõ" #
view
õõ# '
,
õõ' (
_context
õõ) 1
,
õõ1 2
_transaction
õõ3 ?
)
õõ? @
;
õõ@ A
}
úú 
}
ùù 	
public
ßß 
virtual
ßß 
Task
ßß 
<
ßß  
RepositoryResponse
ßß .
<
ßß. /
TView
ßß/ 4
>
ßß4 5
>
ßß5 6
SaveModelAsync
ßß7 E
(
ßßE F
TView
ßßF K
view
ßßL P
,
ßßP Q
bool
ßßR V
isSaveSubModels
ßßW f
=
ßßg h
false
ßßi n
,
®® 	

TDbContext
®®
 
_context
®® 
=
®® 
null
®®  $
,
®®$ %#
IDbContextTransaction
®®& ;
_transaction
®®< H
=
®®I J
null
®®K O
)
®®O P
{
©© 	
if
™™ 
(
™™ 
CheckIsExists
™™ 
(
™™ 
view
™™ "
.
™™" #
Model
™™# (
,
™™( )
_context
™™* 2
,
™™2 3
_transaction
™™4 @
)
™™@ A
)
™™A B
{
´´ 
return
¨¨ 
EditModelAsync
¨¨ %
(
¨¨% &
view
¨¨& *
,
¨¨* +
_context
¨¨, 4
,
¨¨4 5
_transaction
¨¨6 B
)
¨¨B C
;
¨¨C D
}
≠≠ 
else
ÆÆ 
{
ØØ 
return
∞∞ 
CreateModelAsync
∞∞ '
(
∞∞' (
view
∞∞( ,
,
∞∞, -
_context
∞∞. 6
,
∞∞6 7
_transaction
∞∞8 D
)
∞∞D E
;
∞∞E F
}
±± 
}
≤≤ 	
public
ºº 
virtual
ºº 
Task
ºº 
<
ºº 
bool
ºº  
>
ºº  !
SaveSubModelAsync
ºº" 3
(
ºº3 4
TModel
ºº4 :
model
ºº; @
,
ºº@ A

TDbContext
ººB L
context
ººM T
,
ººT U#
IDbContextTransaction
ººV k
_transaction
ººl x
)
ººx y
{
ΩΩ 	
throw
ææ 
new
ææ %
NotImplementedException
ææ -
(
ææ- .
)
ææ. /
;
ææ/ 0
}
øø 	
public
   
virtual
    
RepositoryResponse
   )
<
  ) *
int
  * -
>
  - .
Max
  / 2
(
  2 3

Expression
  3 =
<
  = >
Func
  > B
<
  B C
TModel
  C I
,
  I J
int
  K N
>
  N O
>
  O P
	predicate
  Q Z
,
ÀÀ 	

TDbContext
ÀÀ
 
_context
ÀÀ 
=
ÀÀ 
null
ÀÀ  $
,
ÀÀ$ %#
IDbContextTransaction
ÀÀ& ;
_transaction
ÀÀ< H
=
ÀÀI J
null
ÀÀK O
)
ÀÀO P
{
ÃÃ 	
var
ÕÕ 
context
ÕÕ 
=
ÕÕ 
_context
ÕÕ "
??
ÕÕ# %
InitContext
ÕÕ& 1
(
ÕÕ1 2
)
ÕÕ2 3
;
ÕÕ3 4
var
ŒŒ 
transaction
ŒŒ 
=
ŒŒ 
_transaction
ŒŒ *
??
ŒŒ+ -
context
ŒŒ. 5
.
ŒŒ5 6
Database
ŒŒ6 >
.
ŒŒ> ?
BeginTransaction
ŒŒ? O
(
ŒŒO P
)
ŒŒP Q
;
ŒŒQ R
int
œœ 
total
œœ 
=
œœ 
$num
œœ 
;
œœ 
try
–– 
{
—— 
total
““ 
=
““ 
context
““ 
.
““  
Set
““  #
<
““# $
TModel
““$ *
>
““* +
(
““+ ,
)
““, -
.
““- .
Max
““. 1
(
““1 2
	predicate
““2 ;
)
““; <
;
““< =
return
”” 
new
””  
RepositoryResponse
”” -
<
””- .
int
””. 1
>
””1 2
(
””2 3
)
””3 4
{
‘‘ 
	IsSucceed
’’ 
=
’’ 
true
’’  $
,
’’$ %
Data
÷÷ 
=
÷÷ 
total
÷÷  
}
◊◊ 
;
◊◊ 
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ 
LogErrorMessage
€€ 
(
€€  
ex
€€  "
)
€€" #
;
€€# $
if
‹‹ 
(
‹‹ 
_transaction
‹‹  
==
‹‹! #
null
‹‹$ (
)
‹‹( )
{
›› 
transaction
ﬂﬂ 
.
ﬂﬂ  
Rollback
ﬂﬂ  (
(
ﬂﬂ( )
)
ﬂﬂ) *
;
ﬂﬂ* +
}
‡‡ 
return
‚‚ 
new
‚‚  
RepositoryResponse
‚‚ -
<
‚‚- .
int
‚‚. 1
>
‚‚1 2
(
‚‚2 3
)
‚‚3 4
{
„„ 
	IsSucceed
‰‰ 
=
‰‰ 
false
‰‰  %
,
‰‰% &
Data
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
,
ÂÂ 
	Exception
ÊÊ 
=
ÊÊ 
ex
ÊÊ  "
}
ÁÁ 
;
ÁÁ 
}
ËË 
finally
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
_context
ÎÎ 
==
ÎÎ 
null
ÎÎ  $
)
ÎÎ$ %
{
ÏÏ 
context
ÓÓ 
.
ÓÓ 
Dispose
ÓÓ #
(
ÓÓ# $
)
ÓÓ$ %
;
ÓÓ% &
}
ÔÔ 
}
 
}
ÒÒ 	
public
˙˙ 
virtual
˙˙ 
async
˙˙ 
Task
˙˙ !
<
˙˙! " 
RepositoryResponse
˙˙" 4
<
˙˙4 5
int
˙˙5 8
>
˙˙8 9
>
˙˙9 :
MaxAsync
˙˙; C
(
˙˙C D

Expression
˙˙D N
<
˙˙N O
Func
˙˙O S
<
˙˙S T
TModel
˙˙T Z
,
˙˙Z [
int
˙˙\ _
>
˙˙_ `
>
˙˙` a
	predicate
˙˙b k
,
˚˚ 	

TDbContext
˚˚
 
_context
˚˚ 
=
˚˚ 
null
˚˚  $
,
˚˚$ %#
IDbContextTransaction
˚˚& ;
_transaction
˚˚< H
=
˚˚I J
null
˚˚K O
)
˚˚O P
{
¸¸ 	
var
˝˝ 
context
˝˝ 
=
˝˝ 
_context
˝˝ "
??
˝˝# %
InitContext
˝˝& 1
(
˝˝1 2
)
˝˝2 3
;
˝˝3 4
var
˛˛ 
transaction
˛˛ 
=
˛˛ 
_transaction
˛˛ *
??
˛˛+ -
context
˛˛. 5
.
˛˛5 6
Database
˛˛6 >
.
˛˛> ?
BeginTransaction
˛˛? O
(
˛˛O P
)
˛˛P Q
;
˛˛Q R
int
ˇˇ 
total
ˇˇ 
=
ˇˇ 
$num
ˇˇ 
;
ˇˇ 
try
ÄÄ 
{
ÅÅ 
total
ÇÇ 
=
ÇÇ 
await
ÇÇ 
context
ÇÇ %
.
ÇÇ% &
Set
ÇÇ& )
<
ÇÇ) *
TModel
ÇÇ* 0
>
ÇÇ0 1
(
ÇÇ1 2
)
ÇÇ2 3
.
ÇÇ3 4
MaxAsync
ÇÇ4 <
(
ÇÇ< =
	predicate
ÇÇ= F
)
ÇÇF G
.
ÇÇG H
ConfigureAwait
ÇÇH V
(
ÇÇV W
false
ÇÇW \
)
ÇÇ\ ]
;
ÇÇ] ^
return
ÉÉ 
new
ÉÉ  
RepositoryResponse
ÉÉ -
<
ÉÉ- .
int
ÉÉ. 1
>
ÉÉ1 2
(
ÉÉ2 3
)
ÉÉ3 4
{
ÑÑ 
	IsSucceed
ÖÖ 
=
ÖÖ 
true
ÖÖ  $
,
ÖÖ$ %
Data
ÜÜ 
=
ÜÜ 
total
ÜÜ  
}
áá 
;
áá 
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ 
ex
ââ 
)
ââ  
{
ää 
LogErrorMessage
ãã 
(
ãã  
ex
ãã  "
)
ãã" #
;
ãã# $
if
åå 
(
åå 
_transaction
åå  
==
åå! #
null
åå$ (
)
åå( )
{
çç 
transaction
èè 
.
èè  
Rollback
èè  (
(
èè( )
)
èè) *
;
èè* +
}
êê 
return
íí 
new
íí  
RepositoryResponse
íí -
<
íí- .
int
íí. 1
>
íí1 2
(
íí2 3
)
íí3 4
{
ìì 
	IsSucceed
îî 
=
îî 
false
îî  %
,
îî% &
Data
ïï 
=
ïï 
$num
ïï 
,
ïï 
	Exception
ññ 
=
ññ 
ex
ññ  "
}
óó 
;
óó 
}
òò 
finally
ôô 
{
öö 
if
õõ 
(
õõ 
_context
õõ 
==
õõ 
null
õõ  $
)
õõ$ %
{
úú 
context
ûû 
.
ûû 
Dispose
ûû #
(
ûû# $
)
ûû$ %
;
ûû% &
}
üü 
}
†† 
}
°° 	
public
ÆÆ 
virtual
ÆÆ  
RepositoryResponse
ÆÆ )
<
ÆÆ) *
int
ÆÆ* -
>
ÆÆ- .
Count
ÆÆ/ 4
(
ÆÆ4 5

Expression
ÆÆ5 ?
<
ÆÆ? @
Func
ÆÆ@ D
<
ÆÆD E
TModel
ÆÆE K
,
ÆÆK L
bool
ÆÆM Q
>
ÆÆQ R
>
ÆÆR S
	predicate
ÆÆT ]
,
ØØ 	

TDbContext
ØØ
 
_context
ØØ 
=
ØØ 
null
ØØ  $
,
ØØ$ %#
IDbContextTransaction
ØØ& ;
_transaction
ØØ< H
=
ØØI J
null
ØØK O
)
ØØO P
{
∞∞ 	
var
±± 
context
±± 
=
±± 
_context
±± "
??
±±# %
InitContext
±±& 1
(
±±1 2
)
±±2 3
;
±±3 4
var
≤≤ 
transaction
≤≤ 
=
≤≤ 
_transaction
≤≤ *
??
≤≤+ -
context
≤≤. 5
.
≤≤5 6
Database
≤≤6 >
.
≤≤> ?
BeginTransaction
≤≤? O
(
≤≤O P
)
≤≤P Q
;
≤≤Q R
int
≥≥ 
total
≥≥ 
=
≥≥ 
$num
≥≥ 
;
≥≥ 
try
¥¥ 
{
µµ 
total
∂∂ 
=
∂∂ 
context
∂∂ 
.
∂∂  
Set
∂∂  #
<
∂∂# $
TModel
∂∂$ *
>
∂∂* +
(
∂∂+ ,
)
∂∂, -
.
∂∂- .
Count
∂∂. 3
(
∂∂3 4
	predicate
∂∂4 =
)
∂∂= >
;
∂∂> ?
return
∑∑ 
new
∑∑  
RepositoryResponse
∑∑ -
<
∑∑- .
int
∑∑. 1
>
∑∑1 2
(
∑∑2 3
)
∑∑3 4
{
∏∏ 
	IsSucceed
ππ 
=
ππ 
true
ππ  $
,
ππ$ %
Data
∫∫ 
=
∫∫ 
total
∫∫  
}
ªª 
;
ªª 
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
ex
ΩΩ 
)
ΩΩ  
{
ææ 
LogErrorMessage
øø 
(
øø  
ex
øø  "
)
øø" #
;
øø# $
if
¿¿ 
(
¿¿ 
_transaction
¿¿  
==
¿¿! #
null
¿¿$ (
)
¿¿( )
{
¡¡ 
transaction
√√ 
.
√√  
Rollback
√√  (
(
√√( )
)
√√) *
;
√√* +
}
ƒƒ 
return
∆∆ 
new
∆∆  
RepositoryResponse
∆∆ -
<
∆∆- .
int
∆∆. 1
>
∆∆1 2
(
∆∆2 3
)
∆∆3 4
{
«« 
	IsSucceed
»» 
=
»» 
false
»»  %
,
»»% &
Data
…… 
=
…… 
$num
…… 
,
…… 
	Exception
   
=
   
ex
    "
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
if
œœ 
(
œœ 
_context
œœ 
==
œœ 
null
œœ  $
)
œœ$ %
{
–– 
context
““ 
.
““ 
Dispose
““ #
(
““# $
)
““$ %
;
““% &
}
”” 
}
‘‘ 
}
’’ 	
public
ﬁﬁ 
virtual
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ !
<
ﬁﬁ! " 
RepositoryResponse
ﬁﬁ" 4
<
ﬁﬁ4 5
int
ﬁﬁ5 8
>
ﬁﬁ8 9
>
ﬁﬁ9 :

CountAsync
ﬁﬁ; E
(
ﬁﬁE F

Expression
ﬁﬁF P
<
ﬁﬁP Q
Func
ﬁﬁQ U
<
ﬁﬁU V
TModel
ﬁﬁV \
,
ﬁﬁ\ ]
bool
ﬁﬁ^ b
>
ﬁﬁb c
>
ﬁﬁc d
	predicate
ﬁﬁe n
,
ﬂﬂ 	

TDbContext
ﬂﬂ
 
_context
ﬂﬂ 
=
ﬂﬂ 
null
ﬂﬂ  $
,
ﬂﬂ$ %#
IDbContextTransaction
ﬂﬂ& ;
_transaction
ﬂﬂ< H
=
ﬂﬂI J
null
ﬂﬂK O
)
ﬂﬂO P
{
‡‡ 	
var
·· 
context
·· 
=
·· 
_context
·· "
??
··# %
InitContext
··& 1
(
··1 2
)
··2 3
;
··3 4
var
‚‚ 
transaction
‚‚ 
=
‚‚ 
_transaction
‚‚ *
??
‚‚+ -
context
‚‚. 5
.
‚‚5 6
Database
‚‚6 >
.
‚‚> ?
BeginTransaction
‚‚? O
(
‚‚O P
)
‚‚P Q
;
‚‚Q R
int
„„ 
total
„„ 
=
„„ 
$num
„„ 
;
„„ 
try
‰‰ 
{
ÂÂ 
total
ÊÊ 
=
ÊÊ 
await
ÊÊ 
context
ÊÊ %
.
ÊÊ% &
Set
ÊÊ& )
<
ÊÊ) *
TModel
ÊÊ* 0
>
ÊÊ0 1
(
ÊÊ1 2
)
ÊÊ2 3
.
ÊÊ3 4

CountAsync
ÊÊ4 >
(
ÊÊ> ?
	predicate
ÊÊ? H
)
ÊÊH I
.
ÊÊI J
ConfigureAwait
ÊÊJ X
(
ÊÊX Y
false
ÊÊY ^
)
ÊÊ^ _
;
ÊÊ_ `
return
ÁÁ 
new
ÁÁ  
RepositoryResponse
ÁÁ -
<
ÁÁ- .
int
ÁÁ. 1
>
ÁÁ1 2
(
ÁÁ2 3
)
ÁÁ3 4
{
ËË 
	IsSucceed
ÈÈ 
=
ÈÈ 
true
ÈÈ  $
,
ÈÈ$ %
Data
ÍÍ 
=
ÍÍ 
total
ÍÍ  
}
ÎÎ 
;
ÎÎ 
}
ÏÏ 
catch
ÌÌ 
(
ÌÌ 
	Exception
ÌÌ 
ex
ÌÌ 
)
ÌÌ  
{
ÓÓ 
LogErrorMessage
ÔÔ 
(
ÔÔ  
ex
ÔÔ  "
)
ÔÔ" #
;
ÔÔ# $
if
 
(
 
_transaction
  
==
! #
null
$ (
)
( )
{
ÒÒ 
transaction
ÛÛ 
.
ÛÛ  
Rollback
ÛÛ  (
(
ÛÛ( )
)
ÛÛ) *
;
ÛÛ* +
}
ÙÙ 
return
ˆˆ 
new
ˆˆ  
RepositoryResponse
ˆˆ -
<
ˆˆ- .
int
ˆˆ. 1
>
ˆˆ1 2
(
ˆˆ2 3
)
ˆˆ3 4
{
˜˜ 
	IsSucceed
¯¯ 
=
¯¯ 
false
¯¯  %
,
¯¯% &
Data
˘˘ 
=
˘˘ 
$num
˘˘ 
,
˘˘ 
	Exception
˙˙ 
=
˙˙ 
ex
˙˙  "
}
˚˚ 
;
˚˚ 
}
¸¸ 
finally
˝˝ 
{
˛˛ 
if
ˇˇ 
(
ˇˇ 
_context
ˇˇ 
==
ˇˇ 
null
ˇˇ  $
)
ˇˇ$ %
{
ÄÄ 
context
ÇÇ 
.
ÇÇ 
Dispose
ÇÇ #
(
ÇÇ# $
)
ÇÇ$ %
;
ÇÇ% &
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
ëë 
virtual
ëë  
RepositoryResponse
ëë )
<
ëë) *
int
ëë* -
>
ëë- .
Count
ëë/ 4
(
ëë4 5

TDbContext
ëë5 ?
_context
ëë@ H
=
ëëI J
null
ëëK O
,
ëëO P#
IDbContextTransaction
ëëQ f
_transaction
ëëg s
=
ëët u
null
ëëv z
)
ëëz {
{
íí 	
var
ìì 
context
ìì 
=
ìì 
_context
ìì "
??
ìì# %
InitContext
ìì& 1
(
ìì1 2
)
ìì2 3
;
ìì3 4
var
îî 
transaction
îî 
=
îî 
_transaction
îî *
??
îî+ -
context
îî. 5
.
îî5 6
Database
îî6 >
.
îî> ?
BeginTransaction
îî? O
(
îîO P
)
îîP Q
;
îîQ R
int
ïï 
total
ïï 
=
ïï 
$num
ïï 
;
ïï 
try
ññ 
{
óó 
total
òò 
=
òò 
context
òò 
.
òò  
Set
òò  #
<
òò# $
TModel
òò$ *
>
òò* +
(
òò+ ,
)
òò, -
.
òò- .
Count
òò. 3
(
òò3 4
)
òò4 5
;
òò5 6
return
ôô 
new
ôô  
RepositoryResponse
ôô -
<
ôô- .
int
ôô. 1
>
ôô1 2
(
ôô2 3
)
ôô3 4
{
öö 
	IsSucceed
õõ 
=
õõ 
true
õõ  $
,
õõ$ %
Data
úú 
=
úú 
total
úú  
}
ùù 
;
ùù 
}
ûû 
catch
üü 
(
üü 
	Exception
üü 
ex
üü 
)
üü  
{
†† 
LogErrorMessage
°° 
(
°°  
ex
°°  "
)
°°" #
;
°°# $
if
¢¢ 
(
¢¢ 
_transaction
¢¢  
==
¢¢! #
null
¢¢$ (
)
¢¢( )
{
££ 
transaction
•• 
.
••  
Rollback
••  (
(
••( )
)
••) *
;
••* +
}
¶¶ 
return
®® 
new
®®  
RepositoryResponse
®® -
<
®®- .
int
®®. 1
>
®®1 2
(
®®2 3
)
®®3 4
{
©© 
	IsSucceed
™™ 
=
™™ 
false
™™  %
,
™™% &
Data
´´ 
=
´´ 
$num
´´ 
,
´´ 
	Exception
¨¨ 
=
¨¨ 
ex
¨¨  "
}
≠≠ 
;
≠≠ 
}
ÆÆ 
finally
ØØ 
{
∞∞ 
if
±± 
(
±± 
_context
±± 
==
±± 
null
±±  $
)
±±$ %
{
≤≤ 
context
¥¥ 
.
¥¥ 
Dispose
¥¥ #
(
¥¥# $
)
¥¥$ %
;
¥¥% &
}
µµ 
}
∂∂ 
}
∑∑ 	
public
øø 
virtual
øø 
async
øø 
Task
øø !
<
øø! " 
RepositoryResponse
øø" 4
<
øø4 5
int
øø5 8
>
øø8 9
>
øø9 :

CountAsync
øø; E
(
øøE F

TDbContext
øøF P
_context
øøQ Y
=
øøZ [
null
øø\ `
,
øø` a#
IDbContextTransaction
øøb w
_transactionøøx Ñ
=øøÖ Ü
nulløøá ã
)øøã å
{
¿¿ 	
var
¡¡ 
context
¡¡ 
=
¡¡ 
_context
¡¡ "
??
¡¡# %
InitContext
¡¡& 1
(
¡¡1 2
)
¡¡2 3
;
¡¡3 4
var
¬¬ 
transaction
¬¬ 
=
¬¬ 
_transaction
¬¬ *
??
¬¬+ -
context
¬¬. 5
.
¬¬5 6
Database
¬¬6 >
.
¬¬> ?
BeginTransaction
¬¬? O
(
¬¬O P
)
¬¬P Q
;
¬¬Q R
int
√√ 
total
√√ 
=
√√ 
$num
√√ 
;
√√ 
try
ƒƒ 
{
≈≈ 
total
∆∆ 
=
∆∆ 
await
∆∆ 
context
∆∆ %
.
∆∆% &
Set
∆∆& )
<
∆∆) *
TModel
∆∆* 0
>
∆∆0 1
(
∆∆1 2
)
∆∆2 3
.
∆∆3 4

CountAsync
∆∆4 >
(
∆∆> ?
)
∆∆? @
.
∆∆@ A
ConfigureAwait
∆∆A O
(
∆∆O P
false
∆∆P U
)
∆∆U V
;
∆∆V W
return
«« 
new
««  
RepositoryResponse
«« -
<
««- .
int
««. 1
>
««1 2
(
««2 3
)
««3 4
{
»» 
	IsSucceed
…… 
=
…… 
true
……  $
,
……$ %
Data
   
=
   
total
    
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ 
LogErrorMessage
œœ 
(
œœ  
ex
œœ  "
)
œœ" #
;
œœ# $
if
–– 
(
–– 
_transaction
––  
==
––! #
null
––$ (
)
––( )
{
—— 
transaction
”” 
.
””  
Rollback
””  (
(
””( )
)
””) *
;
””* +
}
‘‘ 
return
÷÷ 
new
÷÷  
RepositoryResponse
÷÷ -
<
÷÷- .
int
÷÷. 1
>
÷÷1 2
(
÷÷2 3
)
÷÷3 4
{
◊◊ 
	IsSucceed
ÿÿ 
=
ÿÿ 
false
ÿÿ  %
,
ÿÿ% &
Data
ŸŸ 
=
ŸŸ 
$num
ŸŸ 
,
ŸŸ 
	Exception
⁄⁄ 
=
⁄⁄ 
ex
⁄⁄  "
}
€€ 
;
€€ 
}
‹‹ 
finally
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
_context
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ  $
)
ﬂﬂ$ %
{
‡‡ 
context
‚‚ 
.
‚‚ 
Dispose
‚‚ #
(
‚‚# $
)
‚‚$ %
;
‚‚% &
}
„„ 
}
‰‰ 
}
ÂÂ 	
public
ÛÛ  
RepositoryResponse
ÛÛ !
<
ÛÛ! "
bool
ÛÛ" &
>
ÛÛ& '
UpdateFields
ÛÛ( 4
(
ÛÛ4 5

Expression
ÛÛ5 ?
<
ÛÛ? @
Func
ÛÛ@ D
<
ÛÛD E
TModel
ÛÛE K
,
ÛÛK L
bool
ÛÛM Q
>
ÛÛQ R
>
ÛÛR S
	predicate
ÛÛT ]
,
ÙÙ 	
List
ÙÙ
 
<
ÙÙ 
EntityField
ÙÙ 
>
ÙÙ 
fields
ÙÙ "
,
ıı 	

TDbContext
ıı
 
_context
ıı 
=
ıı 
null
ıı  $
,
ıı$ %#
IDbContextTransaction
ıı& ;
_transaction
ıı< H
=
ııI J
null
ııK O
)
ııO P
{
ˆˆ 	
bool
˜˜ 
isRoot
˜˜ 
=
˜˜ 
_context
˜˜ "
==
˜˜# %
null
˜˜& *
;
˜˜* +

TDbContext
¯¯ 
context
¯¯ 
=
¯¯  
_context
¯¯! )
??
¯¯* ,
InitContext
¯¯- 8
(
¯¯8 9
)
¯¯9 :
;
¯¯: ;
var
˘˘ 
transaction
˘˘ 
=
˘˘ 
_transaction
˘˘ *
??
˘˘+ -
context
˘˘. 5
.
˘˘5 6
Database
˘˘6 >
.
˘˘> ?
BeginTransaction
˘˘? O
(
˘˘O P
)
˘˘P Q
;
˘˘Q R
try
˙˙ 
{
˚˚ 
bool
¸¸ 
result
¸¸ 
=
¸¸ 
false
¸¸ #
;
¸¸# $
TModel
˝˝ 
model
˝˝ 
=
˝˝ 
context
˝˝ &
.
˝˝& '
Set
˝˝' *
<
˝˝* +
TModel
˝˝+ 1
>
˝˝1 2
(
˝˝2 3
)
˝˝3 4
.
˝˝4 5
FirstOrDefault
˝˝5 C
(
˝˝C D
	predicate
˝˝D M
)
˝˝M N
;
˝˝N O
if
˛˛ 
(
˛˛ 
model
˛˛ 
!=
˛˛ 
null
˛˛ !
)
˛˛! "
{
ˇˇ 
foreach
ÄÄ 
(
ÄÄ 
var
ÄÄ  
field
ÄÄ! &
in
ÄÄ' )
fields
ÄÄ* 0
)
ÄÄ0 1
{
ÅÅ 
var
ÇÇ 
lamda
ÇÇ !
=
ÇÇ" #
	GetLambda
ÇÇ$ -
(
ÇÇ- .
field
ÇÇ. 3
.
ÇÇ3 4
PropertyName
ÇÇ4 @
,
ÇÇ@ A
false
ÇÇB G
)
ÇÇG H
;
ÇÇH I
if
ÉÉ 
(
ÉÉ 
lamda
ÉÉ !
!=
ÉÉ" $
null
ÉÉ% )
)
ÉÉ) *
{
ÑÑ 
var
ÖÖ 
prop
ÖÖ  $
=
ÖÖ% &
context
ÖÖ' .
.
ÖÖ. /
Entry
ÖÖ/ 4
(
ÖÖ4 5
model
ÖÖ5 :
)
ÖÖ: ;
.
ÖÖ; <
Property
ÖÖ< D
(
ÖÖD E
field
ÖÖE J
.
ÖÖJ K
PropertyName
ÖÖK W
)
ÖÖW X
;
ÖÖX Y
if
ÜÜ 
(
ÜÜ  
DateTime
ÜÜ  (
.
ÜÜ( )
TryParse
ÜÜ) 1
(
ÜÜ1 2
field
ÜÜ2 7
.
ÜÜ7 8
PropertyValue
ÜÜ8 E
,
ÜÜE F
out
ÜÜG J
DateTime
ÜÜK S
	dateValue
ÜÜT ]
)
ÜÜ] ^
)
ÜÜ^ _
{
áá 
prop
àà  $
.
àà$ %
CurrentValue
àà% 1
=
àà2 3
	dateValue
àà4 =
;
àà= >
}
ââ 
else
ää  
if
ää! #
(
ää$ %
int
ää% (
.
ää( )
TryParse
ää) 1
(
ää1 2
field
ää2 7
.
ää7 8
PropertyValue
ää8 E
,
ääE F
out
ääG J
int
ääK N
integerValue
ääO [
)
ää[ \
)
ää\ ]
{
ãã 
prop
åå  $
.
åå$ %
CurrentValue
åå% 1
=
åå2 3
integerValue
åå4 @
;
åå@ A
}
çç 
else
éé  
{
èè 
prop
êê  $
.
êê$ %
CurrentValue
êê% 1
=
êê2 3
field
êê4 9
.
êê9 :
PropertyValue
êê: G
;
êêG H
}
ëë 
context
ìì #
.
ìì# $
SaveChanges
ìì$ /
(
ìì/ 0
)
ìì0 1
;
ìì1 2
result
îî "
=
îî# $
true
îî% )
;
îî) *
}
ïï 
else
ññ 
{
óó 
result
òò "
=
òò# $
false
òò% *
;
òò* +
break
ôô !
;
ôô! "
}
öö 
}
õõ 
}
úú 
HandleTransaction
ûû !
(
ûû! "
result
ûû" (
,
ûû( )
isRoot
ûû* 0
,
ûû0 1
transaction
ûû2 =
)
ûû= >
;
ûû> ?
return
†† 
new
††  
RepositoryResponse
†† -
<
††- .
bool
††. 2
>
††2 3
(
††3 4
)
††4 5
{
°° 
	IsSucceed
¢¢ 
=
¢¢ 
result
¢¢  &
,
¢¢& '
Data
££ 
=
££ 
result
££ !
}
§§ 
;
§§ 
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß 
LogErrorMessage
®® 
(
®®  
ex
®®  "
)
®®" #
;
®®# $
if
©© 
(
©© 
_transaction
©©  
==
©©! #
null
©©$ (
)
©©( )
{
™™ 
transaction
¨¨ 
.
¨¨  
Rollback
¨¨  (
(
¨¨( )
)
¨¨) *
;
¨¨* +
}
≠≠ 
return
ØØ 
new
ØØ  
RepositoryResponse
ØØ -
<
ØØ- .
bool
ØØ. 2
>
ØØ2 3
(
ØØ3 4
)
ØØ4 5
{
∞∞ 
	IsSucceed
±± 
=
±± 
false
±±  %
,
±±% &
Data
≤≤ 
=
≤≤ 
false
≤≤  
,
≤≤  !
	Exception
≥≥ 
=
≥≥ 
ex
≥≥  "
}
¥¥ 
;
¥¥ 
}
µµ 
finally
∂∂ 
{
∑∑ 
if
∏∏ 
(
∏∏ 
_context
∏∏ 
==
∏∏ 
null
∏∏  $
)
∏∏$ %
{
ππ 
context
ªª 
.
ªª 
Dispose
ªª #
(
ªª# $
)
ªª$ %
;
ªª% &
}
ºº 
}
ΩΩ 
}
ææ 	
public
»» 
async
»» 
Task
»» 
<
»»  
RepositoryResponse
»» ,
<
»», -
bool
»»- 1
>
»»1 2
>
»»2 3
UpdateFieldsAsync
»»4 E
(
»»E F

Expression
»»F P
<
»»P Q
Func
»»Q U
<
»»U V
TModel
»»V \
,
»»\ ]
bool
»»^ b
>
»»b c
>
»»c d
	predicate
»»e n
,
…… 	
List
……
 
<
…… 
EntityField
…… 
>
…… 
fields
…… "
,
   	

TDbContext
  
 
_context
   
=
   
null
    $
,
  $ %#
IDbContextTransaction
  & ;
_transaction
  < H
=
  I J
null
  K O
)
  O P
{
ÀÀ 	
bool
ÃÃ 
isRoot
ÃÃ 
=
ÃÃ 
_context
ÃÃ "
==
ÃÃ# %
null
ÃÃ& *
;
ÃÃ* +

TDbContext
ÕÕ 
context
ÕÕ 
=
ÕÕ  
_context
ÕÕ! )
??
ÕÕ* ,
InitContext
ÕÕ- 8
(
ÕÕ8 9
)
ÕÕ9 :
;
ÕÕ: ;
var
ŒŒ 
transaction
ŒŒ 
=
ŒŒ 
_transaction
ŒŒ *
??
ŒŒ+ -
context
ŒŒ. 5
.
ŒŒ5 6
Database
ŒŒ6 >
.
ŒŒ> ?
BeginTransaction
ŒŒ? O
(
ŒŒO P
)
ŒŒP Q
;
ŒŒQ R
try
œœ 
{
–– 
bool
—— 
result
—— 
=
—— 
false
—— #
;
——# $
TModel
““ 
model
““ 
=
““ 
await
““ $
context
““% ,
.
““, -
Set
““- 0
<
““0 1
TModel
““1 7
>
““7 8
(
““8 9
)
““9 :
.
““: ;!
FirstOrDefaultAsync
““; N
(
““N O
	predicate
““O X
)
““X Y
.
““Y Z
ConfigureAwait
““Z h
(
““h i
false
““i n
)
““n o
;
““o p
if
”” 
(
”” 
model
”” 
!=
”” 
null
”” !
)
””! "
{
‘‘ 
foreach
’’ 
(
’’ 
var
’’  
field
’’! &
in
’’' )
fields
’’* 0
)
’’0 1
{
÷÷ 
var
◊◊ 
lamda
◊◊ !
=
◊◊" #
	GetLambda
◊◊$ -
(
◊◊- .
field
◊◊. 3
.
◊◊3 4
PropertyName
◊◊4 @
,
◊◊@ A
false
◊◊B G
)
◊◊G H
;
◊◊H I
if
ÿÿ 
(
ÿÿ 
lamda
ÿÿ !
!=
ÿÿ" $
null
ÿÿ% )
)
ÿÿ) *
{
ŸŸ 
var
⁄⁄ 
prop
⁄⁄  $
=
⁄⁄% &
context
⁄⁄' .
.
⁄⁄. /
Entry
⁄⁄/ 4
(
⁄⁄4 5
model
⁄⁄5 :
)
⁄⁄: ;
.
⁄⁄; <
Property
⁄⁄< D
(
⁄⁄D E
field
⁄⁄E J
.
⁄⁄J K
PropertyName
⁄⁄K W
)
⁄⁄W X
;
⁄⁄X Y
if
€€ 
(
€€  
DateTime
€€  (
.
€€( )
TryParse
€€) 1
(
€€1 2
field
€€2 7
.
€€7 8
PropertyValue
€€8 E
,
€€E F
out
€€G J
DateTime
€€K S
	dateValue
€€T ]
)
€€] ^
)
€€^ _
{
‹‹ 
prop
››  $
.
››$ %
CurrentValue
››% 1
=
››2 3
	dateValue
››4 =
;
››= >
}
ﬁﬁ 
else
ﬂﬂ  
if
ﬂﬂ! #
(
ﬂﬂ$ %
int
ﬂﬂ% (
.
ﬂﬂ( )
TryParse
ﬂﬂ) 1
(
ﬂﬂ1 2
field
ﬂﬂ2 7
.
ﬂﬂ7 8
PropertyValue
ﬂﬂ8 E
,
ﬂﬂE F
out
ﬂﬂG J
int
ﬂﬂK N
integerValue
ﬂﬂO [
)
ﬂﬂ[ \
)
ﬂﬂ\ ]
{
‡‡ 
prop
··  $
.
··$ %
CurrentValue
··% 1
=
··2 3
integerValue
··4 @
;
··@ A
}
‚‚ 
else
„„  
{
‰‰ 
prop
ÂÂ  $
.
ÂÂ$ %
CurrentValue
ÂÂ% 1
=
ÂÂ2 3
field
ÂÂ4 9
.
ÂÂ9 :
PropertyValue
ÂÂ: G
;
ÂÂG H
}
ÊÊ 
await
ËË !
context
ËË" )
.
ËË) *
SaveChangesAsync
ËË* :
(
ËË: ;
)
ËË; <
.
ËË< =
ConfigureAwait
ËË= K
(
ËËK L
false
ËËL Q
)
ËËQ R
;
ËËR S
result
ÈÈ "
=
ÈÈ# $
true
ÈÈ% )
;
ÈÈ) *
}
ÍÍ 
else
ÎÎ 
{
ÏÏ 
result
ÌÌ "
=
ÌÌ# $
false
ÌÌ% *
;
ÌÌ* +
break
ÓÓ !
;
ÓÓ! "
}
ÔÔ 
}
 
}
ÒÒ 
HandleTransaction
ÛÛ !
(
ÛÛ! "
result
ÛÛ" (
,
ÛÛ( )
isRoot
ÛÛ* 0
,
ÛÛ0 1
transaction
ÛÛ2 =
)
ÛÛ= >
;
ÛÛ> ?
return
ıı 
new
ıı  
RepositoryResponse
ıı -
<
ıı- .
bool
ıı. 2
>
ıı2 3
(
ıı3 4
)
ıı4 5
{
ˆˆ 
	IsSucceed
˜˜ 
=
˜˜ 
result
˜˜  &
,
˜˜& '
Data
¯¯ 
=
¯¯ 
result
¯¯ !
}
˘˘ 
;
˘˘ 
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚ 
ex
˚˚ 
)
˚˚  
{
¸¸ 
LogErrorMessage
˝˝ 
(
˝˝  
ex
˝˝  "
)
˝˝" #
;
˝˝# $
if
˛˛ 
(
˛˛ 
_transaction
˛˛  
==
˛˛! #
null
˛˛$ (
)
˛˛( )
{
ˇˇ 
transaction
ÅÅ 
.
ÅÅ  
Rollback
ÅÅ  (
(
ÅÅ( )
)
ÅÅ) *
;
ÅÅ* +
}
ÇÇ 
return
ÑÑ 
new
ÑÑ  
RepositoryResponse
ÑÑ -
<
ÑÑ- .
bool
ÑÑ. 2
>
ÑÑ2 3
(
ÑÑ3 4
)
ÑÑ4 5
{
ÖÖ 
	IsSucceed
ÜÜ 
=
ÜÜ 
false
ÜÜ  %
,
ÜÜ% &
Data
áá 
=
áá 
false
áá  
,
áá  !
	Exception
àà 
=
àà 
ex
àà  "
}
ââ 
;
ââ 
}
ää 
finally
ãã 
{
åå 
if
çç 
(
çç 
_context
çç 
==
çç 
null
çç  $
)
çç$ %
{
éé 
context
êê 
.
êê 
Dispose
êê #
(
êê# $
)
êê$ %
;
êê% &
}
ëë 
}
íí 
}
ìì 	
private
óó 
void
óó 
HandleTransaction
óó &
(
óó& '
bool
óó' +
	isSucceed
óó, 5
,
óó5 6
bool
óó7 ;
isRoot
óó< B
,
óóB C#
IDbContextTransaction
óóD Y
transaction
óóZ e
)
óóe f
{
òò 	
if
ôô 
(
ôô 
	isSucceed
ôô 
)
ôô 
{
öö 
if
õõ 
(
õõ 
isRoot
õõ 
)
õõ 
{
úú 
transaction
ûû 
.
ûû  
Commit
ûû  &
(
ûû& '
)
ûû' (
;
ûû( )
}
üü 
}
†† 
else
°° 
{
¢¢ 
if
££ 
(
££ 
isRoot
££ 
)
££ 
{
§§ 
transaction
¶¶ 
.
¶¶  
Rollback
¶¶  (
(
¶¶( )
)
¶¶) *
;
¶¶* +
}
ßß 
}
®® 
}
©© 	
	protected
±± 
LambdaExpression
±± "
	GetLambda
±±# ,
(
±±, -
string
±±- 3
propName
±±4 <
,
±±< =
bool
±±> B
isGetDefault
±±C O
=
±±P Q
true
±±R V
)
±±V W
{
≤≤ 	
var
≥≥ 
	parameter
≥≥ 
=
≥≥ 

Expression
≥≥ &
.
≥≥& '
	Parameter
≥≥' 0
(
≥≥0 1
typeof
≥≥1 7
(
≥≥7 8
TModel
≥≥8 >
)
≥≥> ?
)
≥≥? @
;
≥≥@ A
var
¥¥ 
type
¥¥ 
=
¥¥ 
typeof
¥¥ 
(
¥¥ 
TModel
¥¥ $
)
¥¥$ %
;
¥¥% &
var
µµ 
prop
µµ 
=
µµ 
Array
µµ 
.
µµ 
Find
µµ !
(
µµ! "
type
µµ" &
.
µµ& '
GetProperties
µµ' 4
(
µµ4 5
)
µµ5 6
,
µµ6 7
p
µµ8 9
=>
µµ: <
p
µµ= >
.
µµ> ?
Name
µµ? C
==
µµD F
propName
µµG O
)
µµO P
;
µµP Q
if
∂∂ 
(
∂∂ 
prop
∂∂ 
==
∂∂ 
null
∂∂ 
&&
∂∂ 
isGetDefault
∂∂  ,
)
∂∂, -
{
∑∑ 
propName
∏∏ 
=
∏∏ 
type
∏∏ 
.
∏∏  
GetProperties
∏∏  -
(
∏∏- .
)
∏∏. /
.
∏∏/ 0
FirstOrDefault
∏∏0 >
(
∏∏> ?
)
∏∏? @
?
∏∏@ A
.
∏∏A B
Name
∏∏B F
;
∏∏F G
}
ππ 
var
∫∫ 
memberExpression
∫∫  
=
∫∫! "

Expression
∫∫# -
.
∫∫- .
Property
∫∫. 6
(
∫∫6 7
	parameter
∫∫7 @
,
∫∫@ A
propName
∫∫B J
)
∫∫J K
;
∫∫K L
return
ªª 

Expression
ªª 
.
ªª 
Lambda
ªª $
(
ªª$ %
memberExpression
ªª% 5
,
ªª5 6
	parameter
ªª7 @
)
ªª@ A
;
ªªA B
}
ºº 	
}
ΩΩ 
}ææ —d
ZD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\CommonViewModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

ViewModels )
{ 
public 

class 
	ApiResult 
< 
T 
> 
{ 
[ 	
JsonProperty	 
( 
$str 
) 
] 
public 
T 
Data 
{ 
get 
; 
set  
;  !
}" #
["" 	
JsonProperty""	 
("" 
$str"" 
)"" 
]""  
public## 
List## 
<## 
string## 
>## 
Errors## "
{### $
get##% (
;##( )
set##* -
;##- .
}##/ 0
=##1 2
new##3 6
List##7 ;
<##; <
string##< B
>##B C
(##C D
)##D E
;##E F
[++ 	
JsonProperty++	 
(++ 
$str++ !
)++! "
]++" #
public,, 
	Exception,, 
	Exception,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
[44 	
JsonProperty44	 
(44 
$str44 #
)44# $
]44$ %
public55 
string55 
ResponseKey55 !
{55" #
get55$ '
;55' (
set55) ,
;55, -
}55. /
[== 	
JsonProperty==	 
(== 
$str== 
)== 
]==  
public>> 
int>> 
Status>> 
{>> 
get>> 
;>>  
set>>! $
;>>$ %
}>>& '
}?? 
publicDD 

classDD 
EntityFieldDD 
{EE 
[LL 	
JsonPropertyLL	 
(LL 
$strLL $
)LL$ %
]LL% &
publicMM 
stringMM 
PropertyNameMM "
{MM# $
getMM% (
;MM( )
setMM* -
;MM- .
}MM/ 0
[UU 	
JsonPropertyUU	 
(UU 
$strUU %
)UU% &
]UU& '
publicVV 
stringVV 
PropertyValueVV #
{VV$ %
getVV& )
;VV) *
setVV+ .
;VV. /
}VV0 1
}WW 
public\\ 

class\\ 
FileStreamViewModel\\ $
{]] 
[dd 	
JsonPropertydd	 
(dd 
$strdd 
)dd 
]dd  
publicee 
stringee 
Base64ee 
{ee 
getee "
;ee" #
setee$ '
;ee' (
}ee) *
[mm 	
JsonPropertymm	 
(mm 
$strmm 
)mm 
]mm 
publicnn 
stringnn 
Namenn 
{nn 
getnn  
;nn  !
setnn" %
;nn% &
}nn' (
[vv 	
JsonPropertyvv	 
(vv 
$strvv 
)vv 
]vv 
publicww 
intww 
Sizeww 
{ww 
getww 
;ww 
setww "
;ww" #
}ww$ %
[ 	
JsonProperty	 
( 
$str 
) 
] 
public
ÄÄ 
string
ÄÄ 
Type
ÄÄ 
{
ÄÄ 
get
ÄÄ  
;
ÄÄ  !
set
ÄÄ" %
;
ÄÄ% &
}
ÄÄ' (
}
ÅÅ 
public
áá 

class
áá 
PaginationModel
áá  
<
áá  !
T
áá! "
>
áá" #
{
àà 
public
åå 
PaginationModel
åå 
(
åå 
)
åå  
{
çç 	
	PageIndex
éé 
=
éé 
$num
éé 
;
éé 
PageSize
èè 
=
èè 
$num
èè 
;
èè 

TotalItems
êê 
=
êê 
$num
êê 
;
êê 
	TotalPage
ëë 
=
ëë 
$num
ëë 
;
ëë 
Items
íí 
=
íí 
new
íí 
List
íí 
<
íí 
T
íí 
>
íí 
(
íí  
)
íí  !
;
íí! "
}
ìì 	
[
õõ 	
JsonProperty
õõ	 
(
õõ 
$str
õõ 
)
õõ 
]
õõ 
public
úú 
List
úú 
<
úú 
T
úú 
>
úú 
Items
úú 
{
úú 
get
úú "
;
úú" #
set
úú$ '
;
úú' (
}
úú) *
[
§§ 	
JsonProperty
§§	 
(
§§ 
$str
§§ !
)
§§! "
]
§§" #
public
•• 
List
•• 
<
•• 
JObject
•• 
>
•• 
	JsonItems
•• &
{
••' (
get
••) ,
;
••, -
set
••. 1
;
••1 2
}
••3 4
=
••5 6
new
••7 :
List
••; ?
<
••? @
JObject
••@ G
>
••G H
(
••H I
)
••I J
;
••J K
[
≠≠ 	
JsonProperty
≠≠	 
(
≠≠ 
$str
≠≠ !
)
≠≠! "
]
≠≠" #
public
ÆÆ 
int
ÆÆ 
	PageIndex
ÆÆ 
{
ÆÆ 
get
ÆÆ "
;
ÆÆ" #
set
ÆÆ$ '
;
ÆÆ' (
}
ÆÆ) *
[
∂∂ 	
JsonProperty
∂∂	 
(
∂∂ 
$str
∂∂  
)
∂∂  !
]
∂∂! "
public
∑∑ 
int
∑∑ 
PageSize
∑∑ 
{
∑∑ 
get
∑∑ !
;
∑∑! "
set
∑∑# &
;
∑∑& '
}
∑∑( )
[
øø 	
JsonProperty
øø	 
(
øø 
$str
øø "
)
øø" #
]
øø# $
public
¿¿ 
int
¿¿ 

TotalItems
¿¿ 
{
¿¿ 
get
¿¿  #
;
¿¿# $
set
¿¿% (
;
¿¿( )
}
¿¿* +
[
»» 	
JsonProperty
»»	 
(
»» 
$str
»» !
)
»»! "
]
»»" #
public
…… 
int
…… 
	TotalPage
…… 
{
…… 
get
…… "
;
……" #
set
……$ '
;
……' (
}
……) *
}
   
public
–– 

class
––  
RepositoryResponse
–– #
<
––# $
TResult
––$ +
>
––+ ,
{
—— 
[
ÿÿ 	
JsonProperty
ÿÿ	 
(
ÿÿ 
$str
ÿÿ !
)
ÿÿ! "
]
ÿÿ" #
public
ŸŸ 
bool
ŸŸ 
	IsSucceed
ŸŸ 
{
ŸŸ 
get
ŸŸ  #
;
ŸŸ# $
set
ŸŸ% (
;
ŸŸ( )
}
ŸŸ* +
[
·· 	
JsonProperty
··	 
(
·· 
$str
·· #
)
··# $
]
··$ %
public
‚‚ 
string
‚‚ 
ResponseKey
‚‚ !
{
‚‚" #
get
‚‚$ '
;
‚‚' (
set
‚‚) ,
;
‚‚, -
}
‚‚. /
[
ÍÍ 	
JsonProperty
ÍÍ	 
(
ÍÍ 
$str
ÍÍ 
)
ÍÍ 
]
ÍÍ  
public
ÎÎ 
int
ÎÎ 
Status
ÎÎ 
{
ÎÎ 
get
ÎÎ 
;
ÎÎ  
set
ÎÎ! $
;
ÎÎ$ %
}
ÎÎ& '
[
ÛÛ 	
JsonProperty
ÛÛ	 
(
ÛÛ 
$str
ÛÛ 
)
ÛÛ 
]
ÛÛ  
public
ÙÙ 
List
ÙÙ 
<
ÙÙ 
string
ÙÙ 
>
ÙÙ 
Errors
ÙÙ "
{
ÙÙ# $
get
ÙÙ% (
;
ÙÙ( )
set
ÙÙ* -
;
ÙÙ- .
}
ÙÙ/ 0
=
ÙÙ1 2
new
ÙÙ3 6
List
ÙÙ7 ;
<
ÙÙ; <
string
ÙÙ< B
>
ÙÙB C
(
ÙÙC D
)
ÙÙD E
;
ÙÙE F
[
¸¸ 	
JsonProperty
¸¸	 
(
¸¸ 
$str
¸¸ !
)
¸¸! "
]
¸¸" #
public
˝˝ 
	Exception
˝˝ 
	Exception
˝˝ "
{
˝˝# $
get
˝˝% (
;
˝˝( )
set
˝˝* -
;
˝˝- .
}
˝˝/ 0
[
ÖÖ 	
JsonProperty
ÖÖ	 
(
ÖÖ 
$str
ÖÖ 
)
ÖÖ 
]
ÖÖ 
public
ÜÜ 
TResult
ÜÜ 
Data
ÜÜ 
{
ÜÜ 
get
ÜÜ !
;
ÜÜ! "
set
ÜÜ# &
;
ÜÜ& '
}
ÜÜ( )
}
àà 
public
çç 

class
çç 
RequestPaging
çç 
{
éé 
[
ïï 	
JsonProperty
ïï	 
(
ïï 
$str
ïï !
)
ïï! "
]
ïï" #
public
ññ 
int
ññ 
	CountryId
ññ 
{
ññ 
get
ññ "
;
ññ" #
set
ññ$ '
;
ññ' (
}
ññ) *
[
ûû 	
JsonProperty
ûû	 
(
ûû 
$str
ûû 
)
ûû  
]
ûû  !
public
üü 
string
üü 
Culture
üü 
{
üü 
get
üü  #
;
üü# $
set
üü% (
;
üü( )
}
üü* +
[
ßß 	
JsonProperty
ßß	 
(
ßß 
$str
ßß !
)
ßß! "
]
ßß" #
public
®® 
OrderByDirection
®® 
	Direction
®®  )
{
®®* +
get
®®, /
;
®®/ 0
set
®®1 4
;
®®4 5
}
®®6 7
=
®®8 9
OrderByDirection
®®: J
.
®®J K
	Ascending
®®K T
;
®®T U
[
∞∞ 	
JsonProperty
∞∞	 
(
∞∞ 
$str
∞∞ 
)
∞∞ 
]
∞∞ 
public
±± 
string
±± 
Key
±± 
{
±± 
get
±± 
;
±±  
set
±±! $
;
±±$ %
}
±±& '
[
ππ 	
JsonProperty
ππ	 
(
ππ 
$str
ππ 
)
ππ  
]
ππ  !
public
∫∫ 
string
∫∫ 
Keyword
∫∫ 
{
∫∫ 
get
∫∫  #
;
∫∫# $
set
∫∫% (
;
∫∫( )
}
∫∫* +
[
¬¬ 	
JsonProperty
¬¬	 
(
¬¬ 
$str
¬¬ 
)
¬¬ 
]
¬¬  
public
√√ 
Common
√√ 
.
√√ 
Utility
√√ 
.
√√ 
Enums
√√ #
.
√√# $
SWStatus
√√$ ,
?
√√, -
Status
√√. 4
{
√√5 6
get
√√7 :
;
√√: ;
set
√√< ?
;
√√? @
}
√√A B
[
ÀÀ 	
JsonProperty
ÀÀ	 
(
ÀÀ 
$str
ÀÀ 
)
ÀÀ  
]
ÀÀ  !
public
ÃÃ 
string
ÃÃ 
OrderBy
ÃÃ 
{
ÃÃ 
get
ÃÃ  #
;
ÃÃ# $
set
ÃÃ% (
;
ÃÃ( )
}
ÃÃ* +
=
ÃÃ, -
$str
ÃÃ. 2
;
ÃÃ2 3
[
‘‘ 	
JsonProperty
‘‘	 
(
‘‘ 
$str
‘‘ !
)
‘‘! "
]
‘‘" #
public
’’ 
int
’’ 
	PageIndex
’’ 
{
’’ 
get
’’ "
;
’’" #
set
’’$ '
;
’’' (
}
’’) *
=
’’+ ,
$num
’’- .
;
’’. /
[
›› 	
JsonProperty
››	 
(
›› 
$str
››  
)
››  !
]
››! "
public
ﬁﬁ 
int
ﬁﬁ 
?
ﬁﬁ 
PageSize
ﬁﬁ 
{
ﬁﬁ 
get
ﬁﬁ "
;
ﬁﬁ" #
set
ﬁﬁ$ '
;
ﬁﬁ' (
}
ﬁﬁ) *
=
ﬁﬁ+ ,
$num
ﬁﬁ- /
;
ﬁﬁ/ 0
[
ÊÊ 	
JsonProperty
ÊÊ	 
(
ÊÊ 
$str
ÊÊ !
)
ÊÊ! "
]
ÊÊ" #
public
ÁÁ 
string
ÁÁ 
	UserAgent
ÁÁ 
{
ÁÁ  !
get
ÁÁ" %
;
ÁÁ% &
set
ÁÁ' *
;
ÁÁ* +
}
ÁÁ, -
[
ÔÔ 	
JsonProperty
ÔÔ	 
(
ÔÔ 
$str
ÔÔ 
)
ÔÔ 
]
ÔÔ  
public
 
string
 
UserId
 
{
 
get
 "
;
" #
set
$ '
;
' (
}
) *
[
ÚÚ 	
JsonProperty
ÚÚ	 
(
ÚÚ 
$str
ÚÚ  
)
ÚÚ  !
]
ÚÚ! "
public
ÛÛ 
DateTime
ÛÛ 
?
ÛÛ 
FromDate
ÛÛ !
{
ÛÛ" #
get
ÛÛ$ '
;
ÛÛ' (
set
ÛÛ) ,
;
ÛÛ, -
}
ÛÛ. /
[
ıı 	
JsonProperty
ıı	 
(
ıı 
$str
ıı 
)
ıı 
]
ıı  
public
ˆˆ 
DateTime
ˆˆ 
?
ˆˆ 
ToDate
ˆˆ 
{
ˆˆ  !
get
ˆˆ" %
;
ˆˆ% &
set
ˆˆ' *
;
ˆˆ* +
}
ˆˆ, -
}
˜˜ 
}¯¯ ì'
]D:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\ExpandViewModelBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

ViewModels )
{ 
public 

abstract 
class 
ExpandViewModelBase -
<- .

TDbContext. 8
,8 9
TModel: @
>@ A
where 	

TDbContext
 
: 
	DbContext  
where 	
TModel
 
: 
class 
{ 
[ 	

JsonIgnore	 
] 
public 
List 
< 
string 
> 
errors "
=# $
new% (
List) -
<- .
string. 4
>4 5
(5 6
)6 7
;7 8
[   	

JsonIgnore  	 
]   
public!! 
bool!! 
IsValid!! 
=!! 
true!! "
;!!" #
[)) 	

JsonIgnore))	 
])) 
public** 
List** 
<** 
SupportedCulture** $
>**$ % 
ListSupportedCulture**& :
{**; <
get**= @
;**@ A
set**B E
;**E F
}**G H
[22 	

JsonIgnore22	 
]22 
public33 
TModel33 
Model33 
{33 
get33 !
;33! "
set33# &
;33& '
}33( )
[;; 	

JsonIgnore;;	 
];; 
public<< 
string<< 
ResponseKey<< !
{<<" #
get<<$ '
;<<' (
set<<) ,
;<<, -
}<<. /
publicBB 
virtualBB 
voidBB 
ExpandModelBB '
(BB' (
TModelBB( .
modelBB/ 4
)BB4 5
{CC 	
}DD 	
publicKK 
virtualKK 
voidKK 

ExpandViewKK &
(KK& '

TDbContextKK' 1
_contextKK2 :
=KK; <
nullKK= A
,KKA B!
IDbContextTransactionKKC X
_transactionKKY e
=KKf g
nullKKh l
)KKl m
{LL 	
}MM 	
publicVV 
virtualVV 
TaskVV 
<VV 
boolVV  
>VV  !
RemoveModelAsyncVV" 2
(VV2 3
TModelVV3 9
modelVV: ?
,VV? @

TDbContextVVA K
_contextVVL T
,VVT U!
IDbContextTransactionVVV k
_transactionVVl x
)VVx y
{WW 	
returnXX 
defaultXX 
(XX 
TaskXX 
<XX  
boolXX  $
>XX$ %
)XX% &
;XX& '
}YY 	
publicbb 
abstractbb 
boolbb 
	SaveModelbb &
(bb& '
boolbb' +
isSaveSubModelsbb, ;
=bb< =
falsebb> C
,bbC D

TDbContextbbE O
_contextbbP X
=bbY Z
nullbb[ _
,bb_ `!
IDbContextTransactionbba v
_transaction	bbw É
=
bbÑ Ö
null
bbÜ ä
)
bbä ã
;
bbã å
publickk 
abstractkk 
Taskkk 
<kk 
boolkk !
>kk! "
SaveModelAsynckk# 1
(kk1 2
boolkk2 6
isSaveSubModelskk7 F
=kkG H
falsekkI N
,kkN O

TDbContextkkP Z
_contextkk[ c
=kkd e
nullkkf j
,kkj k"
IDbContextTransaction	kkl Å
_transaction
kkÇ é
=
kkè ê
null
kkë ï
)
kkï ñ
;
kkñ ó
publictt 
virtualtt 
booltt 
SaveSubModelstt )
(tt) *
TModeltt* 0
parenttt1 7
,tt7 8

TDbContexttt9 C
_contextttD L
=ttM N
nullttO S
,ttS T!
IDbContextTransactionttU j
_transactionttk w
=ttx y
nullttz ~
)tt~ 
{uu 	
returnvv 
falsevv 
;vv 
}ww 	
public
ÄÄ 
virtual
ÄÄ 
Task
ÄÄ 
<
ÄÄ 
bool
ÄÄ  
>
ÄÄ  ! 
SaveSubModelsAsync
ÄÄ" 4
(
ÄÄ4 5
TModel
ÄÄ5 ;
parent
ÄÄ< B
,
ÄÄB C

TDbContext
ÄÄD N
_context
ÄÄO W
=
ÄÄX Y
null
ÄÄZ ^
,
ÄÄ^ _#
IDbContextTransaction
ÄÄ` u
_transactionÄÄv Ç
=ÄÄÉ Ñ
nullÄÄÖ â
)ÄÄâ ä
{
ÅÅ 	
return
ÇÇ 
default
ÇÇ 
(
ÇÇ 
Task
ÇÇ 
<
ÇÇ  
bool
ÇÇ  $
>
ÇÇ$ %
)
ÇÇ% &
;
ÇÇ& '
}
ÉÉ 	
public
àà 
virtual
àà 
void
àà 
Validate
àà $
(
àà$ %
)
àà% &
{
ââ 	
}
ää 	
}
ãã 
}åå Ê7
\D:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\ModelViewModelBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

ViewModels )
{ 
public 

abstract 
class 
ViewModelBase '
<' (
TModel( .
,. /
TView0 5
>5 6
where7 <
TModel= C
:D E
classF K
whereL Q
TViewR W
:X Y
ViewModelBaseZ g
<g h
TModelh n
,n o
TViewp u
>u v
{ 
private 
IMapper 
_mapper 
;  
private 
TModel 
_model 
; 
private"" 
IMapper"" 
_modelMapper"" $
;""$ %
	protected(( 
ViewModelBase(( 
(((  
string((  &

domainName((' 1
=((2 3
$str((4 7
)((7 8
{)) 	
this** 
.** 

DomainName** 
=** 

domainName** (
;**( )
}++ 	
	protected22 
ViewModelBase22 
(22  
TModel22  &
model22' ,
,22, -
string22. 4

domainName225 ?
=22@ A
$str22B E
)22E F
{33 	
this55 
.55 

DomainName55 
=55 

domainName55 (
;55( )
}66 	
[>> 	

JsonIgnore>>	 
]>> 
public?? 
string?? 

DomainName??  
{??! "
get??# &
;??& '
set??( +
;??+ ,
}??- .
[GG 	

JsonIgnoreGG	 
]GG 
publicHH 
ListHH 
<HH 
SupportedCultureHH $
>HH$ % 
ListSupportedCultureHH& :
{HH; <
getHH= @
;HH@ A
setHHB E
;HHE F
}HHG H
[PP 	

JsonIgnorePP	 
]PP 
publicQQ 
IMapperQQ 
MapperQQ 
{QQ 
getRR 
{RR 
returnRR 
_mapperRR  
??RR! #
(RR$ %
_mapperRR% ,
=RR- .
thisRR/ 3
.RR3 4
CreateMapperRR4 @
(RR@ A
)RRA B
)RRB C
;RRC D
}RRE F
setSS 
=>SS 
_mapperSS 
=SS 
valueSS "
;SS" #
}TT 	
[\\ 	

JsonIgnore\\	 
]\\ 
public]] 
TModel]] 
Model]] 
{]] 
get^^ 
{^^ 
if__ 
(__ 
_model__ 
==__ 
null__ "
)__" #
{`` 
Typeaa 
	classTypeaa "
=aa# $
typeofaa% +
(aa+ ,
TModelaa, 2
)aa2 3
;aa3 4
ConstructorInfobb #
classConstructorbb$ 4
=bb5 6
	classTypebb7 @
.bb@ A
GetConstructorbbA O
(bbO P
newbbP S
TypebbT X
[bbX Y
]bbY Z
{bb[ \
}bb] ^
)bb^ _
;bb_ `
_modelcc 
=cc 
(cc 
TModelcc $
)cc$ %
classConstructorcc% 5
.cc5 6
Invokecc6 <
(cc< =
newcc= @
objectccA G
[ccG H
]ccH I
{ccJ K
}ccL M
)ccM N
;ccN O
}dd 
returnee 
_modelee 
;ee 
}ff 
setgg 
=>gg 
_modelgg 
=gg 
valuegg !
;gg! "
}hh 	
[pp 	

JsonIgnorepp	 
]pp 
publicqq 
IMapperqq 
ModelMapperqq "
{qq# $
getrr 
{rr 
returnrr 
_modelMapperrr %
??rr& (
(rr) *
_modelMapperrr* 6
=rr7 8
thisrr9 =
.rr= >
CreateModelMapperrr> O
(rrO P
)rrP Q
)rrQ R
;rrR S
}rrT U
setss 
=>ss 
_modelMapperss 
=ss  !
valuess" '
;ss' (
}tt 	
publiczz 
virtualzz 
TModelzz 

ParseModelzz (
(zz( )
)zz) *
{{{ 	
Mapper}} 
.}} 
Map}} 
<}} 
TView}} 
,}} 
TModel}} $
>}}$ %
(}}% &
(}}& '
TView}}' ,
)}}, -
this}}- 1
,}}1 2
Model}}3 8
)}}8 9
;}}9 :
return~~ 
this~~ 
.~~ 
Model~~ 
;~~ 
} 	
public
ää 
virtual
ää 
TView
ää 
	ParseView
ää &
(
ää& '
)
ää' (
{
ãã 	
Mapper
çç 
.
çç 
Map
çç 
<
çç 
TModel
çç 
,
çç 
TView
çç $
>
çç$ %
(
çç% &
Model
çç& +
,
çç+ ,
(
çç- .
TView
çç. 3
)
çç3 4
this
çç4 8
)
çç8 9
;
çç9 :
return
éé 
(
éé 
TView
éé 
)
éé 
this
éé 
;
éé 
}
èè 	
private
ïï 
IMapper
ïï 
CreateMapper
ïï $
(
ïï$ %
)
ïï% &
{
ññ 	
var
óó 
config
óó 
=
óó 
new
óó !
MapperConfiguration
óó 0
(
óó0 1
cfg
óó1 4
=>
óó5 7
cfg
óó8 ;
.
óó; <
	CreateMap
óó< E
<
óóE F
TModel
óóF L
,
óóL M
TView
óóN S
>
óóS T
(
óóT U
)
óóU V
.
óóV W

ReverseMap
óóW a
(
óóa b
)
óób c
)
óóc d
;
óód e
var
òò 
mapper
òò 
=
òò 
new
òò 
Mapper
òò #
(
òò# $
config
òò$ *
)
òò* +
;
òò+ ,
return
ôô 
mapper
ôô 
;
ôô 
}
öö 	
private
†† 
IMapper
†† 
CreateModelMapper
†† )
(
††) *
)
††* +
{
°° 	
var
¢¢ 
config
¢¢ 
=
¢¢ 
new
¢¢ !
MapperConfiguration
¢¢ 0
(
¢¢0 1
cfg
¢¢1 4
=>
¢¢5 7
cfg
¢¢8 ;
.
¢¢; <
	CreateMap
¢¢< E
<
¢¢E F
TModel
¢¢F L
,
¢¢L M
TModel
¢¢N T
>
¢¢T U
(
¢¢U V
)
¢¢V W
.
¢¢W X

ReverseMap
¢¢X b
(
¢¢b c
)
¢¢c d
)
¢¢d e
;
¢¢e f
var
££ 
mapper
££ 
=
££ 
new
££ 
Mapper
££ #
(
££# $
config
££$ *
)
££* +
;
££+ ,
return
§§ 
mapper
§§ 
;
§§ 
}
•• 	
}
´´ 
}¨¨ ◊ 
WD:\Workspace\GitHub\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\ViewModelBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

ViewModels )
{ 
public 

abstract 
class 
ViewModelBase '
<' (

TDbContext( 2
,2 3
TModel4 :
,: ;
TView< A
>A B
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
ViewModelBase #
<# $

TDbContext$ .
,. /
TModel0 6
,6 7
TView8 =
>= >
{   
[&& 	

JsonIgnore&&	 
]&& 
public'' 
bool'' 
IsValid'' 
='' 
true'' "
;''" #
private,, 
static,, 
DefaultRepository,, (
<,,( )

TDbContext,,) 3
,,,3 4
TModel,,5 ;
,,,; <
TView,,= B
>,,B C
_repo,,D I
;,,I J
private11 
IMapper11 
_mapper11 
;11  
private66 
TModel66 
_model66 
;66 
private;; 
IMapper;; 
_modelMapper;; $
;;;$ %
[== 	

JsonIgnore==	 
]== 
public>> 
static>> 
DefaultRepository>> '
<>>' (

TDbContext>>( 2
,>>2 3
TModel>>4 :
,>>: ;
TView>>< A
>>>A B

Repository>>C M
{>>N O
get?? 
{?? 
return?? 
_repo?? 
???? !
(??" #
_repo??# (
=??) *
DefaultRepository??+ <
<??< =

TDbContext??= G
,??G H
TModel??I O
,??O P
TView??Q V
>??V W
.??W X
Instance??X `
)??` a
;??a b
}??c d
set@@ 
=>@@ 
_repo@@ 
=@@ 
value@@  
;@@  !
}AA 	
[II 	

JsonIgnoreII	 
]II 
publicJJ 
	ExceptionJJ 
	ExceptionJJ "
{JJ# $
getJJ% (
;JJ( )
setJJ* -
;JJ- .
}JJ/ 0
[RR 	

JsonIgnoreRR	 
]RR 
publicSS 
boolSS 
IsCloneSS 
{SS 
getSS !
;SS! "
setSS# &
;SS& '
}SS( )
=SS* +
falseSS, 1
;SS1 2
[[[ 	

JsonIgnore[[	 
][[ 
public\\ 
bool\\ 

IsLazyLoad\\ 
{\\  
get\\! $
;\\$ %
set\\& )
;\\) *
}\\+ ,
=\\- .
true\\/ 3
;\\3 4
[dd 	

JsonIgnoredd	 
]dd 
publicee 
Listee 
<ee 
SupportedCultureee $
>ee$ % 
ListSupportedCultureee& :
{ee; <
getee= @
;ee@ A
seteeB E
;eeE F
}eeG H
[mm 	

JsonIgnoremm	 
]mm 
publicnn 
IMappernn 
Mappernn 
{nn 
getoo 
{oo 
returnoo 
_mapperoo  
??oo! #
(oo$ %
_mapperoo% ,
=oo- .
thisoo/ 3
.oo3 4
CreateMapperoo4 @
(oo@ A
)ooA B
)ooB C
;ooC D
}ooE F
setpp 
=>pp 
_mapperpp 
=pp 
valuepp "
;pp" #
}qq 	
[yy 	

JsonIgnoreyy	 
]yy 
publiczz 
TModelzz 
Modelzz 
{zz 
get{{ 
{{{ 
if|| 
(|| 
_model|| 
==|| 
null|| "
)||" #
{}} 
Type~~ 
	classType~~ "
=~~# $
typeof~~% +
(~~+ ,
TModel~~, 2
)~~2 3
;~~3 4
ConstructorInfo #
classConstructor$ 4
=5 6
	classType7 @
.@ A
GetConstructorA O
(O P
newP S
TypeT X
[X Y
]Y Z
{[ \
}] ^
)^ _
;_ `
_model
ÄÄ 
=
ÄÄ 
(
ÄÄ 
TModel
ÄÄ $
)
ÄÄ$ %
classConstructor
ÄÄ% 5
.
ÄÄ5 6
Invoke
ÄÄ6 <
(
ÄÄ< =
new
ÄÄ= @
object
ÄÄA G
[
ÄÄG H
]
ÄÄH I
{
ÄÄJ K
}
ÄÄL M
)
ÄÄM N
;
ÄÄN O
}
ÅÅ 
return
ÇÇ 
_model
ÇÇ 
;
ÇÇ 
}
ÉÉ 
set
ÑÑ 
=>
ÑÑ 
_model
ÑÑ 
=
ÑÑ 
value
ÑÑ !
;
ÑÑ! "
}
ÖÖ 	
[
çç 	

JsonIgnore
çç	 
]
çç 
public
éé 
IMapper
éé 
ModelMapper
éé "
{
éé# $
get
èè 
{
èè 
return
èè 
_modelMapper
èè %
??
èè& (
(
èè) *
_modelMapper
èè* 6
=
èè7 8
this
èè9 =
.
èè= >
CreateModelMapper
èè> O
(
èèO P
)
èèP Q
)
èèQ R
;
èèR S
}
èèT U
set
êê 
=>
êê 
_modelMapper
êê 
=
êê  !
value
êê" '
;
êê' (
}
ëë 	
[
ôô 	

JsonIgnore
ôô	 
]
ôô 
public
öö 
int
öö 
	PageIndex
öö 
{
öö 
get
öö "
;
öö" #
set
öö$ '
;
öö' (
}
öö) *
=
öö+ ,
$num
öö- .
;
öö. /
[
¢¢ 	

JsonIgnore
¢¢	 
]
¢¢ 
public
££ 
int
££ 
PageSize
££ 
{
££ 
get
££ !
;
££! "
set
££# &
;
££& '
}
££( )
=
££* +
$num
££, 0
;
££0 1
[
´´ 	
JsonProperty
´´	 
(
´´ 
$str
´´  
)
´´  !
]
´´! "
public
¨¨ 
int
¨¨ 
?
¨¨ 
Priority
¨¨ 
{
¨¨ 
get
¨¨ "
;
¨¨" #
set
¨¨$ '
;
¨¨' (
}
¨¨) *
=
¨¨+ ,
$num
¨¨- .
;
¨¨. /
[
¥¥ 	
JsonProperty
¥¥	 
(
¥¥ 
$str
¥¥ 
)
¥¥ 
]
¥¥  
public
µµ 
SWStatus
µµ 
Status
µµ 
{
µµ  
get
µµ! $
;
µµ$ %
set
µµ& )
;
µµ) *
}
µµ+ ,
=
µµ- .
SWStatus
µµ/ 7
.
µµ7 8
Preview
µµ8 ?
;
µµ? @
[
ΩΩ 	
JsonProperty
ΩΩ	 
(
ΩΩ 
$str
ΩΩ &
)
ΩΩ& '
]
ΩΩ' (
public
ææ 
string
ææ 
Specificulture
ææ $
{
ææ% &
get
ææ' *
;
ææ* +
set
ææ, /
;
ææ/ 0
}
ææ1 2
private
ƒƒ 
IMapper
ƒƒ 
CreateMapper
ƒƒ $
(
ƒƒ$ %
)
ƒƒ% &
{
≈≈ 	
var
∆∆ 
config
∆∆ 
=
∆∆ 
new
∆∆ !
MapperConfiguration
∆∆ 0
(
∆∆0 1
cfg
∆∆1 4
=>
∆∆5 7
cfg
∆∆8 ;
.
∆∆; <
	CreateMap
∆∆< E
<
∆∆E F
TModel
∆∆F L
,
∆∆L M
TView
∆∆N S
>
∆∆S T
(
∆∆T U
)
∆∆U V
.
∆∆V W

ReverseMap
∆∆W a
(
∆∆a b
)
∆∆b c
)
∆∆c d
;
∆∆d e
var
«« 
mapper
«« 
=
«« 
new
«« 
Mapper
«« #
(
««# $
config
««$ *
)
««* +
;
««+ ,
return
»» 
mapper
»» 
;
»» 
}
…… 	
private
œœ 
IMapper
œœ 
CreateModelMapper
œœ )
(
œœ) *
)
œœ* +
{
–– 	
var
—— 
config
—— 
=
—— 
new
—— !
MapperConfiguration
—— 0
(
——0 1
cfg
——1 4
=>
——5 7
cfg
——8 ;
.
——; <
	CreateMap
——< E
<
——E F
TModel
——F L
,
——L M
TModel
——N T
>
——T U
(
——U V
)
——V W
.
——W X

ReverseMap
——X b
(
——b c
)
——c d
)
——d e
;
——e f
var
““ 
mapper
““ 
=
““ 
new
““ 
Mapper
““ #
(
““# $
config
““$ *
)
““* +
;
““+ ,
return
”” 
mapper
”” 
;
”” 
}
‘‘ 	
[
’’ 	

JsonIgnore
’’	 
]
’’ 
public
÷÷ 
List
÷÷ 
<
÷÷ 
string
÷÷ 
>
÷÷ 
Errors
÷÷ "
{
÷÷# $
get
÷÷% (
;
÷÷( )
set
÷÷* -
;
÷÷- .
}
÷÷/ 0
=
÷÷1 2
new
÷÷3 6
List
÷÷7 ;
<
÷÷; <
string
÷÷< B
>
÷÷B C
(
÷÷C D
)
÷÷D E
;
÷÷E F
public
·· 
virtual
·· 
void
·· 

ExpandView
·· &
(
··& '

TDbContext
··' 1
_context
··2 :
=
··; <
null
··= A
,
··A B#
IDbContextTransaction
··C X
_transaction
··Y e
=
··f g
null
··h l
)
··l m
{
‚‚ 	
}
„„ 	
public
ÈÈ 
virtual
ÈÈ 

TDbContext
ÈÈ !
InitContext
ÈÈ" -
(
ÈÈ- .
)
ÈÈ. /
{
ÍÍ 	
Type
ÎÎ 
	classType
ÎÎ 
=
ÎÎ 
typeof
ÎÎ #
(
ÎÎ# $

TDbContext
ÎÎ$ .
)
ÎÎ. /
;
ÎÎ/ 0
ConstructorInfo
ÏÏ 
classConstructor
ÏÏ ,
=
ÏÏ- .
	classType
ÏÏ/ 8
.
ÏÏ8 9
GetConstructor
ÏÏ9 G
(
ÏÏG H
new
ÏÏH K
Type
ÏÏL P
[
ÏÏP Q
]
ÏÏQ R
{
ÏÏS T
}
ÏÏU V
)
ÏÏV W
;
ÏÏW X

TDbContext
ÌÌ 
context
ÌÌ 
=
ÌÌ  
(
ÌÌ! "

TDbContext
ÌÌ" ,
)
ÌÌ, -
classConstructor
ÌÌ- =
.
ÌÌ= >
Invoke
ÌÌ> D
(
ÌÌD E
new
ÌÌE H
object
ÌÌI O
[
ÌÌO P
]
ÌÌP Q
{
ÌÌR S
}
ÌÌT U
)
ÌÌU V
;
ÌÌV W
return
ÔÔ 
context
ÔÔ 
;
ÔÔ 
}
 	
public
ˆˆ 
virtual
ˆˆ 
TModel
ˆˆ 
	InitModel
ˆˆ '
(
ˆˆ' (
)
ˆˆ( )
{
˜˜ 	
Type
¯¯ 
	classType
¯¯ 
=
¯¯ 
typeof
¯¯ #
(
¯¯# $
TModel
¯¯$ *
)
¯¯* +
;
¯¯+ ,
ConstructorInfo
˘˘ 
classConstructor
˘˘ ,
=
˘˘- .
	classType
˘˘/ 8
.
˘˘8 9
GetConstructor
˘˘9 G
(
˘˘G H
new
˘˘H K
Type
˘˘L P
[
˘˘P Q
]
˘˘Q R
{
˘˘S T
}
˘˘U V
)
˘˘V W
;
˘˘W X
TModel
˙˙ 
context
˙˙ 
=
˙˙ 
(
˙˙ 
TModel
˙˙ $
)
˙˙$ %
classConstructor
˙˙% 5
.
˙˙5 6
Invoke
˙˙6 <
(
˙˙< =
new
˙˙= @
object
˙˙A G
[
˙˙G H
]
˙˙H I
{
˙˙J K
}
˙˙L M
)
˙˙M N
;
˙˙N O
return
¸¸ 
context
¸¸ 
;
¸¸ 
}
˝˝ 	
public
áá 
virtual
áá 
TView
áá 
InitView
áá %
(
áá% &
TModel
áá& ,
model
áá- 2
=
áá3 4
null
áá5 9
,
áá9 :
bool
áá; ?

isLazyLoad
áá@ J
=
ááK L
true
ááM Q
,
ááQ R

TDbContext
ááS ]
_context
áá^ f
=
áág h
null
áái m
,
áám n$
IDbContextTransactionááo Ñ
_transactionááÖ ë
=ááí ì
nullááî ò
)ááò ô
{
àà 	
Type
ââ 
	classType
ââ 
=
ââ 
typeof
ââ #
(
ââ# $
TView
ââ$ )
)
ââ) *
;
ââ* +
ConstructorInfo
ãã 
classConstructor
ãã ,
=
ãã- .
	classType
ãã/ 8
.
ãã8 9
GetConstructor
ãã9 G
(
ããG H
new
ããH K
Type
ããL P
[
ããP Q
]
ããQ R
{
ããS T
}
ããU V
)
ããV W
;
ããW X
if
åå 
(
åå 
model
åå 
==
åå 
null
åå 
&&
åå  
classConstructor
åå! 1
!=
åå2 4
null
åå5 9
)
åå9 :
{
çç 
return
éé 
(
éé 
TView
éé 
)
éé 
classConstructor
éé .
.
éé. /
Invoke
éé/ 5
(
éé5 6
new
éé6 9
object
éé: @
[
éé@ A
]
ééA B
{
ééC D
}
ééE F
)
ééF G
;
ééG H
}
èè 
else
êê 
{
ëë 
classConstructor
íí  
=
íí! "
	classType
íí# ,
.
íí, -
GetConstructor
íí- ;
(
íí; <
new
íí< ?
Type
íí@ D
[
ííD E
]
ííE F
{
ííG H
typeof
ííI O
(
ííO P
TModel
ííP V
)
ííV W
,
ííW X
typeof
ííY _
(
íí_ `
bool
íí` d
)
ííd e
,
ííe f
typeof
ííg m
(
íím n

TDbContext
íín x
)
ííx y
,
ííy z
typeofíí{ Å
(ííÅ Ç%
IDbContextTransactionííÇ ó
)ííó ò
}ííô ö
)ííö õ
;ííõ ú
if
ìì 
(
ìì 
classConstructor
ìì $
!=
ìì% '
null
ìì( ,
)
ìì, -
{
îî 
return
ïï 
(
ïï 
TView
ïï !
)
ïï! "
classConstructor
ïï" 2
.
ïï2 3
Invoke
ïï3 9
(
ïï9 :
new
ïï: =
object
ïï> D
[
ïïD E
]
ïïE F
{
ïïG H
model
ïïI N
,
ïïN O

isLazyLoad
ïïP Z
,
ïïZ [
_context
ïï\ d
,
ïïd e
_transaction
ïïf r
}
ïïs t
)
ïït u
;
ïïu v
}
ññ 
else
óó 
{
òò 
classConstructor
ôô $
=
ôô% &
	classType
ôô' 0
.
ôô0 1
GetConstructor
ôô1 ?
(
ôô? @
new
ôô@ C
Type
ôôD H
[
ôôH I
]
ôôI J
{
ôôK L
typeof
ôôM S
(
ôôS T
TModel
ôôT Z
)
ôôZ [
,
ôô[ \
typeof
ôô] c
(
ôôc d

TDbContext
ôôd n
)
ôôn o
,
ôôo p
typeof
ôôq w
(
ôôw x$
IDbContextTransactionôôx ç
)ôôç é
}ôôè ê
)ôôê ë
;ôôë í
return
öö 
(
öö 
TView
öö !
)
öö! "
classConstructor
öö" 2
.
öö2 3
Invoke
öö3 9
(
öö9 :
new
öö: =
object
öö> D
[
ööD E
]
ööE F
{
ööG H
model
ööI N
,
ööN O
_context
ööP X
,
ööX Y
_transaction
ööZ f
}
öög h
)
ööh i
;
ööi j
}
õõ 
}
úú 
}
ùù 	
public
ØØ 
virtual
ØØ 
TModel
ØØ 

ParseModel
ØØ (
(
ØØ( )

TDbContext
ØØ) 3
_context
ØØ4 <
=
ØØ= >
null
ØØ? C
,
ØØC D#
IDbContextTransaction
ØØE Z
_transaction
ØØ[ g
=
ØØh i
null
ØØj n
)
ØØn o
{
∞∞ 	
this
≤≤ 
.
≤≤ 
Model
≤≤ 
=
≤≤ 
	InitModel
≤≤ "
(
≤≤" #
)
≤≤# $
;
≤≤$ %
Mapper
≥≥ 
.
≥≥ 
Map
≥≥ 
<
≥≥ 
TView
≥≥ 
,
≥≥ 
TModel
≥≥ $
>
≥≥$ %
(
≥≥% &
(
≥≥& '
TView
≥≥' ,
)
≥≥, -
this
≥≥- 1
,
≥≥1 2
Model
≥≥3 8
)
≥≥8 9
;
≥≥9 :
return
¥¥ 
this
¥¥ 
.
¥¥ 
Model
¥¥ 
;
¥¥ 
}
µµ 	
public
ææ 
virtual
ææ 
TView
ææ 
	ParseView
ææ &
(
ææ& '
bool
ææ' +
isExpand
ææ, 4
=
ææ5 6
true
ææ7 ;
,
ææ; <

TDbContext
ææ= G
_context
ææH P
=
ææQ R
null
ææS W
,
ææW X#
IDbContextTransaction
ææY n
_transaction
ææo {
=
ææ| }
nullææ~ Ç
)
øø4 5
{
¿¿ 	
Mapper
¬¬ 
.
¬¬ 
Map
¬¬ 
<
¬¬ 
TModel
¬¬ 
,
¬¬ 
TView
¬¬ $
>
¬¬$ %
(
¬¬% &
Model
¬¬& +
,
¬¬+ ,
(
¬¬- .
TView
¬¬. 3
)
¬¬3 4
this
¬¬4 8
)
¬¬8 9
;
¬¬9 :
if
√√ 
(
√√ 
isExpand
√√ 
)
√√ 
{
ƒƒ 
bool
≈≈ 
IsRoot
≈≈ 
=
≈≈ 
_context
≈≈ &
==
≈≈' )
null
≈≈* .
;
≈≈. /
var
∆∆ 
context
∆∆ 
=
∆∆ 
_context
∆∆ &
??
∆∆' )
InitContext
∆∆* 5
(
∆∆5 6
)
∆∆6 7
;
∆∆7 8
var
«« 
transaction
«« 
=
««  !
_transaction
««" .
??
««/ 1
context
««2 9
.
««9 :
Database
««: B
.
««B C
BeginTransaction
««C S
(
««S T
)
««T U
;
««U V
try
»» 
{
…… 

ExpandView
   
(
   
context
   &
,
  & '
transaction
  ( 3
)
  3 4
;
  4 5
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ  
ex
ÃÃ! #
)
ÃÃ# $
{
ÕÕ 

Repository
ŒŒ 
.
ŒŒ 
LogErrorMessage
ŒŒ .
(
ŒŒ. /
ex
ŒŒ/ 1
)
ŒŒ1 2
;
ŒŒ2 3
if
œœ 
(
œœ 
IsRoot
œœ 
)
œœ 
{
–– 
transaction
““ #
.
““# $
Rollback
““$ ,
(
““, -
)
““- .
;
““. /
}
”” 
}
‘‘ 
finally
’’ 
{
÷÷ 
if
◊◊ 
(
◊◊ 
IsRoot
◊◊ 
)
◊◊ 
{
ÿÿ 
context
⁄⁄ 
.
⁄⁄  
Dispose
⁄⁄  '
(
⁄⁄' (
)
⁄⁄( )
;
⁄⁄) *
}
€€ 
}
‹‹ 
}
›› 
return
ﬁﬁ 
(
ﬁﬁ 
TView
ﬁﬁ 
)
ﬁﬁ 
this
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 	
public
ÊÊ 
virtual
ÊÊ 
void
ÊÊ 
Validate
ÊÊ $
(
ÊÊ$ %

TDbContext
ÊÊ% /
_context
ÊÊ0 8
=
ÊÊ9 :
null
ÊÊ; ?
,
ÊÊ? @#
IDbContextTransaction
ÊÊA V
_transaction
ÊÊW c
=
ÊÊd e
null
ÊÊf j
)
ÊÊj k
{
ÁÁ 	
var
ËË 
validateContext
ËË 
=
ËË  !
new
ËË" %
System
ËË& ,
.
ËË, -
ComponentModel
ËË- ;
.
ËË; <
DataAnnotations
ËË< K
.
ËËK L
ValidationContext
ËËL ]
(
ËË] ^
this
ËË^ b
,
ËËb c
serviceProvider
ËËd s
:
ËËs t
null
ËËu y
,
ËËy z
itemsËË{ Ä
:ËËÄ Å
nullËËÇ Ü
)ËËÜ á
;ËËá à
var
ÈÈ 
results
ÈÈ 
=
ÈÈ 
new
ÈÈ 
List
ÈÈ "
<
ÈÈ" #
ValidationResult
ÈÈ# 3
>
ÈÈ3 4
(
ÈÈ4 5
)
ÈÈ5 6
;
ÈÈ6 7
IsValid
ÎÎ 
=
ÎÎ 
	Validator
ÎÎ 
.
ÎÎ  
TryValidateObject
ÎÎ  1
(
ÎÎ1 2
this
ÎÎ2 6
,
ÎÎ6 7
validateContext
ÎÎ8 G
,
ÎÎG H
results
ÎÎI P
)
ÎÎP Q
;
ÎÎQ R
if
ÏÏ 
(
ÏÏ 
!
ÏÏ 
IsValid
ÏÏ 
)
ÏÏ 
{
ÌÌ 
Errors
ÓÓ 
.
ÓÓ 
AddRange
ÓÓ 
(
ÓÓ  
results
ÓÓ  '
.
ÓÓ' (
Select
ÓÓ( .
(
ÓÓ. /
e
ÓÓ/ 0
=>
ÓÓ1 3
e
ÓÓ4 5
.
ÓÓ5 6
ErrorMessage
ÓÓ6 B
)
ÓÓB C
)
ÓÓC D
;
ÓÓD E
}
ÔÔ 
}
 	
public
˛˛ 
virtual
˛˛ 
async
˛˛ 
Task
˛˛ !
<
˛˛! " 
RepositoryResponse
˛˛" 4
<
˛˛4 5
List
˛˛5 9
<
˛˛9 :
TView
˛˛: ?
>
˛˛? @
>
˛˛@ A
>
˛˛A B

CloneAsync
˛˛C M
(
˛˛M N
TModel
˛˛N T
model
˛˛U Z
,
˛˛Z [
List
˛˛\ `
<
˛˛` a
SupportedCulture
˛˛a q
>
˛˛q r
cloneCultures˛˛s Ä
,
ˇˇ 

TDbContext
ˇˇ 
_context
ˇˇ !
=
ˇˇ" #
null
ˇˇ$ (
,
ˇˇ( )#
IDbContextTransaction
ˇˇ* ?
_transaction
ˇˇ@ L
=
ˇˇM N
null
ˇˇO S
)
ˇˇS T
{
ÄÄ 	
bool
ÅÅ 
IsRoot
ÅÅ 
=
ÅÅ 
_context
ÅÅ "
==
ÅÅ# %
null
ÅÅ& *
;
ÅÅ* +
var
ÇÇ 
context
ÇÇ 
=
ÇÇ 
_context
ÇÇ "
??
ÇÇ# %
InitContext
ÇÇ& 1
(
ÇÇ1 2
)
ÇÇ2 3
;
ÇÇ3 4
var
ÉÉ 
transaction
ÉÉ 
=
ÉÉ 
_transaction
ÉÉ *
??
ÉÉ+ -
context
ÉÉ. 5
.
ÉÉ5 6
Database
ÉÉ6 >
.
ÉÉ> ?
BeginTransaction
ÉÉ? O
(
ÉÉO P
)
ÉÉP Q
;
ÉÉQ R 
RepositoryResponse
ÑÑ 
<
ÑÑ 
List
ÑÑ #
<
ÑÑ# $
TView
ÑÑ$ )
>
ÑÑ) *
>
ÑÑ* +
result
ÑÑ, 2
=
ÑÑ3 4
new
ÑÑ5 8 
RepositoryResponse
ÑÑ9 K
<
ÑÑK L
List
ÑÑL P
<
ÑÑP Q
TView
ÑÑQ V
>
ÑÑV W
>
ÑÑW X
(
ÑÑX Y
)
ÑÑY Z
{
ÖÖ 
	IsSucceed
ÜÜ 
=
ÜÜ 
true
ÜÜ  
,
ÜÜ  !
Data
áá 
=
áá 
new
áá 
List
áá 
<
áá  
TView
áá  %
>
áá% &
(
áá& '
)
áá' (
}
àà 
;
àà 
try
ää 
{
ãã 
if
åå 
(
åå 
cloneCultures
åå !
!=
åå" $
null
åå% )
)
åå) *
{
çç 
foreach
éé 
(
éé 
var
éé  
culture
éé! (
in
éé) +
cloneCultures
éé, 9
)
éé9 :
{
èè 
string
êê 
desSpecificulture
êê 0
=
êê1 2
culture
êê3 :
.
êê: ;
Specificulture
êê; I
;
êêI J
TView
íí 
view
íí "
=
íí# $
InitView
íí% -
(
íí- .
)
íí. /
;
íí/ 0
view
ìì 
.
ìì 
Model
ìì "
=
ìì# $
model
ìì% *
;
ìì* +
view
îî 
.
îî 
	ParseView
îî &
(
îî& '
isExpand
îî' /
:
îî/ 0
false
îî1 6
,
îî6 7
_context
îî8 @
:
îî@ A
context
îîB I
,
îîI J
_transaction
îîK W
:
îîW X
transaction
îîY d
)
îîd e
;
îîe f
view
ïï 
.
ïï 
Specificulture
ïï +
=
ïï, -
desSpecificulture
ïï. ?
;
ïï? @
bool
óó 
isExist
óó $
=
óó% &

Repository
óó' 1
.
óó1 2
CheckIsExists
óó2 ?
(
óó? @
view
óó@ D
.
óóD E

ParseModel
óóE O
(
óóO P
_context
óóP X
,
óóX Y
_transaction
óóZ f
)
óóf g
,
óóg h
_context
óói q
:
óóq r
context
óós z
,
óóz {
_transactionóó| à
:óóà â
transactionóóä ï
)óóï ñ
;óóñ ó
if
ôô 
(
ôô 
isExist
ôô #
)
ôô# $
{
öö 
result
õõ "
.
õõ" #
	IsSucceed
õõ# ,
=
õõ- .
true
õõ/ 3
;
õõ3 4
result
úú "
.
úú" #
Data
úú# '
.
úú' (
Add
úú( +
(
úú+ ,
view
úú, 0
)
úú0 1
;
úú1 2
}
ùù 
else
ûû 
{
üü 
var
†† 
cloneResult
††  +
=
††, -
await
††. 3
view
††4 8
.
††8 9
SaveModelAsync
††9 G
(
††G H
false
††H M
,
††M N
context
††O V
,
††V W
transaction
††X c
)
††c d
.
††d e
ConfigureAwait
††e s
(
††s t
false
††t y
)
††y z
;
††z {
if
°° 
(
°°  
cloneResult
°°  +
.
°°+ ,
	IsSucceed
°°, 5
)
°°5 6
{
¢¢ 
var
££  #
cloneSubResult
££$ 2
=
££3 4
await
££5 :!
CloneSubModelsAsync
££; N
(
££N O
cloneResult
££O Z
.
££Z [
Data
££[ _
,
££_ `
cloneCultures
££a n
,
££n o
context
££p w
,
££w x
transaction££y Ñ
)££Ñ Ö
.££Ö Ü
ConfigureAwait££Ü î
(££î ï
false££ï ö
)££ö õ
;££õ ú
if
§§  "
(
§§# $
!
§§$ %
cloneSubResult
§§% 3
.
§§3 4
	IsSucceed
§§4 =
)
§§= >
{
••  !
cloneResult
¶¶$ /
.
¶¶/ 0
Errors
¶¶0 6
.
¶¶6 7
AddRange
¶¶7 ?
(
¶¶? @
cloneSubResult
¶¶@ N
.
¶¶N O
Errors
¶¶O U
)
¶¶U V
;
¶¶V W
cloneResult
ßß$ /
.
ßß/ 0
	Exception
ßß0 9
=
ßß: ;
cloneSubResult
ßß< J
.
ßßJ K
	Exception
ßßK T
;
ßßT U
}
®®  !
result
™™  &
.
™™& '
	IsSucceed
™™' 0
=
™™1 2
result
™™3 9
.
™™9 :
	IsSucceed
™™: C
&&
™™D F
cloneResult
™™G R
.
™™R S
	IsSucceed
™™S \
&&
™™] _
cloneSubResult
™™` n
.
™™n o
	IsSucceed
™™o x
;
™™x y
result
´´  &
.
´´& '
Data
´´' +
.
´´+ ,
Add
´´, /
(
´´/ 0
cloneResult
´´0 ;
.
´´; <
Data
´´< @
)
´´@ A
;
´´A B
}
¨¨ 
else
≠≠  
{
ÆÆ 
result
ØØ  &
.
ØØ& '
	IsSucceed
ØØ' 0
=
ØØ1 2
result
ØØ3 9
.
ØØ9 :
	IsSucceed
ØØ: C
&&
ØØD F
cloneResult
ØØG R
.
ØØR S
	IsSucceed
ØØS \
;
ØØ\ ]
result
∞∞  &
.
∞∞& '
Errors
∞∞' -
.
∞∞- .
AddRange
∞∞. 6
(
∞∞6 7
cloneResult
∞∞7 B
.
∞∞B C
Errors
∞∞C I
)
∞∞I J
;
∞∞J K
result
±±  &
.
±±& '
	Exception
±±' 0
=
±±1 2
cloneResult
±±3 >
.
±±> ?
	Exception
±±? H
;
±±H I
}
≤≤ 
}
≥≥ 
if
µµ 
(
µµ 
result
µµ "
.
µµ" #
	IsSucceed
µµ# ,
)
µµ, -
{
∂∂ 
if
∑∑ 
(
∑∑  
_transaction
∑∑  ,
==
∑∑- /
null
∑∑0 4
)
∑∑4 5
{
∏∏ 
transaction
ππ  +
.
ππ+ ,
Commit
ππ, 2
(
ππ2 3
)
ππ3 4
;
ππ4 5
}
∫∫ 
}
ªª 
else
ºº 
{
ΩΩ 
if
ææ 
(
ææ  
_transaction
ææ  ,
==
ææ- /
null
ææ0 4
)
ææ4 5
{
øø 
transaction
¿¿  +
.
¿¿+ ,
Rollback
¿¿, 4
(
¿¿4 5
)
¿¿5 6
;
¿¿6 7
}
¡¡ 
}
¬¬ 
}
√√ 
return
ƒƒ 
result
ƒƒ !
;
ƒƒ! "
}
≈≈ 
else
∆∆ 
{
«« 
return
»» 
result
»» !
;
»»! "
}
…… 
}
   
catch
ÀÀ 
(
ÀÀ 
	Exception
ÀÀ 
ex
ÀÀ 
)
ÀÀ  
{
ÃÃ 
result
ÕÕ 
.
ÕÕ 
	IsSucceed
ÕÕ  
=
ÕÕ! "
false
ÕÕ# (
;
ÕÕ( )
result
ŒŒ 
.
ŒŒ 
	Exception
ŒŒ  
=
ŒŒ! "
ex
ŒŒ# %
;
ŒŒ% &
return
œœ 
result
œœ 
;
œœ 
}
–– 
finally
—— 
{
““ 
if
”” 
(
”” 
_context
”” 
==
”” 
null
””  $
)
””$ %
{
‘‘ 
_context
’’ 
.
’’ 
Dispose
’’ $
(
’’$ %
)
’’% &
;
’’& '
}
÷÷ 
}
◊◊ 
}
ÿÿ 	
public
‰‰ 
virtual
‰‰ 
async
‰‰ 
Task
‰‰ !
<
‰‰! " 
RepositoryResponse
‰‰" 4
<
‰‰4 5
bool
‰‰5 9
>
‰‰9 :
>
‰‰: ;!
CloneSubModelsAsync
‰‰< O
(
‰‰O P
TView
‰‰P U
parent
‰‰V \
,
‰‰\ ]
List
‰‰^ b
<
‰‰b c
SupportedCulture
‰‰c s
>
‰‰s t
cloneCultures‰‰u Ç
,‰‰Ç É

TDbContext‰‰Ñ é
_context‰‰è ó
=‰‰ò ô
null‰‰ö û
,‰‰û ü%
IDbContextTransaction‰‰† µ
_transaction‰‰∂ ¬
=‰‰√ ƒ
null‰‰≈ …
)‰‰…  
{
ÊÊ 	
var
ÁÁ 

taskSource
ÁÁ 
=
ÁÁ 
new
ÁÁ  "
TaskCompletionSource
ÁÁ! 5
<
ÁÁ5 6 
RepositoryResponse
ÁÁ6 H
<
ÁÁH I
bool
ÁÁI M
>
ÁÁM N
>
ÁÁN O
(
ÁÁO P
)
ÁÁP Q
;
ÁÁQ R

taskSource
ËË 
.
ËË 
	SetResult
ËË  
(
ËË  !
new
ËË! $ 
RepositoryResponse
ËË% 7
<
ËË7 8
bool
ËË8 <
>
ËË< =
(
ËË= >
)
ËË> ?
{
ËË@ A
	IsSucceed
ËËB K
=
ËËL M
true
ËËN R
,
ËËR S
Data
ËËT X
=
ËËY Z
true
ËË[ _
}
ËË` a
)
ËËa b
;
ËËb c
return
ÈÈ 

taskSource
ÈÈ 
.
ÈÈ 
Task
ÈÈ "
.
ÈÈ" #
Result
ÈÈ# )
;
ÈÈ) *
}
ÍÍ 	
public
ÛÛ 
virtual
ÛÛ 
async
ÛÛ 
Task
ÛÛ !
<
ÛÛ! " 
RepositoryResponse
ÛÛ" 4
<
ÛÛ4 5
bool
ÛÛ5 9
>
ÛÛ9 :
>
ÛÛ: ;
RemoveModelAsync
ÛÛ< L
(
ÛÛL M
bool
ÛÛM Q#
isRemoveRelatedModels
ÛÛR g
=
ÛÛh i
false
ÛÛj o
,
ÛÛo p

TDbContext
ÛÛq {
_contextÛÛ| Ñ
=ÛÛÖ Ü
nullÛÛá ã
,ÛÛã å%
IDbContextTransactionÛÛç ¢
_transactionÛÛ£ Ø
=ÛÛ∞ ±
nullÛÛ≤ ∂
)ÛÛ∂ ∑
{
ÙÙ 	
var
ıı 
context
ıı 
=
ıı 
_context
ıı "
??
ıı# %
InitContext
ıı& 1
(
ıı1 2
)
ıı2 3
;
ıı3 4
var
ˆˆ 
transaction
ˆˆ 
=
ˆˆ 
_transaction
ˆˆ *
??
ˆˆ+ -
context
ˆˆ. 5
.
ˆˆ5 6
Database
ˆˆ6 >
.
ˆˆ> ?
BeginTransaction
ˆˆ? O
(
ˆˆO P
)
ˆˆP Q
;
ˆˆQ R 
RepositoryResponse
˜˜ 
<
˜˜ 
bool
˜˜ #
>
˜˜# $
result
˜˜% +
=
˜˜, -
new
˜˜. 1 
RepositoryResponse
˜˜2 D
<
˜˜D E
bool
˜˜E I
>
˜˜I J
(
˜˜J K
)
˜˜K L
{
˜˜M N
	IsSucceed
˜˜O X
=
˜˜Y Z
true
˜˜[ _
}
˜˜` a
;
˜˜a b
try
¯¯ 
{
˘˘ 

ParseModel
˙˙ 
(
˙˙ 
_context
˙˙ #
,
˙˙# $
_transaction
˙˙% 1
)
˙˙1 2
;
˙˙2 3
if
˚˚ 
(
˚˚ #
isRemoveRelatedModels
˚˚ )
)
˚˚) *
{
¸¸ 
var
˝˝ !
removeRelatedResult
˝˝ +
=
˝˝, -
await
˝˝. 3&
RemoveRelatedModelsAsync
˝˝4 L
(
˝˝L M
(
˝˝M N
TView
˝˝N S
)
˝˝S T
this
˝˝T X
,
˝˝X Y
context
˝˝Z a
,
˝˝a b
transaction
˝˝c n
)
˝˝n o
.
˝˝o p
ConfigureAwait
˝˝p ~
(
˝˝~ 
false˝˝ Ñ
)˝˝Ñ Ö
;˝˝Ö Ü
if
˛˛ 
(
˛˛ !
removeRelatedResult
˛˛ +
.
˛˛+ ,
	IsSucceed
˛˛, 5
)
˛˛5 6
{
ˇˇ 
result
ÄÄ 
=
ÄÄ  
await
ÄÄ! &

Repository
ÄÄ' 1
.
ÄÄ1 2
RemoveModelAsync
ÄÄ2 B
(
ÄÄB C
Model
ÄÄC H
,
ÄÄH I
context
ÄÄJ Q
,
ÄÄQ R
transaction
ÄÄS ^
)
ÄÄ^ _
.
ÄÄ_ `
ConfigureAwait
ÄÄ` n
(
ÄÄn o
false
ÄÄo t
)
ÄÄt u
;
ÄÄu v
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
result
ÑÑ 
.
ÑÑ 
	IsSucceed
ÑÑ (
=
ÑÑ) *
result
ÑÑ+ 1
.
ÑÑ1 2
	IsSucceed
ÑÑ2 ;
&&
ÑÑ< >!
removeRelatedResult
ÑÑ? R
.
ÑÑR S
	IsSucceed
ÑÑS \
;
ÑÑ\ ]
result
ÖÖ 
.
ÖÖ 
Errors
ÖÖ %
.
ÖÖ% &
AddRange
ÖÖ& .
(
ÖÖ. /!
removeRelatedResult
ÖÖ/ B
.
ÖÖB C
Errors
ÖÖC I
)
ÖÖI J
;
ÖÖJ K
result
ÜÜ 
.
ÜÜ 
	Exception
ÜÜ (
=
ÜÜ) *!
removeRelatedResult
ÜÜ+ >
.
ÜÜ> ?
	Exception
ÜÜ? H
;
ÜÜH I
}
áá 
}
àà 
else
ââ 
{
ää 
result
ãã 
=
ãã 
await
ãã "

Repository
ãã# -
.
ãã- .
RemoveModelAsync
ãã. >
(
ãã> ?
Model
ãã? D
,
ããD E
context
ããF M
,
ããM N
transaction
ããO Z
)
ããZ [
.
ãã[ \
ConfigureAwait
ãã\ j
(
ããj k
false
ããk p
)
ããp q
;
ããq r
}
åå 
if
çç 
(
çç 
result
çç 
.
çç 
	IsSucceed
çç $
)
çç$ %
{
éé 
if
èè 
(
èè 
_transaction
èè $
==
èè% '
null
èè( ,
)
èè, -
{
êê 
transaction
ëë #
.
ëë# $
Commit
ëë$ *
(
ëë* +
)
ëë+ ,
;
ëë, -
}
íí 
return
îî 
result
îî !
;
îî! "
}
ïï 
else
ññ 
{
óó 
if
òò 
(
òò 
_transaction
òò $
==
òò% '
null
òò( ,
)
òò, -
{
ôô 
transaction
öö #
.
öö# $
Rollback
öö$ ,
(
öö, -
)
öö- .
;
öö. /
}
õõ 
result
úú 
.
úú 
	IsSucceed
úú $
=
úú% &
false
úú' ,
;
úú, -
return
ùù 
result
ùù !
;
ùù! "
}
ûû 
}
üü 
catch
†† 
(
†† 
	Exception
†† 
ex
†† 
)
††  
{
°° 
if
¢¢ 
(
¢¢ 
_transaction
¢¢  
==
¢¢! #
null
¢¢$ (
)
¢¢( )
{
££ 
transaction
•• 
.
••  
Rollback
••  (
(
••( )
)
••) *
;
••* +
}
¶¶ 
result
ßß 
.
ßß 
	IsSucceed
ßß  
=
ßß! "
false
ßß# (
;
ßß( )
result
®® 
.
®® 
	Exception
®®  
=
®®! "
ex
®®# %
;
®®% &
return
©© 
result
©© 
;
©© 
}
™™ 
finally
´´ 
{
¨¨ 
if
≠≠ 
(
≠≠ 
_context
≠≠ 
==
≠≠ 
null
≠≠  $
)
≠≠$ %
{
ÆÆ 
context
∞∞ 
.
∞∞ 
Dispose
∞∞ #
(
∞∞# $
)
∞∞$ %
;
∞∞% &
}
±± 
}
≤≤ 
}
≥≥ 	
public
ææ 
virtual
ææ 
async
ææ 
Task
ææ !
<
ææ! " 
RepositoryResponse
ææ" 4
<
ææ4 5
bool
ææ5 9
>
ææ9 :
>
ææ: ;&
RemoveRelatedModelsAsync
ææ< T
(
ææT U
TView
ææU Z
view
ææ[ _
,
ææ_ `

TDbContext
ææa k
_context
ææl t
=
ææu v
null
ææw {
,
ææ{ |$
IDbContextTransactionææ} í
_transactionææì ü
=ææ† °
nullææ¢ ¶
)ææ¶ ß
{
¿¿ 	
var
¡¡ 

taskSource
¡¡ 
=
¡¡ 
new
¡¡  "
TaskCompletionSource
¡¡! 5
<
¡¡5 6 
RepositoryResponse
¡¡6 H
<
¡¡H I
bool
¡¡I M
>
¡¡M N
>
¡¡N O
(
¡¡O P
)
¡¡P Q
;
¡¡Q R

taskSource
¬¬ 
.
¬¬ 
	SetResult
¬¬  
(
¬¬  !
new
¬¬! $ 
RepositoryResponse
¬¬% 7
<
¬¬7 8
bool
¬¬8 <
>
¬¬< =
(
¬¬= >
)
¬¬> ?
{
¬¬@ A
	IsSucceed
¬¬B K
=
¬¬L M
true
¬¬N R
}
¬¬S T
)
¬¬T U
;
¬¬U V
return
√√ 

taskSource
√√ 
.
√√ 
Task
√√ "
.
√√" #
Result
√√# )
;
√√) *
}
ƒƒ 	
public
ÕÕ 
virtual
ÕÕ 
async
ÕÕ 
Task
ÕÕ !
<
ÕÕ! " 
RepositoryResponse
ÕÕ" 4
<
ÕÕ4 5
TView
ÕÕ5 :
>
ÕÕ: ;
>
ÕÕ; <
SaveModelAsync
ÕÕ= K
(
ÕÕK L
bool
ÕÕL P
isSaveSubModels
ÕÕQ `
=
ÕÕa b
false
ÕÕc h
,
ÕÕh i

TDbContext
ÕÕj t
_context
ÕÕu }
=
ÕÕ~ 
nullÕÕÄ Ñ
,ÕÕÑ Ö%
IDbContextTransactionÕÕÜ õ
_transactionÕÕú ®
=ÕÕ© ™
nullÕÕ´ Ø
)ÕÕØ ∞
{
ŒŒ 	
bool
œœ 
IsRoot
œœ 
=
œœ 
_context
œœ "
==
œœ# %
null
œœ& *
;
œœ* +
var
–– 
context
–– 
=
–– 
_context
–– "
??
––# %
InitContext
––& 1
(
––1 2
)
––2 3
;
––3 4
var
—— 
transaction
—— 
=
—— 
_transaction
—— *
??
——+ -
context
——. 5
.
——5 6
Database
——6 >
.
——> ?
BeginTransaction
——? O
(
——O P
)
——P Q
;
——Q R 
RepositoryResponse
““ 
<
““ 
TView
““ $
>
““$ %
result
““& ,
=
““- .
new
““/ 2 
RepositoryResponse
““3 E
<
““E F
TView
““F K
>
““K L
(
““L M
)
““M N
{
““O P
	IsSucceed
““Q Z
=
““[ \
true
““] a
}
““b c
;
““c d
Validate
”” 
(
”” 
)
”” 
;
”” 
if
‘‘ 
(
‘‘ 
IsValid
‘‘ 
)
‘‘ 
{
’’ 
try
÷÷ 
{
◊◊ 

ParseModel
ÿÿ 
(
ÿÿ 
_context
ÿÿ '
,
ÿÿ' (
_transaction
ÿÿ) 5
)
ÿÿ5 6
;
ÿÿ6 7
result
ŸŸ 
=
ŸŸ 
await
ŸŸ "

Repository
ŸŸ# -
.
ŸŸ- .
SaveModelAsync
ŸŸ. <
(
ŸŸ< =
(
ŸŸ= >
TView
ŸŸ> C
)
ŸŸC D
this
ŸŸD H
,
ŸŸH I
_context
ŸŸJ R
:
ŸŸR S
context
ŸŸT [
,
ŸŸ[ \
_transaction
ŸŸ] i
:
ŸŸi j
transaction
ŸŸk v
)
ŸŸv w
.
ŸŸw x
ConfigureAwaitŸŸx Ü
(ŸŸÜ á
falseŸŸá å
)ŸŸå ç
;ŸŸç é
if
‹‹ 
(
‹‹ 
result
‹‹ 
.
‹‹ 
	IsSucceed
‹‹ (
&&
‹‹) +
isSaveSubModels
‹‹, ;
)
‹‹; <
{
›› 
var
ﬁﬁ 

saveResult
ﬁﬁ &
=
ﬁﬁ' (
await
ﬁﬁ) . 
SaveSubModelsAsync
ﬁﬁ/ A
(
ﬁﬁA B
Model
ﬁﬁB G
,
ﬁﬁG H
context
ﬁﬁI P
,
ﬁﬁP Q
transaction
ﬁﬁR ]
)
ﬁﬁ] ^
.
ﬁﬁ^ _
ConfigureAwait
ﬁﬁ_ m
(
ﬁﬁm n
false
ﬁﬁn s
)
ﬁﬁs t
;
ﬁﬁt u
if
ﬂﬂ 
(
ﬂﬂ 
!
ﬂﬂ 

saveResult
ﬂﬂ '
.
ﬂﬂ' (
	IsSucceed
ﬂﬂ( 1
)
ﬂﬂ1 2
{
‡‡ 
result
·· "
.
··" #
Errors
··# )
.
··) *
AddRange
··* 2
(
··2 3

saveResult
··3 =
.
··= >
Errors
··> D
)
··D E
;
··E F
result
‚‚ "
.
‚‚" #
	Exception
‚‚# ,
=
‚‚- .

saveResult
‚‚/ 9
.
‚‚9 :
	Exception
‚‚: C
;
‚‚C D
}
„„ 
result
‰‰ 
.
‰‰ 
	IsSucceed
‰‰ (
=
‰‰) *
result
‰‰+ 1
.
‰‰1 2
	IsSucceed
‰‰2 ;
&&
‰‰< >

saveResult
‰‰? I
.
‰‰I J
	IsSucceed
‰‰J S
;
‰‰S T
}
ÂÂ 
if
ËË 
(
ËË 
result
ËË 
.
ËË 
	IsSucceed
ËË (
&&
ËË) +
IsClone
ËË, 3
&&
ËË4 6
IsRoot
ËË7 =
)
ËË= >
{
ÈÈ 
var
ÍÍ 
cloneCultures
ÍÍ )
=
ÍÍ* +"
ListSupportedCulture
ÍÍ, @
.
ÍÍ@ A
Where
ÍÍA F
(
ÍÍF G
c
ÍÍG H
=>
ÍÍI K
c
ÍÍL M
.
ÍÍM N
Specificulture
ÍÍN \
!=
ÍÍ] _
Specificulture
ÍÍ` n
&&
ÍÍo q
c
ÍÍr s
.
ÍÍs t
IsSupported
ÍÍt 
)ÍÍ Ä
.ÍÍÄ Å
ToListÍÍÅ á
(ÍÍá à
)ÍÍà â
;ÍÍâ ä
var
ÎÎ 
cloneResult
ÎÎ '
=
ÎÎ( )
await
ÎÎ* /

CloneAsync
ÎÎ0 :
(
ÎÎ: ;
Model
ÎÎ; @
,
ÎÎ@ A
cloneCultures
ÎÎB O
,
ÎÎO P
_context
ÎÎQ Y
:
ÎÎY Z
context
ÎÎ[ b
,
ÎÎb c
_transaction
ÎÎd p
:
ÎÎp q
transaction
ÎÎr }
)
ÎÎ} ~
.
ÎÎ~ 
ConfigureAwaitÎÎ ç
(ÎÎç é
falseÎÎé ì
)ÎÎì î
;ÎÎî ï
if
ÏÏ 
(
ÏÏ 
!
ÏÏ 
cloneResult
ÏÏ (
.
ÏÏ( )
	IsSucceed
ÏÏ) 2
)
ÏÏ2 3
{
ÌÌ 
result
ÓÓ "
.
ÓÓ" #
Errors
ÓÓ# )
.
ÓÓ) *
AddRange
ÓÓ* 2
(
ÓÓ2 3
cloneResult
ÓÓ3 >
.
ÓÓ> ?
Errors
ÓÓ? E
)
ÓÓE F
;
ÓÓF G
result
ÔÔ "
.
ÔÔ" #
	Exception
ÔÔ# ,
=
ÔÔ- .
cloneResult
ÔÔ/ :
.
ÔÔ: ;
	Exception
ÔÔ; D
;
ÔÔD E
}
 
result
ÒÒ 
.
ÒÒ 
	IsSucceed
ÒÒ (
=
ÒÒ) *
result
ÒÒ+ 1
.
ÒÒ1 2
	IsSucceed
ÒÒ2 ;
&&
ÒÒ< >
cloneResult
ÒÒ? J
.
ÒÒJ K
	IsSucceed
ÒÒK T
;
ÒÒT U
}
ÚÚ 
if
ıı 
(
ıı 
result
ıı 
.
ıı 
	IsSucceed
ıı (
)
ıı( )
{
ˆˆ 
if
˜˜ 
(
˜˜ 
IsRoot
˜˜ "
)
˜˜" #
{
¯¯ 
transaction
˙˙ '
.
˙˙' (
Commit
˙˙( .
(
˙˙. /
)
˙˙/ 0
;
˙˙0 1
}
˚˚ 
result
¸¸ 
.
¸¸ 
Data
¸¸ #
=
¸¸$ %
this
¸¸& *
as
¸¸+ -
TView
¸¸. 3
;
¸¸3 4
return
˝˝ 
result
˝˝ %
;
˝˝% &
}
˛˛ 
else
ˇˇ 
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
IsRoot
ÅÅ "
)
ÅÅ" #
{
ÇÇ 
transaction
ÑÑ '
.
ÑÑ' (
Rollback
ÑÑ( 0
(
ÑÑ0 1
)
ÑÑ1 2
;
ÑÑ2 3
}
ÖÖ 
return
ÜÜ 
result
ÜÜ %
;
ÜÜ% &
}
áá 
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ  
ex
ââ! #
)
ââ# $
{
ää 

Repository
ãã 
.
ãã 
LogErrorMessage
ãã .
(
ãã. /
ex
ãã/ 1
)
ãã1 2
;
ãã2 3
if
åå 
(
åå 
IsRoot
åå 
)
åå 
{
çç 
transaction
èè #
.
èè# $
Rollback
èè$ ,
(
èè, -
)
èè- .
;
èè. /
}
êê 
result
ëë 
.
ëë 
	IsSucceed
ëë $
=
ëë% &
false
ëë' ,
;
ëë, -
result
íí 
.
íí 
	Exception
íí $
=
íí% &
ex
íí' )
;
íí) *
return
ìì 
result
ìì !
;
ìì! "
}
îî 
finally
ïï 
{
ññ 
if
óó 
(
óó 
IsRoot
óó 
)
óó 
{
òò 
context
öö 
.
öö  
Dispose
öö  '
(
öö' (
)
öö( )
;
öö) *
}
õõ 
}
úú 
}
ùù 
else
ûû 
{
üü 
return
†† 
new
††  
RepositoryResponse
†† -
<
††- .
TView
††. 3
>
††3 4
(
††4 5
)
††5 6
{
°° 
	IsSucceed
¢¢ 
=
¢¢ 
false
¢¢  %
,
¢¢% &
Data
££ 
=
££ 
null
££ 
,
££  
Errors
§§ 
=
§§ 
Errors
§§ #
}
•• 
;
•• 
}
¶¶ 
}
ßß 	
public
≥≥ 
virtual
≥≥ 
async
≥≥ 
Task
≥≥ !
<
≥≥! " 
RepositoryResponse
≥≥" 4
<
≥≥4 5
bool
≥≥5 9
>
≥≥9 :
>
≥≥: ; 
SaveSubModelsAsync
≥≥< N
(
≥≥N O
TModel
≥≥O U
parent
≥≥V \
,
≥≥\ ]

TDbContext
≥≥^ h
_context
≥≥i q
=
≥≥r s
null
≥≥t x
,
≥≥x y$
IDbContextTransaction≥≥z è
_transaction≥≥ê ú
=≥≥ù û
null≥≥ü £
)≥≥£ §
{
µµ 	
var
∂∂ 

taskSource
∂∂ 
=
∂∂ 
new
∂∂  "
TaskCompletionSource
∂∂! 5
<
∂∂5 6 
RepositoryResponse
∂∂6 H
<
∂∂H I
bool
∂∂I M
>
∂∂M N
>
∂∂N O
(
∂∂O P
)
∂∂P Q
;
∂∂Q R

taskSource
∑∑ 
.
∑∑ 
	SetResult
∑∑  
(
∑∑  !
new
∑∑! $ 
RepositoryResponse
∑∑% 7
<
∑∑7 8
bool
∑∑8 <
>
∑∑< =
(
∑∑= >
)
∑∑> ?
{
∑∑@ A
	IsSucceed
∑∑B K
=
∑∑L M
true
∑∑N R
}
∑∑S T
)
∑∑T U
;
∑∑U V
return
∏∏ 

taskSource
∏∏ 
.
∏∏ 
Task
∏∏ "
.
∏∏" #
Result
∏∏# )
;
∏∏) *
}
ππ 	
public
…… 
virtual
……  
RepositoryResponse
…… )
<
……) *
List
……* .
<
……. /
TView
……/ 4
>
……4 5
>
……5 6
Clone
……7 <
(
……< =
TModel
……= C
model
……D I
,
……I J
List
……K O
<
……O P
SupportedCulture
……P `
>
……` a
cloneCultures
……b o
,
……o p

TDbContext
……q {
_context……| Ñ
=……Ö Ü
null……á ã
,……ã å%
IDbContextTransaction……ç ¢
_transaction……£ Ø
=……∞ ±
null……≤ ∂
)……∂ ∑
{
   	
bool
ÀÀ 
IsRoot
ÀÀ 
=
ÀÀ 
_context
ÀÀ "
==
ÀÀ# %
null
ÀÀ& *
;
ÀÀ* +
var
ÃÃ 
context
ÃÃ 
=
ÃÃ 
_context
ÃÃ "
??
ÃÃ# %
InitContext
ÃÃ& 1
(
ÃÃ1 2
)
ÃÃ2 3
;
ÃÃ3 4
var
ÕÕ 
transaction
ÕÕ 
=
ÕÕ 
_transaction
ÕÕ *
??
ÕÕ+ -
context
ÕÕ. 5
.
ÕÕ5 6
Database
ÕÕ6 >
.
ÕÕ> ?
BeginTransaction
ÕÕ? O
(
ÕÕO P
)
ÕÕP Q
;
ÕÕQ R 
RepositoryResponse
œœ 
<
œœ 
List
œœ #
<
œœ# $
TView
œœ$ )
>
œœ) *
>
œœ* +
result
œœ, 2
=
œœ3 4
new
œœ5 8 
RepositoryResponse
œœ9 K
<
œœK L
List
œœL P
<
œœP Q
TView
œœQ V
>
œœV W
>
œœW X
(
œœX Y
)
œœY Z
{
–– 
	IsSucceed
—— 
=
—— 
true
——  
,
——  !
Data
““ 
=
““ 
new
““ 
List
““ 
<
““  
TView
““  %
>
““% &
(
““& '
)
““' (
}
”” 
;
”” 
try
’’ 
{
÷÷ 
if
◊◊ 
(
◊◊ 
cloneCultures
◊◊ !
!=
◊◊" $
null
◊◊% )
)
◊◊) *
{
ÿÿ 
foreach
ŸŸ 
(
ŸŸ 
var
ŸŸ  
culture
ŸŸ! (
in
ŸŸ) +
cloneCultures
ŸŸ, 9
)
ŸŸ9 :
{
⁄⁄ 
string
€€ 
desSpecificulture
€€ 0
=
€€1 2
culture
€€3 :
.
€€: ;
Specificulture
€€; I
;
€€I J
TView
›› 
view
›› "
=
››# $
InitView
››% -
(
››- .
)
››. /
;
››/ 0
view
ﬁﬁ 
.
ﬁﬁ 
Model
ﬁﬁ "
=
ﬁﬁ# $
model
ﬁﬁ% *
;
ﬁﬁ* +
view
ﬂﬂ 
.
ﬂﬂ 
	ParseView
ﬂﬂ &
(
ﬂﬂ& '
isExpand
ﬂﬂ' /
:
ﬂﬂ/ 0
false
ﬂﬂ1 6
,
ﬂﬂ6 7
_context
ﬂﬂ8 @
:
ﬂﬂ@ A
context
ﬂﬂB I
,
ﬂﬂI J
_transaction
ﬂﬂK W
:
ﬂﬂW X
transaction
ﬂﬂY d
)
ﬂﬂd e
;
ﬂﬂe f
view
‡‡ 
.
‡‡ 
Specificulture
‡‡ +
=
‡‡, -
desSpecificulture
‡‡. ?
;
‡‡? @
bool
‚‚ 
isExist
‚‚ $
=
‚‚% &

Repository
‚‚' 1
.
‚‚1 2
CheckIsExists
‚‚2 ?
(
‚‚? @
view
‚‚@ D
.
‚‚D E

ParseModel
‚‚E O
(
‚‚O P
_context
‚‚P X
,
‚‚X Y
_transaction
‚‚Z f
)
‚‚f g
,
‚‚g h
_context
‚‚i q
:
‚‚q r
context
‚‚s z
,
‚‚z {
_transaction‚‚| à
:‚‚à â
transaction‚‚ä ï
)‚‚ï ñ
;‚‚ñ ó
if
‰‰ 
(
‰‰ 
isExist
‰‰ #
)
‰‰# $
{
ÂÂ 
result
ÊÊ "
.
ÊÊ" #
	IsSucceed
ÊÊ# ,
=
ÊÊ- .
true
ÊÊ/ 3
;
ÊÊ3 4
result
ÁÁ "
.
ÁÁ" #
Data
ÁÁ# '
.
ÁÁ' (
Add
ÁÁ( +
(
ÁÁ+ ,
view
ÁÁ, 0
)
ÁÁ0 1
;
ÁÁ1 2
}
ËË 
else
ÈÈ 
{
ÍÍ 
var
ÎÎ 
cloneResult
ÎÎ  +
=
ÎÎ, -
view
ÎÎ. 2
.
ÎÎ2 3
	SaveModel
ÎÎ3 <
(
ÎÎ< =
false
ÎÎ= B
,
ÎÎB C
context
ÎÎD K
,
ÎÎK L
transaction
ÎÎM X
)
ÎÎX Y
;
ÎÎY Z
if
ÏÏ 
(
ÏÏ  
cloneResult
ÏÏ  +
.
ÏÏ+ ,
	IsSucceed
ÏÏ, 5
)
ÏÏ5 6
{
ÌÌ 
var
ÓÓ  #
cloneSubResult
ÓÓ$ 2
=
ÓÓ3 4
CloneSubModels
ÓÓ5 C
(
ÓÓC D
cloneResult
ÓÓD O
.
ÓÓO P
Data
ÓÓP T
,
ÓÓT U
cloneCultures
ÓÓV c
,
ÓÓc d
context
ÓÓe l
,
ÓÓl m
transaction
ÓÓn y
)
ÓÓy z
;
ÓÓz {
if
ÔÔ  "
(
ÔÔ# $
!
ÔÔ$ %
cloneSubResult
ÔÔ% 3
.
ÔÔ3 4
	IsSucceed
ÔÔ4 =
)
ÔÔ= >
{
  !
cloneResult
ÒÒ$ /
.
ÒÒ/ 0
Errors
ÒÒ0 6
.
ÒÒ6 7
AddRange
ÒÒ7 ?
(
ÒÒ? @
cloneSubResult
ÒÒ@ N
.
ÒÒN O
Errors
ÒÒO U
)
ÒÒU V
;
ÒÒV W
cloneResult
ÚÚ$ /
.
ÚÚ/ 0
	Exception
ÚÚ0 9
=
ÚÚ: ;
cloneSubResult
ÚÚ< J
.
ÚÚJ K
	Exception
ÚÚK T
;
ÚÚT U
}
ÛÛ  !
result
ıı  &
.
ıı& '
	IsSucceed
ıı' 0
=
ıı1 2
result
ıı3 9
.
ıı9 :
	IsSucceed
ıı: C
&&
ııD F
cloneResult
ııG R
.
ııR S
	IsSucceed
ııS \
&&
ıı] _
cloneSubResult
ıı` n
.
ıın o
	IsSucceed
ııo x
;
ııx y
result
ˆˆ  &
.
ˆˆ& '
Data
ˆˆ' +
.
ˆˆ+ ,
Add
ˆˆ, /
(
ˆˆ/ 0
cloneResult
ˆˆ0 ;
.
ˆˆ; <
Data
ˆˆ< @
)
ˆˆ@ A
;
ˆˆA B
}
˜˜ 
else
¯¯  
{
˘˘ 
result
˙˙  &
.
˙˙& '
	IsSucceed
˙˙' 0
=
˙˙1 2
result
˙˙3 9
.
˙˙9 :
	IsSucceed
˙˙: C
&&
˙˙D F
cloneResult
˙˙G R
.
˙˙R S
	IsSucceed
˙˙S \
;
˙˙\ ]
result
˚˚  &
.
˚˚& '
Errors
˚˚' -
.
˚˚- .
AddRange
˚˚. 6
(
˚˚6 7
cloneResult
˚˚7 B
.
˚˚B C
Errors
˚˚C I
)
˚˚I J
;
˚˚J K
result
¸¸  &
.
¸¸& '
	Exception
¸¸' 0
=
¸¸1 2
cloneResult
¸¸3 >
.
¸¸> ?
	Exception
¸¸? H
;
¸¸H I
}
˝˝ 
}
˛˛ 
if
ÄÄ 
(
ÄÄ 
result
ÄÄ "
.
ÄÄ" #
	IsSucceed
ÄÄ# ,
)
ÄÄ, -
{
ÅÅ 
if
ÇÇ 
(
ÇÇ  
_transaction
ÇÇ  ,
==
ÇÇ- /
null
ÇÇ0 4
)
ÇÇ4 5
{
ÉÉ 
transaction
ÑÑ  +
.
ÑÑ+ ,
Commit
ÑÑ, 2
(
ÑÑ2 3
)
ÑÑ3 4
;
ÑÑ4 5
}
ÖÖ 
}
ÜÜ 
else
áá 
{
àà 
if
ââ 
(
ââ  
_transaction
ââ  ,
==
ââ- /
null
ââ0 4
)
ââ4 5
{
ää 
transaction
ãã  +
.
ãã+ ,
Rollback
ãã, 4
(
ãã4 5
)
ãã5 6
;
ãã6 7
}
åå 
}
çç 
}
éé 
return
èè 
result
èè !
;
èè! "
}
êê 
else
ëë 
{
íí 
return
ìì 
result
ìì !
;
ìì! "
}
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
result
òò 
.
òò 
	IsSucceed
òò  
=
òò! "
false
òò# (
;
òò( )
result
ôô 
.
ôô 
	Exception
ôô  
=
ôô! "
ex
ôô# %
;
ôô% &
return
öö 
result
öö 
;
öö 
}
õõ 
finally
úú 
{
ùù 
if
ûû 
(
ûû 
_context
ûû 
==
ûû 
null
ûû  $
)
ûû$ %
{
üü 
_context
†† 
.
†† 
Dispose
†† $
(
††$ %
)
††% &
;
††& '
}
°° 
}
¢¢ 
}
££ 	
public
≠≠ 
virtual
≠≠  
RepositoryResponse
≠≠ )
<
≠≠) *
bool
≠≠* .
>
≠≠. /
CloneSubModels
≠≠0 >
(
≠≠> ?
TView
≠≠? D
parent
≠≠E K
,
≠≠K L
List
≠≠M Q
<
≠≠Q R
SupportedCulture
≠≠R b
>
≠≠b c
cloneCultures
≠≠d q
,
≠≠q r

TDbContext
≠≠s }
_context≠≠~ Ü
=≠≠á à
null≠≠â ç
,≠≠ç é%
IDbContextTransaction≠≠è §
_transaction≠≠• ±
=≠≠≤ ≥
null≠≠¥ ∏
)≠≠∏ π
{
ÆÆ 	
return
ØØ 
new
ØØ  
RepositoryResponse
ØØ )
<
ØØ) *
bool
ØØ* .
>
ØØ. /
(
ØØ/ 0
)
ØØ0 1
{
ØØ2 3
	IsSucceed
ØØ4 =
=
ØØ> ?
true
ØØ@ D
}
ØØE F
;
ØØF G
}
∞∞ 	
public
ππ 
virtual
ππ  
RepositoryResponse
ππ )
<
ππ) *
bool
ππ* .
>
ππ. /
RemoveModel
ππ0 ;
(
ππ; <
bool
ππ< @#
isRemoveRelatedModels
ππA V
=
ππW X
false
ππY ^
,
ππ^ _

TDbContext
ππ` j
_context
ππk s
=
ππt u
null
ππv z
,
ππz {$
IDbContextTransactionππ| ë
_transactionππí û
=ππü †
nullππ° •
)ππ• ¶
{
∫∫ 	
var
ªª 
context
ªª 
=
ªª 
_context
ªª "
??
ªª# %
InitContext
ªª& 1
(
ªª1 2
)
ªª2 3
;
ªª3 4
var
ºº 
transaction
ºº 
=
ºº 
_transaction
ºº *
??
ºº+ -
context
ºº. 5
.
ºº5 6
Database
ºº6 >
.
ºº> ?
BeginTransaction
ºº? O
(
ººO P
)
ººP Q
;
ººQ R 
RepositoryResponse
ΩΩ 
<
ΩΩ 
bool
ΩΩ #
>
ΩΩ# $
result
ΩΩ% +
=
ΩΩ, -
new
ΩΩ. 1 
RepositoryResponse
ΩΩ2 D
<
ΩΩD E
bool
ΩΩE I
>
ΩΩI J
(
ΩΩJ K
)
ΩΩK L
{
ΩΩM N
	IsSucceed
ΩΩO X
=
ΩΩY Z
true
ΩΩ[ _
}
ΩΩ` a
;
ΩΩa b
try
ææ 
{
øø 

ParseModel
¿¿ 
(
¿¿ 
_context
¿¿ #
,
¿¿# $
_transaction
¿¿% 1
)
¿¿1 2
;
¿¿2 3
if
¡¡ 
(
¡¡ #
isRemoveRelatedModels
¡¡ )
)
¡¡) *
{
¬¬ 
var
√√ !
removeRelatedResult
√√ +
=
√√, -!
RemoveRelatedModels
√√. A
(
√√A B
(
√√B C
TView
√√C H
)
√√H I
this
√√I M
,
√√M N
context
√√O V
,
√√V W
transaction
√√X c
)
√√c d
;
√√d e
if
ƒƒ 
(
ƒƒ !
removeRelatedResult
ƒƒ +
.
ƒƒ+ ,
	IsSucceed
ƒƒ, 5
)
ƒƒ5 6
{
≈≈ 
result
∆∆ 
=
∆∆  

Repository
∆∆! +
.
∆∆+ ,
RemoveModel
∆∆, 7
(
∆∆7 8
Model
∆∆8 =
,
∆∆= >
context
∆∆? F
,
∆∆F G
transaction
∆∆H S
)
∆∆S T
;
∆∆T U
}
«« 
else
»» 
{
…… 
result
   
.
   
	IsSucceed
   (
=
  ) *
result
  + 1
.
  1 2
	IsSucceed
  2 ;
&&
  < >!
removeRelatedResult
  ? R
.
  R S
	IsSucceed
  S \
;
  \ ]
result
ÀÀ 
.
ÀÀ 
Errors
ÀÀ %
.
ÀÀ% &
AddRange
ÀÀ& .
(
ÀÀ. /!
removeRelatedResult
ÀÀ/ B
.
ÀÀB C
Errors
ÀÀC I
)
ÀÀI J
;
ÀÀJ K
result
ÃÃ 
.
ÃÃ 
	Exception
ÃÃ (
=
ÃÃ) *!
removeRelatedResult
ÃÃ+ >
.
ÃÃ> ?
	Exception
ÃÃ? H
;
ÃÃH I
}
ÕÕ 
}
ŒŒ 
else
œœ 
{
–– 
result
—— 
=
—— 

Repository
—— '
.
——' (
RemoveModel
——( 3
(
——3 4
Model
——4 9
,
——9 :
context
——; B
,
——B C
transaction
——D O
)
——O P
;
——P Q
}
““ 
if
‘‘ 
(
‘‘ 
result
‘‘ 
.
‘‘ 
	IsSucceed
‘‘ $
)
‘‘$ %
{
’’ 
if
÷÷ 
(
÷÷ 
_transaction
÷÷ $
==
÷÷% '
null
÷÷( ,
)
÷÷, -
{
◊◊ 
transaction
ÿÿ #
.
ÿÿ# $
Commit
ÿÿ$ *
(
ÿÿ* +
)
ÿÿ+ ,
;
ÿÿ, -
}
ŸŸ 
return
€€ 
result
€€ !
;
€€! "
}
‹‹ 
else
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
_transaction
ﬂﬂ $
==
ﬂﬂ% '
null
ﬂﬂ( ,
)
ﬂﬂ, -
{
‡‡ 
transaction
·· #
.
··# $
Rollback
··$ ,
(
··, -
)
··- .
;
··. /
}
‚‚ 
result
„„ 
.
„„ 
	IsSucceed
„„ $
=
„„% &
false
„„' ,
;
„„, -
return
‰‰ 
result
‰‰ !
;
‰‰! "
}
ÂÂ 
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ 
	Exception
ÁÁ 
ex
ÁÁ 
)
ÁÁ  
{
ËË 
if
ÈÈ 
(
ÈÈ 
_transaction
ÈÈ  
==
ÈÈ! #
null
ÈÈ$ (
)
ÈÈ( )
{
ÍÍ 
transaction
ÏÏ 
.
ÏÏ  
Rollback
ÏÏ  (
(
ÏÏ( )
)
ÏÏ) *
;
ÏÏ* +
}
ÌÌ 
result
ÓÓ 
.
ÓÓ 
	IsSucceed
ÓÓ  
=
ÓÓ! "
false
ÓÓ# (
;
ÓÓ( )
result
ÔÔ 
.
ÔÔ 
	Exception
ÔÔ  
=
ÔÔ! "
ex
ÔÔ# %
;
ÔÔ% &
return
 
result
 
;
 
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
_context
ÙÙ 
==
ÙÙ 
null
ÙÙ  $
)
ÙÙ$ %
{
ıı 
context
˜˜ 
.
˜˜ 
Dispose
˜˜ #
(
˜˜# $
)
˜˜$ %
;
˜˜% &
}
¯¯ 
}
˘˘ 
}
˙˙ 	
public
ÉÉ 
virtual
ÉÉ  
RepositoryResponse
ÉÉ )
<
ÉÉ) *
bool
ÉÉ* .
>
ÉÉ. /!
RemoveRelatedModels
ÉÉ0 C
(
ÉÉC D
TView
ÉÉD I
view
ÉÉJ N
,
ÉÉN O

TDbContext
ÉÉP Z
_context
ÉÉ[ c
=
ÉÉd e
null
ÉÉf j
,
ÉÉj k$
IDbContextTransactionÉÉl Å
_transactionÉÉÇ é
=ÉÉè ê
nullÉÉë ï
)ÉÉï ñ
{
ÑÑ 	
return
ÖÖ 
new
ÖÖ  
RepositoryResponse
ÖÖ )
<
ÖÖ) *
bool
ÖÖ* .
>
ÖÖ. /
(
ÖÖ/ 0
)
ÖÖ0 1
{
ÖÖ2 3
	IsSucceed
ÖÖ4 =
=
ÖÖ> ?
true
ÖÖ@ D
}
ÖÖE F
;
ÖÖF G
}
ÜÜ 	
public
èè 
virtual
èè  
RepositoryResponse
èè )
<
èè) *
TView
èè* /
>
èè/ 0
	SaveModel
èè1 :
(
èè: ;
bool
èè; ?
isSaveSubModels
èè@ O
=
èèP Q
false
èèR W
,
èèW X

TDbContext
èèY c
_context
èèd l
=
èèm n
null
èèo s
,
èès t$
IDbContextTransactionèèu ä
_transactionèèã ó
=èèò ô
nullèèö û
)èèû ü
{
êê 	
bool
ëë 
IsRoot
ëë 
=
ëë 
_context
ëë "
==
ëë# %
null
ëë& *
;
ëë* +
var
íí 
context
íí 
=
íí 
_context
íí "
??
íí# %
InitContext
íí& 1
(
íí1 2
)
íí2 3
;
íí3 4
var
ìì 
transaction
ìì 
=
ìì 
_transaction
ìì *
??
ìì+ -
context
ìì. 5
.
ìì5 6
Database
ìì6 >
.
ìì> ?
BeginTransaction
ìì? O
(
ììO P
)
ììP Q
;
ììQ R 
RepositoryResponse
îî 
<
îî 
TView
îî $
>
îî$ %
result
îî& ,
=
îî- .
new
îî/ 2 
RepositoryResponse
îî3 E
<
îîE F
TView
îîF K
>
îîK L
(
îîL M
)
îîM N
{
îîO P
	IsSucceed
îîQ Z
=
îî[ \
true
îî] a
}
îîb c
;
îîc d
Validate
ïï 
(
ïï 
)
ïï 
;
ïï 
if
ññ 
(
ññ 
IsValid
ññ 
)
ññ 
{
óó 
try
òò 
{
ôô 

ParseModel
öö 
(
öö 
_context
öö '
,
öö' (
_transaction
öö) 5
)
öö5 6
;
öö6 7
result
õõ 
=
õõ 

Repository
õõ '
.
õõ' (
	SaveModel
õõ( 1
(
õõ1 2
(
õõ2 3
TView
õõ3 8
)
õõ8 9
this
õõ9 =
,
õõ= >
_context
õõ? G
:
õõG H
context
õõI P
,
õõP Q
_transaction
õõR ^
:
õõ^ _
transaction
õõ` k
)
õõk l
;
õõl m
if
ûû 
(
ûû 
result
ûû 
.
ûû 
	IsSucceed
ûû (
&&
ûû) +
isSaveSubModels
ûû, ;
)
ûû; <
{
üü 
var
†† 

saveResult
†† &
=
††' (
SaveSubModels
††) 6
(
††6 7
Model
††7 <
,
††< =
context
††> E
,
††E F
transaction
††G R
)
††R S
;
††S T
if
°° 
(
°° 
!
°° 

saveResult
°° '
.
°°' (
	IsSucceed
°°( 1
)
°°1 2
{
¢¢ 
result
££ "
.
££" #
Errors
££# )
.
££) *
AddRange
££* 2
(
££2 3

saveResult
££3 =
.
££= >
Errors
££> D
)
££D E
;
££E F
result
§§ "
.
§§" #
	Exception
§§# ,
=
§§- .

saveResult
§§/ 9
.
§§9 :
	Exception
§§: C
;
§§C D
}
•• 
result
¶¶ 
.
¶¶ 
	IsSucceed
¶¶ (
=
¶¶) *
result
¶¶+ 1
.
¶¶1 2
	IsSucceed
¶¶2 ;
&&
¶¶< >

saveResult
¶¶? I
.
¶¶I J
	IsSucceed
¶¶J S
;
¶¶S T
}
ßß 
if
™™ 
(
™™ 
result
™™ 
.
™™ 
	IsSucceed
™™ (
&&
™™) +
IsClone
™™, 3
&&
™™4 6
IsRoot
™™7 =
)
™™= >
{
´´ 
var
¨¨ 
cloneCultures
¨¨ )
=
¨¨* +"
ListSupportedCulture
¨¨, @
.
¨¨@ A
Where
¨¨A F
(
¨¨F G
c
¨¨G H
=>
¨¨I K
c
¨¨L M
.
¨¨M N
Specificulture
¨¨N \
!=
¨¨] _
Specificulture
¨¨` n
&&
¨¨o q
c
¨¨r s
.
¨¨s t
IsSupported
¨¨t 
)¨¨ Ä
.¨¨Ä Å
ToList¨¨Å á
(¨¨á à
)¨¨à â
;¨¨â ä
var
≠≠ 
cloneResult
≠≠ '
=
≠≠( )
Clone
≠≠* /
(
≠≠/ 0
Model
≠≠0 5
,
≠≠5 6
cloneCultures
≠≠7 D
,
≠≠D E
_context
≠≠F N
:
≠≠N O
context
≠≠P W
,
≠≠W X
_transaction
≠≠Y e
:
≠≠e f
transaction
≠≠g r
)
≠≠r s
;
≠≠s t
if
ÆÆ 
(
ÆÆ 
!
ÆÆ 
cloneResult
ÆÆ (
.
ÆÆ( )
	IsSucceed
ÆÆ) 2
)
ÆÆ2 3
{
ØØ 
result
∞∞ "
.
∞∞" #
Errors
∞∞# )
.
∞∞) *
AddRange
∞∞* 2
(
∞∞2 3
cloneResult
∞∞3 >
.
∞∞> ?
Errors
∞∞? E
)
∞∞E F
;
∞∞F G
result
±± "
.
±±" #
	Exception
±±# ,
=
±±- .
cloneResult
±±/ :
.
±±: ;
	Exception
±±; D
;
±±D E
}
≤≤ 
result
≥≥ 
.
≥≥ 
	IsSucceed
≥≥ (
=
≥≥) *
result
≥≥+ 1
.
≥≥1 2
	IsSucceed
≥≥2 ;
&&
≥≥< >
cloneResult
≥≥? J
.
≥≥J K
	IsSucceed
≥≥K T
;
≥≥T U
}
¥¥ 
if
∑∑ 
(
∑∑ 
result
∑∑ 
.
∑∑ 
	IsSucceed
∑∑ (
)
∑∑( )
{
∏∏ 
if
ππ 
(
ππ 
IsRoot
ππ "
)
ππ" #
{
∫∫ 
transaction
ºº '
.
ºº' (
Commit
ºº( .
(
ºº. /
)
ºº/ 0
;
ºº0 1
}
ΩΩ 
result
ææ 
.
ææ 
Data
ææ #
=
ææ$ %
this
ææ& *
as
ææ+ -
TView
ææ. 3
;
ææ3 4
return
øø 
result
øø %
;
øø% &
}
¿¿ 
else
¡¡ 
{
¬¬ 
if
√√ 
(
√√ 
IsRoot
√√ "
)
√√" #
{
ƒƒ 
transaction
∆∆ '
.
∆∆' (
Rollback
∆∆( 0
(
∆∆0 1
)
∆∆1 2
;
∆∆2 3
}
«« 
return
»» 
result
»» %
;
»»% &
}
…… 
}
   
catch
ÀÀ 
(
ÀÀ 
	Exception
ÀÀ  
ex
ÀÀ! #
)
ÀÀ# $
{
ÃÃ 

Repository
ÕÕ 
.
ÕÕ 
LogErrorMessage
ÕÕ .
(
ÕÕ. /
ex
ÕÕ/ 1
)
ÕÕ1 2
;
ÕÕ2 3
if
ŒŒ 
(
ŒŒ 
IsRoot
ŒŒ 
)
ŒŒ 
{
œœ 
transaction
—— #
.
——# $
Rollback
——$ ,
(
——, -
)
——- .
;
——. /
}
““ 
result
”” 
.
”” 
	IsSucceed
”” $
=
””% &
false
””' ,
;
””, -
result
‘‘ 
.
‘‘ 
	Exception
‘‘ $
=
‘‘% &
ex
‘‘' )
;
‘‘) *
return
’’ 
result
’’ !
;
’’! "
}
÷÷ 
finally
◊◊ 
{
ÿÿ 
if
ŸŸ 
(
ŸŸ 
IsRoot
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
context
‹‹ 
.
‹‹  
Dispose
‹‹  '
(
‹‹' (
)
‹‹( )
;
‹‹) *
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 
else
‡‡ 
{
·· 
return
‚‚ 
new
‚‚  
RepositoryResponse
‚‚ -
<
‚‚- .
TView
‚‚. 3
>
‚‚3 4
(
‚‚4 5
)
‚‚5 6
{
„„ 
	IsSucceed
‰‰ 
=
‰‰ 
false
‰‰  %
,
‰‰% &
Data
ÂÂ 
=
ÂÂ 
null
ÂÂ 
,
ÂÂ  
Errors
ÊÊ 
=
ÊÊ 
Errors
ÊÊ #
}
ÁÁ 
;
ÁÁ 
}
ËË 
}
ÈÈ 	
public
ÚÚ 
virtual
ÚÚ  
RepositoryResponse
ÚÚ )
<
ÚÚ) *
bool
ÚÚ* .
>
ÚÚ. /
SaveSubModels
ÚÚ0 =
(
ÚÚ= >
TModel
ÚÚ> D
parent
ÚÚE K
,
ÚÚK L

TDbContext
ÚÚM W
_context
ÚÚX `
=
ÚÚa b
null
ÚÚc g
,
ÚÚg h#
IDbContextTransaction
ÚÚi ~
_transactionÚÚ ã
=ÚÚå ç
nullÚÚé í
)ÚÚí ì
{
ÛÛ 	
return
ÙÙ 
new
ÙÙ  
RepositoryResponse
ÙÙ )
<
ÙÙ) *
bool
ÙÙ* .
>
ÙÙ. /
(
ÙÙ/ 0
)
ÙÙ0 1
{
ÙÙ2 3
	IsSucceed
ÙÙ4 =
=
ÙÙ> ?
true
ÙÙ@ D
}
ÙÙE F
;
ÙÙF G
}
ıı 	
	protected
ÅÅ 
ViewModelBase
ÅÅ 
(
ÅÅ  
TModel
ÅÅ  &
model
ÅÅ' ,
,
ÅÅ, -

TDbContext
ÅÅ. 8
_context
ÅÅ9 A
=
ÅÅB C
null
ÅÅD H
,
ÅÅH I#
IDbContextTransaction
ÅÅJ _
_transaction
ÅÅ` l
=
ÅÅm n
null
ÅÅo s
)
ÅÅs t
{
ÇÇ 	
this
ÉÉ 
.
ÉÉ 
Model
ÉÉ 
=
ÉÉ 
model
ÉÉ 
;
ÉÉ 
	ParseView
ÑÑ 
(
ÑÑ 
_context
ÑÑ 
:
ÑÑ 
_context
ÑÑ  (
,
ÑÑ( )
_transaction
ÑÑ* 6
:
ÑÑ6 7
_transaction
ÑÑ8 D
)
ÑÑD E
;
ÑÑE F
}
ÖÖ 	
	protected
éé 
ViewModelBase
éé 
(
éé  
TModel
éé  &
model
éé' ,
,
éé, -
bool
éé. 2

isLazyLoad
éé3 =
,
éé= >

TDbContext
éé? I
_context
ééJ R
=
ééS T
null
ééU Y
,
ééY Z#
IDbContextTransaction
éé[ p
_transaction
ééq }
=
éé~ 
nullééÄ Ñ
)ééÑ Ö
{
èè 	
this
êê 
.
êê 
Model
êê 
=
êê 
model
êê 
;
êê 

IsLazyLoad
ëë 
=
ëë 

isLazyLoad
ëë #
;
ëë# $
	ParseView
íí 
(
íí 
isExpand
íí 
:
íí 

isLazyLoad
íí  *
,
íí* +
_context
íí, 4
:
íí4 5
_context
íí6 >
,
íí> ?
_transaction
íí@ L
:
ííL M
_transaction
ííN Z
)
ííZ [
;
íí[ \
}
ìì 	
	protected
òò 
ViewModelBase
òò 
(
òò  
)
òò  !
{
ôô 	
this
öö 
.
öö 
Model
öö 
=
öö 
	InitModel
öö "
(
öö" #
)
öö# $
;
öö$ %
	ParseView
õõ 
(
õõ 
)
õõ 
;
õõ 
}
úú 	
}
üü 
}†† •
WD:\Workspace\GitHub\Swastika-Heart\src\Swastika\UI\Core\Controllers\ApiHubController.cs
	namespace

 	
Swastika


 
.

 
UI

 
.

 
Core

 
.

 
Controllers

 &
{ 
public 

abstract 
class 
ApiHubController *
<* +
THub+ /
,/ 0

TDbContext1 ;
,; <
TModel= C
>C D
: 	
BaseApiController
 
< 

TDbContext &
,& '
TModel( .
>. /
where 
THub 
: 
BaseSignalRHub #
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
{ 
private 
readonly 
IHubContext $
<$ %
THub% )
>) *
_hub+ /
;/ 0
	protected## 
ApiHubController## "
(##" #
IHubContext### .
<##. /
THub##/ 3
>##3 4
hub##5 8
)##8 9
{$$ 	
_hub%% 
=%% 
hub%% 
;%% 
Clients&& 
=&& 
_hub&& 
.&& 
Clients&& "
;&&" #
Groups'' 
='' 
_hub'' 
.'' 
Groups''  
;''  !
}(( 	
public.. 
IHubClients.. 
Clients.. "
{..# $
get..% (
;..( )
private..* 1
set..2 5
;..5 6
}..7 8
public44 
IGroupManager44 
Groups44 #
{44$ %
get44& )
;44) *
private44+ 2
set443 6
;446 7
}448 9
}55 
public>> 

abstract>> 
class>> 
ApiHubController>> *
<>>* +
THub>>+ /
,>>/ 0

TDbContext>>1 ;
,>>; <
TModel>>= C
,>>C D
TView>>E J
>>>J K
:?? 	
BaseApiController??
 
<?? 

TDbContext?? &
,??& '
TModel??( .
,??. /
TView??0 5
>??5 6
where@@ 
THub@@ 
:@@ 
BaseSignalRHub@@ #
whereAA 

TDbContextAA 
:AA 
	DbContextAA $
whereBB 
TModelBB 
:BB 
classBB 
whereCC 
TViewCC 
:CC 
SwastikaCC 
.CC 
DomainCC %
.CC% &
DataCC& *
.CC* +

ViewModelsCC+ 5
.CC5 6
ViewModelBaseCC6 C
<CCC D

TDbContextCCD N
,CCN O
TModelCCP V
,CCV W
TViewCCX ]
>CC] ^
{DD 
privateHH 
readonlyHH 
IHubContextHH $
<HH$ %
THubHH% )
>HH) *
_hubHH+ /
;HH/ 0
	protectedOO 
ApiHubControllerOO "
(OO" #
IHubContextOO# .
<OO. /
THubOO/ 3
>OO3 4
hubOO5 8
)OO8 9
{PP 	
_hubQQ 
=QQ 
hubQQ 
;QQ 
ClientsRR 
=RR 
_hubRR 
.RR 
ClientsRR "
;RR" #
GroupsSS 
=SS 
_hubSS 
.SS 
GroupsSS  
;SS  !
}TT 	
publicZZ 
IHubClientsZZ 
ClientsZZ "
{ZZ# $
getZZ% (
;ZZ( )
privateZZ* 1
setZZ2 5
;ZZ5 6
}ZZ7 8
public`` 
IGroupManager`` 
Groups`` #
{``$ %
get``& )
;``) *
private``+ 2
set``3 6
;``6 7
}``8 9
}aa 
}bb €⁄
XD:\Workspace\GitHub\Swastika-Heart\src\Swastika\UI\Core\Controllers\BaseApiController.cs
	namespace 	
Swastika
 
. 
Api 
. 
Controllers "
{ 
public 

class 
BaseApiController "
:# $

Controller% /
{ 
	protected 
string 
_domain  
;  !
	protected"" 
string"" 
_lang"" 
;"" 
public'' 
BaseApiController''  
(''  !
)''! "
{(( 	
})) 	
public++ 
const++ 
string++ '
CONST_ROUTE_DEFAULT_CULTURE++ 7
=++8 9
$str++: A
;++A B
public55 
override55 "
BadRequestObjectResult55 .

BadRequest55/ 9
(559 : 
ModelStateDictionary55: N

modelState55O Y
)55Y Z
{66 	
List77 
<77 
string77 
>77 
errors77 
=77  !
new77" %
List77& *
<77* +
string77+ 1
>771 2
(772 3
)773 4
;774 5
foreach88 
(88 
ModelStateEntry88 $
state88% *
in88+ -
ViewData88. 6
.886 7

ModelState887 A
.88A B
Values88B H
)88H I
{99 
foreach:: 
(:: 

ModelError:: #
error::$ )
in::* ,
state::- 2
.::2 3
Errors::3 9
)::9 :
{;; 
errors<< 
.<< 
Add<< 
(<< 
error<< $
.<<$ %
ErrorMessage<<% 1
)<<1 2
;<<2 3
}== 
}>> 
return?? 
base?? 
.?? 

BadRequest?? "
(??" #

modelState??# -
)??- .
;??. /
}@@ 	
publicJJ 
overrideJJ "
BadRequestObjectResultJJ .

BadRequestJJ/ 9
(JJ9 :
objectJJ: @
errorJJA F
)JJF G
{KK 	
returnLL 
baseLL 
.LL 

BadRequestLL "
(LL" #
errorLL# (
)LL( )
;LL) *
}MM 	
publicWW 
overrideWW  
NotFoundObjectResultWW ,
NotFoundWW- 5
(WW5 6
objectWW6 <
valueWW= B
)WWB C
{XX 	
returnYY 
baseYY 
.YY 
NotFoundYY  
(YY  !
valueYY! &
)YY& '
;YY' (
}ZZ 	
public`` 
override`` 
void`` 
OnActionExecuting`` .
(``. /"
ActionExecutingContext``/ E
context``F M
)``M N
{aa 	
GetLanguagebb 
(bb 
)bb 
;bb 
basecc 
.cc 
OnActionExecutingcc "
(cc" #
contextcc# *
)cc* +
;cc+ ,
}dd 	
	protectedll 
IActionResultll 
GetErrorResultll  .
(ll. /
stringll/ 5
responseKeyll6 A
,llA B
stringllC I
errorMsgllJ R
)llR S
{mm 	
varnn 
resultnn 
=nn 
	ApiHelpernn "
<nn" #
stringnn# )
>nn) *
.nn* +
	GetResultnn+ 4
(nn4 5
$numnn5 6
,nn6 7
stringnn8 >
.nn> ?
Emptynn? D
,nnD E
responseKeynnF Q
,nnQ R
nullnnS W
)nnW X
;nnX Y
returnoo 

BadRequestoo 
(oo 
resultoo $
)oo$ %
;oo% &
}pp 	
	protecteduu 
voiduu 
GetLanguageuu "
(uu" #
)uu# $
{vv 	
_langww 
=ww 
	RouteDataww 
?ww 
.ww 
Valuesww %
[ww% &
$strww& /
]ww/ 0
!=ww1 3
nullww4 8
?ww9 :
	RouteDataww; D
.wwD E
ValueswwE K
[wwK L
$strwwL U
]wwU V
.wwV W
ToStringwwW _
(ww_ `
)ww` a
:wwb c'
CONST_ROUTE_DEFAULT_CULTUREwwd 
;	ww Ä
ViewBagxx 
.xx 
culturexx 
=xx 
_langxx #
;xx# $
_domainzz 
=zz 
stringzz 
.zz 
Formatzz #
(zz# $
$strzz$ /
,zz/ 0
Requestzz1 8
.zz8 9
Schemezz9 ?
,zz? @
RequestzzA H
.zzH I
HostzzI M
)zzM N
;zzN O
}~~ 	
	protected
çç 
IActionResult
çç 
GetSuccessResult
çç  0
<
çç0 1
TResult
çç1 8
>
çç8 9
(
çç9 :
TResult
çç: A
data
ççB F
)
ççF G
{
éé 	
var
èè 
result
èè 
=
èè 
	ApiHelper
èè "
<
èè" #
TResult
èè# *
>
èè* +
.
èè+ ,
	GetResult
èè, 5
(
èè5 6
$num
èè6 7
,
èè7 8
data
èè9 =
,
èè= >
nameof
èè? E
(
èèE F
Enums
èèF K
.
èèK L
ResponseKey
èèL W
.
èèW X
OK
èèX Z
)
èèZ [
,
èè[ \
null
èè] a
)
èèa b
;
èèb c
return
êê 
Ok
êê 
(
êê 
result
êê 
)
êê 
;
êê 
}
ëë 	
	protected
ôô 
async
ôô 
Task
ôô 
<
ôô 
string
ôô #
>
ôô# $
UploadFileAsync
ôô% 4
(
ôô4 5
	IFormFile
ôô5 >
file
ôô? C
,
ôôC D
string
ôôE K

folderPath
ôôL V
)
ôôV W
{
öö 	
if
õõ 
(
õõ 
file
õõ 
?
õõ 
.
õõ 
Length
õõ 
>
õõ 
$num
õõ  
)
õõ  !
{
úú 
string
ùù 
fileName
ùù 
=
ùù  !
await
ùù" '
CommonHelper
ùù( 4
.
ùù4 5
UploadFileAsync
ùù5 D
(
ùùD E

folderPath
ùùE O
,
ùùO P
file
ùùQ U
)
ùùU V
.
ùùV W
ConfigureAwait
ùùW e
(
ùùe f
false
ùùf k
)
ùùk l
;
ùùl m
if
ûû 
(
ûû 
!
ûû 
string
ûû 
.
ûû 
IsNullOrEmpty
ûû )
(
ûû) *
fileName
ûû* 2
)
ûû2 3
)
ûû3 4
{
üü 
string
†† 
filePath
†† #
=
††$ %
string
††& ,
.
††, -
Format
††- 3
(
††3 4
$str
††4 =
,
††= >

folderPath
††? I
,
††I J
fileName
††K S
)
††S T
;
††T U
return
°° 
filePath
°° #
;
°°# $
}
¢¢ 
else
££ 
{
§§ 
return
•• 
string
•• !
.
••! "
Empty
••" '
;
••' (
}
¶¶ 
}
ßß 
else
®® 
{
©© 
return
™™ 
string
™™ 
.
™™ 
Empty
™™ #
;
™™# $
}
´´ 
}
¨¨ 	
	protected
≥≥ 
async
≥≥ 
Task
≥≥ 
<
≥≥ 
List
≥≥ !
<
≥≥! "
string
≥≥" (
>
≥≥( )
>
≥≥) *!
UploadListFileAsync
≥≥+ >
(
≥≥> ?
string
≥≥? E

folderPath
≥≥F P
)
≥≥P Q
{
¥¥ 	
List
µµ 
<
µµ 
string
µµ 
>
µµ 
result
µµ 
=
µµ  !
new
µµ" %
List
µµ& *
<
µµ* +
string
µµ+ 1
>
µµ1 2
(
µµ2 3
)
µµ3 4
;
µµ4 5
var
∂∂ 
files
∂∂ 
=
∂∂ 
HttpContext
∂∂ #
.
∂∂# $
Request
∂∂$ +
.
∂∂+ ,
Form
∂∂, 0
.
∂∂0 1
Files
∂∂1 6
;
∂∂6 7
foreach
∑∑ 
(
∑∑ 
var
∑∑ 
file
∑∑ 
in
∑∑  
files
∑∑! &
)
∑∑& '
{
∏∏ 
string
ππ 
fileName
ππ 
=
ππ  !
await
ππ" '
UploadFileAsync
ππ( 7
(
ππ7 8
file
ππ8 <
,
ππ< =

folderPath
ππ> H
)
ππH I
.
ππI J
ConfigureAwait
ππJ X
(
ππX Y
false
ππY ^
)
ππ^ _
;
ππ_ `
if
∫∫ 
(
∫∫ 
!
∫∫ 
string
∫∫ 
.
∫∫ 
IsNullOrEmpty
∫∫ )
(
∫∫) *
fileName
∫∫* 2
)
∫∫2 3
)
∫∫3 4
{
ªª 
result
ºº 
.
ºº 
Add
ºº 
(
ºº 
fileName
ºº '
)
ºº' (
;
ºº( )
}
ΩΩ 
}
ææ 
return
øø 
result
øø 
;
øø 
}
¿¿ 	
}
¡¡ 
public
»» 

class
»» 
BaseApiController
»» "
<
»»" #

TDbContext
»»# -
,
»»- .
TModel
»»/ 5
>
»»5 6
:
»»7 8

Controller
»»9 C
where
…… 

TDbContext
…… 
:
…… 
	DbContext
…… $
where
   
TModel
   
:
   
class
   
{
ÀÀ 
	protected
œœ 
readonly
œœ 
DefaultRepository
œœ ,
<
œœ, -

TDbContext
œœ- 7
,
œœ7 8
TModel
œœ9 ?
>
œœ? @
_repo
œœA F
;
œœF G
	protected
‘‘ 
string
‘‘ 
_domain
‘‘  
;
‘‘  !
	protected
ŸŸ 
string
ŸŸ 
_lang
ŸŸ 
;
ŸŸ 
	protected
€€ !
IHostingEnvironment
€€ %
_env
€€& *
;
€€* +
public
‡‡ 
BaseApiController
‡‡  
(
‡‡  !!
IHostingEnvironment
‡‡! 4
env
‡‡5 8
)
‡‡8 9
{
·· 	
_env
‚‚ 
=
‚‚ 
env
‚‚ 
;
‚‚ 
_repo
„„ 
=
„„ 
DefaultRepository
„„ %
<
„„% &

TDbContext
„„& 0
,
„„0 1
TModel
„„2 8
>
„„8 9
.
„„9 :
Instance
„„: B
;
„„B C
}
‰‰ 	
public
ÊÊ 
BaseApiController
ÊÊ  
(
ÊÊ  !
)
ÊÊ! "
{
ÁÁ 	
}
ËË 	
	protected
ÍÍ 
async
ÍÍ 
Task
ÍÍ 
<
ÍÍ 
string
ÍÍ #
>
ÍÍ# $
UploadFileAsync
ÍÍ% 4
(
ÍÍ4 5
	IFormFile
ÍÍ5 >
file
ÍÍ? C
,
ÍÍC D
string
ÍÍE K

folderPath
ÍÍL V
)
ÍÍV W
{
ÎÎ 	
if
ÏÏ 
(
ÏÏ 
file
ÏÏ 
?
ÏÏ 
.
ÏÏ 
Length
ÏÏ 
>
ÏÏ 
$num
ÏÏ  
)
ÏÏ  !
{
ÌÌ 
string
ÓÓ 
fileName
ÓÓ 
=
ÓÓ  !
await
ÓÓ" '
CommonHelper
ÓÓ( 4
.
ÓÓ4 5
UploadFileAsync
ÓÓ5 D
(
ÓÓD E
System
ÓÓE K
.
ÓÓK L
IO
ÓÓL N
.
ÓÓN O
Path
ÓÓO S
.
ÓÓS T
Combine
ÓÓT [
(
ÓÓ[ \
_env
ÓÓ\ `
.
ÓÓ` a
WebRootPath
ÓÓa l
,
ÓÓl m

folderPath
ÓÓn x
)
ÓÓx y
,
ÓÓy z
file
ÓÓ{ 
)ÓÓ Ä
.ÓÓÄ Å
ConfigureAwaitÓÓÅ è
(ÓÓè ê
falseÓÓê ï
)ÓÓï ñ
;ÓÓñ ó
if
 
(
 
!
 
string
 
.
 
IsNullOrEmpty
 )
(
) *
fileName
* 2
)
2 3
)
3 4
{
ÒÒ 
string
ÚÚ 
filePath
ÚÚ #
=
ÚÚ$ %
string
ÚÚ& ,
.
ÚÚ, -
Format
ÚÚ- 3
(
ÚÚ3 4
$str
ÚÚ4 =
,
ÚÚ= >

folderPath
ÚÚ? I
,
ÚÚI J
fileName
ÚÚK S
)
ÚÚS T
;
ÚÚT U
return
ÛÛ 
filePath
ÛÛ #
;
ÛÛ# $
}
ÙÙ 
else
ıı 
{
ˆˆ 
return
˜˜ 
string
˜˜ !
.
˜˜! "
Empty
˜˜" '
;
˜˜' (
}
¯¯ 
}
˘˘ 
else
˙˙ 
{
˚˚ 
return
¸¸ 
string
¸¸ 
.
¸¸ 
Empty
¸¸ #
;
¸¸# $
}
˝˝ 
}
˛˛ 	
public
àà 
override
àà $
BadRequestObjectResult
àà .

BadRequest
àà/ 9
(
àà9 :"
ModelStateDictionary
àà: N

modelState
ààO Y
)
ààY Z
{
ââ 	
List
ää 
<
ää 
string
ää 
>
ää 
errors
ää 
=
ää  !
new
ää" %
List
ää& *
<
ää* +
string
ää+ 1
>
ää1 2
(
ää2 3
)
ää3 4
;
ää4 5
foreach
ãã 
(
ãã 
ModelStateEntry
ãã $
state
ãã% *
in
ãã+ -
ViewData
ãã. 6
.
ãã6 7

ModelState
ãã7 A
.
ããA B
Values
ããB H
)
ããH I
{
åå 
foreach
çç 
(
çç 

ModelError
çç #
error
çç$ )
in
çç* ,
state
çç- 2
.
çç2 3
Errors
çç3 9
)
çç9 :
{
éé 
errors
èè 
.
èè 
Add
èè 
(
èè 
error
èè $
.
èè$ %
ErrorMessage
èè% 1
)
èè1 2
;
èè2 3
}
êê 
}
ëë 
var
íí 
result
íí 
=
íí 
	ApiHelper
íí "
<
íí" #
TModel
íí# )
>
íí) *
.
íí* +
	GetResult
íí+ 4
(
íí4 5
$num
íí5 6
,
íí6 7
default
íí8 ?
(
íí? @
TModel
íí@ F
)
ííF G
,
ííG H
nameof
ííI O
(
ííO P
Enums
ííP U
.
ííU V
ResponseKey
ííV a
.
íía b

BadRequest
ííb l
)
ííl m
,
íím n
errors
íío u
)
ííu v
;
íív w
return
ìì 
base
ìì 
.
ìì 

BadRequest
ìì "
(
ìì" #
result
ìì# )
)
ìì) *
;
ìì* +
}
îî 	
public
ûû 
override
ûû $
BadRequestObjectResult
ûû .

BadRequest
ûû/ 9
(
ûû9 :
object
ûû: @
error
ûûA F
)
ûûF G
{
üü 	
var
†† 
result
†† 
=
†† 
	ApiHelper
†† "
<
††" #
TModel
††# )
>
††) *
.
††* +
	GetResult
††+ 4
(
††4 5
$num
††5 6
,
††6 7
default
††8 ?
(
††? @
TModel
††@ F
)
††F G
,
††G H
nameof
††I O
(
††O P
Enums
††P U
.
††U V
ResponseKey
††V a
.
††a b

BadRequest
††b l
)
††l m
,
††m n
null
††o s
)
††s t
;
††t u
return
°° 
base
°° 
.
°° 

BadRequest
°° "
(
°°" #
result
°°# )
)
°°) *
;
°°* +
}
¢¢ 	
public
¨¨ 
override
¨¨ "
NotFoundObjectResult
¨¨ ,
NotFound
¨¨- 5
(
¨¨5 6
object
¨¨6 <
value
¨¨= B
)
¨¨B C
{
≠≠ 	
var
ÆÆ 
result
ÆÆ 
=
ÆÆ 
	ApiHelper
ÆÆ "
<
ÆÆ" #
TModel
ÆÆ# )
>
ÆÆ) *
.
ÆÆ* +
	GetResult
ÆÆ+ 4
(
ÆÆ4 5
$num
ÆÆ5 6
,
ÆÆ6 7
default
ÆÆ8 ?
(
ÆÆ? @
TModel
ÆÆ@ F
)
ÆÆF G
,
ÆÆG H
nameof
ÆÆI O
(
ÆÆO P
Enums
ÆÆP U
.
ÆÆU V
ResponseKey
ÆÆV a
.
ÆÆa b
NotFound
ÆÆb j
)
ÆÆj k
,
ÆÆk l
null
ÆÆm q
)
ÆÆq r
;
ÆÆr s
return
ØØ 
base
ØØ 
.
ØØ 
NotFound
ØØ  
(
ØØ  !
result
ØØ! '
)
ØØ' (
;
ØØ( )
}
∞∞ 	
public
∂∂ 
override
∂∂ 
void
∂∂ 
OnActionExecuting
∂∂ .
(
∂∂. /$
ActionExecutingContext
∂∂/ E
context
∂∂F M
)
∂∂M N
{
∑∑ 	
GetLanguage
∏∏ 
(
∏∏ 
)
∏∏ 
;
∏∏ 
base
ππ 
.
ππ 
OnActionExecuting
ππ "
(
ππ" #
context
ππ# *
)
ππ* +
;
ππ+ ,
}
∫∫ 	
	protected
¬¬ 
IActionResult
¬¬ 
GetErrorResult
¬¬  .
(
¬¬. /
string
¬¬/ 5
responseKey
¬¬6 A
,
¬¬A B
string
¬¬C I
errorMsg
¬¬J R
)
¬¬R S
{
√√ 	
var
ƒƒ 
result
ƒƒ 
=
ƒƒ 
	ApiHelper
ƒƒ "
<
ƒƒ" #
TModel
ƒƒ# )
>
ƒƒ) *
.
ƒƒ* +
	GetResult
ƒƒ+ 4
(
ƒƒ4 5
$num
ƒƒ5 6
,
ƒƒ6 7
default
ƒƒ8 ?
(
ƒƒ? @
TModel
ƒƒ@ F
)
ƒƒF G
,
ƒƒG H
responseKey
ƒƒI T
,
ƒƒT U
null
ƒƒV Z
)
ƒƒZ [
;
ƒƒ[ \
return
≈≈ 

BadRequest
≈≈ 
(
≈≈ 
result
≈≈ $
)
≈≈$ %
;
≈≈% &
}
∆∆ 	
	protected
ÀÀ 
void
ÀÀ 
GetLanguage
ÀÀ "
(
ÀÀ" #
)
ÀÀ# $
{
ÃÃ 	
_lang
ÕÕ 
=
ÕÕ 
	RouteData
ÕÕ 
?
ÕÕ 
.
ÕÕ 
Values
ÕÕ %
[
ÕÕ% &
$str
ÕÕ& /
]
ÕÕ/ 0
!=
ÕÕ1 3
null
ÕÕ4 8
?
ŒŒ 
	RouteData
ŒŒ 
.
ŒŒ 
Values
ŒŒ "
[
ŒŒ" #
$str
ŒŒ# ,
]
ŒŒ, -
.
ŒŒ- .
ToString
ŒŒ. 6
(
ŒŒ6 7
)
ŒŒ7 8
:
ŒŒ9 :
BaseApiController
ŒŒ; L
.
ŒŒL M)
CONST_ROUTE_DEFAULT_CULTURE
ŒŒM h
;
ŒŒh i
ViewBag
œœ 
.
œœ 
culture
œœ 
=
œœ 
_lang
œœ #
;
œœ# $
_domain
—— 
=
—— 
string
—— 
.
—— 
Format
—— #
(
——# $
$str
——$ /
,
——/ 0
Request
——1 8
.
——8 9
Scheme
——9 ?
,
——? @
Request
——A H
.
——H I
Host
——I M
)
——M N
;
——N O
}
’’ 	
	protected
„„ 
IActionResult
„„ 
GetSuccessResult
„„  0
<
„„0 1
TResult
„„1 8
>
„„8 9
(
„„9 :
TResult
„„: A
data
„„B F
)
„„F G
{
‰‰ 	
var
ÂÂ 
result
ÂÂ 
=
ÂÂ 
	ApiHelper
ÂÂ "
<
ÂÂ" #
TResult
ÂÂ# *
>
ÂÂ* +
.
ÂÂ+ ,
	GetResult
ÂÂ, 5
(
ÂÂ5 6
$num
ÂÂ6 7
,
ÂÂ7 8
data
ÂÂ9 =
,
ÂÂ= >
nameof
ÂÂ? E
(
ÂÂE F
Enums
ÂÂF K
.
ÂÂK L
ResponseKey
ÂÂL W
.
ÂÂW X
OK
ÂÂX Z
)
ÂÂZ [
,
ÂÂ[ \
null
ÂÂ] a
)
ÂÂa b
;
ÂÂb c
return
ÊÊ 
Ok
ÊÊ 
(
ÊÊ 
result
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
}
ËË 
public
 

class
 
BaseApiController
 "
<
" #

TDbContext
# -
,
- .
TModel
/ 5
,
5 6
TView
7 <
>
< =
:
> ?

Controller
@ J
where
ÒÒ 

TDbContext
ÒÒ 
:
ÒÒ 
	DbContext
ÒÒ $
where
ÚÚ 
TModel
ÚÚ 
:
ÚÚ 
class
ÚÚ 
where
ÛÛ 
TView
ÛÛ 
:
ÛÛ 
Swastika
ÛÛ 
.
ÛÛ 
Domain
ÛÛ %
.
ÛÛ% &
Data
ÛÛ& *
.
ÛÛ* +

ViewModels
ÛÛ+ 5
.
ÛÛ5 6
ViewModelBase
ÛÛ6 C
<
ÛÛC D

TDbContext
ÛÛD N
,
ÛÛN O
TModel
ÛÛP V
,
ÛÛV W
TView
ÛÛX ]
>
ÛÛ] ^
{
ÙÙ 
	protected
¯¯ 
readonly
¯¯ 
DefaultRepository
¯¯ ,
<
¯¯, -

TDbContext
¯¯- 7
,
¯¯7 8
TModel
¯¯9 ?
,
¯¯? @
TView
¯¯A F
>
¯¯F G
_repo
¯¯H M
;
¯¯M N
	protected
˝˝ 
string
˝˝ 
_lang
˝˝ 
;
˝˝ 
public
ÉÉ 
BaseApiController
ÉÉ  
(
ÉÉ  !
)
ÉÉ! "
{
ÑÑ 	
_repo
ÖÖ 
=
ÖÖ 
DefaultRepository
ÖÖ %
<
ÖÖ% &

TDbContext
ÖÖ& 0
,
ÖÖ0 1
TModel
ÖÖ2 8
,
ÖÖ8 9
TView
ÖÖ: ?
>
ÖÖ? @
.
ÖÖ@ A
Instance
ÖÖA I
;
ÖÖI J
}
ÜÜ 	
public
êê 
override
êê $
BadRequestObjectResult
êê .

BadRequest
êê/ 9
(
êê9 :"
ModelStateDictionary
êê: N

modelState
êêO Y
)
êêY Z
{
ëë 	
List
íí 
<
íí 
string
íí 
>
íí 
errors
íí 
=
íí  !
new
íí" %
List
íí& *
<
íí* +
string
íí+ 1
>
íí1 2
(
íí2 3
)
íí3 4
;
íí4 5
foreach
ìì 
(
ìì 
ModelStateEntry
ìì $
state
ìì% *
in
ìì+ -
ViewData
ìì. 6
.
ìì6 7

ModelState
ìì7 A
.
ììA B
Values
ììB H
)
ììH I
{
îî 
foreach
ïï 
(
ïï 

ModelError
ïï #
error
ïï$ )
in
ïï* ,
state
ïï- 2
.
ïï2 3
Errors
ïï3 9
)
ïï9 :
{
ññ 
errors
óó 
.
óó 
Add
óó 
(
óó 
error
óó $
.
óó$ %
ErrorMessage
óó% 1
)
óó1 2
;
óó2 3
}
òò 
}
ôô 
var
öö 
result
öö 
=
öö 
	ApiHelper
öö "
<
öö" #
TView
öö# (
>
öö( )
.
öö) *
	GetResult
öö* 3
(
öö3 4
$num
öö4 5
,
öö5 6
default
öö7 >
(
öö> ?
TView
öö? D
)
ööD E
,
ööE F
nameof
ööG M
(
ööM N
Enums
ööN S
.
ööS T
ResponseKey
ööT _
.
öö_ `

BadRequest
öö` j
)
ööj k
,
öök l
errors
ööm s
)
öös t
;
ööt u
return
õõ 
base
õõ 
.
õõ 

BadRequest
õõ "
(
õõ" #
result
õõ# )
)
õõ) *
;
õõ* +
}
úú 	
public
¶¶ 
override
¶¶ $
BadRequestObjectResult
¶¶ .

BadRequest
¶¶/ 9
(
¶¶9 :
object
¶¶: @
error
¶¶A F
)
¶¶F G
{
ßß 	
var
®® 
result
®® 
=
®® 
	ApiHelper
®® "
<
®®" #
TView
®®# (
>
®®( )
.
®®) *
	GetResult
®®* 3
(
®®3 4
$num
®®4 5
,
®®5 6
default
®®7 >
(
®®> ?
TView
®®? D
)
®®D E
,
®®E F
nameof
®®G M
(
®®M N
Enums
®®N S
.
®®S T
ResponseKey
®®T _
.
®®_ `

BadRequest
®®` j
)
®®j k
,
®®k l
null
®®m q
)
®®q r
;
®®r s
return
©© 
base
©© 
.
©© 

BadRequest
©© "
(
©©" #
result
©©# )
)
©©) *
;
©©* +
}
™™ 	
public
¥¥ 
override
¥¥ "
NotFoundObjectResult
¥¥ ,
NotFound
¥¥- 5
(
¥¥5 6
object
¥¥6 <
value
¥¥= B
)
¥¥B C
{
µµ 	
var
∂∂ 
result
∂∂ 
=
∂∂ 
	ApiHelper
∂∂ "
<
∂∂" #
TView
∂∂# (
>
∂∂( )
.
∂∂) *
	GetResult
∂∂* 3
(
∂∂3 4
$num
∂∂4 5
,
∂∂5 6
default
∂∂7 >
(
∂∂> ?
TView
∂∂? D
)
∂∂D E
,
∂∂E F
nameof
∂∂G M
(
∂∂M N
Enums
∂∂N S
.
∂∂S T
ResponseKey
∂∂T _
.
∂∂_ `
NotFound
∂∂` h
)
∂∂h i
,
∂∂i j
null
∂∂k o
)
∂∂o p
;
∂∂p q
return
∑∑ 
base
∑∑ 
.
∑∑ 
NotFound
∑∑  
(
∑∑  !
result
∑∑! '
)
∑∑' (
;
∑∑( )
}
∏∏ 	
public
ææ 
override
ææ 
void
ææ 
OnActionExecuting
ææ .
(
ææ. /$
ActionExecutingContext
ææ/ E
context
ææF M
)
ææM N
{
øø 	
GetLanguage
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
base
¡¡ 
.
¡¡ 
OnActionExecuting
¡¡ "
(
¡¡" #
context
¡¡# *
)
¡¡* +
;
¡¡+ ,
}
¬¬ 	
	protected
   
IActionResult
   
GetErrorResult
    .
(
  . /
string
  / 5
responseKey
  6 A
,
  A B
string
  C I
errorMsg
  J R
)
  R S
{
ÀÀ 	
var
ÃÃ 
result
ÃÃ 
=
ÃÃ 
	ApiHelper
ÃÃ "
<
ÃÃ" #
TView
ÃÃ# (
>
ÃÃ( )
.
ÃÃ) *
	GetResult
ÃÃ* 3
(
ÃÃ3 4
$num
ÃÃ4 5
,
ÃÃ5 6
default
ÃÃ7 >
(
ÃÃ> ?
TView
ÃÃ? D
)
ÃÃD E
,
ÃÃE F
responseKey
ÃÃG R
,
ÃÃR S
null
ÃÃT X
)
ÃÃX Y
;
ÃÃY Z
return
ÕÕ 

BadRequest
ÕÕ 
(
ÕÕ 
result
ÕÕ $
)
ÕÕ$ %
;
ÕÕ% &
}
ŒŒ 	
	protected
”” 
void
”” 
GetLanguage
”” "
(
””" #
)
””# $
{
‘‘ 	
_lang
’’ 
=
’’ 
	RouteData
’’ 
?
’’ 
.
’’ 
Values
’’ %
[
’’% &
$str
’’& /
]
’’/ 0
!=
’’1 3
null
’’4 8
?
÷÷ 
	RouteData
÷÷ 
.
÷÷ 
Values
÷÷ "
[
÷÷" #
$str
÷÷# ,
]
÷÷, -
.
÷÷- .
ToString
÷÷. 6
(
÷÷6 7
)
÷÷7 8
:
÷÷9 :
BaseApiController
÷÷; L
.
÷÷L M)
CONST_ROUTE_DEFAULT_CULTURE
÷÷M h
;
÷÷h i
ViewBag
◊◊ 
.
◊◊ 
culture
◊◊ 
=
◊◊ 
_lang
◊◊ #
;
◊◊# $
}
ÿÿ 	
	protected
ÊÊ 
IActionResult
ÊÊ 
GetSuccessResult
ÊÊ  0
<
ÊÊ0 1
TResult
ÊÊ1 8
>
ÊÊ8 9
(
ÊÊ9 :
TResult
ÊÊ: A
data
ÊÊB F
)
ÊÊF G
{
ÁÁ 	
var
ËË 
result
ËË 
=
ËË 
	ApiHelper
ËË "
<
ËË" #
TResult
ËË# *
>
ËË* +
.
ËË+ ,
	GetResult
ËË, 5
(
ËË5 6
$num
ËË6 7
,
ËË7 8
data
ËË9 =
,
ËË= >
nameof
ËË? E
(
ËËE F
Enums
ËËF K
.
ËËK L
ResponseKey
ËËL W
.
ËËW X
OK
ËËX Z
)
ËËZ [
,
ËË[ \
null
ËË] a
)
ËËa b
;
ËËb c
return
ÈÈ 
Ok
ÈÈ 
(
ÈÈ 
result
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
}
ÎÎ 
}ÏÏ à
UD:\Workspace\GitHub\Swastika-Heart\src\Swastika\UI\Core\Controllers\BaseController.cs
	namespace 	
Swastika
 
. 
UI 
. 
Base 
. 
Controllers &
{ 
public 

class 
BaseController 
:  !

Controller" ,
{ 
public 
BaseController 
( 
) 
{ 	
} 	
public)) 
override)) 
NotFoundResult)) &
NotFound))' /
())/ 0
)))0 1
{** 	
return++ 
base++ 
.++ 
NotFound++  
(++  !
)++! "
;++" #
},, 	
}-- 
}.. æ"
QD:\Workspace\GitHub\Swastika-Heart\src\Swastika\UI\Core\SignalR\BaseSignalRHub.cs
	namespace 	
Swastika
 
. 
UI 
. 
Core 
. 
SignalR "
{ 
public 

abstract 
class 
BaseSignalRHub (
:) *
Hub+ .
{ 
	protected 
static 
readonly !
List" &
<& '
SignalRClient' 4
>4 5
Users6 ;
=< =
new> A
ListB F
<F G
SignalRClientG T
>T U
(U V
)V W
;W X
public 
override 
Task 
OnConnectedAsync -
(- .
). /
{ 	!
UpdateGroupConnection !
(! "
)" #
;# $
return   
base   
.   
OnConnectedAsync   (
(  ( )
)  ) *
;  * +
}!! 	
public(( 
override(( 
Task(( 
OnDisconnectedAsync(( 0
(((0 1
	Exception((1 :
	exception((; D
)((D E
{)) 	
Users++ 
.++ 
	RemoveAll++ 
(++ 
u++ 
=>++  
u++! "
.++" #
ConnectionId++# /
==++0 2
Context++3 :
.++: ;
ConnectionId++; G
)++G H
;++H I
return,, 
base,, 
.,, 
OnDisconnectedAsync,, +
(,,+ ,
	exception,,, 5
),,5 6
;,,6 7
}-- 	
public22 
virtual22 
void22 !
UpdateGroupConnection22 1
(221 2
)222 3
{33 	
var44 
user44 
=44 
Users44 
.44 
Find44 !
(44! "
p44" #
=>44$ &
p44' (
.44( )
ConnectionId44) 5
==446 8
Context449 @
.44@ A
ConnectionId44A M
)44M N
;44N O
if55 
(55 
user55 
!=55 
null55 
)55 
{66 
}99 
}:: 	
public@@ 
virtual@@ 
void@@ )
UpdatePlayerConnectionIdAsync@@ 9
(@@9 :
string@@: @
playerId@@A I
)@@I J
{AA 	
varCC 
playerCC 
=CC 
UsersCC 
.CC 
FindCC #
(CC# $
pCC$ %
=>CC& (
pCC) *
.CC* +
UserIdCC+ 1
==CC2 4
playerIdCC5 =
)CC= >
;CC> ?
ifDD 
(DD 
playerDD 
!=DD 
nullDD 
&&DD !
playerDD" (
.DD( )
ConnectionIdDD) 5
!=DD6 8
ContextDD9 @
.DD@ A
ConnectionIdDDA M
)DDM N
{EE 
playerHH 
.HH 
ConnectionIdHH #
=HH$ %
ContextHH& -
.HH- .
ConnectionIdHH. :
;HH: ;
}JJ 
}KK 	
privateRR 
voidRR 

FailResultRR 
(RR  
dynamicRR  '
objDataRR( /
,RR/ 0
stringRR1 7
errorMsgRR8 @
)RR@ A
{SS 	
constTT 
stringTT 
responseKeyTT $
=TT% &
$strTT' /
;TT/ 0
constUU 
intUU 
statusUU 
=UU 
$numUU  
;UU  !
	ApiResultVV 
<VV 
dynamicVV 
>VV 
resultVV %
=VV& '
newVV( +
	ApiResultVV, 5
<VV5 6
dynamicVV6 =
>VV= >
(VV> ?
)VV? @
{WW 
ResponseKeyXX 
=XX 
responseKeyXX )
,XX) *
StatusYY 
=YY 
statusYY 
,YY  
DataZZ 
=ZZ 
objDataZZ 
,ZZ 
}\\ 
;\\ 
Clients]] 
.]] 
Client]] 
(]] 
Context]] "
.]]" #
ConnectionId]]# /
)]]/ 0
.]]0 1
InvokeAsync]]1 <
(]]< =
$str]]= M
,]]M N
result]]O U
)]]U V
;]]V W
}^^ 	
}__ 
}`` 